
I think we should use project.getStatus() here instead of project.getStatus()
I think this should be config(RANGER_HDFS_AUDIT_URL, location.getValue())
I think this should be a StringBuilder instead of a StringBuilder.
I think this should be mObjectsToBeDispatched.
I think we should use the same approach as in the other class.
Please use the same error message as in other places.
Shouldn't this be numberOfVersionsToKeep?
I think you should use the logger instead of System.out.println.
I think it would be better to use the same approach as in the previous test.
I think this should be called lawJournalEntryRepository.
I think this should be <=
I think this should be taskStateMap.values().
I think this is not necessary.
remove this line
nit: remove final
I think this should be a Map<String, String>
I think this should be a constant
nit: remove this line
@m-g-sonar why not use the mocked RuleProcessorRuntime?
This should be a constant.
rename to path
I think this should be a try-with-resources block.
I think we should use the writeJDBCStoreTable method here.
This is not needed.
I think this should be a WARN instead of an ERROR.
I think this should be a warning.
I think this should be a method reference, not a file name.
This is not a good idea. You can use the JobBuilder.start() method.
Please use the new method on the new line.
This is a bit hard to read. Can we make a static method that takes a ConnectionOptions and returns a ConnectionOptions?
This should be a debug statement.
Why not just fail the test?
I think this is not needed.
I think you can use a more descriptive name here.
I think this should be debug
I think you can use the for loop here.
Should this be <= or >=?
I think this should be synchronized
This is not a good idea. You can use the following:  logger.debug("{} destroying nic {}", resourceDeleted.apply(networkInterfaces));
Should this be -1?
This is a breaking change.
This is a bit strange. I think it would be better to use the same approach as the one in the error message.
Why not just use autoGenCompiler.matchesCatalogInternal(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null
I think this should be a WARN instead of an ERROR.
I think this should be in the lockupAmountTextField.
nit: you can use Collections.singletonList()
I think we should add a check for the class name here.
This is not necessary.
I think this should be a warning.
I think this should be error
This is a bit of a good idea. I think it would be better to throw a TOTPException instead of returning null.
This is a bit confusing. I think it would be better to use a map of subparts and then iterate over the subparts.
This is not necessary.
I think this should be named query.
This is a bit of a duplicate of the previous one. I think it would be better to move this to a separate method.
This is not necessary. You can just use the diamond operator.
This is not necessary.
This is a bit confusing. I think it would be better to return true if conf.size() == ConfigurationKey.values().length
I think this should be a warning.
I think this should be a WARN instead of an ERROR.
I think we should use the same name as the thread name.
This is a bit confusing. I think it should be rebuilt in the constructor.
I think we should use the adapter's adapter instead of the adapter.
I think this should be a WARN instead of an ERROR.
This should be a constant
The deletion of the diagram has no effect, so the test should be executed before the deletion of the diagram has no effect.
This is a breaking change.
Use logger instead of printStackTrace
I think this should be inside the try block.
This is a bit of a nitpicking, but I think we should have a separate method for getting the tenant domain and then just return the token.
I think you can use the new Properties.get(keyVals.getKey()) method here
I think we should log the exception here.
I think this should be a LinkedHashSet, not a LinkedHashSet.
This is not correct. The primary location should be the primary location.
This is not a good idea. You can use the same id as the id.
nit: this can be private
Shouldn't this be:  java return jQueryHelper.getFieldValue(selector);  ?
This should be set(EntityLivingBase.class, value)
This is not needed.
I think this should be a try-with-resources block.
This is not needed.
@fanifieiev the same above.
This is a bit confusing. I think we should have a separate method to get the parentResource and then call that method.
I think this should be debug level.
@jomarko I think you can use Optional.ofNullable(issueKey) here.
@pynicolas Can you please explain why this is not needed?
This should be a constant.
I think it would be better to use a ConcurrentHashMap here.
This should be a static method.
I think this should be a constant.
I think we should use the same approach as in the other methods.
I think we should use the local variable here instead of the local variable.
This should be a constant.
nit: space after if
nit: you can use the new OkHttpClient() method
Why not just use randomMemberWeighted(candidates)?
I think this should be a WARN instead of an ERROR.
I think this should be a warning.
This should be a HiveException.
I think this should be a key != null check.
This is a bit hard to read. Can you please use a regex to make it more readable?
I think we should throw an IllegalArgumentException here.
This is a bit hard to read. Can we use a simple for loop?
nit: this.buffers.remove(kvPair)
I think this should be a constant
I think this should be in the onPageDisappear() method.
This should be done in the constructor.
Why not use the new StringBuilder?
nit: can we move this to the beginning of the method?
I think this is a bit too complicated. Maybe we can extract it to a method?
I think this should be a warning.
This is a bit strange. I think it would be better to use a StringBuilder instead of a String.
This should be a constant
I think we should throw an exception here.
rename to child or childElement
This is a bit hard to read. I would prefer to use a StringBuilder instead of a String.
I think this is not needed.
This is not a good idea.
I think this should be named foo2
nit: I think it's better to use CompletableFuture<Boolean> here.
I think this should be a WARN instead of an ERROR.
I think this should be a switch statement.
I think we should use ObjectMapper here.
please use the enum values instead of hardcoded "network_name"
This is a bit of a very bad idea. I think it would be better to have a method called sync(boolean force) that returns the boolean value.
I think this should be a constant
I think this should be debug
This is not necessary. You can just use the ItemStack directly.
This is not necessary.
nit: can we use a lambda here?
This should be private.
can you add a log.tracef here?
This should be a Display.getDefault().
I think this is a bit more readable:  if (isDynamicFilter(expression)) { return false; } else if (isDynamicFilter(expression)) { return false; } return false;
I think this should be a constant
I think we should use a constant for "id"
Can you use Collections.singletonMap() here?
This should be a List, not a List.
I think this should be a WARN instead of an ERROR.
I think this should be done in the constructor.
This should be:  java if (getCameraBearing(float bearing) != null) { return; }
I think this should be an OptionalInt
I think this should be assertEquals(foo, bar, foo).
I think this should be a constant.
I think this should be newTemplate.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content.
I think this should be:  java if (pageFilter == null) { return false; }
I think this should be a constant
please use diamond operator
I think this should be a WARN instead of an ERROR.
I think this should be a try-with-resources block.
I think we should add a check that the disk is not attached to the disk
This should be a warn
I think this should be a constant.
This is a bit hard to read. I think it would be better to use a method reference.
This is a very good candidate for a try-with-resources block.
I think this should be delegate.hashCode()
This is a bit hard to read. How about using a simple for loop instead?
I think we should use the constants defined in the enum.
I think we should use the same name as the other variable name
This should be canonicalHeaders.
This is a very good idea. I think it would be better to use a try-with-resources block.
I think this should be a try-with-resources.
I think this should be a fieldSetForSelectedEntry(StandardField.EPRINT, stateManager)
This is a bit confusing. I think it should be called something like "getCompleteComplete" or something like that.
I think this should be a constant.
This is not necessary.
I think we should use the same name as the other variable name
You can use the try-with-resources pattern here.
This is not a good idea. The base is a valid value for the base, but the base is not a valid value.
This is not a good idea. You can use the log.info("Configuration reloaded", false);
I think we should use the [StandardCharsets.UTF_8](<LINK_0>
I think this should be inside the if block.
This is a bit strange. I think you should use the logger instead of System.out.println.
This should be a constant.
I think we should log the exception here.
I think this should be synchronized
I think we should have a test for this.
This should be a field of the class.
This is not needed.
This is not needed.
I think we should use the [StringUtils](<LINK_0>
I think we should use the logger.info("REQUEST__FULL__NOROOT_OBJECT", false, false);
I think we should use the KieContainerCommandService interface here.
This is a bit confusing. I think it should be a List instead of a List.
This is not necessary.
I think this is not needed, the disk is already created by the disk.
I think we should use the path separator here.
I think we should use Timber.e here.
This is not necessary.
I think this should be a method reference.
I think we should throw an IllegalArgumentException here.
This is a bit hard to read. Can you please extract a method to reduce duplication?
I think this should be removed.
@pynicolas can you please explain why this is not a constant?
Collections.singletonList()
I think this should be private.
I think this should be debug
I think this should be a switch statement.
Collections.emptySet()
This is a bit hard to read. I think it would be better to use a StringBuilder instead of a StringBuilder.
rename to container
I think this is a bit too complicated. We should be able to use a stream and filter on the stream.
I think this should be a while loop.
try-with-resources?
I think we should throw an exception here.
I think we should use the RTPFPacketUtils.getReportCount(baf) here.
You can use Blob.createBlob(fileName, contentType, contentType) here.
I think we should also check that the node is not null here.
This is not necessary.
This should be a FBO.Type.DEFAULT.
I think this should be Optional.empty()
This is a bit strange. I think we should use the constant for the header key.
Why not just catch the specific exception?
This is not correct. You can't use a variable to access it.
This is a bit hard to read. Can you please extract a method to avoid duplication?
This is not necessary.
I think this should be moved to the previous line.
I think this should be moved to the top of the method.
This is not needed.
I think this should be "VARCHAR(20)"
I think we should use assertEquals here.
I think this should be a warning.
rename to segmentAspect
This is a bit of a hack. I think it would be better to use the new method instead of creating a new one.
this.
I think we should verify the error code here.
This is a bit hard to read. Can we use a try-with-resources pattern here?
I think this should be in.close()
I think this should be debug
Should be "session"
this is not necessary, you can just use the new method
I think we should use the same name for all the cases.
This is a pretty good idea. I think it would be better to use a lambda here.
I think we should add a check for the entity being null here.
I think this is a bit too long. Can we just do this.recentlyCompletedDriverGroups = Collections.unmodifiableSet(driverGroupsIterator.get(driverGroup.getId()));
I think this should be moved to the initNeeded() method.
I think you can use Collections.unmodifiableList() here.
I think we should use the same pattern as the one in the rule definition.
nit: I think we can use assertEquals here.
This is not a good idea. You can use a lambda here.
I think we should check the lhsValue here.
This should be removed.
Should we throw the exception here?
I think this should be debug
why not addCanDoActionMessageParameters() ?
This is a debug statement.
I think this should be a MapStateDescriptor.
I think you can use try-with-resources here.
This is not a good idea. You can use assertThat(rvv1).isEqualTo(1);
This should be a List, not a List.
I think we should throw an exception here.
@bgeVam please use the same constant for all the tests
I think this should be a warning.
This is a bit hard to read. I think it would be better to use the default case instead of the default case.
I think this should be a constant.
I think this should be a constant.
Objects.hash()
I think this should be "Breakpoint Manager"
You can use the [try-with-resources](<LINK_0> syntax here.
I think we should use the same name as the one in the log message.
I think we should use the new option option here.
Is this method used anywhere?
This should be a constant.
This is not necessary.
I think you should check if the target path is absolute or not.
This is not needed.
I think we should use the same URI as the other tests.
@lautarobock Why not use CollectionUtils.isNotEmpty()?
I think this is not necessary.
I think this should be a default value, not a default value.
I think this should be disposables != null && !player.isFinishing()
This is not a query, it should be a query.
Why is this needed?
I think we should use try-with-resources here.
This should be deconfigure()
I think this should be moved to the try block below.
I think this should be removed.
This is not necessary.
We should use a different name for this.
I think this should be a WARN instead of an ERROR.
I think we should add a check for the FBO here.
I think this is not necessary.
I think this should be moved to the previous line.
This should be a constant.
I think this should be a Set instead of a TreeSet.
I think this should be a static method.
I think this should be inside the try block.
Shouldn't this be WORKFLOW?
I think this should be a WARN instead of an ERROR.
I think this should be a WARN instead of an ERROR.
I think this should be a for loop.
Please use assertEquals(VDSStatus.NonOperational, vds.getStatus());
I think this should be a separate method, not a concrete type.
This is not a style, but it should be a separate line.
I think this should be debug
This test is not testing anything.
I think this should be in the constructor.
I think we should throw an exception here.
I think we should add a null check here.
This is not a good idea. The "Statistics" is a constant.
I think this is a bit too complicated. Maybe we could extract it to a method and call it from both?
This is not a good idea. You can use a for loop here.
I think we should log the exception here.
This is not needed.
@dmzaytsev let's use Matchers.hasEntry() here
I think it would be better to use the expected image id here instead of the actual image id.
Shouldn't this be an UniEdge instead of an UniEdge?
This is not correct. You should be able to use the subtype of the subtype.
This is not needed.
This should be Optional.ofNullable(relation).
nit: maybe use new Put<>(startNew, dueNew)
I think we should use the same approach as in the other classes.
I would prefer to use the constant here.
why not just return the list of UUIDs?
I think this should be error.
This is not necessary.
Why not just use the diamond operator?
This should be a constant.
This is not a good idea. You can use the same approach as the previous one.
I think this should be a WARN instead of an ERROR.
Why do you need to close the reader?
This is a bit of a nitpicky, but I think we should move the callback to the callback.
Why is this needed?
why not use the lock here?
This is a bit of a nit, but I think we should have a log here.
This should be a WARN instead of an ERROR.
I think this should be a switch statement.
I think this is a bit too complicated. What about extracting the logic to a method in the same class?
I think it would be better to use TaskAttribute.BUILD_RESULT_1 here.
This is not necessary.
nit: space after if
I think this is not necessary.
I think it would be better to use the constant in the message.
Why not using a for loop here?
I think we should use the same approach as in the postActionParameterObject method.
Static import
please use getDbFacade().getStorageDomainId()
I think this should be a switch statement.
return 0;
I think this should be a LOG.warn
nit: you can use assertThat(expectedLatest, APIVersion.latest()).isEqualTo(v.version)
This is not correct. You can use s.equals("true")
Why do we need to stop the connector here?
I think this should be a switch statement.
I think this should be a boolean
nit: can we use assertThat(list).isEqualTo(1);
I think this should be a WARN instead of an ERROR.
I think we should use the static imports for the DslConverter.
I think we should also assert that the transport is closed.
Can we use the constant for the string "urn:oasis:name:tc:ebxml-regrep:error"?
This is a very good idea. I think it would be better to use the same approach as the one in the ViewFragment.
This should be a WARN instead of an ERROR.
@dalifreire this one too
I think we should use the same RexBuilder here.
I think we should use a lambda here
I think this should be a WARN instead of an ERROR.
@danff let's use the same formatter here.
I think this should be a constant.
I think this should be a new method in the interface.
I think this should be a constant
I think we should use a different name for the test.
You can use Collections.singletonList()
please use injection for VdsDao
This should be a warning.
This should be private.
This is a breaking change.
I think it would be better to use Map<String, Object> parameters = new HashMap<>();
This is not necessary.
This is not necessary. The test will fail if the attribute is not set.
@ivandalbosco Why not use the same concept as above?
I think this should be a field field, not a field.
this should be error
I think you can use FileUtils.mkdirs
I think we should use the threadLocalQueue.get() here instead of the local queue.
I think we should use the context here instead of the context.
I think this should be a constant
return new Request((cords)
I think this should be a constant.
I think this should be synchronized
I think we should use a logger here.
I think we should use JpaUserDao.class.getDeclaredField("managerProvider") instead of this.
I think we should have a test for the case where schema instanceof MapSchema.
Why not just use the diamond operator?
I think this should be a constant.
I think this should be a switch statement.
This is a bit strange. I think we should throw an IndexOutOfBoundsException instead of returning null.
I think this is a bit strange. I think it would be better to have a single check for the container.
I think the dispose() method should be synchronized.
I think we should add a check for m_gapTracker.getRangeContaining(gapStart) here.
I think this is a bit more readable if you just use a for loop.
I think we should add a message to the error message.
I think we should log the exception here.
This is a bit of a bit of a hack. It should be a separate PR.
Remove this line.
I think this should be a List<AnnotationMapperReference>
This is a bit strange. I think it should be a string literal.
I think we should also test the case where the error code is not expected.
I think this should be a List<Ulimit>
I think this is not necessary.
why is this needed?
Shouldn't this be a constant?
I think this should be a Set<T> not a Set<T>
I think this should be a for loop.
This should be a constant.
I think this should be a warning.
I think this should be instance = new FormulaShifter(externSheetIndex, sheetName, firstMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, lastMovedRowIndex, last
I think this should be a RuntimeException
I think this should be a List<Pair<SizeUnit, Double> instead of a List<Pair<SizeUnit, Double>.
I think we should add the attribute type here.
assertEquals(1, memberToAdd)
I think this should be Pedantic.
This test is not testing the correct concept state.
I think we should use the constants defined in the class.
This is not necessary.
This is a bit of a bug, but I think it would be better to use the new method in the constructor instead of the new one.
I think we should use the same name as the name of the method.
I think this should be mHasWifi.
I think this should be a warning.
I think we should use the default constructor here.
I think this should be a stream instead of a stream.
I think we should use a lazySet here.
I think you should use R.string.portal_url here.
I think this should be a RuntimeException
I think this should be a constant
I think it would be better to use a lambda here.
I think this should be debug level
I think this is not needed.
This is a bit confusing. I think it would be better to have a defaultRetryInterval set and set it to the defaultRetryInterval set.
I think this should be a constant.
This should be a constant.
This is a bit hard to read. Can you please extract a method?
This is a good idea. You can use the SSLContext.getInstance() method instead.
nit: you can use String.format() here
I think this should be a separate test.
I think this should be a WARN instead of an ERROR.
I think we should use the same approach as in the EventTestUtils class.
I think we should use a lambda here.
I think this should be ExitStatus.FAILED
I think this should be a warning
nit: I think it's better to use Optional.empty()
I think this is not needed.
Shouldn't this be the case where station == null?
I think this should be a stream instead of a stream.
I think we should add a check for the parameter index here.
This is a breaking change.
I think this should be a constant.
I think this should be written in a method.
I think this should be a more specific exception.
@vilchik-elena Why not just use the bytebuffer?
I think we should add a null check here.
rename to element
You can use the static import for the method
This is not needed.
I think this should be a constant.
I think this should be enabled in the test.
I think this should be a WARN instead of an ERROR.
return state.get() == to;
This is not needed.
I think this should be a neo4jMatchers.createIndex(db, LABEL, keys[0] );
I think this should be a constant.
This is a bit strange. I think it would be better to use a StringBuilder instead of a StringBuilder.
This should be a MonoError.
This is not needed.
why not use the new static instance of MockBlobStoreStats ?
This should be inside the if statement.
I think this is a bit too long. Can we have a single method that takes Duration to get the duration?
I think this should be removed.
I think we should add a link to the pipelineConfigWriter here.
This is a bit hard to read. Can you please extract a method to reduce duplication?
This should be a constant.
I think this should be a BigDecimal
Shouldn't this be a List<String> ?
I think we should throw a RuntimeException here.
I think you can use the diamond operator here.
This is not correct. You can use the player's name.
I think this should be a Set<DatastreamTask>>
This is not a good idea. You can use a logger.error("Set: {}val: {}", para, oMap.get(para).toString());
This is not necessary.
I think we should add the metric name to the log message.
This is a bit confusing. I think it would be better to have a method called something like:  private void redeployAllToTarget(final TaskBuilder<Void> taskBuilder) { TaskBuilder<Void> redeployAllToTarget = Tasks.build() .parallel(true).map(this::redeployPrefix).orSubmitAsync(this::build).orSubmitAsync(this::build).orSubmitAsync(this::build).orSubmitAsync(this::build) .build(); }
I think we should use the same pattern as in other tests.
I think this is a bit too complicated. We should be able to use a map of the map and then do a map lookup.
I think we should use the same approach as in the other methods.
I think you can remove the messageToRemove variable and just do:  java doRemove(groupId, messageToRemove);
I think we should add a check for indexingDisabled here.
I think we should use the same approach as in the constructor.
This is a bit hard to read. Can we use a switch statement here?
I think this is not necessary.
I think this is a bit too long. Can we extract a method for this?
I think we should use the LanguageLanguage class here.
I think this should be a runtime exception.
I think this should be private
hash = 31 + (int) (delegate.hashCode());
nit: I think we can use TimeUnit.HOURS.toMillis(30)
This is a bit hard to read. I think it would be better to use a method reference.
I think this should be synchronized
StringUtils.isEmpty(name)
This is a good candidate for a method to get the node stats from the node stats.
I think we should add a log here to indicate that the event is not supported.
I think this should be a WARN instead of an ERROR.
This is not necessary.
This is a bit confusing. I think it would be better to have a method that takes a long and returns a long.
I think this should be a WARN instead of an ERROR.
I think this is not needed.
I think you can use the Objects.hashCode(this.entries.hashCode()) here.
This is a bit confusing. I think we should use the constant for the query parameter.
Why do we need to check if the sessionId is null here?
I think this should be set by the client client.
This is not needed.
I think this should be a constant.
I think this should be a POST.
I think this should be a constant.
I think this should be assertThat(actualProperty).isEqualTo(str);
This is not correct. It should be Comparator.naturalOrder().
I think this should be a constant.
I think this should be a separate test case.
This is a bit strange. I think it would be better to use the File object instead of the File object.
This is a bit of a nitpicking, but I think we should have a test for this.
I think this should be moved to the previous line.
I think we should use the same approach as in the other tests.
This is not needed.
I think we can use a Set here.
I think it would be better to use the min() method here.
This is not necessary.
rename to fCodeMiningProviders
I think this should be moved to the update method.
I think this should be in the base class.
This is a bit hard to read. How about using a for loop instead?
This is a bit of a very bad idea. I think it would be better to have a single TransactionTransaction that is a Transaction and then call the Transaction.
I think this is a bit strange. I think it would be better to have a test that checks the exception message and then fail the test.
I think this should be moved to the top of the method.
I think this should be a constant
I think we should verify that the message count is correct.
This should be a constant.
I think we should log the exception here.
I think this should be a service service service, not a service service.
This is a good candidate for a static import.
This is not a boolean, so it should be BooleanResult
I think this is not needed.
I think you can use the same commit id as the one in the commit message.
I think this should be synchronized.
This is a bit hard to read. I think it would be better to use a map instead of a map.
This is a bit hard to read. Can we extract a method to reuse the code?
please use String.format instead of String.format
I think this should be a different error message.
I think this should be in the try-with-resources block.
Please use the static import for the method name.
I think we should add the host.getName() to the log message.
I think we should use StringUtils.isBlank( defaultValue) here.
This is not a good idea. You can't use a custom exception handler.
This is not necessary.
I think this should be a RuntimeException
This is not a good idea. You can use a switch statement to avoid the need for the else case.
I think this should be verify(view).showBusyIndicator();
I think we should use the same approach as in the other classes.
I think this is a bit too long.
I think this should be a WARN instead of an ERROR.
I think we should use the new version of the new Version object instead of the new one.
Use GHCommitState.PENDING.
I think this should be a copy of the map.
I think this should be a warning
This should be a switch statement.
I think we should use the same approach as in the other class.
This is not necessary.
This is not necessary.
I think this should be a constant
I think we should use the same name as the topology update.
This is a bit hard to read. I would prefer to use a StringBuilder instead of a String.
I think this should be removed
I think this should be a Set, not a Set.
I think we should use the same name as the class name.
I think this is not necessary. The test will fail if the server is not 200.
This is a bit confusing. I think it would be better to use the default value of "SFTP_LOCAL_RELATIVE_PATH_ARG"
I think we should add a check for the partitionDesc here.
Why not just call validateDevfile(devfile, recipeFileContentProvider) here?
I think we should log the exception here.
This is a bit of a very long method. I think it would be better to use a method reference.
This is not a good idea.
I think this should be a MongoDBServer.
I think we should assert that the size of the config is correct.
I think this should be a WARN instead of an ERROR.
I think this should be debug level.
I think this is a bit too long.
I think this should be warn
This should be a WARN instead of an ERROR.
I think this should be a WARN instead of an ERROR.
I think this is not necessary.
@vilchik-elena Why not use random random here?
I think we should stop the timer in the end of the end of the request.
I think this should be a Set<SimpleTicket<AxisAlignedBB>>
I think this should be List<String>
I think this should be a constant.
We should probably use the new method here.
I think this should be a double instead of a double.
I think we should use the new Token(Token.Kind.STRING) here.
I think this should be moved to the previous line.
I think this should be a static method.
I think this is a bit too complicated. Maybe we can extract the logic to a method?
I think this should be refIndex
Please use Preconditions.checkArgument()
@vilchik-elena Why not use RspList.of()?
This is a bit confusing. I think it's better to have a try-with-resources block and close the stream in a finally block.
I think we should use the new URL here instead of the old one.
I think we should use the constant here.
This is not necessary. The test will fail if the user is not configured.
I think this should be Long.compare(actual, expected)
I think this should be INSTANCE_SIZE
I think this should be a constant.
please use StringUtils.isBlank
I think this should be a debug level
please use Collections.singletonList
I think we should use the same pattern as in the other handlers.
I think this should be moved to the end of the method.
I think we should add a null check here.
I think this is not needed.
I think we should use a primitive long here.
I think this should be a UserDao.updatePassword(user) method.
I think this should be mThemeBrowserFragment.setText("No themes");
This is a bit of a nitpicking, but I think it would be better to use a switch statement here.
I think this should be a switch statement.
I think we should use the same approach as in the other methods.
I think this should be: if (username.isEmpty()) { return true; }
I think this is not needed.
I think this should be a warning
I think we should add a check for null here.
I think this should be grafts.stream().map(x -> grafts).collect(Collectors.toMap(x -> grafts));
I think it would be better to use ShellIsAvailable instead of ShellIsAvailable.
I think this should be return doExecute(action, false);
This should be a local variable, not a local variable.
I think this should be private
I think this should be a warning.
I think we should use the same name as the other variable name
@vilchik-elena Why not use the expected value?
I think this should be tetheringActiveOnDevice.
I think this should be a constant.
Can we use mapper.readValue(json, RulesProcessor.class) here?
I think this should be initialized_ = loading_ instead of loading_ = true.
This is not necessary, the url is already encoded in the URLEncoder.encode method.
Should this be a WARN instead?
This is not correct. The test should fail if the value set is not set.
This is not needed.
This test is not needed.
I think this should be done in the constructor.
I think we should use the same name for both the states and the state.
Can we use a more descriptive name here?
I think this should be a constant.
please use static imports
I think this should be in a finally block.
I think we should use project.getMessageBus().connect() instead of creating a new one.
This should be a constant.
I think we should use a lambda here.
return !supportedSingleValuedAssociationNaturalIdExpressions().isEmpty()
please use brackets
Shouldn't we use the same error message as in the other place?
I think this should be Sponge.getRegistry().getTextFactory().literal(content)
I think this should be a Set<String, Object>
I think this should be a taskRepository.
This is not necessary. The default value is set to 0.
This is a breaking change.
This test is not testing anything.
I think this should be maxAllowed = maxAllowed == null ? maxAllowed : maxAssigned;
I think this is not necessary.
I think we should remove this line.
This is not a good idea. You can use the pathExists variable to avoid the need for the pathExists check.
waitForElementNotPresent
nit: I think we can use the same name as the other variable name
this is not needed
I think we should use the constant here.
I think this should be a constant.
I think we should use partitionByOperatorSpec here.
This should be a WARN instead of an ERROR.
Why not just use a for loop here?
I think this should be removed
I think this should be private
I think this should be removed.
I think we should use symbolTable().symbolTable() here.
I think this should be moved to afterNavigation()
I think this should be a warning.
I think this should be a warn instead of info.
This is a bit confusing. I think it would be better to have a test that checks the instance of the SSLContext and then check the instance of the SSLContext.
I think this should be a WARN instead of an ERROR.
I think we should check the facility here.
I think this is a bit too complicated. Maybe we could extract a method to reduce duplication?
I think this should be a filter instead of a filter.
I think this should be trace.getByteOrder() != null && trace.getByteOrder() != null
Why do we need to create a new ServiceActivatingHandler here?
I think this should be a switch statement.
use a constant for "1"
This is a bit hard to read. Can we use a switch statement here?
I think we should check the type of the exception here.
I think this should be a logger instead of System.out.println.
I think this should be a set instead of a set.
This is not a good idea. You can use the base.getChainLength() directly.
I think this is not needed.
nit: I think this check is redundant.
This is not necessary.
In theory, the ID is the id of the element. So, the id is the id of the element.
This is not a style, but it's a style field.
I think this should be a warning.
I think this is not needed.
I think we should log the exception here.
I think we should use a mock here
I think this should be a FluidStack, not a FluidStack.
I think this should be a warn instead of an error.
I think it would be better to use the messagePattern here.
@vilchik-elena Why not use RtReadme.this.request?
I think it would be better to use Collections.emptyList() instead of creating a new ArrayList.
nit: I think we can use the same style as above.
I think we should use UserAgentInterceptor.class.getName() instead of a raw string.
This is a bit strange. I think you should use a StringBuilder instead of a String.
This is a bit hard to read. Can you please extract a method to avoid duplication?
I think this should be protected.
This test is not testing anything.
I think this should be a WARN instead of an ERROR.
This is not a good idea. You can use a for-each loop here.
I think this should be synchronized
I think we should add the metric name to the log message.
I think this should be a ConcurrentHashMap.
I think we should use the same span name as the span name.
I think this should be a shutdown() call.
This is not a good idea.
I think this should be Eureka2Clients.interestClient
I think this should be a constant.
This is not needed.
@vilchik-elena Why not use a boolean expression?
This is a bit of a nitpicky, but I think it would be better to use a Set instead of a Set.
This test is not testing anything.
I think this should be removed.
This is not a valid proposal.
I think we should also check that the list is not empty.
I think we should use the same approach as in the other methods.
I think this should be a TajoRuntimeException.
I think this should be a constant.
@vilchik-elena Why not just use the constant here?
I think this should be a while loop.
This is not a good idea. You can use a Set instead of a Set.
This is not a good idea. You can use the guava Closer to write the stream.
I think we should check that fields is empty before adding fields.
This is a breaking change.
I think this should be a constant
I think this is a bit too complicated. Maybe we can extract the logic to a method?
This is not necessary.
This is a bit hard to read. Can we make it a static method?
I think this should be an IllegalArgumentException.
I think this should be done in onDismissListener()
remove
Please use assertEquals(..)
I think this should be a List<FeedbackQuestionAttributes>
Please use StringUtils.isEmpty()
I think we should use a switch statement here.
This is not a good idea. You can use MoreObjects.toStringHelper(this)
I think we should log the exception here.
Use File.separatorChar instead of File.separatorChar.
I think we should use a stream here.
I think this should be a loop.
I think you can use the new method here instead of the new one.
I think this should be a warning
This is not needed.
I think this should be sorted.
I think this should be a boolean
This is not correct. The monitor name is not used.
I think we should use the same name for all of the new methods.
I think we should add a check here to ensure that the session is not null before calling the method.
I think this should be a long instead of a long.
@vilchik-elena Why not just call the super method with the same name as the other way around?
I think this should be moved to the previous line.
I think this should be synchronized
I think this should be setLiveMerge(true)
This should be a WARN instead of an ERROR.
I think this should be a warning.
I think this should be a WARN instead of an ERROR.
Shouldn't this be >= ?
style nit: no braces around single line blocks
This is a breaking change.
This should be a constant.
This is a bit hard to read. Can we use a switch statement?
I think we should throw a TransportException here.
This is not a good idea. You can use FileSystem.get(URI.create("sftp://user:password@localhost"), conf);
I think this should be a constant
I think it would be better to use the interface instead of concrete type.
I think this should be a WARN instead of an ERROR.
I think this should be a WARN instead of an ERROR.
This should be a WARN instead of an ERROR.
this.part = checkNotNull(part, "part");
I think this should be a part of the PartitionOfDay.
This is a bit confusing. I think it would be better to return true if the feature is a feature.
I think this should be a WARN instead of an ERROR.
I think this should be >= 0.
Why do we need this?
I think this is a bit strange. I think it would be better to have a test that checks for the file and the file is deleted.
I think this should be a WebApplicationException
Why is this necessary?
I think this should be debug
I think this should be a Set<CharSequence> since it's a List<CharSequence>.
please use StringUtils.isBlank
I think it would be better to use the storage domain id here.
This is a good candidate for a method like this: java .filter(Account::getScopes) .filter(Account::isExpired) .filter(Account::isExpired) .filter(Account::isExpired) .forEach(this::isExpired) .forEach(this::isExpired) .forEach(this::isExpired);
This is a copy/paste error.
nit: can we add a message to the log message?
Shouldn't we throw an exception here?
This is not correct. You should use ItemHandlerManager.EnumAccess.NONE instead of ItemHandlerManager.EnumAccess.NONE.
This is a bit weird. It's not a big deal, but it's not a big deal, but it's not a big deal, but it's not a big deal, but it's not a big deal.
I think we should have a null check here.
I think we should use the same approach as in the ViewAdapter.
I think this should be in the validateExistingBondOptionsForNewAttachement() method.
Why not just use the same seed as the other?
This is not necessary.
I think this should be !propertyEntries.isEmpty()
I think this should be a Set instead of a List.
I think this message should be "Must not instantiate an element of the class"
I think we should add a check for the name of the search context here.
I think this should be a WARN instead of an ERROR.
I think this is not necessary.
I think this should be a List, not a List.
@vilchik-elena This is not a good idea.
This is not a good idea. You can just return the result of appReport.getFinalApplicationStatus() == FinalApplicationStatus.UNDEFINED.
This is a bit hard to read. Can we just use String.format() here?
@ivandalbosco why not use the diamond operator?
@vilchik-elena Why not use RtGithub.class.getName()?
Can you use a static import for the assertEquals?
I think we should use subscription here.
I think this should be a constant
I think it would be better to use the same approach as in the other tests.
I think this is a bit strange. I think it would be better to use a try-with-resources statement here.
I think it would be better to use the VmsList.isEmpty() check instead of the VMsList.isEmpty() check.
I think we should use the same approach as in the other methods.
I think we should use the same R.id.item_history_type here.
This should be a Set, not a List.
I think this should be a synchronized block.
This is not necessary. The only difference is that the first part of the if statement is that the second part of the if statement is the same.
I think it would be better to use a lambda here.
I think we should use a lambda here instead of a lambda.
This is not needed.
I think we should throw a RuntimeException here.
I think we should use the same approach as in the other files.
This is not necessary.
I think this should be set to true in the shutdown method.
This is a bit hard to read. Can we use a filter instead?
I think this should be a constant
This should be a warn instead of an error.
I think we should use the key in the key here instead of the key.
This is a bit confusing. I think it's better to use a Set instead of a List.
nit: I think we can use the same approach as in the other methods.
I think this should be moved to the presenter.
This is not a good idea. You can use the Build.VERSION_CODES.KITKAT constant here.
Why not use the SSLContext.getInstance(TrustManagerFactory.class) ?
I think we should log the exception here.
Why do we need to pass the parameter to the constructor?
I think this should be a Set<String>
Please use static import for assertEquals.
This is a bit hard to read. You can use Player.getItemInMainHand() instead of this.
This is not thread safe.
I think we should use the URLDecoder.decode(String, String) constructor to avoid the need for the extra String[] params.
I think we should have a callback.onSuccess(() -> callback.onSuccess(() -> callback.onSuccess(() -> callback.onSuccess()); here.
I think we should use the new function registry here.
I think this should be a warn instead of info.
I think this should be replaced with a call to getAttribute(new QName(ATT_KEY))
This is a very good candidate for a method to be used in the View.
I think we should use the same approach as in the other classes.
This is a bit of a very good idea. I think it would be better to use a for loop instead of a for loop.
rename to listener
I think this should be assertEquals(bitreserveClient.getToken(), "foobar");
I think this should be a List<Annotation> instead of List<Annotation>.
I think this should be a while loop.
This is not needed.
I think this should be !user.isPresent()
This is a bit hard to read. Can we make it a static method?
I think this should be moved to the previous line.
please use getStorageDomainSpaceWithoutSnapshot
I think this should be debug
System.out.println("propagating error: {}", errorEvent.getContext().getDepthLevel());
please use injection for VmDeviceType
please use Boolean.TRUE.equals(disk.getDiskInterface())
I think this should be in a finally block.
I think this should be hasNext()
I think this should be "foo"
This is a good candidate for a method to shutdown the VoltNetwork.
I think this should be a constant.
rename to element
I think you can use Objects.equals(hostProviderId, other.hostProviderId)
I think this should be a try-with-resources block.
@lautarobock why not use the same instance of LFS.getInstance().getCleanFiltered( getRepository(), in, buf.length)?
I think this should be a constant
I think this should be private
This constructor should be private.
This should be error
I think this should be a WARN instead of an ERROR.
I think this should be a WARN instead of an ERROR.
This is a bit hard to read. Can we use a stream and filter instead?
This is a good candidate for a method to be used in the ModelAndView.
This is a good candidate for a try-with-resources block.
I think this should be a Set<String>
Why not just use the constructor?
I think this is not necessary. The relationship is already in the mappableRelationship.
I think this should be a POST.
I think this should be a WARN instead of an ERROR.
I think this should be a RuntimeException
I think this should be in the finally block.
I think this should be a local variable, not a local variable.
I think this is a bit too complicated. Maybe we can extract a method to reduce duplication?
This is not necessary.
This is a bit hard to read. Can you please extract a method to reduce duplication?
I think this should be inside the if block, not here
I think this should be a constant
nit: this.stageTaskRecoveryCallback = Optional.of(stageTaskRecoveryCallback)
I think this should be a separate method.
I think this is a duplicate of the line above.
I think we should log the exception here.
This is not correct. You should use the ISO 8601.
I think this should be a warning.
I think we should use mEditState.add(activity) here.
I think this is a bit strange. I think it would be better to use a StringBuilder instead of a StringBuilder.
I think this should be a switch statement.
This is not a good idea. You can use the zoneId.toPort() method.
This is not needed.
This should be a warning.
I think this should be a constant.
please use injection for VmHandler
This should be false.
This should be a logger.
I think this should be shutdownPublisher()
I think this should be moved to the previous line.
I think this check is not necessary. The method is only called once.
please use injection for VmDeviceDao
This is not necessary. You can just call setListAdapter(this, filteredListModel.getItems())
Should this be a static method?
I think we should use the same naming as the other variables.
This is a bit confusing. I think it would be better to have a method to get the transport and the transport.
This is not thread safe. You can use a lock to access the lock.
I think we should use org.apache.commons.lang.StringUtils.isEmpty(String) here.
I think this should be a logger.
I think this should be return findThreads(new ThreadIdPredicate(threadId));
I think this is a debugging statement.
I think we should use the same partition for the row size.
nit: this can be private
I think we should use the bridge.getHandler() here instead of the handler.
This is a bit hard to read. I think it would be better to use the new method in the currentDate() method.
I think this should be a Preconditions.checkNotNull(family, "family is null");
I think this is a bit too long. Maybe we can use a regex to get the index and then check if it's a directory?
I think this should be moved to the previous line.
I think this should be a constant.
I think this is a bit too complicated. It would be better to have a single if statement in a single statement.
This is not needed.
nit: can you add a message to the log message?
I think this should be a count, not a count.
This is a bit confusing. I think it would be better to have a single config for the compaction configs.
This should be a runtime exception.
I think this should be a UnsupportedOperationException
This is not needed.
I think this should be a constant.
I think we should use the super(eventBus, view, proxy, RevealType.Root); here.
I think this should be removed.
I think this should be a constant.
I think this should be a method on the interface.
This is not a valid address.
I think this should be assertEquals(info.email, "max mustermann", "maxMustermann", "maxMustermann", "maxMustermann", "maxMustermann", "maxMustermann", "maxMustermann", "maxMustermann", "maxMustermann", "maxMustermann", "maxMustermann", "maxMustermann", "maxMustermann", "maxMustermann", "maxMustermann", "maxMustermann", "maxMustermann", "maxMustermann", "maxMustermann", "maxMustermann", "maxMustermann", "maxMustermann", "maxMustermann", "maxMustermann", "maxMustermann", "maxMustermann", "maxMustermann", "maxMustermann", "maxMustermann", "maxMustermann", "maxMustermann", "maxMustermann", "maxMustermann", "maxMustermann", "maxMustermann", "maxMustermann", "maxMustermann", "maxMustermann", "maxMustermann", "max"), "max"), "max" etc.
I think we should use the optionalBlobName.isPresent() check here.
I think we should check that the key is the same as the key.
This should be a DRepresentationQuery
assertNull(result);
I think we should use assertThat(result.get("Name1")).isEmpty()
nit: I think we can just use the message from the message:  java throw new CancelTaskException("Queried for a buffer after receivedBuffers.poll()
I think this should be a Map<SimpleInterval, Integer>
I think this should be a @After method.
I think this should be Optional.empty()
I think we should return the result of the method, not the result.
This is not correct. You can't remove the route from the route.
I think this should be a part of the if statement.
This should be a WARN instead of an ERROR.
I think we should use the same approach as in the other methods.
This is a bit weird, but I think it would be better to use the same Locale.
This is not correct. You can use Preconditions.checkNotNull(family, "family")
I think this should be asserted that the chargeId is not null.
I think this should be a WARN instead of an ERROR.
nit: I think the value should be the same as the other values.
I think it would be better to use the super(storagePoolId) constructor instead of the super(storagePoolId) constructor.
This is a bit confusing. How about using a default value instead of a default value?
I think this should be a List<CandidateEntity>
I think this should be debug level
I think we should log the exception here.
I think this should be a WARN instead of an ERROR.
I think this is a bit too complicated. I think it would be better to have a method that returns a boolean and return a boolean.
I think we should add a check for request.getType() != null here.
I think this should be outside the try block.
I think we should use the same approach as in the other methods.
This should be a GerritRemoteFactoryProvider.
This is a good idea.
I think this should be layoutParams.
I think this should be a constant.
I think this should be a separate method.
I think we should use the same approach as in other tests.
I think we should use the label width here.
This is not necessary.
I think this should be a Set<V>
rename to diagramCategory
This is a bit hard to read. Can we use a switch statement here?
I think this is not needed.
I think we should use the same name as the one in the KafkaExportException.
We should use assertThat here.
I think this is not needed.
I think this should be changed to return entry.getValue()
I think this should be a boolean
I think we should add Preconditions.checkState(claims.isComplete(), "lifeSpanSeconds") to the Preconditions class.
This is not a requestInProgress.
I think we should use the same approach as in the other classes.
I think we should use MPMetrics.getApplicationContext() here.
I think this should be a constant.
This is a bit hard to read. How about using Map.putAll() instead?
This is not needed.
This is not needed.
I think you can use the @BeforeClass annotation here.
This is a bit confusing. I think it would be better to have a single constructor that takes a StreamGraphSpec and then call it in the constructor.
I think this should be a beanFactory.
I think this should be removed.
I think this should be in a finally block.
This is not correct. The name is not a field.
Can we use a try-with-resources pattern here?
@dalifreire why we need to sleep here?
I think this should be a field, not a field.
This is a good idea.
I think we should use the same approach as in the other methods.
I think this should be a constant.
I think we should throw a FalconException here.
This should be a constant.
I think this should be a separate commit
Why is this needed?
This is not necessary, you can just use getResources().getString(R.string.savings_account_submitted), Toast.LENGTH_LONG)
I think we should use the new method here.
I don't think we need this line.
I think this should be a constant
This is not necessary.
I think this should be removed.
This is a bit confusing. I think it would be better to use a Comparator.comparing(Comparator.comparing(Node::getName).
This should be a constant.
This test is not testing anything.
This is not needed.
I think this should be > 0, not <=
This should be a ConcurrentHashMap.
This is not necessary.
I think this should be flush()
I think it would be better to use the KieServerMode enum here.
I think this should be a boolean flag.
This is a bit hard to read. Can we use a constant for "nb"?
@vilchik-elena Why not addIssue(tree, MESSAGE) to the visitParenthesisedExpression method?
This is not a good idea. You can use the EntityRef directly.
I think this should be synchronized
This should be a constant.
This is a bit confusing. I think it should be a ValueEnum.getEnumeratorsForBinaryOperation(a, b)
This is not needed.
I think this should be put(key, value)
This is not a translation, but it should be translated.
I think this should be a try-with-resources block.
I think this is not necessary.
This should be removed
nit: can we use the same instance name as the instance name?
Shouldn't this be "FS_DEFAULT_NAME_KEY"?
I think this should be a ConcurrentHashMap.
please use the diamond operator
This is a good candidate for a method in Uninterruptibles.sleepUninterruptibly(1, TimeUnit.SECONDS).
I think this should be a List<Facet> instead of a List<Facet>
I think this should be assertThat(fileChecksum.getBytes()).isEqualTo(checksumFn.apply(filePath, true));
I think this should be configurable.
I think this should be a WARN instead of an ERROR.
This is a bit confusing. I think it would be better to use the builder pattern here.
I think this should be a property property, not a property.
I think this should be a constant
nit: can we use nodeIndex instead of index?
I think this should be debug level
I think this should be a RuntimeException
I think this is not necessary. The test will fail if the first one is not a uuid.
Remove this.
This should be a constant.
I think we should use the same approach as in the test above.
I think this should be a MapView.OnMarkerClickListener
This is not needed.
I think we should use a constant for the value of MAXED_POOL_MARKER
I think we should use Locale.ROOT here.
I think this should be a guard clause.
I think this should be a separate test case.
I think this should be a new Symbol(symbolName, SymbolStatsEstimate.class)
I think we should log the exception here.
You can use assertEquals(aLong, 2L)
nit: I think this is a bit strange to have a lock with the lock id, and then the lock id is not the same.
This is a bit of a very good idea. I think it would be better to use a try-with-resources block here.
I think this should be private
I think this is not needed.
This is not a good idea. You can use a StringBuilder instead.
You can use UUID.getUUID()
I think this test should be in a @Before method.
I think this should be a valid value, not a valid value.
I think we should use the new Key.getKey() method here.
This is not a good idea. You can use the factory.getFactory() method.
I think this should be a List<String>
please use curly braces
I think this should be a Set instead of a HashSet.
I think this should be a switch statement.
I think we should use RxJavaPlugins.onError(e) here.
Use Log.e(TAG, "Unable to download Languages from server", e); instead.
I think this should be a for loop.
Why is this needed?
please use the new method here
I think this should be a static method.
I think this is a bit hard to read. I think it would be better to have a method in the enum that returns the enum value.
I think this should be:  java if (this.className.equals(other.className)) { return this.className.compareTo(other.className); }
This should be a try-with-resources block.
This should be error
I think you can use the constant here.
I think we should log the exception here.
I think we should use a CountDownLatch here.
I think this should be a Set, not a HashMap.
I think it would be better to catch the specific exception here.
I think we should use the same pattern as in the other files.
I think this should be a constant.
This should be a List, not a List.
I think this should be wrapped in a try-with-resources block.
I think this should be a runtime exception.
This is a bit confusing. I think it would be better to use a try-with-resources statement here.
I think this should be a try-catch block.
This is not necessary.
This is a bit confusing. I think it would be better to log the error and throw the error.
I think this should be a WARN instead of an ERROR.
@kujtimiihoxha I think this should be in a try-with-resources block.
I think this should be a method on the HaWorkVO
I think this should be a WARN instead of an ERROR.
I think this should be in the tearDown method.
I think this should be setUnsafe(value)
I think you can use the following syntax:  java rule.accept(this);  to avoid the need for the if-else.
This should be a constant.
This should return a List<DataSample>
I think we should throw an exception here.
This is not a good idea. You can use org.apache.commons.lang.StringUtils.isEmpty(wsAgentServer)
I think this should be done in the onNavigation method.
I think this should be a static method.
nit: can we use stream api here?
This is not correct. You can use the default route set to true.
Why is this needed?
I think this should be a constant
Collections.singletonList()
I think this should be removed.
please use Boolean.valueOf(boolean)
This should be a constant
This is not a good idea. It is a good idea to return null.
rename to importChange
This should be a constant.
Please use Version.vdsGroup() instead of new Version("2.3")
I think this should be "Plugin name is not sane: <"
This is not a good idea. You can use a logger.
This is a bit hard to read. Can we use a static variable for this?
I think this should be a debug statement.
This is a bit of a very bad idea. I think it would be better to use a try-with-resources statement.
I think we should use the same approach as in the other methods.
I think this should be notebookJobs.get(0)
This should be a Builder.
This is not a good idea. You can use the rawText method to get the raw text.
I think this should be a constant.
This is a bit of a nitpicky, but I think it would be better to use a ternary operator here.
I think this should be error
please use Optional.ofNullable()
remove from import
This is a breaking change.
This should be a guard clause.
I think we should use the new ClasspathHandlerDefinition(Thread.currentThread().getContextClassLoader()) here.
I think you can use TmfCoreTestPlugin.getDefault().getBundle() here.
I think you should use the constant here.
I think we should add a check for numPartitionsPerClass here.
nit: you can use stream api here
This should be a constant.
I think you should use the try-with-resources here.
I think this should be return Objects.equals(first, second);
I think this should be a TracedCall<Void>
I think this should be a warning.
I think this should be a switch statement.
This is not needed.
This should be a WARN instead of an ERROR.
This is a duplicate of the one in the previous file.
I think this should be a string.format
I think this should be a constant.
This is a bit of a nitpicky, but I think it would be better to use the bitmap's bitmap's bitmap's bitmap's bitmap's bitmap's bitmap's bitmap's bitmap's bitmap's bitmaps.
This is not a safe way to do this. You can use the java.util.Objects.requireNonNull(localDir, "localDir")
I think we should use Hibernate to get the class name from the Hibernate EntityManager.
I think this should be beforePassivate != null
This is a bit hard to read. Can we use a more descriptive name?
I think this should be in a finally block.
This should be a WARN instead of an ERROR.
I think we should add a check for the default filter here.
Please use Objects.hash()
please use String.format()
This is not necessary.
I think this should be a try-with-resources block.
I think we should throw IllegalArgumentException here.
I think this should be inserter.
This should be a WARN instead of an ERROR.
I think this should be a constant.
Shouldn't this be "Closing %s jar file that was added as resource root for %s jar file"?
This is not necessary.
This is not a good idea. You can use the try-with-resources pattern here.
I think this should be: if (value != null && value.isAuto() || value != null) { ... }
why do we need to create a new array here?
I think this should be a bit more readable:  if (callExpression.getChildren().get(0) instanceof ValueLiteralExpression) { return true; } return false;
I think this should be playQueueAdapter != null
I think this should be a constant.
This is a bit hard to read. How about using a StringBuilder instead?
I think this should be a try-with-resources.
I think this should be personAttribute.setValue(value);
I think this is a bit too complicated. Maybe we can use a method referenceDefaultValues(EntityTypeUtils::isReferenceType) to avoid the duplication.
I think this should be a static method.
I think this should be a warning.
I think this should be a warn instead of an error.
We should use the presenter to do this.
This is a bit hard to read. Can we make a static method that takes a CSVSchema and returns a CsvSchema?
I think this should be memberAttributes.add(attr.getName())
nit: can be simplified to if (!parent instanceof PipelinedApproximateSubpartition)
I think this should be removed.
This is a bit of a nitpicking, but I think we should throw an IllegalStateException instead of returning null.
I think this should be changed to map.put(key, new Long(value));
This is a bit confusing. I think it would be better to use a Set<Collaboration> instead of a List<Collaboration>.
why not use Collections.singletonList() ?
This is not necessary.
I think this should be moved to the modelFieldsMap.get(factName) method.
I think this should be moved to the previous line.
This test is not testing anything.
I think we should use the same name as the one in MethodMatcher.
This is a bit confusing. I think it should be a tableType.
I think we should also test the case where the query is not executed.
I think we should use the same approach as in the other class.
I think this is a good idea.
I think this should be a constant.
This test is not testing anything.
This test is not testing anything.
I think this should be private.
This test is not testing anything.
I think this should be a warning instead of an error.
This should be a new constructor.
This is a good candidate for a method like this:  private void error(String msg, String msg) { return Response.status(Response.Status.OK).entity("UserStoreException"); }
This is not necessary, you can use the new method:  java mTrainingDate = mTrainingDate != null ? mTrainingDate.getMonthOfMonth() : LocalDate.now();
This should be a warning.
This is not necessary.
I think we should use the mocked mock here.
I think this should be a long
I think this should be a static method.
I think it would be better to throw an exception here.
I think it would be better to use a Set here.
This is a bit hard to read. Can we just use the existing one?
I think this should be return errors;
You can use Game.run() instead of new Bullet(getX() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY() + 5, getY()
This is not needed.
Why not just use the constant here?
I think this should be a Set, not a Set.
I think we should use the same name as the one in the other class.
I think this should be a warning.
return newUser;
Can we use try-with-resources here?
This should be a constant.
This is not necessary. The target is already a damage.
Please use assertThat(providerTypeValid(), is(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non(non
style nit: no braces around single line blocks
I think this should be moved to the @AfterClass method.
I think this should be debug
I think this should be Assert.notNull(result, "'result' must not be null");
Can we use the same constant for the two tests?
I think this should be inside the 'if' block, not in the 'if'
Can we use a mock here?
I think we should add a Preconditions.checkArgument here to ensure that the arguments are not null.
This is not a good idea. You can use the ID3v2Tag.getGenre() directly.
I think you can use the diamond operator here.
This is not used.
I think this should be a warn instead of an error.
I think this should be a warn instead of an error.
I think we should use the same name as the oldCompositeIndexes.
I think we should return LocalDBEntry here.
This is a bit confusing. I think it would be better to use a StringBuilder instead of a String.
I think we should use the new method here.
This is a bit hard to read. Can we use a try-with-resources pattern here?
I think this is not needed.
I think this should be a warning.
I think it would be better to use the new ReportCompleteStatusRequest(agentRuntimeInfo, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier, jobIdentifier,
I think this is a bit too long. Can we just use the String.join() method instead?
This is not a good idea. You can use the super.toString() method.
This is a bit of a nit, but I think we should move this to a separate method.
This should be a warn instead of an error.
I think this should be a try-with-resources block.
I think this is a bit too complicated. It would be better to have a method in the AbstractMap.
I think we should also verify that the rule is actually accepted.
I think this should be a warning.
This is not necessary.
I think this should be moved to the previous line.
I think we should use the same name as the other filters.
I think this should be a for loop.
I think we should use a ConcurrentHashMap here.
I think this should be a constant
I think this should be moved to the start of the method.
I think this should be !(fileType.isPresent() && !(fileType.get() instanceof UnknownExternalFileType))
I think this should be done in the constructor
I think this should be a warn
I think this should be tessellator.getBuffer()
I think this should be a constant.
I think this should be a metricGroupNode.getDisplayName()
This should be a static method.
I think this should be debug
I think we should use the same approach as in the other PR.
please use projectExplorer.waitItemOnResult(projectExplorer.openContextMenuByPathSelectedItem(PROJECT_WITHOUT_GITHUB)) instead of projectExplorer.clickOnItemInContextMenu( TestProjectExplorerContextMenuConstants.ContextMenuFirstLevelItems.COPY);
This is not needed.
This is a bit hard to read. Can we extract a method to createPageSource?
I think this should be a separate method, since it's a lot of the same code.
I think this should be removed
This should be a constant.
I think this should be replaced with a call to generateDisplayNameForClass(Class<?> testClass)
I think we should use the same name as the other attributes.
This is a bit confusing. I think it would be better to use a named constant for the column name.
This is not a good idea. You can use a orElse(null ).
I think it would be better to use the regex as a constant.
This is not needed.
I think this should be a separate test case.
I think this should be a constant.
This is not needed.
I think we should use the path separator here.
I think this should be a static method.
why not use the diamond operator?
minor: can we remove this log?
I think this is a bit too complicated. Maybe we can extract a method in the RexProgram and call it from the RexProgram?
I think this should be moved to the finally block.
I think we should use the new method here instead of the old one.
I think this should be debug level
This is a bit hard to read. Can you please extract a method to reduce the number of returns?
I think we should use the new pipeline factory here.
I think we should use the auth token here.
This test is not testing anything.
This is not necessary.
I think this should be private.
@fanifieiev the same above.
This is a breaking change.
I think this should be done in the onActivityResult method.
I think this should be done in the callback
I think it would be better to use the same approach as in the other methods.
I think this should be a while loop.
This is a bit hard to read. Can we use a logger instead?
I think this should be configurable.
I think this should be synchronized
Why is this needed?
I think this should be a WARN instead of an ERROR.
This is a bit of a duplicate of the code above, can we refactor it to a method?
This is not correct. You can use the index variable directly.
I think we should use a Set here.
I think this should be a warning.
This is not needed.
I think this test is not necessary.
@bdragan use the same variable for both
This is not necessary.
I think this should be "hasAdditionalValueSize"
I think we should use the same URL as the previous one.
I think we should use the same name for both the two variables.
nit: you can use blockBuilder.blockBuilder() here
I think this should be a StringBuilder instead of a StringBuilder.
I think this should be removed.
I think this should be a WARN instead of an ERROR.
This is a bit hard to read. I think it would be better to use a try-with-resources statement.
This is not a good idea. You can use a LinkedList instead.
I think we should use the same border factory for all the border factories.
I think this should be removed.
This should be a warn instead of info.
this is not used
This is not a good idea.
I think this should be done in the constructor.
I think this should be assertThat(result, is(USER_ID));
I think this should be task.get(taskId)
Why not use toString()?
I think this should be a Set<OlapAnnotation> not a Set<OlapAnnotation>
I think this should be a WARN instead of an ERROR.
This is not necessary.
log.warn(e, "Leaked thread group");
I think this should be a Set instead of a Set.
I think we should use the new Color.valueOf(getDrawable(getDrawable(getDrawable())) here.
I think this should be removed.
This is not a good idea. You can use TimeUnit.SECONDS.toMillis(1)
This should be moved to the upgradeFrom method.
Shouldn't this be: if (geolocationType.toString().equalsIgnoreCase("Notification") && !geolocationType.toString().equalsIgnoreCase("Notification")
I think this should be a warn instead of info.
I think this should be a RuntimeException
I think we should use the same name as the previous one.
This is a good idea.
This is a good candidate for a method to get the dimension and use it in both places.
I think this should be a debug log.
rename to member
This should be a constant.
This is a good candidate for a method to get the cache cache and use it in the process method.
This is a bit hard to read. I would prefer to use a constant for "quickstart.explore.warning.saveFail".
@bgeVam please use StringUtils.isNotBlank(p.getFirstName())
I think this is not needed. The check is done in the applyAlias method.
I think this should be a Set<ObjectId>
Why is this needed?
I think this should be a Set, not a Set.
I think this should be a List<Property>
This should be a constant.
I think this should be a WARN instead of an ERROR.
I think this should be a WARN instead of an ERROR.
I think this should be removed.
I think this should be moved to the top of the file.
I think this should be a constant
Why not just use the path separator?
I think this should be removed.
I think it would be better to use the new File(new File("k-distribution.k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k-distribution", "k
This is a bit confusing. I think we should have a config option for the config.
Why not just use an iterator?
Please use a logger instead of System.err.println.
I think this should be a ReankedAdapterFactory.
I think this should be a warn
Can we use the constants for the config file name?
I think this should be event.getCounterSamples().isEmpty()
I think this should be a try-with-resources.
nit: can we just pass the ZkBaseDataAccessor directly?
I think this is a bit too long.
I think this should be a constant.
Why not just use the rawMessageHref.substring(rawMessageHref.lastIndexOf('/')+1) here?
I think this should be a WARN instead of an ERROR.
I think you can use assertEquals here.
I think this should be done in the constructor instead of here.
This should be package-private.
log
I think this is a bit too much. The only thing I would expect is if the path is a base path, not the root path.
Why not random.nextLong()?
I think this should be a try-with-resources block.
please use "lvs" instead of "lvs"
I think we should use the same naming as the old one.
This is a bit of a duplicate of the code in the one above, can we extract it to a method?
I think this should be a warn instead of info.
I think this should be a warn instead of an error.
I think this should be moved to the top of the method.
Should this be debug level?
I think this should be in the constructor.
please use 'Guid'
I think we should use KieDeploymentDescriptorText.KieDeploymentDescriptorText.class.getName() here.
This should be a field of the class.
I think this should be a warning.
I think this should be in a finally block.
I think this should be a WARN instead of an ERROR.
I think this should be a warn instead of an error.
This should be a Map, not a HashMap.
please use assertNull()
I think this is a bit too long. Can you please extract it to a method?
Why do we need to check if connectorType is null?
I think this is not needed.
I think this should be a synchronized block.
I think this should be a Preconditions.checkNotNull(bytesRef, "Format is null");
please use injection for VdcQueryType
This is not necessary.
I think this should be changed to a switch statement.
I think we should use the mockito.spy(() -> mockito.any(RemoteXBeeDevice.class) here.
I think this should be a switch statement.
Should this be parcel.writeString(type, flag) ?
This is not needed.
I think we should also check that the path is null.
I think this should be a while loop.
I think this should be assertEquals(ByteSizeStrings.java().makeSizeString(1234), "1234"), "1234"), "1234"), "1234"), "1234"), "1234"), "1234"), "1234"), "1234"), "1234"
We should use the constants for the "coinmarketcap" and "coinmarketcap"
This should be a switch statement.
I think we should use WeldException.expectException(e.getMessage(), e) here.
@vilchik-elena Why not use the constant here?
I think this should be arrayObject != null && (Object[]) arrayObject
I think this should be removed.
@vilchik-elena Why not use the new Location object?
This is a bit hard to read. I think it would be better to use a StringBuilder instead of a StringBuilder.
I think we should add a check here to ensure that the bufferNode is not null.
I think we should also check for the channel name here.
This should be a WARN instead of an ERROR.
I think this should be a Map<String, Object>
I think this should be a WARN instead of an ERROR.
This is a bit of a nitpicking, but I think it would be better to use a local variable for the two variables.
I think this should be a warn instead of info.
This is not a good idea. You can use the constant for "node"
I think it would be better to use String.format instead of +
why not to use vmManager.unlock() ?
I think this should be:  if (this == that.referenceIndex) { return false; }  This is a bit more readable.
I think we should log the exception here.
This is not a good idea. You can use the index variable directly.
I think this should be a Set instead of a List.
I think this should be a constant.
I think this should be a WARN instead of an ERROR.
This is not a good idea. You can use a StringBuilder instead.
This is not needed.
This is not necessary.
I think this is a bit strange. I think it would be better to use the same approach as the one in the constructor.
I think we should add a break here to make sure we're not going to push the token.
I think this should be extracted to a separate method.
This should be a field.
I think this should be a constant.
This is not a test, but it should be a test error.
I think we should use the same timestamp as the timestamp, like in the other methods.
This is not a valid argument for the transform function.
This is a bit hard to read. Can we use the Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's Guava's
I think this is a bit hard to read. I think it would be better to use a StringBuilder instead of a String.
I think this should be moved to the serviceStatusMap.
I think we should use the same color for all cases.
Collections.singletonList(verArt)
This should be a static method.
This should be a WARN instead of an ERROR.
I think this should be a Preconditions.checkNotNull(chunkSize, "chunkSize");
This is a good idea.
I think this should be debug level.
Why do we need to start the processor here?
I think this should be a WARN instead of an ERROR.
nit: I think you can use assertUpdate() here.
I think we should throw an exception here.
This is not necessary.
I think it would be better to use the constant here.
I think this should be synchronized
I think this should be a loop instead of a for loop.
I think this should be Objects.hashCode(period)
I think we should use the new name of the diagramdesc here.
I think this should be a constant.
nit: I think we can use the new method here
I think this should be a null check.
This should be a WARN instead of an ERROR.
This is not a block of the storage domain.
This should be a switch statement.
I think this should be a for loop.
I think this should be a RuntimeException
Noop?
I think this should be moved to the top of the method.
This is a debug statement.
This should be readRecord()
I think this is a bit too long. Can we have a method for this?
Shouldn't we set the value of the listener to null here?
This is not a very useful test.
This method should return List<String>
Why not just return null?
@vilchik-elena Why not use the constant here?
This is not necessary.
This should be a constant
I think this is a bit too complicated. It would be better to have a single method in the base class.
I think this should be a WARN instead of an ERROR.
I think this should be in a @Before method.
Is this really needed?
I think we should add a metricValues.put(aggFactoryNames[i + 1], metricVals[i]) to the metricValues array.
This is a bit hard to read. I think it would be better to use the EntityClassResolver.getAllOf(EntityType.class) instead of the EntityClass.
I think this should be a switch statement.
I think this should be moved to the model.addObject method.
This should be a constant
I think we should log the exception here.
I think this should be a constant
I think this should be debug
I think we should use a constant for the "closeStreamAfterSend"
I think this should be taskNo = 0, and not taskNo = 0.
This is a bit of a very good place to do this. Can we have a single place where we can use the same code?
I think this should be synchronized.
This is a bit of a nitpicking, but I think we should have a log here.
I think this should be just: java for (Entry<String, ValidationResult> allValidationResults : values) { addValidationResults(ValidationResults.values()); }
I think this should be a logger.
I think this should be a try/catch block.
This is not needed.
I think we should use the FragmentManager.showLongToast(getString(R.string.start_video_capture_instruction)); here.
I think this should be vcr.cluster.zk.cluster.name.prefix.
I think this should be a logger.
This is a breaking change.
This is a bit hard to read. Can we make this a method in the MANDATORY_PERMISSIONS?
Should we use a logger here?
I think we should use the same name as the title.
rename to filter
I think this should be a warning.
I think we should use the same name for both the two strings.
Why is this synchronized?
I think this should be a constant
I think this should be a List<WebElement>
I think this should be a LinkedHashSet, not a ArrayList.
I think this should be a separate test case.
I think this should be a WARN instead of an ERROR.
I think we should use the same approach as in the other classes.
This is a good idea. You can use a lambda here.
I think this should be: this.mode = enabled;
I think you can use File.createTempFile() here.
I think this should be a constant.
@dalifreire why you need to change this?
This is not necessary.
I think this should be UnsupportedOperationException
minor: can use the new version variable
I think it would be better to use a try-with-resources statement here.
I think this should be a WARN instead of an ERROR.
I think this should be a constant.
This is not needed.
I think this should be a warn instead of an error.
I think this should be a RuntimeException
@bgeVam please use JiraApi.APPLICATION_JSON
Why not just use float?
I think we should use the same name as the one in the other file.
I think we should also check that the events are actually deleted.
Shouldn't this be externalized?
I think it would be better to use Status.SC_OK here.
Why not just use the return type?
I think this should be moved to the top of the method.
I think this should be a IllegalArgumentException.
This should be a constant
This is a good candidate for a method like this: java public static void isIncomingPhoneNumber(final String sid, final String sid, final String sid) { return null; }
I think we should also check that the list of interfaces is empty.
I think this should be a guard clause.
assertThat(graph).hasSize(1);
Is this really needed?
This should be a constant.
I think this should be moved to the moduleDefinitionRepository.findByNameAndType(moduleName) method.
I think we should log the config here.
This should be a warning.
This should be a switch statement.
This is not correct. You can use the Objects.equals() method.
This should be a constant
I think this should be a NoSuchElementException
I think this should be done in the fireThreeDConversionsDoneEvent
This is not necessary. The dialog is already open.
I think this is a bit too complicated. Maybe we should use a try-with-resources statement here?
I think this should be a constant.
LOG.error("execute, An error has ocurred while processing results are: {}", processResults);
I think this should be a static method.
I think this should be removed.
I think this should be a constant.
I think it would be better to use the new method here
Why do we need to wait for the output to be in the output?
I think this is a bit too complicated. Maybe we could extract a method for this?
I think this should be a while loop.
This is a bit hard to read. Can we extract a method to reduce code duplication?
I think this should be a constant.
This should be trendsToShow > 0
I think we should log the exception here.
This is a bit hard to read. I think it would be better to use a static final variable for GL20.GL_LINES.
This test is not testing anything.
I think it would be better to use Files.write(Paths.get(COPEPlugin.getLocalStorage().getAbsolutePath(), knownProjectsFileName), (string + "\n").getBytes())
This should be a constant.
This is not needed.
I think this should be a constant
I think this should be a WARN instead of an ERROR.
I think this should be a set of options, not a set.
I think this should be a constant.
This should be a static method.
This is a bit hard to read. Can we just use a for loop?
I think this should be info
I think this should be a Map<ContentType, By>
I think we should use a Set here.
I think this should be a constant.
I think this should be called only if the note is not available.
I think this is not needed.
I think this should be a Set<GenericItem> instead of a Set<GenericItem>.
Why do we need to wait for the future to complete?
@jomarko I think this should be in a finally block
I think this should be a set instead of a set.
Why do we need this?
Collections.singletonList
I think this should be envVblesAsString = envVbles.entrySet().stream().map(envVbles -> envVbles.getValue())
This is a bit hard to read. Can we use a single instance of File.separator?
This should be warn
I think this is not needed.
This is not needed.
I think this is a bit too long. Can we just use a regex instead of a regex?
I think this should be in the @After method.
This is not a good idea. You can use a stream and filter instead.
I think this is a bit too long. Can we just return the boolean expression?
I think this should be a constant.
I think this should be a try-with-resources block.
This should be "You are not allowed to perform this operation."
I think this should be a warning.
I think this is a bit too long.
I think it would be better to use storageDomainDR.getJobId() instead of calling toString()
This is not equivalent to the other.reassignmentsInfo.equals(other.reassignmentsInfo)
I think this should be a Task.
This is a bit of a nitpicking, but I think it would be better to use the for loop here.
I think we should use a different thread pool here.
I think this should be a logger.error()
I think this should be Map.Entry<String, Ds3Type>
I think this should be removed.
Please use notNull()
I think it would be better to use Collections.singletonMap() here.
This is not a good idea. You can use MemoryViewUtil.ignoreKeyEvents(event) instead.
I think this should be a StringBuilder instead of a StringBuilder.
I think this should be a switch statement.
I think this should be written = channel.write(buffer);
JCloudsSlaveDescriptor is a class member, so this method can be private.
I think it would be better to use the new method here
please use assertFalse instead of assertFalse
I think this should be an index < index, not index < index.
I think we should use the same approach as in the other methods in this class.
nit: I think it's better to use Optional.ofNullable(includeNulls)
I think this should be inside the if block.
I think this should be "equals"
I think we should log the exception here.
I think we should use the same approach as in the other methods in this class.
I think it would be better to use VoltTable.getAll() instead of VoltTable.get()
I think it would be better to use a local variable for the "joblet" parameter.
I think this should be moved to the previous line.
I think this should be a constant.
I think we should use the same name for both test and test runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner runner
I think we should use the constants defined in the Constants class.
This is not needed.
This should be a constant.
I think this should be vungleBanner.getParent()
I think this is a bit strange. I think it would be better to have a single method that takes a List<QuotedString> and then use it in the loop.
I think this should be System.out.println
I think this should be in the onUnusableApp() method.
I think this should be a constant.
This is not a safe way to do this. If you want to do this, you can remove the logging.
I think this should be a parameterized logging statement.
I think this should be a Pattern.compile(regex) method.
@fanifieiev the same above.
please use Collections.singletonList()
I think it would be better to use the same message as the one in the other constructor.
This is not needed.
I think this should be a switch statement.
This should be a constant.
This should be a logger.
I think this should be a constant
I think this should be debug level
@jomarko I think this is a good idea.
This is not needed.
@ivandalbosco why not use Assert.assertEquals here?
I think we should use the StringBuilder here.
log.info("about to recover SD {}", sdUUID);
I think we should use the constant KEY_TYPE instead of KEY_TYPE.
please use static import for all of the methods
I think this should be a WARN instead of an ERROR.
I think this should be a GrieferBridge, not a GrieferBridge.
I think this should be a try-with-resources block.
This is a bit strange. I think it would be better to use a Set instead of a List.
I think we should use the new MemoryPool(RESERVED_POOL, MemoryPool.class) to avoid the need for the new MemoryPool.
This should be a StringBuilder.
Please use assertThat(azkabanObj1, is(azkabanObj1))
This should be a boolean
remove this line
I think this should be externalResourceUtils.getExternalResourceConfigMap(getFlinkConfiguration(), ExternalResourceConstants.EXTERNAL_RESOURCE_KUBERNETES_CONFIG_KEY_SUFFIX)
This is a bit hard to read. Can we make it a static method?
I think we should add a check for the size of fileUpload.size() > 0 to avoid the NPE.
This is a good candidate for a method to get the storage and return the storage.
This is not a good idea. You can use a stream and then collect the list.
I think it would be better to use a LinkedHashSet here.
nit: I think we can remove the _groupByColumns variable and just return _groupByColumns.removeAll(
@exper0 let's use try-with-resources
This is a bit of a very broad way to do this. I think it would be better to just return aliases.get(indexName).get().getAliases();
I think this should be a CountDownLatch
I think we should use the same string as the other string constants.
This is a bit of a nitpicking, but I think it would be better to use the string literal here.
nit: I think we can use the same approach as in LedgerCreateOp.
I think this should be a List<RemoteXBeeDevice>
I think we should have a test for this.
I think we should use the constant here.
This should be a warn
This is a breaking change.
I think this should be synchronized
I think we should use the same approach as the one in the other class.
I think this should be removed.
I think this should be result != Result.SUCCESS && result != Result.SUCCESS
I think this should be a constant
I think you can use the same approach as in the other methods.
I think this should be a stream instead of a collect.
I think this is not needed.
I think this should be a warn instead of an error.
I think this should be in the first line.
This is not needed.
I think this should be in the properties file.
I think we should log the index name here.
I think this should be a list of deleted records.
This should be a switch statement.
I think this is a bit too complicated. Maybe we could use a StringBuilder instead?
I think we should use the new Accessor<Boolean> here.
Extract the building of the ResponseMessage to it's own variable (in eclipse, select the text, right-click > refactor > extract local variable / select code + shift+alt+L). This will make the code a bit more readable, especially when you'll be passing in other things besides the ResponseMessage.
I think this should be setStepRegistry(jobRegistry)
nit: can we make this a constant?
I think it would be better to use the constants defined in the Constants class.
I think this is not necessary.
rename to type
I think we should use the style.isVariableHeight() here.
I think this is a bit too long. Maybe we can use a regex to get the first match?
I think this should be moved to the previous line.
I think this is a bit strange to have a single return statement.
I think this should be a runtime exception.
I think this should be splitServerConfig("[2001:db8:85a3:14d3:14d3:14d3:14d3:14d3:370:7348]:443", 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
I think we should use the same approach as in the other tests.
I think this should be a loop.
I think this should be a fail() call.
I think we should log the exception here.
I think it would be better to use the same error message as the one above.
This is not needed.
I think this should be a warning instead of an error.
I think we should log the message too.
I think this is not needed.
This is not necessary. You can use Collections.singletonList()
This is a bit hard to read. Can we use a lambda here?
This is not needed.
waitForElementByCss() is not necessary
This should be a constant.
This is a breaking change.
I think this should be a switch statement.
This is not necessary.
return apiVer.equals(apiVer) || !apiVer.equals(apiVer)
I think this should be a constant
Why is this needed?
This should be apolloFlag.equalsIgnoreCase(apolloFlag)
I think this should be a WARN instead of an ERROR.
I think we should use the same approach as in the other constructor.
I think this should be removed
I think this should be a constant.
I think this should be synchronized.
This is a good idea. You can use WorkspaceDao.get(workspaceId) instead of calling toString() on a String.
I think this should be error
I think it would be better to use IntPair.of(k, k+x) here.
nit: I think we can use the same port as the one above.
I think this should be a while loop.
I think we should use the constants defined in the Constants file.
I think we should use the same naming as the other naming convention.
I think this should be a constant.
remove this line
This is a bit hard to read. Can we make it a static method?
rename to descriptor
this is not needed
nit: I think we can use the same approach as in LeaderPingResult.
I think this should be done in the UI thread.
nit: you can use the new Values(sum) method
Why not assertTrue(responses).hasSize(1);
I think this should be a ternary operator.
This is not needed.
This is a bit strange. I think we should have a single statement for the first statement.
This is a bit hard to read. Can we use a switch statement here?
Why is this needed?
I think this message should be "Rule not found: %s"
I think this should be a WARN instead of an ERROR.
This should be a warning
I think we should verify that the message is correct.
This should be a logger.error()
I think this should be a try-with-resources block.
I think it would be better to use the constant here.
I think this should be startCondition
I think we should use ctx.isRemote(command.getKey()) here.
I think this should be replaced with a for loop.
I think this should be a &&
This is not a good idea. You can use the parent branch to get the branch name from the parent branch.
I think this is not necessary.
This is not a good idea. You can just use a local variable for the return value.
I think this should be projectService.modifyPermissions(project, projectPermissions );
I think this should be a property, not a property.
I think this should be a constant.
I think this should be: if (value == null) { return this; }
I think this should be a WARN instead of an ERROR.
I think this should be a Flux.sleep(numRead)
I think we should log the error here.
I think we should add the new method to the new method in the new class.
I think we should use the same LocaleContextHolder.getInstance() instead of the LocaleContextHolder.getLocale()
Shouldn't this be set to null?
This is not a debug statement.
I think we should use a different name for the two different things.
I think this should be a warn
I think this should be a warn instead of an error.
I think this should be editor.typeTextIntoEditor(Keys.ENTER).
I think this should be a WARN instead of an ERROR.
I think this should be named something like countQuery.
I think this should be a warn
I would prefer to use the constant for the test data.
I think this should be a warning.
This is a bit confusing. I think it would be better to use a for-loop instead of a for-loop.
I think this should be a WARN instead of an ERROR.
I think this should be a warning
Shouldn't this be entry.setEmail(null); ?
I think this should be a while loop.
I think this should be a switch statement.
I think we should use the service name here.
I think this should be a WARN instead of an ERROR.
I think this should be a WARN instead of an ERROR.
This should be a WARN instead of an ERROR.
I think this should be synchronized
I think we should use the same URL as the one in ResourceUrl.
I think this should be private
This is a bit hard to read. Can you please use a StringBuilder instead?
please use the same formatting as the rest of the file
I think you can use sourceControlList.addAll(sourceControlList) here.
I think this should be a constant.
I think this should be removed.
I think this should be a constant
I think we should use the Map interface here.
I think this should be done in the constructor instead of here.
I think this is not needed.
This is a bit hard to read. I think it would be better to use a regex instead of a regular expression.
I think this should be a Map<Data, Data>
you can use getVdsGroupId()
I think this should be a field of the class, not a field.
Please use Collections.singletonList()
minor: can you use StringBuilder instead of StringBuilder?
I think this should be a constant
Please use a temporary file for the test.
System.out.println("Currently on Drugs " + cohortDefinition + " is not needed.
I think this should be moved to the top of the class.
I think this is a bit too long.
I think you can use the junit assertion here.
I think this should be "IBM POWER 8E"
I think we should have a null check here.
Why not just use the constructor directly?
I think we should use the try-with-resources pattern here.
This should be a static method.
I think this should be a try-with-resources block.
This is a bit confusing. I think it would be better to just return the result of the method.
This is a bit hard to read. I think it would be better to use the constant for the header header.
This is not necessary. The table is already loaded in the table.
I think this is a bit hard to read. How about adding a method to the Indexer that takes a List<Indexer> and then using that instead?
I think this should be a constant.
I think we should use the logger here.
This is not a test, but it should be a different test.
This should be a warn instead of info.
I think this should be a constant.
This is not necessary.
I think this should be a warn instead of an error.
rename to step
This is not necessary.
@ivandalbosco why not use assertThat(programState.getValue(0)).isEqualTo(sv); ?
This is not a good idea. The caller of this method is responsible for checking for null.
This is not a good idea. We should be able to use the same approach as the one in the other PR.
I think we should use the same approach as in the other methods in this class.
This is not needed.
I think this should be a separate test case.
I think this should be warn
I think we should log the exception here.
@vilchik-elena Why not use the same approach as in the other methods?
I think this should be a List<String>
I think this should be a WARN instead of an ERROR.
I think this is not needed.
I think we should add a check for null here.
This is not needed.
Why are you using the new location here?
Why is this needed?
I think we should use the old method here.
Account.ACCOUNT_ID_SYSTEM
nit: you can use assertNull(channel.finish());
I think we should use StringUtils.isEmpty() here.
This is not a good idea. You can use a == null || a.getState() == State.UNSET.
I think this should be a try-with-resources.
This is a bit hard to read. I think it would be better to use the EntityRef object from the EntityRef object instead of the EntityRef.
The same question as above.
I think it would be better to use a lambda here.
Should this be configurable?
I think this should be a method on PlayerToggleFlightEvent
I think this should be a constant
This should be return authentication != null && authentication instanceof AnonymousAuthenticationToken;
I think this should be a logger.
I think we should use the constants defined in the Constants class.
This is a bit confusing. I think it would be better to use a switch statement here.
This is not necessary.
I think this should be a constant
I think it would be better to move this to a separate method, so that it is more readable.
I think this is a bit too complicated. We can use a lambda here.
I think we should use the state state here instead of the state.
I think this is a bit too complicated. Maybe we could extract a method to reduce duplication?
log.info("afterBegin called");
This should be a constant
This is a bit confusing. I think it would be better to have a single constructor that takes a Supplier<ServerConfiguration> and then call that method.
I think this should be synchronized
Why not just use the File object here?
This is a bit hard to read. Can you please extract a method to reduce duplication?
I think we should use the same approach as in the other classes.
I think this should be a WARN instead of an ERROR.
@dalifreire why you need to change this?
I think we should also check that the state is RUNNING.
I think this should be a WARN instead of an ERROR.
This should be a field of LeaderElector
I think we should log the exception here.
I think this should be called only once, and not in the constructor.
please use ObjectUtils.objectsEqual()
I think this should be a WARN instead of an ERROR.
I think this should be in the onPostExecute method.
This should be a logger.error()
nit: can we use assertThat(inputStream.read(), "Reader client id not provided", e.getErrorCode());
Shouldn't this be a constant?
I think this should be a ModelNode instead of a String.
This is not necessary.
I think this should be a try-with-resources block.
This is not a good idea. You can use a custom exception handler to handle it.
I think this should be a WARN instead of an ERROR.
nit: put on the next line
I think this should be a constant.
@vilchik-elena Why not use the constant in the message?
minor: can be replaced with Collections.singletonList(new ConcurrentHashMap<>(clusterMap.getReplicaIds(currentNode))
Can we use a more descriptive name?
I think this should be a field, not a field.
I think this should be a String instead of a String.
I think we should use a different method for this.
I think this should be a Set, not a Set.
moveToElement(mapFrame)
I think this should be a Set<PartitionId>
Why is this needed?
This is a bit confusing. I think it's better to use ImmutableSet.of(Stream)
I think this should be a warning
I think this should be a constant.
This is not a valid account.
return null;
This should be a static method.
I think this should be a constant.
I think this should be in the else clause.
This is a breaking change.
I think this should be a static method.
This is a bit confusing. I think it's better to use a Set<Descriptor> to get the descriptor.
This is a bit hard to read. Can you please extract a method for the coordinates?
Why do we need this?
I think this should be a warning.
assertThat(transactionEvents.get(0).getStatus(), is(expectedStatus));
nit: you can use the static import for the method above
I think this should be a URI.
This is a bit hard to read. Can we extract a method to a common method?
I think this should be a separate method, not a new one.
This is not needed.
This is not needed.
This is a bit strange. I think it should be:  java if (args.length == 0) { return false; } else if (args.length == 0) { return false; }
Why do we need to close the futureWorlds?
This should be a constant.
I think this should be a constant.
I think it would be better to use Optional.ofNullable(getUserId())
Please use a constant for "restart_host"
Why not use assertEquals here?
I think we should add a check for null here.
I think this should be removed
I think this should be in the else block.
Why do we need to subscribe here?
I think this should be a switch statement.
This should be a constant.
I think this is a bit too complicated. I think it would be better to have a method reference.
I think this should be in the addRequestParameter method.
This should be a WARN instead of an ERROR.
I think this should be a long
This is a bit confusing. I think it would be better to use the same name for all the places where we have a single file.
I think this should be a constant.
I think this should be invokeSource.equals(InvokeSource.WIDGET)
I think this should be a warn instead of an error.
I think this should be a warning
I think this should be a constant.
I think we should use the expected value here.
nit: use assertThat(query(...)).hasOnly(row(1) instead of containsOnly(...)
This should be config.getBoolean("autoteleportenabled", false);
This should be a constant.
nit: I think this is a bit strange to have a check for the entry count, since it's a private method.
I think this should be a WARN instead of an ERROR.
I think this should be a Set, not a Set.
This is a bit of a hack, but I think it would be better to use the File object instead of the File object.
I think this should be errorBody()
I think we should log the exception here.
This is not necessary.
This is a bit confusing. I think we should have a check for mQuickStartAdapter != null and mQuickStartAdapter != null.
I think this should be a Map<String, List<String, List<String, List<String, List<String, List<String>>
I think this should be a constant.
This should be a Log.e instead of printStackTrace.
I think this is not needed.
I think you can use the Map<String, String> here.
Shouldn't this be externalized?
why is this needed?
This is not necessary.
I think we should also check that the blobInfoCallback is not null.
I think we should log the exception here.
I think we should also test the case where the connection is not connected.
I think this should be removed.
I think this should be a warning.
please use runVdsCommand(VDSCommandType.HSMGetStorageDomainsList, parameters)
I think this should be moved to the super class.
You can use the new SimpleDateFormat(DateTimeUtils.formatDateRange(ULocale.getDefault(), TimeZone.getDefault(), TimeZone.getDefault(), TimeZone.getDefault(), TimeZone.getDefault(), TimeZone.getDefault(), TimeZone.getDefault(), TimeZone.getDefault(), TimeZone.getDefault(), TimeZone.getDefault(), TimeZone.getDefault(), TimeZone.getDefault(), TimeZone.getDefault()));
WakeLock.DEFAULT_TAG.equals(tag) is a better fit here.
I think this should be a warn instead of an error.
I think this should be a Precondition.checkState() call.
This is a bit hard to read. Can we just use the default value?
Why not just use the diamond operator?
Why not use the diamond operator?
I think we should throw an exception here.
This is a bit of a nitpicky, but I think it would be better to use a ternary operator here.
I think this should be a Map<String, Object>
Why do we need to create a list here?
I think this should be a constant.
This test is not correct. The zone is not set in the zone.
I think we should check that the service is not null before calling this method.
I think this is a bit too complicated. It seems like it would be more readable if you just write the header in the write method.
This is not necessary.
I think this should be error
This test is not testing anything.
I think it's better to use a constant for "Magic Guard".
This is not correct. You can't just return false.
This test is not testing anything.
This is a bit of a duplicate of the code in the previous file. Can we extract it to a method?
nit: you can use ImmutableList.of(1)
This is not a good idea. You can use a lambda here.
This is a bit confusing. You can't do this. You can just return null.
rename to key
I think you can use the styleClass == null && styleClass == null
This should be "Optaplanner"
I think this should be setLogLevel(generalConfig.getValue())
This should be "true".equals(distribute)
This is a bit hard to read. Can we use a switch statement here?
I think this should be synchronized
This is not a good idea. You can use Boolean.parseBoolean(state.get("ScoreBoard.StatsLocked")).
I think this should be a try-with-resources.
I think this should be a WARN instead of an ERROR.
I think this is a bit too much. Maybe we can use the interface directly?
I think this should be removed
Would be better to use Waaaas!
I think this should be a constant
This is not a good idea. You can use a specific exception type.
I think we should use the new method here instead of the old one.
Why is this needed?
I think we should use org.apache.commons.lang.StringUtils.isEmpty(String) here.
I think we should log the exception here.
This is not a good idea. You can use Objects.equals(obj, other.getTokenValue())
I think this should be a WARN instead of an ERROR.
I think this is a bit too complicated. I think it would be better to have a method like isNestedIfStatement(IfStatementTree condition) that returns true if the condition is true.
I think this should be a warning.
I think we should use StandardCharsets.UTF_8 here.
I think this should be a try-with-resources block.
This is not needed.
Why do we need this?
I think this is a bit too long.
return getHostAddress() != null && getHostAddress() != null
I think this should be a WARN instead of an ERROR.
I think this should be removed
I think this should be a shutdown()
This is not correct. The schema is not a RealmObjectSchema.
I think we should use the same name as the old one.
I think we should log the exception here.
why do we need to pass the segment name here?
This is not necessary. The user can't set the username and password.
assertFalse(presenter.hasDraggableComponent(Group1LayoutComponentPaletteGroupProvider.ID, Group2LayoutComponentPaletteGroupProvider.ID));
I think we should close the connectionSupplier in a finally block.
Shouldn't this be "refreshIntervalString"?
This is a bit hard to read. How about using a lambda?
rename to function
Please use parameterized logging instead of string concatenation.
I think this should be assertEquals(expected, actual)
I think this should be a WARN instead of an ERROR.
I think this should be a constant.
I think this should be inside the if block.
I think we should use the new method to render the new line segment.
This is not a good idea.
nit: this could be a static method
I think this is a bit too long.
I think we should use the constant here.
I think this should be Optional.ofNullable(whereToAdvertiseEndpoint)
Please use Objects.hash()
I think this should be a WARN instead of an ERROR.
This should be a static method.
I think this should be done in the super class.
This is not a good idea. You can use a for loop here.
I think we should throw an exception here.
This should be a boolean
I think this should be moved to the stopGlusterServices method.
Why do we need to clear the temp properties here?
I think this should be removed.
Why is this necessary?
I think we should use the same name for both the two variables.
I think this is a bit too long. Can we just use a lambda here?
why do you need to pass the validTo to the constructor?
Why not just use ts.onNext(1, 5)?
I think this should be package private.
I think this should be a WARN instead of an ERROR.
IgniteFeatures.MVCC_TX_RECOVERY_PROTOCOL_V2
This should be List<String> list = new ArrayList<>();
I think this is not needed.
This should be a WARN instead of an ERROR.
I think this should be a directory.
Can we use assertEquals here?
I think this should be in the constructor
This is a bit weird. I think it should be a boolean.
I think this should be a WARN instead of an ERROR.
I think this should be "Did not expect an element"
Please use the same naming as the other methods.
I think this should be a StringBuilder
I think this should be moved to the top of the method.
I think this should be a List instead of a List.
I think we should throw the exception here.
I think this should be private.
I think we should use a switch statement here.
I think this should be a warning.
I think this should be a separate method, since it's a lot of code duplication.
I think this should be a SetResponse instead of a SetResponse.
This is a breaking change.
This is a bit hard to read. Can we extract a method to extract the precision?
I think this should be a try-with-resources.
I think this should be a static method.
I think this should be a while loop.
I think we should log the error here.
this.
This is not needed.
This is not needed.
This is a bit confusing. I think it would be better to have a method called handleNonTxWriteCommand(command) that returns the command.
Why do we need to check for the path here?
I think it would be better to use the new ExecuteWhenDoneYielder<OutType>(seq.toYielder(initValSupplier, accumulator), effect, exec);
I think this should be synchronized
I think this should be a runtime exception.
nit: I think we can just return new IdentityHashMap<>();
Use Logger.error() instead of printStackTrace()
This should be removed.
I think this is a bit strange. What if the index is a hash of a non-empty array?
This is not necessary.
This is not a valid password.
This is not necessary.
How about using a constant for "entitlements/"?
I think we should use a different version than the one in the test.
I think we should log the exception here.
I think this should be synchronized.
This is not a good idea. You can use a StringBuilder instead of a String.
I think this should be assertEquals(1, p.getResult().message(), p.getResult().message());
Shouldn't this be a WARN?
This is not necessary. The dataset() method is already doing this.
I think this should be a Task<Void>
This is a bit confusing. I think it should be a boolean.
I think this should be a WARN instead of an ERROR.
I think you can use the diamond operator here.
I think this should be:  java if (channel.getClusterName() != null && !channel.getClusterName() != null && !channel.getClusterName() != null && !clusterName.equals(channel.getClusterName())) {
This test is not testing anything. You can use assertThat(adapter.listLocations()).isEmpty()
This is not a good idea. You should use a logger.
This is a bit hard to read. Can we make it a static variable?
I think this should be a warn instead of an error.
This is not necessary.
I think we should check componentInfo != null here.
This should be a logger.error()
I think we should throw an IllegalArgumentException here.
Why not just use the InputStream directly?
This should be a constant
This is a bit hard to read. Can we just use the config object?
I think we should return an empty map here.
This is not needed.
rename to column
This is not needed.
I think you can use a for loop here.
This is a bit hard to read. Can you please extract a method to reduce duplication?
I think this should be private
This is a bit hard to read. I think it would be better to use a StringBuilder instead of a StringBuilder.
I think this should be a WARN instead of an ERROR.
This should be a long
This should be a more specific exception.
This method should be private.
why not use runVdsCommand()?
I think we should add a check for count == 0 here.
Shouldn't this be List<String>?
This is not necessary. The delete() method already checks if the uploaded file exists.
This should be a constant
I think this should be a method on the AnalysisPropertyDto
I think this is a bit too long. Maybe we can use String.format() instead?
I think this should be moved to the previous line.
please use static imports
This is a good idea. You can use the try-with-resource pattern here.
I think this is not needed.
I think this should be a constant.
This is not a good idea. You can use a query to get the query and pass it to the query.
Why is this method static?
Why do we need to stop the Hawkualr Monitor service?
I think this should be a @Test(expected = MyException.class)
This is not a supported API.
I think this should be "else if"
Why is this method public?
I think we should use the constant here.
This is not correct. You can use the Objects.equals() method.
nit: this can be a lambda
This is not needed.
I think this should be moved to the onPostDelayed method.
I think this should be debug
I think this should be a warn instead of an error.
I think we should use the same approach as in the other builder.
I think we should use the same approach as in the other filters.
I think we should use FirebaseArray.OnChangedListener here.
I think this should be debug level
I think this should be a warn instead of an error.
This should be a constant.
This is a breaking change.
I think you can use the static import for the assertEquals method.
I think we should log the exception here.
I think this is a bit too long. Can we have a method for this?
This is not a good idea.
I think this should be a WARN instead of an ERROR.
I think this should be a field of the owner, not a field.
I think this should be done in the constructor.
I think we should use the same approach as in the other methods.
I think we should also check that the participant is not null here.
Can you use a mocked one?
I think this should be package-private.
This is not needed.
Should be "return "";"
I think this should be in the writeObject method.
I think we should use the same name as the other variable name
I think it would be better to use the VmTemplateMapper.getUsbPolicyOnUpdate(incoming, params) method to get the VmTemplate object.
I think this should be a Map<String, Object>
I think this should be List<Object>
I think this should be warn(message, ex)
I think this is a bit too long. Can we just use partitionPageBuilder.isFull() here?
I think this should be a WARN instead of an ERROR.
I think we should check the methodTree.body() first, and check if it's a method.
I think this should be a constant.
nit: I think we can remove the assertEngineCompatibility check.
Can we use UnsupportedOperationException here?
I think this should be a try-with-resources block.
I think we should use java.util.ToStringBuilder here.
I think this should be a debug log.
I think this is a bit too long. Can we just use the default charset?
I think we should check that the oaf object is not null here.
This is not needed.
I think this should be a static method.
I think this should be a Set, not a Set.
nit: I think we can use the same approach as in the other stream api.
I think this should be <=
@vilchik-elena Why not use the constant here?
This is a bit hard to read. Can we extract a method to avoid duplication?
This is not needed.
@kujtimiihoxha I think this should be logged at the info level.
I think this should be clientBuilder.new(servers.get(0).getPort())
I think you can use a foreach loop here.
I think we should use the path matcher here.
I think we should add a check that the challengeFuture is not null.
I think this should be removed.
I think this should be a POST.
You can use try-with-resources here.
I think we should throw an exception here.
This is not a good idea. You can use the same value as the one used in RouterConfig.
This is not a valid descriptor type.
I think this should be a separate method.
I think this should be removed.
I think we should use the same exception message as in the other places.
I think this should be a constant.
I think this should be removed.
I think this should be a warning.
I think we should use the same name as the method name.
I think this should be synchronized
This is not correct. You should be able to use the index index to get the index index.
I think we should add a check for the offset here.
You can use a for loop here.
nit: this.clusterName = clusterName;
I think we should use the super.setVisible(visible); here.
I think we should add a check for the operator type here.
I think this should be a WARN instead of an ERROR.
I think we should verify that the consumer is not null.
I think it would be better to use a LinkedHashMap here.
This should be a warning.
I think this is not necessary.
I think this is not necessary.
This is a good candidate for a method to create a temp directory.
The test is failing on this line.
This is a bit hard to read. Can we make it a static final constant?
I think this should be a switch statement.
I think you can use the Objects.equals() here.
This is not a good idea. You can use the same code as the one in NettyServerCnxnFactory.
This is not needed.
Why not just use the new HibernateDomainExporter(folder.getPath(), origRoot.getAbsolutePath()); ?
I think this should be Entity.class.getName()
I think this should be a constant.
I think this should be Jenkins.getActiveInstance().checkPermission(Jenkins.ADMINISTER)
This is not a Java class, so you can use the Java 8 syntax syntax here.
Please use parameterized logging instead of string concatenation.
I think we should add a check for errorHandlerAttr.isEmpty() here.
I think this should be a warning.
I think we should use Executor.getExecutor() here.
remove this line
I think this should be a switch statement.
This is a bit of a very broad way to do this. I think it would be better to just do something like:  try { index.drop(); } catch (IOException e) { e.addSuppressed( closeException ); }
This is not needed.
I think this should be debug level
I think we should use the new method verify(SignatureAlgorithm algorithm, byte[] signature, signature, context) here.
please use diamond operator
This is a breaking change.
I think this should be done in the backend.runInternalQuery()
I think this should be a WARN instead of an ERROR.
I think this should be a StringBuilder, not a String.
This is not a good idea. You can use a function like this:  java String password = mUsernameET.getText().toString().trim(); if (password == AlertDialog.BUTTON_POSITIVE) { dialog.dismiss(); } else { dialog.dismiss(); }
I think this should be moved to the DtoFactory.
I think you can use the same approach as in the other methods.
This is a bit hard to read. I think it would be better to use the builder.append(",", "auth-server-url=").append(realm.getName()).append(realm.getName()).append(realm.getName()).append(realm.getName()).append(keycloak/secure-deployment=").append(keycloak/secure-deployment=").append(keycloak/secure-deployment=").append(keycloak/secure-deployment=").append(keycloak/secure-deployment=").append(keycloak/secure-deployment=").append(keycloak/secure-deployment=").append(keycloak/secure-deployment=").append(keycloak/secure-deployment=").append(keycloak/secure-deployment=").append(keycloak/secure-deployment=").append(keycloak/secure-deployment=").append(keycloak/secure-deployment=").append(keycloak/secure-deployment=").append(keycloak/secure-deployment=").append(keycloak/secure-deployment=").append(keycloak/secure-deployment=").append(keycloak/secure-deployment=").append(keycloak/secure-deployment=").append(keycloak/secure-deployment=").append(keycloak/secure-deployment=").append(keycloak/secure-deployment=").append(keycloak/secure-deployment=").append(keycloak/secure-deployment=").append(keycloak/secure-deployment=").append(keycloak/secure-deployment=").append(keycloak/secure-deployment=").append(keycloak/secure-deployment=").append(keycloak/secure-deployment=").append(keycloak/secure-deployment=").append(keycloak/secure-deployment=").append(keycloak/secure-deployment=").append(keycloak/secure-deployment=").append(keycloak/secure-deployment=").append(keycloak/secure-deployment=").append(keycloak/secure-deployment=").append(keycloak/secure-deployment=").append(keycloak/secure-deployment=").append(keycloak/secure-deployment=").append(keycloak/secure-deployment=").append(keycloak/secure-deployment=").
I think this is a bit more readable: java return name.contains(String.valueOf(illegalChar));
please use formatter
I think this should be a constant.
I think we should use a CountDownLatch here.
This is not correct. You can use Objects.equals(myName, that.myName)
This is a good idea. You can use the blobManager.readBlob(blobInfo, getRepositoryName()) method to get the fulltext and the blob manager.
This should be a separate PR.
This is not needed.
I think this is not needed.
please use injection instead of injecting it here
I think this should be done in the constructor.
I think we should add a check for null here.
I think we should use the new method here.
I think this should be moved to the top of the method.
This should be a singleton.
I think this should be a constant
I think it would be better to use the same method as the other one.
I think this should be a lambda
This should be a constant.
I think this should be called before the call to super.init()
I think this should be in the if (ctx.getIncludeInContextRegexs() != null && !ctx.getIncludeInContextRegexs().isEmpty()) {
I think this should be a Comparator.comparing(Method::getReturnType).
I think this should be a warning.
This is a bit hard to read. Can we make this a method in the base class?
I think this should be in the test.
This is a bit strange. I think it would be better to have a single check for the folder and check if it exists.
I think we should check the errorCollector.checkThat(errorCollector.checkThat("123", equalTo("123"))
This is not necessary.
I think we should use the same name as the previous one.
I think we should use a StringBuilder here.
I think it would be better to move this into the try block.
I think this should be a filter instead of a filter.
This is not a good idea. You can use the same approach as the one in the other class.
remove
I think this should be called event.putInt(barcode.format)
I think this is not needed.
This should be debug
I think this should be setHashName("templates")
I think we should add a check for the error here.
I think you should use the new File("src/test/resources/oas3.yaml.template")
This is a bit confusing. I think it would be better to throw an exception instead of returning null.
This is not necessary.
This is not a good idea. You can use a logger.
I think this should be a constant.
Why do we need to close the operatorImplGraph?
I think this should be a WARN instead of an ERROR.
This is not needed.
I think this should be a while loop.
I think it would be better to use StringPoolPool.getPool()
This should be a lambda.
I think this should be a constant.
This should be a constant
I think this should be a constant.
This is a bit confusing. I think it would be better to throw an exception here.
I think it would be better to use MoreObjects.toStringHelper() here.
I think it would be better to use Workspace.getRoot().getProject(projectName) instead of "project"
close() is not needed
I think we should also check the count of the count.
I think this is not needed.
I think this is a bit too complicated. Maybe we could extract a method for getting the definition and then call it from the other methods?
This is not a good idea. You can use a more specific exception type.
I think it would be better to use the same name as the class name.
This is not a good idea. You can use a method on ProgressDialog to show the dialog.
This is a good idea.
I think we should use the same approach as in the RestApiTest.java file.
This is a bit of a nitpicking, but I think we should log the exception as well.
I think this should be setRotationWindows
This is a bit hard to read. Can we make it a static method?
I think this should be a constant.
I think we should use Collections.emptyList() here.
This is a bit of a nit, but I think it would be better to use a switch statement here.
I think we should add a check for null here.
This is not necessary.
I think this should be assertThat( "The group name should have no prefix", is(true));
This should be a WARN instead of an ERROR.
I think this should be part1 instanceof PartIOBit
I think we should use the new constructor here.
@vilchik-elena Why not using BooleanClause.Occur.MUST_NOT?
I think this is a good candidate for a mock.
This is not necessary.
I think it would be better to use the "SearchDto{" + this.searchResultDbId + '}'
This is a bit confusing. I think it should be the default value.
I think this should be a constant.
I think this should be a IllegalArgumentException.
Please use assertEquals(paramsMock.getVdsUniqueId(), containsString("Test_123")) instead of assertEquals(paramsMock.getVdsUniqueId())
I think we should use a Set here.
I think this should be removed.
I think this should be a backup, not a backup.
I think this should be sorted.
I would prefer to use a LinkedHashSet here.
This is a good candidate for a static import.
I think we should use the new method to check for null.
This is not a good idea. You can use the new method to get the timezone.
I think this should be a constant.
I think this should be a Set<DiskImage>
I think this should be moved to the try block below.
rename to selection
I think this should be a primitive type.
I think we should use the subscriptionService.deleteSubscription here.
I think this should be a WARN instead of an ERROR.
I think we should throw an exception here.
style nit: no braces around single line blocks
This is not a good idea. You can use the Objects.toStringHelper method.
This is a breaking change.
this.maxSchemaMapSize is not used
I think we should use the same name as the other one.
I think this should be a JobJob, not a Job.
I think this should be a constant.
I think this should be in a @Before method.
I think this should be removed.
This is not needed.
I think this should be config.getString("...").
I think this should be Optional.ofNullable(customConfigurations.get(form.getFormDefinition().getFormId()))
This is a bit hard to read. Can you please extract a method to avoid duplication?
I think this should be a constant.
I think we should throw an exception here.
I think this should be a WARN instead of an ERROR.
I think this should be a WARN instead of an ERROR.
I think we should return here instead of returning true.
I think this should be Integer.MAX_VALUE
nit: can we use the same pattern as above?  java return Optional.ofNullable(committed).orElse(false);
I think this should be a ByteBuf instead of a ByteBuf.
I think this should be "Select an workspace folder to deploy"
I think we should throw an exception here.
I think this should be a synchronized block.
I think we should use the new SSLSupport() method here.
please use injection for VmDeviceUtils
I think we should use the same approach as in the other methods.
I think this is a bit too complicated. Maybe we can use a method in the SchemaUtils?
Can you please use the constant for the path?
I think this should be a constant
I think this is not needed.
I think this should be a WARN instead of an ERROR.
This is a bit confusing. I think it would be better to return true if value is null.
I think we should use the same naming as the other properties.
I think this should be a constant.
This should be a static method.
This should be a constant
I think this should be a List<String>
I think this should be handledType().getDeclaredMethod("valueOf", String.class)
I think this is a bit too long. Maybe we can use a try-with-resources statement here?
Shouldn't this be tentacle == null?
This is a breaking change.
This is a bit hard to read. Can we use a lambda here?
I think this should be a constant.
Can we use a mocked Task here?
I think this should be in a finally block.
This test is not testing the same thing as the one in the previous test.
This is not necessary.
I think this is not needed.
I think this should be a switch statement.
assertNull(fileID, fileID);
I think this should be a part of the if statement.
This should be error
This is not necessary.
This should be a WARN instead of an ERROR.
I think this should be a constant.
I think this should be cacheManager.disposeCache(this);
This should be a warning.
I think this should be error
This should be logged.
I think we should use the new File(file, fileName, createIfNotExist) method to avoid the need for the new File(path, fileName, createIfNotExist)
I think this should be moved to the previous line.
I think this should be done in the UserDTO.
I think we should add a check for the new columnIO.getColumnIO(schema, schema, props.getAllocator(), props.getColumnIndexTruncateLength()); before the constructor.
I think this should be a separate method.
rename to launch
This is a good idea.
I think this should be a WARN instead of an ERROR.
This is not a good idea. You can use a lambda here.
Why is this a public method?
I think this should be in the registerForPushNotifications method.
This is not needed.
Please use GlusterVolumeType.DISTRIBUTED_STRIPE
I think this is a bit too long.
I think it would be better to use GeofenceGeometry.containsPoint(56.8378, 60.6080) here.
This should be a runtime exception.
This is not a good idea.
This is not a good idea. You can use a boolean instead of a boolean.
I think this should be a constant.
I think we should use the same approach as in the other PR.
this is not needed
I think this should be in a finally block.
This should be a try-with-resources block.
I think we should use the same approach as in the other classes.
I think we should use the constants for the values in the event message.
Why not just use a simple for loop?
nit: can't be null
This log message is not correct. The stream should be closed.
I think this should be a List<Type>
I think this should be private.
This is not necessary.
use static import
I think we should use Optional.empty() here.
This is a good candidate for a test.
I think this is not needed.
I think this should be:  if (obj == null) { return false; } return false;  This is a bit more readable.
I think this should be mShowTotalDecklistPrice
Use a logger instead of printStackTrace.
I think this should be done in the jobProperties object instead of here.
I think we should use the same name as the vmStatus.
I think we should use the same order as the previous one.
This is not correct. The domain is not a domain.
Shouldn't this be a field?
This is a bit hard to read. Can you please extract a method to avoid duplication?
This is not necessary.
I think this should be a warning
I think this should be synchronized
This is a very good place to do this.
I think this is a bit too long. Can we just use the default values for the default values?
This is a bit hard to read. Can you please explain why it was changed?
I think this should be a warning
Shouldn't this be discrepancy?
I think this is a bit too long. Maybe we can use a switch statement here?
This is not correct. You can use workspace.getId() instead of workspace.getId()
I think this is a bit too complicated. Maybe we can just return ProjectType.Type.valueOf(type.getLanguagePlugin().isExerciseTypeCorrect(path) here?
I think it would be better to use a callback here instead of a callback.
This is a bit strange. I think it would be better to use a StringBuilder instead of a StringBuilder.
I think we should use the same approach as in the other methods.
I think this should be a constant
Why is this needed?
This is not necessary.
I think we should use a Set here.
I think we should log the target class name too.
I think this should be a long instead of a Long.
Please use assertEquals(diff, diff.getState());
Please use Assert.assertEquals(page.getConfigFragment().edit().text(ACTIVE_REQUESTS), value.stringValue());
This is not needed.
Shouldn't this be "THE_ROW"?
Shouldn't this be in the field declaration?
Why do we need this change?
This should be a WARN instead of an ERROR.
I think you can use the traceItem.getNode() here.
I think it would be better to use Command.getAction() instead of String.
I think this should be a fail() call.
I think we should throw the exception here.
This is not necessary.
This is not correct. You can use the new String() method.
This is a debug statement.
I think this should be a WARN instead of an ERROR.
This is a breaking change.
I think this should be a try-with-resources.
This is not needed.
This is not needed.
This is a bit strange. I think it should be a NumberFormatException.
I think we should use a try-with-resources here.
This should be a constant.
I think this should be a RuntimeException
This is a bit confusing. I think it would be better to have a method that takes a parameter and returns a boolean.
This is not a good idea.
I think this should be inside the onAdFailedToLoad() method.
This is a bit hard to read. Can we use a query query instead?
I think this should be a string.
I think we should use a logger here.
I think this should be removed.
I think this should be externalUserPassword.
I think this should be a WARN instead of an ERROR.
I think we should check the callExpression.calleeSymbol() here.
This should be a constant.
You can use the same code as in the other methods.
This is a bit hard to read. I think it would be better to use the same approach as the one in the other class.
I think we should use the constant for "engine-db-engine.properties"
I think this should be set to null, and not set to null.
I think we should log the exception here.
I think we should use the new TemporaryFolder here.
This is not a good idea. You can use a for loop here.
I think we should also check if the entry is transactional and not for the remote node.
I think this should be a Set, not a Set.
I think this should be a warn instead of info.
I think this should be moved to the presenter.
I think this is not needed.
I think this should be removed.
I think it would be better to create a method in SecurityAuthConfig that takes a User and then call the method from here.
I think we should also check the expected value of the expected value.
This should be a valid(Supplier<? extends T>)
This is not correct. You can use the constant for the key and value.
This is not a good idea. You can use the new ArrayList<>(batchParameterValues) method.
I think this should be a warn instead of an error.
I think this should be a WARN instead of an ERROR.
You can use the new ArrayList<>(client.getAllSessionVariables().size())
I think this should be a ProjectState.
This is a bit hard to read. Can we use a simple for loop?
This is a bit hard to read. Can you please extract a method to avoid duplication?
I think this should be a method reference.
This should be a more specific exception.
I think we should log the exception here.
This is a bit hard to read. How about:  if (isUnavailable(sizeInGB >= 1) || (isUnavailable(sizeInGB) < 0) || (isUnavailable(sizeInGB) < 1) || (isUnavailable(sizeInGB) < 1) || (isUnavailable(sizeInGB) < 1)) { return (isUnavailable(sizeInGB >= 1) ? Double.valueOf(sizeInGB) + " GB" : "<1 GB"); } return format(sizeInGigabytes(sizeIn
This is a bit confusing. I think it would be better to return an empty list instead of null.
I think this should be a warning
This is not necessary. The test will fail if the transaction is not released.
I think this should be sorted.size() - 1.
rename to signature
I think this should be package-private.
This should be a static method.
I think this is a bit too complicated. It's not a good idea to have a flag for the flag.
I think this should be logged at the error level.
You can use CollectionUtils.isNotEmpty()
I think this should be a static method.
I think this should be assertSame(i1, i2);
This is not a good idea. You can use the same approach as the one in the other class.
I think this should be a PigType.
Why not just use the builder?
This is a bit hard to read. Can we use a StringBuilder instead?
This should be a more specific exception.
This should be a constant.
This is a bit confusing. I think it would be better to have a single log message for the error.
@vilchik-elena Why not use assertThat(toRemove, hasItems(1), hasItems(4))?
This is not necessary. You can use assertEquals(expected, actual)
You can use the ITmfTimestamp object directly instead of the local variable.
I think this should be a constant.
I think this should be a WARN instead of an ERROR.
This is a bit of a nitpicky, but I think we should use the same approach as in the other classes.
I think this should be a constant.
I think this should be a command line, not a command line.
This is a good candidate for a method to get the account type from the AccountProvider.
I think we should throw UnsupportedOperationException here.
I would prefer to use a constant for "a"
I think we should use the SiteModel here instead of the site variable.
I think this should be a RuntimeException
nit: can we add a check to ensure that checkpointId is not null?
I think this is not needed.
This is a bit confusing. I think it would be better to have a single IndexSpec constructor that takes a IndexSpec and then call the IndexSpec constructor.
I think we should add a null check here.
This is a bit hard to read. How about using a switch statement instead?
I think this should be moved to the onResume() method.
This is a bit confusing. I think it would be better to have a single log statement for the case.
I think we should check that the first child is a non-empty string.
I think this should be a field of the class.
suggestion requireNonNull(sortTypes, "sortTypes is null");
This is not a good idea.
I think this is a bit too complicated. Maybe we should extract a method in the super class?
I think we should use the same approach as in HostUtils.getHostAddress
This should be a constant
I think it would be better to use the ExpectedException rule here.
I think we should use the same name for both KieContainer and KieContainer.
nit: I think it's better to use the old method instead of the old one.
I think this should be private.
This is not necessary.
I think this should be a try-with-resources block.
This is not a good idea. You can use a CountDownLatch instead.
This should be a Log.e call.
this.id is not used
This test is not testing the correct way to test the case where the default value is different.
I think this should be a field of the class.
Please use the super class here.
I think this should be a StringBuffer instead of a StringBuffer.
This is not a good idea. You can use the same package name as the class name.
please use stream api
I think this should be a method on MethodJavaSymbol.
Shouldn't this be countActiveUsers()?
I think this should be a checkArgument
I think this should be a constant.
I think this should be return (result.mStatus.mCode == 0) ? result.mCode : 0;
I think this should be XDMConstants.setTrue(result);
This should be a constant.
I think this should be a fail() call.
I think we should use the same approach as in the other handleExceptClause method.
I think this should be a try-with-resources block.
I think we should use the same pattern as above:  if (originalReset == null || !originalReset.equals("earliest")) {
I think this should be maxRemoteSize != currTotalSize
please use static import
I think this should be mPulseTargets.removeAll(mPulseTargets);
I think we should use the same approach as in the other files.
I think this should be a warn
why not just stream.values() ?
I think this should be replaced with Collections.sort(pubkeys, Collections.sort(pubkeys, new PubKeyComparator()));
I think we should use the same timestamp for both the same timestamp and timestamp.
I think this should be named something like:  java doReturn(nSearchHits(2), any(GetRequestOptions.class));
This should be private.
This is not a good idea. You can use Objects.requireNonNull(id, "id is null, cannot create vertex")
I think we should use the same method in both cases.
Shouldn't this be removed?
I think this should be a constant.
I think this should be removed
This is not necessary.
super() is unnecessary
Please use the same naming convention for variable names.
This should be a static field.
Use try-with-resources
I think this should be a constant
This is not needed.
This is a good idea. You can use the credential.refreshToken() method instead.
I think you should use the JsonSerializationUtils.writeToString(String, String) constructor.
I think this should be a POST_TOTAL_AMOUNT_V1
This is not necessary.
I think we should check if ctx.isOriginLocal() before invoking the command.
@vilchik-elena This method should be private.
This is a breaking change.
I think this should be a WARN instead of an ERROR.
please use injection for VdcBllMessages
I think this should be a LinkedHashSet, not a HashSet.
This is a breaking change.
I think we should use a lambda here
I think this should be a switch statement.
please use runVdsCommand() instead of this method
I think this should be a constant.
This is not a good idea. You can use the project cache instead of a cache.
This is not needed.
I think this should be assertEquals(rankDetails.getMaxOptionsToBeRanked(), is(true));
Please use getStoragePoolId() instead of getStoragePoolId()
Use CommonUtil.openPerspective(String, String) instead.
This is not necessary. The only reason for this is that the recursive call is to return the result of collectPaths(child, result) is that the result is not used.
I think this is not needed.
I think this should be a concurrentHashMap.
This is not a good idea. You can use a Set instead of a List.
I think this should be a constant.
I think this is not necessary. The default value is false by default.
This should be a constant.
I think you can use File.separator here.
nit: this.forceCloseTimeoutMillis = forceCloseTimeoutMillis;
Please use ApplicationMode.APPLICATION_SERVER_MODE constant instead of "app_mode"
This is a bit hard to read. Can we make it a static variable?
This is a bit of a nitpicky, but I think it would be better to use a for loop here.
This is a bit hard to read. Can you please extract a method to avoid duplication?
I think this should be error
This is not a new method.
Add newline before return.
I think this is a bit too complicated. Maybe we can extract a method for this?
I think this should be changed to Jenkins.getInstance().getItemMap().isEmpty()
I think this should be the other way around, since it's a bit confusing to have a different version.
Why is this needed?
This is not a local variable, it should be localVariableDef
I think it would be better to use a switch statement here.
I think this should be a WARN instead of an ERROR.
I think this should be a separate test case.
I think this should be:  java if (value == null) throw new NullPointerException();
Can we use the same byte[] as the key?
I think we should use the offending view here.
This is not needed.
This is not a good idea. You can use a different approach to check if the key is a non-null value.
I think this should be a string resource.
@vilchik-elena Why not just use name?
@dalifreire why you need to start the test here?
I think this should be a constant.
I think this should be a warning.
I think you can use a for-each loop here.
This should be a constant.
I think this is not correct. You can use a StringBuilder here.
I think this should be a class member.
I think this should be a string literal.
I think we should use the same name for the event.
I think we should use the storedTokenHash instead of storedTokenHash.
I think we should use the constant here.
I think we should use the same approach as in the other methods.
Why not just return queue.peek() here?
@vilchik-elena This is not a DmnElementRef.
I think this should be addPartiallyMatchingMilestones(allMilestones, BEST_MATCHING_LIMIT)
I think this should be in a try-with-resources block.
I think this should be a constant.
I think this should be replaced with a call to addAt(expectedContainer, attribute, expectedValue)
This is a very good candidate for a method called initialize(ViewInfoTracker, ViewInfoTracker, ViewInfoTracker, ViewInfoTracker, ViewInfoTracker, ViewInfoTracker, ViewInfoTracker, ViewInfoTracker, ViewInfoTracker, ViewInfoTracker, ViewInfoTracker, ViewInfoTracker, ViewInfoTracker, ViewInfoTracker, ViewInfoTracker, ViewInfoTracker, ViewInfoTracker, ViewInfoTracker, ViewInfoTracker, ViewInfoTracker, ViewInfoTracker, ViewInfoTracker, ViewInfoTracker, ViewInfoTracker, ViewInfoTracker, ViewInfoTracker, ViewInfoTracker, ViewInfoTracker, ViewInfoTracker, ViewInfoTracker, ViewInfoTracker, ViewInfoTracker, ViewInfoTracker, ViewInfoTracker, ViewInfoTracker, ViewInfoTracker, etc.
I think we should use the same exception message here.
I think this should be a Set, not a Set.
I think this should be entry.get()
This is a bit hard to read. I think it would be better to use a StringBuilder instead of a String.
This is a bit hard to read. I think it would be better to use a method reference: java public static boolean findExistingProfiles(List<PagedFile> pagedFiles ) { return pagedFiles.stream() .map(Profile::findProfilesInDirectory, profilesInDirectory, profilesInDirectory, profilesInDirectory, profilesInDirectory, profilesInDirectory, profilesInDirectory, profilesInDirectory, profilesInDirectory, profilesInDirectory, profilesInDirectory, profilesInDirectory, profilesInDirectory, profilesInDirectory, profilesInDirectory, profilesInDirectory, profilesInDirectory, profilesInDirectory, profilesInDirectory, profilesInDirectory, profilesInDirectory, profilesInDirectory, profilesInDirectory, profilesInDirectory, profilesInDirectory, profilesInDirectory, profilesInDirectory, profilesInDirectory, profilesInDirectory, profilesInDirectory ) .distinct() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .sorted() .distinct() .distinct() .distinct() .distinct() .distinct() .distinct() .distinct() .distinct() .distinct() .distinct() .distinct() .distinct() .distinct() .distinct() .distinct() .distinct() .distinct() .distinct() .distinct() .distinct() .distinct() .distinct() .distinct() .distinct() .distinct() .distinct() .distinct() .distinct() .distinct() .distinct() .distinct() .distinct() .distinct() .distinct() .distinct() .distinct() .distinct() .distinct() .distinct() .distinct() .distinct() .distinct() .distinct() .distinct() .distinct() .distinct() .distinct() .distinct() .distinct() .distinct
I think this should be setRepositoryUrl(repository)
Can we use the new method here?
This is a bit hard to read. Can we make it a static final variable?
I think this should be replaced with: failValidation(EngineMessage.CANNOT_PLUG_PASSTHROUGH_VNIC_NO_SUITABLE_VF, String.format("$vnicName %1$s", getInterfaceName()));
I think this should be cachedEnvironment.getRemote(getChannel())
You can use the diamond operator here
Is this sleep necessary?
I think we should remove the path here.
This is not necessary.
I think this is not needed.
I think this should be a try-with-resources.
I think this should be a IllegalArgumentException.
I think this should be a WARN instead of an ERROR.
I think we should throw an exception here.
This is not needed.
I think this should be a constant.
I think we should use the service.submit(request) method here.
I think it would be better to use the bufferUInt32Size method here.
I think this should be a separate test.
I think this should be in the constructor, not in the constructor.
Can we use a latch here?
This should be a static method.
I think this should be in a finally block.
I think this should be a WARN instead of an ERROR.
This is a good candidate for a method to create a directory with a name.
I think this should be a constant.
This should be private.
I think we should use the same approach as in the other methods in this class.
Shouldn't this be the default value?
I think this should be a warning.
I think this should be in the presenter.handlePost() method.
This is not needed.
I think this should be a warning.
I think we should use the same approach as in the other methods in this class.
Please add a checkCanUserSeeProcessInstanceWhenApiReturn(expected); before the call to checkCanUserSeeProcessInstanceWhenApiReturn.
Why not just use the index variable here?
This should be a WARN instead of an ERROR.
I think this should be a guard clause.
This is a bit of a nitpicking, but I think we should move the logic to the top of the function.
I think this should be a constant
I think this should be a try-with-resources block.
@jomarko I think this should be a constant
I think this should be in the constructor.
I think this should be a List<IsotopeContainer>
I think this is a bit too long. Maybe we can use a method in the ElasticsearchSearch class?
I think we should use targetName.trim() here.
I think this should be in a finally block.
I think this should be a warn instead of an error.
this.config = config;
This should be a WARN instead of an ERROR.
This should be removed.
I think this should be inside the if block, otherwise the action will be skipped if the action is not executed.
I think we should make this constructor private.
This is not a good idea. The operation should be done in the OperationContext.
This should be a warn
I think this should be done in the constructor.
I think this should be clobCompatibleCastTargetTypes[i] + "("
I think this should be a WARN instead of an ERROR.
I think this should be debug
This is not necessary.
I think this should be a Set<Allele> not a List<Allele>
I think this is not needed.
I think you can use a logger here.
This is not needed.
I think this should be moved to the previous line.
I think this should be t.getPriority() == 5
I think this should be a warning.
This should be Map<K, V>
This is a bit hard to read. Can you please use a more descriptive name?
This is a good idea. It's a bit hard to read.
I think this should be wrapped in a try-with-resources block.
nit: I think we can use Optional.ofNullable(node.getMaxRowCountPerPartition()) here
This is not correct. You can't do this.
I think this should be a warning
I think we should use the K8sContainerResolver here.
I think this should be removed
I think it would be better to use the VmBase.class.getDeclaredFields() instead of the VmBase.class.getDeclaredFields()
I think this is not needed.
This is a bit confusing. I think it would be better to have a method like isLimitLimit(TableSourceTable.class) that returns true if the tableSourceTable is not a TableSourceTable.
I think this should be a warning instead of an error.
Why not just return null here?
why do you need to pass action.isForce() here?
This is not a good idea. You can use a ChannelChannel.
I think this should be a WARN instead of an ERROR.
I think this should be syncEnvironment()
I think this should be a constant.
I think it would be better to use MoreObjects.toStringHelper() here.
log the exception
I think we should use the same approach as in the other methods.
I think this should be a List<Staff>
This is not a path.
This is not necessary.
I think it would be better to use the diamond operator here.
I think this should be a switch statement.
I think we should use the same constant for the attribute name.
This test is not testing the correct thing. You should check the returned list of deployments.
I think it would be better to use AssertionInfo.assertHasMessageContaining(actual.getMessage(), content)
I think this should be in the finally block.
I think this should be a static method.
I think we should use the same approach as in the other methods.
I think we should check that the message is not null.
I think this is a bit too long.
@bgeVam please use the same constant for all of the tests.
I think we should use the same name for the two cases.
I think this should be configurable.
I think this should be synchronized
This is a bit of a hack. I think we should use the loggerName variable instead of the prefix.
I think it would be better to use the default value here.
This test is not testing anything.
I think this should be a WARN instead of an ERROR.
This is not necessary.
This is not needed.
This test is not testing anything.
This is a bit hard to read. Can we use a try-with-resources pattern here?
I think this should be reverted to the previous version.
I think we should log the exception here.
I think this is not needed.
return Collections.emptyList();
Why do we need to create a new HousekeepingSessionWork here?
@bgeVam please use Collections.singletonList()
This is not needed.
remove
@bgeVam please use tester instead of tester
I think this should be a warning
This is not needed.
This is a good candidate for a method to handle the case where the query is not a query.
Please use the same approach as in HostUtils.
I think this should be in a finally block.
Why not use the new method in HostSetupNetworksParametersBuilder?
I think this should be moved to the ProjectControl.
I think this is not necessary.
I think we should use the same approach as in the JSON parser.
This should be a logger.
This is not necessary.
I think this is not needed.
This is not a good idea. You can use the new ArrayList<>(this.diffs)
I think we should add a handlerMap.containsKey(message.getMsgType()) here.
I think this should be a Map<String, Object>
This is a bit confusing. I think it would be better to have a separate test for the case where the request is not a request.
This test is not testing the same thing as the one in the list.
This is a good idea. You can use FileUtils.deleteRecursive(dir) instead.
I think this is a bit too long. Maybe we can use a StringBuilder instead?
I think this should be a try-with-resources block.
This is a very unfortunate change.
This is not correct. You can use name.lastIndexOf('.')
I think we should use a Set here.
I think this is not needed.
please use StringUtils.isNotEmpty()
I think this should be a constant.
I think this should be a WARN instead of an ERROR.
I think we should also update the status of the status of the transaction.
I think this should be a WARN instead of an ERROR.
nit: you can use node.getOutputSymbols().stream()
I think this should be synchronized
nit: I think we can just use Collections.emptyList() here.
I think this should be a WARN instead of an ERROR.
You can use @Test(expected = IllegalArgumentException.class) to make sure the test is run.
I think we should add a check for the messageTxnId here.
I think we should use a mocked GerritHandler here.
I think we should use the Comparator.comparing(Class::getName) here.
This is a bit hard to read. I think it would be better to use a try-with-resources statement here.
I think we should use a constant for "http".
I think this should be:  if (coverageId == null || coverageId.length() == 0) { return false; }
This is not needed.
Why are you verifying that the server is not running?
Why not just throw new RealmException("Could not map Json", e); ?
I think this should be synchronized
I think this should be assertEquals(String message, Object... message)
I think this should be a WARN instead of an ERROR.
I think we should throw an IllegalArgumentException here.
I think this should be "feedback-copy-modal-status"
This should be a logger.error()
This is a bit confusing. I think we should have a Set<String> keys = new HashSet<>();
I think we should use js.executeScript() here.
I think this should be a WARN instead of an ERROR.
Shouldn't this be a field so we don't have to create one each time?
Should this be a fieldId?
This should be a more specific exception.
@vilchik-elena Why not call checkDuplications(tree) here?
I think this should be a WARN instead of an ERROR.
This is not a good idea. You can use the new method to get the theme.
I think this is a bit too long.
This should be synchronized.
This should be a constant
please use static import
Why is this needed?
I think this should be List<Serializable>
I think we should also verify that the container is actually running.
I think we should use the new function to get the agg function.
I think we should use the same approach as in the other methods.
This is not needed.
@dalifreire why you need to use the same RqFake here?
This is not needed.
rename to child or child or child
I think this should be a comparison comparison.
This test is not testing the same thing as the one in the previous test.
I think we should use the constants for the mime type.
I think we should check that the bitstream is the same as the binary representation of the binary.
I think we should use the new method here instead of the old one.
This is not correct. The RealmResults is not a RealmResults.
I think we should add a check for the value of the parameter to be consistent with the other setter.
Why do we need this change?
I think this should be in the @BeforeClass method.
I think this should be logged as a warning.
please use the super class
I think this should be a Set<String>
I think we should use the same approach as in the other classes.
This is a bit confusing. I think it should be called first and then you can just call it first.
I think this should be a Set<Alias> not a List<Alias>.
I think this should be debug
This is a bit hard to read. Can you please extract a method for this?
I think we should have a test for this.
I think we should make this constructor private.
I think this should be a try-with-resources block.
This is a bit confusing. I think it would be better to use a Set to avoid the extra overhead.
This is not needed.
I think this should be a Set, not a Set.
This is not a good idea. You can use a static import for this.
I think this should be a check if lastExecutedCommand is null.
This is not a good idea. You can use a lambda here.
This is not correct. The URL is not a URL.
This should be error
This should be a static method.
@vilchik-elena Why not just use Collections.sort(names, Matchers.equalTo(expected)) ?
@vilchik-elena Why not use the static import?
I think this is a bit too complicated. Maybe we can use a method to get the path and check if it's a path?
I think we should use the same approach as in the onReceivedHttpAuthRequest method.
nit: you can use assertEquals(1, ...)
This should be a field of the class.
This should be a static method.
I think this should be in the @BeforeClass method
I think this should be a constant.
You should use the same error message here.
I think this should be a separate committed commit.
I think this should be a Double instead of a double.
I think this is a bit too long. Maybe we can use a for loop here?
This test is not necessary.
This is a bit hard to read. Can we make this a method?
I think this should be return recoveryProblems.get();
You can use Collections.singletonMap()
I think this is a bit too much. It's not a big deal, but it's not a big deal, but it's not a big deal, but it's not a big deal.
I think we should use the same name as the one in the class.
I think this should be a WARN instead of an ERROR.
@fanifieiev the same above.
This is a bit confusing. I think it would be better to have a method to create the client and then call it from the client.
I think this should be a part of the 'if' statement.
I think this should be debug
@Override
I think it would be better to use a switch statement here.
I think this should be a stream.
Should this be a constant?
I think this should be "expected"
@vilchik-elena This variable should be renamed to something like "getTermId"
I think this should be a List<BookingStatus>
I think we should use the same approach as in other places.
I think this should be a try-with-resources.
I think this is not necessary.
Please use the constant here.
I think this should be permission / 2
nit: I think this should be "Subqueries, Unions are only supported in the broker"
I think we should use assertFalse here.
This is not needed.
Please use curly braces even for one-line if statements.
I think we should add a null check here.
change to url
I think this should be a fail() call.
nit: you can use input.read(bytes, written, writableBytes());
I think this should be removed
Why is this needed?
This is a bit confusing. I think it would be better to have a test for the case where the test type is not null.
I think we should use the same approach as in the other classes.
I think this should be a try-with-resources block.
I think we should add the host name to the log message.
I think this should be wrapped in a try-with-resources block.
nit: I think we can use the same approach as in LeaderPingResult.
shouldn't this be configUri = getConfigUri(); ?
I think this should be: if (getVElement().getDiagnostic() != null) {
I think we should log the exception here.
I think you can use a lambda here:  assertEquals("v2", c.get("k"));
This is a bit hard to read. I think it would be better to use a method in the execute method.
I think this should be a constant.
I think this should be a lambda
I think we should throw a SQLException here.
I think we should use the default name here.
Should we use the same naming as the other one?
I think we should use the platformProperties.put(key, props.get(key)) method instead of the hard coded value.
please use formatter
I think this should be a StringBuilder, not a String.
I think this is a bit too much. It's not a very useful error message.
This is not a good idea. You can use the default charset here.
@dalifreire this is not needed
I think this should be a constant.
Why is this needed?
why not use the cdPath.isEmpty() check here?
Remove this line.
This is a bit confusing. I think it would be better to have a method that returns a boolean and return true if the argument is not present.
This is a bit hard to read. Can we make it a static variable?
I think we should use the same approach as in the other methods.
I think we should also check that the first element is the expected one.
I think this is a bit more readable if you just use a StringBuilder instead of a String.
I think this should be a WARN instead of an ERROR.
Should this be public?
I think we should use Collections.singletonList here.
Why not just use subject.getPrincipals().iterator().next() here?
I think this should be a logger.
This is not thread safe.
I think this is a bit too long. Maybe we can use a method in KAFKA_MESSAGE_OFFSET and use that here?
This test is not testing the same thing as the one in the substudy.
I think this should be a constant.
This should be a constant.
I think this is a bit strange. I think it would be better to use UUID.randomUUID().toString().replaceAll("-", "")
please use injection for this method
I think this is a bit strange. I think we should have a test that checks for the path and not just the path.
I think this should be a Map.
I think this should be a constant
rename to launch
I think this should be a WARN instead of an ERROR.
I think this should be a separate method.
This is not needed.
I think you can use DFACTORY.newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocumentBuilder().newDocument
I think this should be "element != null && element != null"
I think this should be deleted.
I think this should be removed.
nit: I think it's better to use Collections.emptyMap()
I think this should be a constant
This should be private.
I think this should be a System.out.println.
This is not correct. You can use Collections.emptyMap()
nit: I think we can just use the SingleIterator here.
I think we should throw a more specific exception here.
nit: I think we can use Preconditions.checkNotNull(writeFn, "null write function");
style nit: no braces around single line blocks
I think this should be in a finally block.
I think it would be better to use KryoCloneUtils.createCloneUtils(SRC, template) here.
I think this should be a field of the class.
I think we should use the same approach as in the other nodes.
Why is this needed?
I think this should be a constant
This is a debug statement.
I think this should be a WARN instead of an ERROR.
This should be a constant.
I think this should be moved to the top of the method.
I think we should use a logger here.
I think we should use the same approach as in the other constructor.
This is not necessary. The artifact is already set by the attribute set by the attribute set by the attribute set.
I think we should also check that the hostnamesByIpSupplier is not empty.
This should be a constant.
This is not a valid user name.
This is a bit hard to read. It's a bit hard to read.
I think this should be a constant.
Why do we need to start the queue mode?
I think we should log the error here.
I think this should be synchronized
This is a bit of a nitpicky, but I think we should have a callback that takes a callback and returns a callback.
Please use the same description for all test cases.
I think this should be a constant
I think this should be a constant.
You can use try-with-resources here.
This is not necessary.
I think we should use symbol.scope() here.
I think we should add the connector-service to the log message.
This is not a good idea. You can use a stream api to check the list.
Why do we need to cast here?
I think this should be called after the test is done.
I think this should be a constant.
I think we should use nameTree.namespace().stream().map(NameIdentifierTree::name).collect(Collectors.toList());
This is a bit confusing. I think we should have a lock lock lock and then call setLeader(false) here.
This should be a WARN instead of an ERROR.
I think this is a bit too complicated. I think it would be better to use a for loop here.
This is a bit hard to read. I think it would be better to use a switch statement here.
I think this should be removed.
I think this is not needed.
This is a bit of a nit, but I think we should log the exception as well.
I think this should be logged as a warning.
I think this should be a synchronized block.
I think this should be a PrestoException.
I think this should be moved to the previous line.
I think this should be a WARN instead of an ERROR.
Why synchronized?
I think this should be conf.getBoolean(QueryServices.QUERY_SERVER_DOAS_ENABLED)
Should this be a warn?
I think this should be a constant
I think we should use the new method on LHS.
I think this should be a List, not a List.
This is not necessary.
I think we should use the same bytebuffer as in the sendResponse method.
I think this should be in the test method, not in the test.
I think this is a bit strange to have a test that checks the exception message and the message is not valid.
I think this should be a String[] since it's a String[].
I think we should use the old method instead of the old one.
I think this should be run(IProgressMonitor monitor)
rename to root
I think you can use the new method here:  public List<Timeline> listTimelines(final String eventType) { return jdbcTemplate.query( BASE_TIMELINE_QUERY + " WHERE t.et_name=? order by t.t_order", new Object[]{eventType}, timelineRowMapper); }
I think this should be Log.v(TAG, "Cancelled callback or outstanding requests");
I think this should be a field of the class.
This should be a WARN instead of an ERROR.
Shouldn't we assert that the version is the last version?
This is a bit confusing. I think it would be better to have a method that returns the result set of the result set.
I think we should use the same name as the old one, i.e. "i" instead of "i"
I think this should be a warning.
This is a good candidate for a static import.
I think we should throw InternalError here.
I think this log message should be more descriptive.
I think this should be called only if the filter is not empty.
I think we should use the default value of the default value here.
Why not just return ResponseStatus.valueOf(responseMetadata.getString(RESPONSE_STATUS_KEY));
This should be a constant.
I think this should be a DSpaceCSV.
This is a bit confusing. I think we should have a different name for the label and the label name.
I think this should be a warning.
This should be a constant.
I think this should be a constant.
I think this should be removed.
I think this should be a warning
I think we should have a method for this.
I think this should be setMissingQueuesFatal(true)
This is not needed.
I think this should be a warning
I think this should be: if (StringUtils.isNotBlank(pattern)) { ... }
why not add a check for upServerIds.isEmpty() ?
I think we should also assert that the path is not null.
I think this should be "filterSupportStatus{"
This is not necessary. The check for null is not required.
Why not just use the diamond operator?
This should be a constant.
This is a breaking change.
I think it would be better to use here getVdsmStatus() instead of vmStatus.SavingState.
I think this should be "No selection"
This should be a field, not a field.
I think we should add a check for the sessionMethod instanceof ScriptBasedSessionManagementMethod.
Shouldn't we check for tmp_filename here?
Shouldn't this be synchronized?
I think this should be replaced with a regular expression.
I think this is a bit too complicated. I think it would be better to have a method in the JobSinglesQuotesAreProhibited and then call it from here.
@dmzaytsev let's use the same variable for both the test cases
This is a bit confusing. I think it would be better to use a local variable to get the time and then use it.
I think this should be a Timer.
I think this should be asyncGet(key)
Use logging instead of printStackTrace.
I think this is not needed.
Why is this needed?
I think this is not necessary. The test will fail if the test is failing.
I think this should be removed.
I think it would be better to use a for loop here.
This is a bit hard to read. Can we make this a method in the interface?
This is not needed.
This is a breaking change.
Why not use the id?
I think this should be inside the if block, not here.
I think this should be moved to the top of the method.
@ivandalbosco Why not use the same approach as in the other methods?
I think we should use ctx.channel().attr(CLOSE_FRAME_SENT_ATTR_KEY).set(true); here.
I think this should be a constant
This is not a valid state.
I think we should use the same approach as in the onLoadView method.
I think we should use the same message than "Rejects not supported"
This is not a task.
This should be a try-with-resources block.
I think we should use the same approach as the other one.
This is not thread safe.
I think this should be mFolder.id instead of mFolder.rescanIntervalS
I think we should use the same approach as in the other classes.
I think this should be moved to the top of the method.
This is a bit confusing. I think it's better to use Objects.equal(input.getId(), val)
I think this should be a Log.d
I think we should use the new method here.
This is not needed.
This is not a good idea. You can use a Set instead of a set.
This is not necessary.
This is not necessary.
I think this should be removed.
This is a bit hard to read. How about just writing the header as a header?
why not use the diamond operator?
I think this should be a WARN instead of an ERROR.
I think this should be a CountDownLatch.
This should be a field, not a field.
Why is this needed?
This is a bit hard to read. Can we use a try-with-resources statement here?
I think this should be done in the constructor, not here.
I think this should be a constant
I think this should be moved to @Before method
This should be done in the presenter
I think this is a bit too long. Can we just use the default charset?
suggestion EMPTY_VALUE);
This should be a constant.
This is a bit strange. I think it would be better to have a single check for the value of the value of the value that is greater than 0.
This is not necessary.
rename to child or child
I think we should log the exception here.
I think this should be a constant.
I think this should be a constant
I think this should be a warning.
This is not correct. The calculation is not applied to the calculated calculated calculated by the caller.
this.
Why not use the registry address here?
I think this should be a ConcurrentHashMap.
This should be a debug statement.
I think this should be assertEquals(expected, actual)
This is a bit hard to read. Can we just return true here?
I think this should be a warning.
This is a good candidate for a method like this:  public Single<String> fetchMediaDetails(String filename) { return getDiscussion(filename); }
This should be a constant.
nit: can be simplified to: java if (numInput > 0) { numInput = input.getPositions(); }
I think this should be a List<Executor> so that we can use a Set<Executor>
This is a bit hard to read. Can we just use the same pattern as the one above?
This is a bit hard to read. Can we use a for loop?
I think this should be a Blobs.setBlob(blob);
This is not needed.
I think this should be a constant.
This is not a registerMasterAttributes method.
nit: I think we can use the same orderkey as the other table scan
remove this line
Why is this needed?
I think it would be better to use the KExceptionManager.getKExceptionManager() method here.
I think this should be a test case.
This should be a logger.
I think this is not needed.
This is not necessary.
I think we should use the same approach as in the other methods.
This is not a good idea. You can use a List<IAtsConfigObject> instead.
nit: I think we can use the same approach as in the other classes.
This is a bit confusing. I think it would be better to just use the default count to avoid the extra allocation.
I think this should be a warn
This should be removed.
This is not needed.
assertThat(programState.peekValue()).hasMessage("Loading a symbolic value unindexed");
I think you can use TestData.getWriteAdd() here.
I think this should be extracted to a separate method.
I think this should be a constant.
I think we should use the same approach as in the other pull request.
This is a bit hard to read. I think it would be better to use a for loop instead of a for loop.
Should this be MAX_SNAPSHOT_ID_BIT_WIDTH?
I think we should use a ConcurrentHashMap here.
@dalifreire why not use try-with-resources?
I think this should be a WARN instead of an ERROR.
This is not necessary.
This is not a good idea. You can use a parameterized logging instead of string concatenation.
style nit: no braces around single line blocks
style nit: we don't use braces around single line blocks
This is not needed.
I think this should be a try-with-resources block.
I think this is a bit too long.
This is not needed.
I think this should be debug
I think we should use the same URL as the previous one.
I think we should log the exception here.
I think this should be a List<InputSplit>
I think we should use the same approach as in the other classes.
This is a bit hard to read. Can we make it a static method?
I think this should be a constant.
I think this is not needed.
I think we should log the exception here.
I think you can use File.separator here.
I think this is a bit too complicated. I think it would be better to have a method for the ruleEntry.
This is not needed.
I think this should be a CountDownLatch.
I think this should be moved to the MekHQ.getLogger().log() method.
I think we should throw an exception here.
This should be a constant.
I think we should use a constant for "image/jpeg"
This should be a WARN instead of an ERROR.
This should be a Set, not a HashMap.
I think this should be in a @Before method.
I think this is not necessary. The test will fail if the password is not a valid one.
This should be a constant.
Please remove this line.
nit: I think it's better to use the same name than numTPs.
This is not a valid charset.
I think you can use the diamond operator here.
I think this should be setLivePort(sessionInfo.getLivePort())
I think this should be a for loop.
I think this should be a constant.
I think we should add a check for the name of the attribute in the message.
I think this should be a try-with-resources block.
I think this should be "Platform: %s"
Remove this line.
This is not needed.
I think this is a bit too long. Can we just use a long instead of a Long?
I think this should be a synchronized block.
Can we use a try-with-resources pattern here?
I think this should be a List.of(expectedRow.get(i), expectedRow.get(i))
I think this should be configurable.
I think this should be a try-with-resources.
I think this should be a set, not a set.
I think this should be a try-with-resources block.
waitForElementPresence(By.className("profile-pic-icon-hover"));
This should be externalized.
Please use StringUtils.isEmpty()
This is not correct. It should be "return pair + " " + Long.toString(rate);
This is not needed.
I think this should be ReadOnlyArrayInterface.
This is a breaking change.
This is not needed.
I think we should add the clientStateService.getStore(cacheId) to the cacheId.
I think this is not necessary. The test is failing if the test is failing.
I think we should use the same approach as in the other methods.
I think this should be a WARN instead of an ERROR.
I think this is a bit too long. Maybe we can use the same in the test?
I think this should be:  java if (turnWeight == Double.POSITIVE_INFINITY) { return false; }
This is not a part of the patch, but please remove it.
This is not a good idea. You should use the plugin instance directly.
This is not a good idea. You can use the title of the title and the title of the title.
This is a bit hard to read. Can we use the java.io.File.toPath()?
I think this should be a try-with-resources.
This is not correct. You can use Objects.equals()
I think this should be schedule.getExecutionTime()
This is a bit confusing. I think it's better to use a Comparator.comparingLong(String, RubricRecipientStatistics::get)
I think this should be a warning.
I think this should be debug
This is a bit hard to read. Can we just use the ObjectMapper?
I think we should use the trace-level trace-level logging here.
I think this should be called 'isEmacs'
This is a bit hard to read. Can we just use a for loop?
This is a copy of the file splits, so I think we should use the same approach as the copyHeader.
This is a bit of a bug, but I think it would be better to use a Set<ImmutableBitmap> here.
I think this should be false.
This is a bit of a very long method. Can we extract it to a method?
Why do we need to catch OseeException here?
I would prefer to use method.getMethod(methodName, parameterTypes) here.
I think this should be a Map instead of a HashMap.
remove this line
This should be a WARN instead of an ERROR.
I think we should add a null check here to prevent NPE.
This should be a FluidCellInventory
This is not needed.
This should be a WARN instead of an ERROR.
I think this should be in the constructor, not here.
This should be a static method.
I think this should be "Liquid Class is null"
This is not a safe way to do this. You can use the context.getTraceEnabled() instead.
I think this should be a gauge, not a gauge.
I think this should be return readBytes < readLength && input.isReadable()
I think this should be a listModelOptions.
I think this should be a constant.
I think this should be in a finally block.
This is not needed.
Can we use the same approach as in the other methods?
This is not correct. You can use the new API to get the ID from the feed.
I think we should use the same logic as in the other methods.
It seems that this is not necessary.
I think this should be in a finally block
I think you can use Collections.singletonMap() here.
Holiday is a raw type. Why not use the primitive type?
This is a bit hard to read. Can we use a static final String field instead?
@bgeVam please use the same constant for the test
I think this should be moved to the top of the method.
I think we should use the ExchangeUriChecker class here.
This is not a good idea. You can use the context.getString(R.string.pref_default_mongodb_collection) method to get the default database.
I think this should be a warning.
I think this should be a CountDownLatch
I think this should be a List<T>
We should use the same approach as in the other constructor.
I think this should be a constant.
This is a good idea. You can use Optional.ofNullable(r.getInt("category"))
I think we should use the functionHandle here instead of the functionHandle.
This is not necessary.
Please remove this line.
This is not a request, it should be a request.
I think we should also assert that the bitstream channel is not null.
Why not return an empty list instead of null?
Should this be a WARN instead of an ERROR?
I think this is not necessary.
I think this should be a WARN instead of an ERROR.
I think you can use a method reference here:  java return flowGraph.blocks().stream() .filter(cfgBranchingBlock -> (CfgBranchingBlock) cfgBlock).map(cfgBranchingBlock -> (CfgBranchingBlock) cfgBlock).collect(Collectors.toSet());
@vilchik-elena Why not using a Set here?
I think this should be private
This is not needed.
I think this should be a try-with-resources block.
I think we should use the same name as the one in the message handler.
This is not correct. The name should be a constant.
Why not use a for-each loop here?
This is a breaking change.
This is not thread-safe. You can use a thread-safe one.
This is not necessary.
I think this should be a while loop.
I think this should be addAllowed(entity)
I think it would be better to use Objects.requireNonNull(error, "errors is null");
I think this is not necessary. The logic in the UI is already done in the UI.
This is a bit hard to read. Can we use a StringBuilder instead?
This should be a constant.
I think this should be moved to the previous line.
Shouldn't we log the account name here?
I think we should add a check for null here.
Why not just use the solverStatus variable?
I think we should log the exception here.
I think this should be a warn instead of info.
I think this should be in the BlobId class.
This is a bit hard to read. Can we extract a method to make it more readable?
I think this should be a constant.
I think we should use the same style as the other one.
I think this should be moved to the finally block.
I think we should use the new method here instead of the new one.
I think this should be warn
I think this is a bit too complicated. It would be better to have a method in StoreException that takes a StoreException and then call persistBloomFilter() on it.
I think we should log the exception here.
This is a bit of a very bad idea. I think it would be better to use a try-with-resources block.
I think this should be a property, not a property.
This is not a part of the PR, but it's not a good idea to change this.address to be null.
Should this be a Persister instead of a Persister?
This is not a good idea.
I think we should use the new API here.
I think this should be a constant.
I think this is a bit too complicated. Maybe we can use the JsonToRowDataConverter to create the converter?
I think this should be a StringBuilder instead of a StringBuilder.
nit: I think we can use ImmutableList.of()
I think this should be a warning.
This is not a good idea. You can use a simple for loop.
I think this should be a ConcurrentHashMap.
please use injection for this method
I think this should be a List<ColumnDef>
I think this is a bit too complicated. We should be able to use the same error message for all cases.
I think this should be a warning.
I think this should be a field, not a field.
I think this should be a constant
I think this should be a constant.
This is not a good idea. You can use the same name for both the two variables.
I think this should be a separate commit.
This should be a constant.
I think we should log the exception here.
This should be a log.debug
This should be a logger.
This is not needed.
This is not a good idea. You can use the method reference here.
This is not a good idea. You can use the new method to set the default value.
I think this should be a constant.
I think we should also check that the leader election is not null.
This should be a constant.
nit: this.
please use Collections.singletonList()
I think this should be private.
This is a breaking change.
This should be a constant.
@bgeVam please use org.kie.dmn.model.api.InputClause.isEmpty()
style nit: no braces around single line blocks
This is a debugging statement.
This should be refundAmountAvailable
I think this check should be done in the checkBindingsSubsetOfVarOrder method.
Shouldn't this be config.TOPOLOGY_TASKS?
I think this should be refund
I think you can use the constant here
I think we should add a default executor service handler to the JobExecutorServiceHandler.
I think this should be removed.
This is a bit confusing. I think we should have a method to handle the case where we have a transform function.
This is a breaking change.
This should be a WARN instead of an ERROR.
I think it would be better to use the same name than the one in the test class.
I think this should be in.getHeader(FCREPO_URI).getTextTrim();
I think we should use the default case here.
I think we should use the same name as the other one.
This is not necessary.
style nit: no braces around single line blocks
I think we should use the same approach as in the other classes.
I think this should be a TypeReference.
I think this should be a WARN instead of an ERROR.
This should be a static method.
This query is not used.
I think this should be in a finally block.
@ivandalbosco why not use the same variable for both the same block?
suggestion Preconditions.notNull(conditions, "conditions must not be null");
This is a bit hard to read. Can you please extract a method to reuse?
I think this should be a constant.
please use the same naming convention as 'EditNetworkNetwork'.
I think this should be a warning.
This is not a good idea. You can use assertNull(eObjectServices.eGet(null, null));
I think you can use a for-each loop here.
Shouldn't this be in the constructor?
I think we should use the new method here.
I think we should use a more descriptive name here.
I think we should use the same naming as the other naming convention.
This should be a warn
this is not needed
I think this should be called "notifications.ftl"
I think this should be moved to the top of the method.
I think this is not necessary.
I think this should be a SymbolReference.unsubscribe()
This is not necessary.
I think this should be a WARN instead of an ERROR.
I think this should be a constant.
This is not a valid retry.
I think this should be a more specific exception.
Shouldn't this be "en"?
This should be a constant.
Shouldn't this be in the presenter instead of here?
This is a bit strange. I think it should be "expected to be able to read " + buffer.remaining() + " but received to be able to read " + buffer.remaining() + " but received to be able to read " + buffer.remaining() + " but received to be able to read " + buffer.remaining() + " but got " + buffer.remaining() + " but got " + buffer.remaining() + " but got " + buffer.remaining() + " but got " + buffer.remaining() + " but got " + buffer.remaining() + " but got " + buffer.remaining() + " but got " + buffer.remaining() + " but got " + buffer.remaining() + " but got " + buffer.remaining() + " but got " + buffer.remaining() + " but got " + buffer.remaining() + " but got " + buffer.remaining() + " but got " + buffer.remaining() + " but got " + buffer.remaining() + " but got " + buffer.remaining() + " but got " + buffer.remaining() + " but got " + buffer.remaining() + "
This should return a List<SCMSource>
nit: can we make this a static final variable?
This should be a constant
Why not use the new Date(time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time,
Shouldn't this be blobDeleteErrorCount.inc()?
I think this should be validatedElements.isEmpty()
I think we should use a Set here.
I think this should be a Future<CheckResult>
I think we should use the same naming as the other variable name.
I think this should be a method on the worldpayTemplateData.
I think it would be better to use Collections.singletonList() here.
This should be a constant.
I think this should be a Map<DownloadFileId, Long>
I think we should use the action variable here instead of calling the super.onResume()
This is a bit hard to read. Can we just return child.getList(key) here?
I think this should be a constant.
This is not necessary. The exception is already logged in the log statement.
I think we should throw an exception here.
You can use the new method here.
assertEquals(excpected, actual)
This is not correct. You can't use the class name directly.
I think this is not necessary.
This is a bit of a nitpicky, but I think we should use the same approach as the one in the other classes.
This is a bit hard to read. Can we use a StringBuilder instead?
Please use a logger instead of printStackTrace.
This is a bit of a very good idea. I think it would be better to use the File constructor to avoid the need for the File constructor.
I think you can use assertEquals here
This is not a part of the patch, but please remove it.
I think you can use File.createTempFile(String) here.
I think it would be better to use the same error message as above.
@bgeVam please use a constant for "number/text"
I think this should be a List<ReplicaId>
I think we should add a check for the cluster id here.
I think this should be a WARN instead of an ERROR_CODE_INTERNAL_ERROR.
This should be iterator.hasNext()
I think this should be moved to the presenter.
Please use the same formatting as the rest of the file.
I think this is a bit too long. Can we just use a single string literal?
Use Logger.
This is not needed.
this.codec = codec.hashCode();
I think this should be removed.
This is a breaking change.
I think this is not necessary. The Cigar is already a Cigar.
This is a bit of a nit, but I think it's better to use the worldIn.getLocation() instead of the worldIn.getLocation()
You can use a stream here.
This is not a good idea. You can use a filter instead.
I think we should use the same approach as in the other methods.
I think this should be a static method.
I think this is not necessary.
I think this is not needed.
I think this should be warn
Can you use assertThat(platform).containsExactly(martin) instead?
This should be package-private.
I think this should be assert lexicalClass != null
This is a good candidate for a method to get the lock from the cache.
This is a bit confusing. I think it would be better to throw an exception instead of returning null.
This should be debug
I think this should be removed.
I think this should be a switch statement.
I think this should be a PojoStackTraceWriter.
nit: remove empty_table
I think we should have a listener on the alarm here.
I think we should use the style here instead of the hardcoded value.
This should be a warn
I think this is not necessary. The error message is already present in the expressionEvaluator.reverseFunction(resultValue.getErrorMessage().get())
"toolchain type %s"
I think this is not necessary.
I think this should be a constant.
I think we should log the exception here.
I think this should be a constant.
This is a good candidate for a function to be used in the future.
I think this should be synchronized
I think we should use the expected exception here.
This should be a constant.
This is a bit hard to read. Can we extract a method to reduce duplication?
I think this should be a warning.
This is not necessary.
This is not a good idea. You can use a different name for the event type.
nit: this can be replaced with:  java future.setResult(Collections.emptyList());
This is a bit hard to read. I think it would be better to use a Set instead of a Set.
I think this should be moved to the top of the method.
I think we should check that the query is not null before calling it.
I think this is not needed.
Shouldn't this be a File[] ?
nit: I think we can use assertThat(limit.examinedEnoughCells(cellsExamined, cell()), Matchers.is(expected));
I think this sleep is not necessary.
I think we should use the same name as jobGroup.id
I think we should add a check for the metric name here.
I think we should add a null check here.
I think we should use org.eclipse.sirius.common.util.Utils.invoke(e) here.
I think this should be a constant.
This test is not testing anything. You can use the full path to test the scan.
I think we should add a check for the type of the function to be safe.
I think this should be debug
I think we should use the new method here
This is a bit of a very broad way to do this. I think it would be better to use a try-with-resources block.
style nit: no braces around single line blocks
I think this should be a WARN instead of an ERROR.
This is a bit confusing. I think it would be better to use a boolean flag to indicate that the value is a boolean.
I think this is a bit strange. I think it would be better to use a StringBuilder instead of a String.
I think this should be setOpenFLPath(openFLPath);
I think this should be set to 0, not set to 0.
I think we should verify that the pool is not exist.
I think we should throw the MessagingException here.
please use StringUtils.isNotEmpty()
I think this should be a constant
I think this should be a warn instead of an error.
I think this should be readSoFar == 0
I think this should be a separate method.
This should be a warn
This is not a good idea. You can just use the local variable instead of calling it twice.
This is not necessary.
I think this should be GDBCommandLine.getInstance().getSimpleName()
I think we should use the FileUtil.getFileToLargeToUpload(file) method here.
Why do we need to sleep here?
I think this should be a WARN instead of an ERROR.
I think we should verify that the generateMapFile is actually called.
nit: I think this is a little weird.
I think this should be a URIBuilder
I think we should use the constant for the key here.
I think this should be mapper.orElseGet(() -> new ObjectMapper()).convertValue(attributes, ValueAttributesInfo.class);
I think it would be better to use the new Set<ExecutionVertexAssignment> here.
I think this is a bit too long.
I think we should also check if the adapter is not null here.
This is not needed.
Why not just return an empty map?
I think this is not needed.
This is not needed.
This is not a good idea. You can use a RestException with a message like "Not found"
I think this should be debug level
I think we should use a try-with-resources here.
I think this is not necessary.
nit: requireNonNull(toSplit, "toSplit is null");
use waitForElement() instead of waitForElement()
This should be a try-with-resources block.
I think this should be a static method.
This is not needed.
This should be a WARN instead of an ERROR.
This is a good candidate for a method to handle the exception.
I think this should be a if ( tileRenderRunnable.isCancelled()) {
I think this should be inside the if block
I think this should be a debug log.
rename to type
Why not just return download(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null
rename to resourceClasses
I think this should be a static method.
I think this should be a stream.
@vilchik-elena Why not use the constant here?
I think we should use the same name as the other variable name
I think this should be assertEquals(installSource, installSource, installSource, installSource, installSource, installSource, installSource, installSource, installSource);
This is not needed.
I think this is not necessary.
Can you use CollectionUtils.isNotBlank() here?
I think this should be debug
This should be a constant
I think this should be a constant.
I think you should use a try-with-resources here.
I think this is a bit too long. Maybe we can extract it to a method?
Why are we catching the exception here?
nit: I think this is redundant.
I think we should use component.scope() here instead of component.scope()
This is a bit confusing. I think it would be better to use the path.startsWith(pattern) method to avoid the need for the if statement.
I think we should use the constant here.
I think this should be a warning.
I think this should be moved to the finally block.
I think this should be a switch statement.
I think we should use the same approach as in the other send methods.
I think we should add a checkCondition(conditionGroup, role, false) here to ensure that the rules are not correctly saved correctly.
I think you can use the HPCCFile.getProjectList() method here.
nit: I think this is a bit weird. I think it's a bit hard to read.
This is not correct. You can use Objects.equals()
suggestion assertErrorEventExecutionSet(emptySubprocess.getExecutionSet(), EMPTY_VALUE, NON_INTERRUPTING, EMPTY_VALUE);
I think this should be a constant.
This is a good candidate for a static import.
I think this should be a for loop.
I think this should be a more specific exception.
I think this is not necessary, since the certificate is not trusted.
I think we should log the exception here.
I think this should be a constant.
This is not correct. This is the only place where the object is a WorkflowVersion.
This is not needed.
This should be a String.valueOf(id)
This is not needed.
I think this should be a constant.
Please use the same formatting as the rest of the file.
I think this should be changed to expected.studentProfile.isEmpty()
I think we should add a null check here.
This should be a warning.
This is not a good idea. You can use the existing consumer type as a parameter.
I think this should be a constant.
I think this should be inside the if block, not here
I think this should be removed.
I think this should be a Set, not a Set.
This is not a good way to test the response count.
This is not necessary. The payment should be used for the payment.
This is a breaking change.
This should be private
This is not a valid attribute.
I think we should use the same naming as the other attributes.
This is not needed.
I think we should use the new instance instance here.
This is a bit hard to read. Can you please extract a method to avoid duplication?
I think it would be better to use the constant here.
I think this should be a constant.
This should be a separate method.
I think we should use the KerberosRealm.getLogoutAPI() method here.
Why not just aggregate.reset()?
I think this should be left.
This is not necessary.
I think this is not needed.
I think this should be debug level
This is a bit hard to read. Can we use a StringBuilder instead?
I think this should be a warning
Should this be package protected?
This is a bit hard to read. Can we make a static method?
I think this should be config.checkerThreadsNumber.
I think we should use the new method here.
This is a bit hard to read. Can we just use a Set instead?
I think we should use the constant here.
This is a bit hard to read. I think it would be better to use a for loop here.
I think this should be private
I think this should be a PentahoJcrConstants.PHO_METADATA.
This is a bit confusing. I think we should have a default value for the default value.
This is not a good idea.
I think we should use a Set here.
I think this should be ZoneId.of( ZoneId.of( ZoneId.of( "America/Chicago" ) ).atZone(...)
I think this should be a String[]
I think this should be moved to the previous line.
I think this should be a constant
Please remove this line.
I think this should be a static method.
I think this should be a warn instead of info.
I think we should use a constant for the property value.
This should be a WARN instead of an ERROR.
I think we should use StringUtils.isEmpty() here.
This is not a good idea.
I think this should be a separate line.
nit: I think we can use the new static imports for MockClientEnv.
I think we should use the GSConfig.GOOGLE_APPLICATION_CREDENTIALS constant here.
please use injection for VmDeviceId
I think this should be a constant.
I think this is a bit too long.
I think this should be done in the constructor instead of here.
I think we should log the exception here.
I think this should be done in the update handler
I think this test is not necessary. The test is failing on CI and the test is failing on CI.
This is not necessary, the value of the resource is already set to true.
I think this is not necessary. The test will fail if the chain is empty.
I think we should use the same style as the other one.
I think you can use the new name here.
I think this should be done in the constructor instead of here.
I think we should use the same name for all the test cases.
nit: you can use the new method here
closeQuietly()
I think this should be a constant
This is a bit hard to read. Can you please extract a method?
I think we should use the injectionTargetFactory here.
I think this should be a constant.
This is not necessary. The monitor is already initialized in the monitor.
I think we should use targetType.isCollectionType() here.
I think we should log the exception here.
I think this should be a constant
I think we should use the new ForbiddenAttributeIncompatibility(jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath, jsonPath,
I think this should be a constant.
I think this is a bit strange. We should use the platform file name instead of the platform file name.
please use {}
This is not a good idea.
nit: can we move this to the finally block?
This is not correct. You can use the playerMark variable.
I think you should call super.removeSessionListener(this);
I think this should be a constant
I think this should be a WARN instead of an ERROR.
I think it would be better to use the constant here.
This should be a logger.
This is not a good idea. You can use the JabRefPreferences.getParent().toString() instead.
nit: this.timeoutMillis = TimeUnit.DAYS.toMillis();
This is not needed.
I think this should be a boolean.
I think this should be a warning.
@fanifieiev the same above.
I think we should use the same approach as for the other project key validation.
nit: I think we can use the following:  ImmutableMap.builder() .putAll(table -> { ... });
This is a bit of a nit, but I think it would be better to use the diamond operator here.
I think this should be a List<OpenAPI>
I think we should use the same port as the one in CassandraDataSegmentPusher.
This is a bit hard to read. Can we use a lambda here?
I think we should use the same validation as in the validate method.
I think we should use a different name for the metric name.
I think this should be errorOccurred = true
I think we should use the constant for the SMAEditor.
I think this is not needed.
I think we should add a check for dataSnapshot.hasChildren() here.
nit: this.parentMemoryContext = requireNonNull(parentMemoryContext);
I think this should be a constant.
This is a bit strange. I think it would be better to use a regex to replace the first character.
This is not a good idea. You can use the new method to get the current date and use it.
This should be a WARN instead of an ERROR.
I think this should be a List<Block>
I think this should be a WARN instead of an ERROR.
I think this should be warn
This is not a very useful method.
@vilchik-elena Why not use the same URL as the one in the test?
I think this is not needed.
I think this should be a warning.
please use getDiskInfoDestinationMap() instead of getDiskInfoDestinationMap()
Why not just use the new TextColumnWithTooltip<StorageDevice>() method?
This should be a constant.
Why is this needed?
I think this should be a warning.
I think we should use the same name as the actionProvider.
This is not needed.
I think it would be better to use a Set instead of a List.
I think this is a bit too complicated. Maybe we can extract a method to reduce duplication?
This is not correct. You can use the constructor directly.
I think we should use the keystorePassKey instead of the keystorePassKey.
@dalifreire why not use a.getTags() ?
This is a copy of the backup store, so it should be deleted.
I think this should be a constant.
I think this should be in the updateBroadcastMemory method.
nit: can we use the same naming as in the test?
This is a bit hard to read. Can we make a function on the activity that is used instead?
I think this should be moved to the previous line.
This is not necessary.
This is not a good idea. You can use the RevWalk constructor to get the revision and the revision.
I think this should be nearCacheStats.incrementInvalidationEvents().
I think it's better to use the error log here.
I think this is not needed.
This is a bit hard to read. How about:  java dto.setId(from.getPlatformType() == null ? null : from.getPlatformType().name());
why not use the ChannelMap.put() method?
This is not needed.
I think we should log the exception here.
I think we should have a more descriptive error message here.
I think this should be done in the updateGame method.
This is not a part of the patch, but please remove it.
This is a bit confusing. I think it should be a boolean instead of a boolean.
This is not needed.
I think we should use the same approach as in <LINK_0>
This is not necessary.
wait.forElementClickable(driver).click();
I think this should be a permission check.
Shouldn't this be a switch?
I think this should be inside the if block.
This should be a warning.
style nit: no braces around single line blocks
I think this should be a RuntimeException.
rename to output
This is a bit hard to read. I think it would be better to use a for loop instead of a for loop.
I think this could be simplified to return excludedColumn.equals(ind) && excludedColumn.equals(ind)
I think this should be moved to the previous line.
This is not needed.
This is not a good idea. You can use the same approach as the one in the other class.
This is not thread safe.
please use getStorageId() instead of getDiskImageDao()
I think this should be a constant
I think this should be a logger.
I think this should be a constant
I think this should be a separate method.
This is a bit strange. I think it should be a constant.
I think this should be bind(Tracer.class).toInstance(NoopTracerFactory.create());
I think this should be set to false in the constructor.
I think this should be removed.
I think we should use the same approach as in the other methods.
I think we should use the new ArrayList<>() method here.
This is a bit hard to read. I think it would be better to use a method reference to show the language code.
I think we should add a check to see if the namespace manager is already registered.
rename to element
This is a breaking change.
nit: I think we can use the HiveTableSourceSource class here.
I think this should be in the finally block.
I think it would be better to return Array here.
I think this should be a warn instead of an error.
I think this should be a constant.
please use getVdsSpmIdMapDao()
This is a readonly repository.
This is a bit of a nitpicky, but I think we should use the diamond operator here.
I think it would be better to use a list here.
I think this should be a warning.
I think we should use a ConcurrentHashMap here.
I think this should be a constant
I think this should be a loop.
Why synchronized?
I think this should be extracted to a constant.
I think we should use a latch here instead of Thread.sleep().
I think this should be a WARN instead of an ERROR.
I think this should be in the presenter instead of here.
I think this should be a WARN instead of an ERROR.
I think we should use the same style as the other methods in this class.
I think we should log the tenant id here.
I think this is a bit too complicated. It would be better to have a single query for the query and then have a single query.
This is not necessary.
This is not needed.
This is not needed.
I think this check is not necessary.
please use 'else if'
Can you use a StringBuilder instead?
This is not needed.
nit: this can be replaced with a lambda
I think this should be "No result returned from acquireTokenSilentFlow"
This test is not testing the same thing as the one in the set3.
This is a breaking change.
This is not needed.
Shouldn't we return null here?
Why not use the new AccessToken.Builder() method?
This should be a constant.
I think this should be a warning.
I think this is not needed.
This is not needed.
Why not just call super()?
I think this should be a constant.
We should probably use the serviceTracker here instead of the serviceTracker.
I think it would be better to use the new method here.
This should be a Set, not a Set.
I think we should use the TaskRepository.getConnectorKind() method here.
I think this should be a constant
I think we should use the JOURNAL_SPECIFIC constant here.
This should be trace.
I think this should be a ListData.
This is not needed.
I think it would be better to use a try-with-resources statement here.
This is a bit of a very long function. I think it would be better to use a private method in the class.
I think this should be logged at info level.
This is not needed.
This is a good idea. You can use the string builder to get the string and use it.
I think this should be startGrid()
This is not necessary.
I think we should use the same approach as in the SubscriptionMessageHandler.
I think we should use the trace.getTrace() method here.
I think this is a bit too long.
I think this should be moved to the parent, not the parent.
I think we should use the JavaProject.DEFAULT_PREFERENCES_DIRNAME constant here.
This is not a good idea. You can use a more specific exception.
I think it would be better to use a lambda here.
This is not a valid value.
This should be error
nit: I think it's better to use CompletableFuture<WriteAdvHandle>
I think this should be a constant.
This is a bit hard to read. Can we use a StringBuilder instead?
This is not needed.
I think this should be new PrimitiveType(Type.Repetition.REQUIRED, PrimitiveType.PrimitiveTypeName.BINARY, INT32_FIELD)
This is a bit weird. I think you should use the adapter directly.
This is a good candidate for a method to print the input file name.
This is a bit weird. I think it would be better to use the same byte as the byte.
I think we should also check that the class is not null.
I think this should be a WARN instead of an ERROR.
I think this should be a constant.
I think this should be sortedItems.addAll(items);
I think this should be a warn instead of an error.
This should be a logger.
Please use {} for logging.
I think this should be moved to the caller of this method.
Why do we need to clean the cache here?
I think we should use the indexDesc.length() > 0 check here.
This is not a safe way to encode the request. It should be a String.
requireNonNull(bucketCount, "bucketCount must be null");
I think this should be a Set<SupportedAdditionalClusterFeature>
This is not necessary.
nit: this.buffer = checkNotNull(in, "messageBufferInput is null");
I think we should add a check for null here.
why not use the diamond operator?
I think you can use the @Rule annotation here.
I think you can use values.forEach(k -> v.getKey(), k -> new LinkedHashMap<>(k, k));
I think this should be a WARN instead of an ERROR.
I think this should be a TaskExecution object, not a TaskExecution object.
I think this is not needed.
I think this should be a WARN instead of an ERROR.
I think this should be moved to the previous line.
This is a good candidate for a method to get the player name from the player name.
I think we should also check that the timeout is too long.
s/seqNo/g
I think this should be a WARN instead of an ERROR.
I think this should be moved to the 'else' block.
I think this should be moved to the top of the method.
I think this is not necessary. The test will fail if the exception is thrown.
I think you can use the new method to create the newTrackSymbols.
nit: use a StringBuilder instead of a String.format
I think this should be a constant.
I think this is a bit too complicated. Maybe we can extract a method to reduce duplication?
This should be synchronized
@vilchik-elena Why not use the diamond operator?
This is a bit hard to read. Can you use a StringBuilder instead?
I think this should be a warning.
return (length != len) ? 0 : length;
This is a debug statement.
We should use the constant for the URL here.
I think this should be "Abort"
Please use InputSeparatorWrapAfter3904.java.
I think we should use a constant for "jdbc:mariadb:"
I think this should be a WARN instead of an ERROR.
This should be a constant.
This is not a URL.
I think it would be better to use an ArrayList instead of a List.
This is not necessary.
This is a breaking change.
This is not needed.
I think we should use the same approach as in <LINK_0>
nit: assert stream != null
I think this should be removed.
I think we should use the same order as the annotationDto.setValue(4, Types.VARCHAR)
@vilchik-elena Why not just pass in the message?
This should be a ResourceInitializationException.
Use a logger.error() instead of printStackTrace()
I think we should add the exception to the log.
This is a copy-paste error.
Why is this necessary?
This is a bit hard to read. I think it would be better to use a constant for the string value.
I think we should use the expected exception here.
I think this should be a Map<String, Integer>>
nit: I think we can use the static import here
This is a breaking change.
nit: I think this could be replaced with Map.Entry<ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable, ImmutableBytesWritable,
I think this should be a constant.
I think this should be a string resource.
I think it would be better to use Objects.equals(name, that.name) here.
Shouldn't this be a warning?
I would suggest to use the constant for the AUTHORIZATE_TOKEN_NAME
Why not use the newSegmentZkMetaZNRecord(SegmentZKMetadataPaths.size())?
This is not a good idea. You can use the PsiFile directly.
I think this should be in the eventPublisher.post() method.
I think this is a bit strange. I think it would be better to use a logger instead of System.out.println.
This is not correct. You can remove the condition and remove the condition.
Please use assertEquals(expected, actual)
this.
I think this is a bit too complicated. Maybe we can extract a method for this?
I think this should be a static method.
use waitForElement() instead of waitForElement()
I think we should use the context context here instead of the context context.
This is a breaking change.
This is not needed.
This is a bit strange. I think we should use the constant for the header.
I think this should be a Set<String>
This is not a part of the PR, but it seems like this should be a part of the PR.
Shouldn't this be "Feeds"?
@vilchik-elena Why not just use Pattern.compile(PATTERN_EMAIL_ALT, matcher.group(1)) here?
You can use the same string as the other JSON object.
I think this should be package private.
I think it would be better to use the static method here.
I think we should use the constant here.
hashCode() is not needed here.
I think this should be in the finally block.
I think we should add a check for the deployment status here.
I think we should use the CQueryLanguageServerProvider.getDefaultLanguageServer() method here.
Why do we need this sleep?
I think this should be a separate method.
This is not needed.
I think this should be moved to the try block.
This constructor should be private.
I think this is a bit too long. Maybe we should use a StringBuilder instead?
Why is this needed?
I think this should be a try-with-resources block.
I think we should use the same approach as in the other methods in this class.
I think this should be trace.isDebugEnabled()
I think this should be a User.
@ivandalbosco why not use expression.isVariable() ?
rename to element
This should be a copy of the list.
I think it would be better to use a constant for the host name.
I think this is a bit too complicated. Maybe we can extract it to a method?
This is not a good idea. You can use MoreObjects.toStringHelper(this)
I think we should use the constant here.
I think this should be a constant
I think this should be a WARN instead of an ERROR.
This test is not testing anything.
I think this is a bit too complicated. Maybe we can extract a method to reduce duplication?
I think this is a bit too complicated. Maybe we can use a method like:  ParameterInfo.create(annotation, ParamConvertUtils.createQueryParamConverter(parameterTypes[i]));
I think this is not necessary. The test will fail if the assert fails.
Please add curly braces
Remove this.
I think this should be done in a finally block.
I think this is not needed.
This is not necessary.
I think we should add a check for the typeTree.symbolType() here.
I think this should be a while loop.
I think we should also check for the value of thePromoting here.
I think we should verify that the value is not null.
I think this should be done in the init method.
This should be cached in a field.
I think we should add a check here to ensure that the file is deleted.
I think this should be a List<Event>
This should be package-private.
I think we should add a check for the groupingColumns.size() > MAX_NUMBER_GROUPING_ARGUMENTS to make sure we have a more than MAX_NUMBER_GROUPING_ARGUMENTS.
This should be a static method.
please use Objects.equals()
This is a good idea.
This is a good candidate for a method to be used in the event class.
This is not necessary.
I think this should be warn
I think it would be better to use a StringBuilder here.
I think this is a bit too complicated. Maybe we can use a regex to split the string and then split the string into a seperate function?
This is a bit hard to read. Can we use a try-with-resources pattern here?
Can we use a try-with-resources pattern here?
I think this is not needed.
This should be error
I think we should use the new name here.
nit: you can use StringUtils.isNotBlank(systemStreamPartition.getSystem())
nit: I think this is a bit strange to have a single call to getWrittenDataSize() and then call it in the other methods.
This is not a good idea. You can use the constant for the key "uuid".
nit: I think this is a bit strange to have a single quote character in the table name.
I think this should be a constant.
I think this should be private.
I think this should be a constant.
This is a bit confusing. I think it's better to have a single boolean expression.
I think this should be "Student" instead of "Student".
I think it's better to use assertj.
I think this should be a constant.
Why do we need this test?
I think this should be a constant.
I think we should use the same name for both test and test-stream-workmanager-config.xml
Why not just use the diamond operator?
I think we should use a lambda here.
This is not a good idea. You can use the java 8 syntax to write the code.
I think this is not necessary. The caller of this method is already doing this check.
We should probably remove the mOnSubscriptionsChangeListener from the onPause() method.
I think this should be closed = false
I think we should use the same name as the other one.
please use CollectionUtils.isNotEmpty()
I think this should be assertEquals(String, boolean, boolean)
This is not a good idea. You can use the super class directly.
This is a bit hard to read. I would prefer to use a static import for this.
I think we should use the event.getDiscussionThread().getIdentifier() here instead of the for loop.
I think this should be debug
This is not a good idea. It should be a local variable.
This is not a good idea. You can use the class name directly.
I think this should be cursor.close()
This is a bit hard to read. I think it would be better to use a Set instead of a Set.
This should be a WARN instead of an ERROR.
I think this should be removed.
I think we should use the same approach as in the other constructor.
I think this should be done in the constructor.
I think this is not needed.
nit: I think we can use assertEquals here
I think this should be a IASTUnaryExpression, not a IASTUnaryExpression.
I think we should use the same name as the other method name
I think we should log the update log message here.
This is not a good idea. You can use a string literal here.
I think we should use a different error message here.
Please remove this line.
I think this should be leftOperand.getTypeId().isIntegerNumericTypeId()
This should be private
remove
I think this test is not needed.
This is a bit of a duplicate of the code in the original code. Can we move it to a common method?
This test is not testing the right thing. You should test the model resolver.
I think this should be a static method.
I think this should be synchronized
This is a bit confusing. I think it would be better to have a default value for the config value.
I think this should be moved to the previous line.
I think this should be setActive(false)
I think we should use a lambda here.
I think this should be moved to the presenter.
I think this should be a warning
I think this should be moved to the try block below.
I think we should use the same name as the other log entries.
I think this should be a for loop.
I think this should be a constant.
I think this should be a switch statement.
I think this should be a plural rule, not a regular expression.
This is not a good idea. You can use a local variable for localCommand.
This is not necessary.
I think this should be a warning.
Should this be "project"?
I think this should be a stream().
Should we use a logger here?
This is a bit confusing. I think it should be "off"
I think this should be a warn instead of an error.
I think this should be Objects.hash()
This is a bit hard to read. Can you please extract a method?
I think this should be a constant
I think this should be a WARN instead of an ERROR.
please use alias.equals(other.getIsReadOnly()) instead
Collections.emptyMap()
This is not necessary.
I think this should be a warning.
I think this should be a warning.
This should be done in the constructor.
I think we should use assertThat(result).isNotNull().isNotEmpty()
Remove this line.
I think it would be better to use the constant here.
please use static imports
I think we should use a method reference here.
This is not a good idea. You can use a switch statement to avoid the else clause.
I think this is a bit too complicated. Maybe we can extract a method to avoid duplication?
I think this should be a constant
I think this should be a separate method.
I think we should log the exception here.
This is a bit hard to read. I think it would be better to use a constant for the string literal.
I think we should use the constant here.
I think this should be a WARN instead of an ERROR.
Please use the same naming convention as in the other classes.
I think this should be a constant.
I think this should be a constant
I think this should be removed.
I think we should use project.getAll() here instead of this.
I think this should be a constant
This is a bit hard to read. Can we use a for-each loop?
This is a bit hard to read. Can we make it a constant?
I think we should add a check for the host name here.
I think this is a good idea. We should use the MonoError.
I think this should be a GnirsGratingOptics.
I think we should log the exception here.
This should be Comparator.naturalOrder()
@dalifreire why is this needed?
I think this should be a WARN instead of an ERROR.
I think this should be a Set<Category>
This is a good candidate for a more descriptive name.
nit: this is a copy&paste error.
style nit: no braces around single line blocks
I think it would be better to use the storageDevice.getSelectedDevices() method instead of the storageDevice.
I think we should use the same error message as in the other classes.
nit: can we use a lambda here?
rename to listener
I think this should be synchronized
I think this should be taskLockToRemove.
I think this should be a Set, not a Set.
This is not needed.
I think we should use a constant for "LABEL_VIEW"
I think this is not needed. The root directory is already in the root directory.
I think this should be a stream instead of a stream.
The device is not used.
This should be private.
I think this is not necessary.
It's better to use wait.forElementVisible(videoFeedback.isDisplayed()) instead of wait.forElementVisible(videoFeedback.isDisplayed())
nit: can we add a message to the message?
I think this is a bit too complicated. Maybe we can extract a method in the first one?
I think we should use the same instance of ICPPASTInitializerInitializerInitializer.
This is not needed.
assertThat(readConservative(shard).isEmpty();
I think we should use the same approach as in the other tests.
I think we should also check that the new estimate is 0.001f
This is not needed.
This should be a warn
This is not a good idea. You can use the same approach as the one in the other class.
why not use the diamond operator?
This should be private.
I think this should be a warning.
I think this is a bit strange. I think you can use a regex to get the first match.
This should be a constant.
I think this should be result = 31 * result + deepHashCode(Array.get(o, i));
waitWithTimeout() is a bit confusing. I think it would be better to use a timeout to wait for the time to complete.
Is this line necessary?
I think this should be trace.isCancelled()
I think we should add a check for the mime type here.
Why do we need to remove the _tableUpdaterLockMap?
I think this should be a string literal.
I think this should be a try-with-resources block.
I think we should add a check for null here.
I think we should use the icon for the icon.
This is a bit hard to read. I think it would be better to use a map instead of a map.
This is a bit of a duplicate of the code in ReadModifyWriteRowRequest. Can we reuse it?
This is a bit hard to read. I think it would be better to use a map instead of a map.
I think you can use Objects.hash() here.
I think this is a bit too complicated. I think it would be better to use a Comparator.comparing(TokenIndex::sort).
This is not needed.
I think it would be better to use a Set here.
I think this should be a Set instead of a Set.
I think this should be "JBossWS."
I think this should be priority.ordinal()
This is not a good idea. You can use a more specific exception type.
This is not a good idea. You can use the ViewAdapter.getDisplay() method to get the view.
I think this should be partitionResult != null
I think we should move this logic into the onViewCreated method.
I think this should be a warning
This is not necessary.
This is not a good idea. You can use JsonObject.of(String) instead.
We should use MoreObjects.toStringHelper() here.
I think this should be in the entity's entity
This is not necessary.
I think this should be a guard clause.
I think this should be a constant.
This is not necessary.
assertEquals(1, 0, 0, 0);
I think this is a bit too long. It's not really a big deal, but I think it would be better to use the same approach as the old version.
I think this should be write(aggregate)
This is not a valid input.
I think this should be a constant
This is a bit hard to read. Can you please use a for-each loop?
this.
This is not correct. You can use Objects.equals()
This is not correct. You can use List.of(value.reverse())
I think this should be parentY
This should be private.
please use the diamond operator
This is not a good idea. You can use Collections.emptyMap() instead.
I think this should be error.
This should be a static method.
@bgeVam please use randomAlphanumeric(Tv.TEN), false)
I think this should be synchronized.
I think we should throw an exception here.
I think we should throw an IllegalStateException here.
This is not a good idea. The label should be the label.
I think this should be a constant.
This is not thread safe. You can use a threadsafe one.
This is a bit hard to read. Can we extract a method to avoid duplication?
I think this should be moved to the @Before method.
This is a bit strange. I think it should be a string resource.
IdempotencyKey -> header
I think this should be a string resource, not a string.
I think this should be a warning.
@m-g-sonar we can use a lambda here
This is not needed.
I think this should be clientInfo.orElse(null)
Shouldn't this be a warning?
This is not needed.
This is a bit strange. You can use the "audio/" prefix.
I think this should be moved to the top of the method.
I think we should use the same name as the other variable name.
This should be debug
I think this should be in a finally block.
This is not needed.
I think this should be a constant.
I think this should be in the presenter instead of here.
nit: I think we can use the new MemoryUsageStatsProvider( store, idMapper ) constructor instead of creating a new one.
This should be a WARN instead of an ERROR.
please use getDiskDao() instead of getDiskDao()
Why synchronized?
This should be a logger.
return waitFactor;
I think we should use the same name for the test case.
I think this should be moved to the rule registry.
This should be a constant.
I think this should be debug
I think it would be better to use the Objects.hash() method here.
I think this should be a WARN instead of an ERROR.
This is not a good idea. You can use the JsonSerialization.writeValueAsString() method.
please use String.format()
Please use assertThat(podTemplate.getYamls(), empty());
This is not a good idea. You can use a concurrent hashmap.
I think this should be moved to the top of the method.
I think we should use the JsonHelper.jsonizeAsTopLevelObject(request, writer) method here.
I think this should be in a finally block.
This is not needed.
This is not necessary.
I think we should use a switch statement here.
This is a bit hard to read. Can we make a static method that takes a TajoRuntimeException?
I think we should add a null check here.
This is not correct. You can't use the new ArrayList<>() method.
Why is this check necessary?
I think this should be a constant.
This is a bit hard to read. Can you please extract a method for better readability?
This is not a valid state.
I think this should be a constant.
I think this should be a constant
I think this should be a constant.
This is a bit hard to read. Can you please use the builder builder?
I think this should be a testMoveNodeConnectWithAnotherNode()
I think we should use JobDetail.getJobDetail(key) here.
This is a bit hard to read. Can we just use the enum values?
This should be a Long
This is not correct. The content of the subsystem is not a subsystem.
nit: remove final
This is not necessary. You can use TextUtils.isEmpty()
Please use the diamond operator: suggestion log.warn("Unable to compute view: {} for: {}", pictureConversion::getId, e.getMessage);
nit: can we use assertEquals here?
I think we should use assertThat(cursor.getColumnCount()).isEqualTo(2);
Can we use a Set instead of a List?
I think we should use the same approach as in the other methods.
Is this really needed?
this is not needed
This is a bit confusing. I think it's better to throw an exception here.
I think this should be moved to the top of the method.
This is not a safe way to do this. You can use the new method to create the item.
I think this should be a warn
I think we should add a listener to the listener.
I think this should be a constant
I think this should be mapVersion.setHidden(map.getId())
This should be a constant
I think this is a bit too long.
This should be a static method.
I think this should be a stream.
This is a bit of a nitpicking, but I think it would be better to return the list of the selected indices instead of null.
I think this should be a primitive long.
I think this should be logged at error level.
This is not correct. You can use the item.getOwningCollection() == null
I think we should log the namespace name too.
This is not needed.
This is not necessary. The value of the attribute is the same as the value of the attribute.
I think we should log the exception here.
return o;
I think we should use the same approach as in UserAuthenticationScheme.
I think this should be a hash code, not a hash code.
I think we should throw an IllegalStateException here.
This should be a field of the form.
I think this should be a constant.
I think we should use the aliasMap.containsKey(alias) here.
I think this should be a warning.
Shouldn't this be done in the callback?
I think we should have a null check here.
This is not a good idea. You can use the new method to create the sample key.
I think this should be a static method.
This is a bit confusing. I think it's better to throw an exception here.
I think this should be a CompletionException
I think this is a bit too long. Maybe we can use the utility method to get the path and then use it.
style nit: we don't use braces around single line blocks
This is not necessary. You can use the config.setTemplateName("/random.yml")
@vilchik-elena Why not use a Set here?
I think this should be a constant.
rename to child
please use the static import
I think this should be a stream instead of a for loop.
I think we should use the indexIndex here instead of the indexDatabase.
I think this should be a constant.
I think it would be better to use the same approach as in the other methods.
I think this should be a constant.
Remove this line.
I think this should be a Pattern.compile() method.
I think this should be:  java int bottom = widget.getLineIndex(lastVisiblePixel); if (bottom + 1 < widget.getLineCount()) { return bottom + 1; }  The same goes for the other methods below.
This is not needed.
This is not correct. The indexUpgradeTool.getVerify() method should be tested.
@bxf12315 assertThat(body.getRouteDefinition("FcrepoSerializationBinaryUpdater")).isInstanceOf(BASE_URL, baseURL, "foo");
This is a bit hard to read. Can we extract a method to reduce duplication?
Why is this needed?
I think it would be better to use workspaceId.equals(event.getRuntimeId().getWorkspaceId()) instead of checking for null
I think this should be called "Passphrase validation failed to validate empty passphrase with none set"
I think this should be read(true)
I think this should be a boolean, not a boolean.
I think we should use the same name as the other one.
I think you can use assertEquals here
This is a breaking change.
I think this should be a WARN instead of an ERROR.
I think it would be better to use the KettleException here.
I think this should be a List<ScheduledActivity>
I think we should use the deprecated deprecated version of this method.
I think it would be better to move the check to the 'getParameters().getAction()' method.
I think this should be a switch statement.
I think this should be a string literal.
I think this is a bit too long.
This should be a constant.
I think this should be setEnvironment(environment)
@vilchik-elena Why not use the following syntax?  if (tree.is(COMPARATIVE_EXPRESSIONS) && !is(COMPARATIVE_EXPRESSIONS)) {
you can use Collections.singletonMap()
This is not necessary.
It's better to use seleniumWebDriverHelper.waitAndClick() instead of seleniumWebDriverHelper.waitAndClick()
This is a good idea.
Why is this needed?
Why not use the constant here?
I think this should be a warning
Long.valueOf(identifier.toString())
nit: remove extra line
Can we use the same approach as in the other tests?
This is not correct. You can use assertEquals(..)
I think this is not necessary.
nit: I think it's better to use Math.min() here.
This should be a constant.
I think it would be better to use the constant here.
This should be a WARN instead of an ERROR.
Why not just use a query?
channel.read(buffer) can throw IOException
I think this should be a try-with-resources block.
please use injection for VdsGroup
I think this should be a callback listener, not a callback listener.
I think this should be a WARN instead of an ERROR.
I think we should use the same approach as in the other tests.
I think this should be removed.
I think we should use the default case here.
I think we should use the same approach as in other classes.
I think you can use the new Vector(0, -0.01, 0.25) here.
I think this should be a try-with-resources block.
I think this should be moved to the try block below.
I think this should be a warning.
I think this should be a Set, not a Set.
I think this should be a WARN instead of an ERROR.
please use the diamond operator
I think it would be better to use the new exception type here.
please use String.valueOf(vmDevice.getIsReadOnly())
I think we should use the token.stream().filter(t -> t.requiresTransaction()).findAny().isPresent() here.
minor: can be replaced with: assertEquals(blobIdType.values(), isEncrypted, blobIdSerDed.isEncrypted());
This should be a Cache<K, V>
I think this should be a Set instead of a List.
I think we should add a check for the cache here.
I think this should be debug level.
I think it would be better to use a constant for the "node"
This is not a good idea. You can use a regex to build the string and compare it with a regex.
This is a bit hard to read. How about "schema.getType() == Schema.Type.class.getType() ?
I think this should be a WARN instead of an ERROR.
I think we should use a Timer.Context here.
This is not necessary.
I think this should be a constant.
This is not a good idea. You can use the new method to get the change ID from the DB.
I think we should use the default value here.
Please use the same constant for the two variables.
I think this should be a constant
I think this should be Realm.getInstance(configuration).downloadAllServerChanges();
I think this should be a constant.
I think we should use the same approach as in other tests.
This is a bit confusing. I think it should be: if (value == ZombieTypes.VILLAGER) { return false; }
This is a bit hard to read. Can we just return the result of this method?
I think we should use scheduler.scheduleAConfigurableDelayJob(this, "_timer_Elapsed", new Object[] {config.<Integer, TimeUnit.SECONDS}), so we don't need to create a new object each time.
I think this should be a try-with-resources block.
Should this be a warning?
MistWatermarkEvent::toString
This is a bit confusing. I think it would be better to use a switch statement here.
This is a bit hard to read. Can we just return the getter?
This is a bit of a very bad idea. I think it would be better to have a single method for getting the size of the file.
I think it would be better to use the constant here.
I think this should be a constant.
This is not necessary.
I think this should be a constant.
I think this is a bit too long. Can we just use the string literal here?
This should be package visible only.
nit: use constant for "test"
Why not just use Collections.emptyIterator() here?
I think we should use the try-with-resources here.
This should be private.
This is a bit of a nitpicky, but I think it would be better to use a Set instead of a List.
I think we should use the context object here instead of the context.restoreAuthSystemState();
This is not necessary.
Shouldn't this be "select"?
This should be wrapped in a try-with-resources block.
I think we should use a Set here.
I think this should be a constant.
I think this should be a WARN instead of an ERROR.
I think this should be a constant.
I think this should be a string resource, not a string.
This should be a warning.
I think this is not necessary. The fragment is already a activeFragment.
This is not correct. You can use ItemStack.EMPTY.
This is a bit confusing. I think it would be better to have a method that takes a key and then call it from the next row.
This is a good candidate for a loop.
I think this should be in the constructor.
This is not correct. You can't use a Pair.of() method.
I think this is a bit too complicated. Maybe we can extract a method to reduce duplication?
Why not just use the assertThat(thingType.getExtensibleChannelTypeIds(), is(hasSize(2)) here?
This is a bit hard to read. Can we use a try-with-resources pattern here?
I think this should be a Mono<CosmosDatabaseResponse>
nit: can we use partitionNum here?
I think we should use windowOrJoinSpecs.size() == OperatorSpec.OpCode.WINDOW || spec.getOpCode() == OperatorSpec.OpCode.WINDOW || spec.getOpCode() == OperatorSpec.OpCode.WINDOW || spec.getOpCode() == OperatorSpec.OpCode.WINDOW || spec.getOpCode() == OperatorSpec.OpCode.WINDOW || spec.getOpCode() == OperatorSpec.OpCode.WINDOW || spec.getOpCode() == OperatorSpec.OpCode.WINDOW || spec.getOpCode() == OperatorSpec.OpCode.WINDOW || spec.getOpCode() == OperatorSpec.OpCode.WINDOW || spec.getOpCode() == OperatorSpec.OpCode.WINDOW || spec.getOpCode() == OperatorSpec.OpCode.WINDOW || spec.getOpCode() == OperatorSpec.OpCode.WINDOW || spec.getOpCode() == OperatorSpec.OpCode.WINDOW || spec.getOpCode() == OperatorSpec.OpCode.WINDOW || spec.getOpCode() == OperatorSpec.OpCode.WINDOW || spec.getOpCode() == OperatorSpec.OpCode.WINDOW || spec.getOpCode() == OperatorSpec.OpCode.WINDOW || spec.getOpCode() == OperatorSpec.OpCode.WINDOW || spec.getOpCode() == OperatorSpec.OpCode.WINDOW || spec.getOpCode() == OperatorSpec.OpCode.WINDOW || spec.getOpCode() == OperatorSpec.OpCode.JOIN
I think this should be a warning
I think this should be a warn instead of an error.
Shouldn't this be a logger?
I think we should use NetworkException here.
I think this is a bit too long.
I think we should use the constants here.
I think this should be a constant.
This is not a good idea. You can use a for loop here.
suggestion assertThat(service.countTotalNumberOfVariants() < 0);
I think this should be removed.
I think we should use the same approach as in the other tests.
I think we should use assertThat(messageRoutingInformationEndpoint, name).isEqualTo(name)
This is a bit hard to read. Can we make it a static method?
IgniteCheckedException is a RuntimeException, so it's not a RuntimeException.
I think this should be a constant
This is not necessary.
I think it would be better to use the same name as the one in the method.
I think this should be error level.
This is not a good idea. You can use a Set<String> to get the list of files.
I think we should verify that the cache is still running.
This is not needed.
I think this should be a lazySet.
I think we should log the exception here.
Shouldn't this be an else if?
I think this should be a WARN instead of an ERROR.
I think you can use the following:  assertEquals("...", entry.getKey(), entry.getKey(), entry.getKey(), entry.getKey(), entry.getKey());
This is not needed.
This should be a Log.v call.
Shouldn't this be synchronized?
I think this should be a StringBuilder, not a StringBuilder.
I think this should be "and then item with id: " + item.getId() + "and then item with id: " + item.getId() + "and then item with id: " + item.getId() + "and then item with id: " + item.getId() + "and then item with id: " + item.getId() + "and then item with id: " + item.getId() + "and then item with id: " + item.getId() + "and then item with id: " + item.getId() + "and then item with id: " + item.getId() + "and then item with id: " + item.getId() + "and then item with id: " + item.getId() + "and then item with id: " + item.getId() + "and then item with id: " + item.getId() + "and then item with id: " + item.getId() + "and then item.getId() + "and then item.getId() + "and then item.getId() + "and then item.getId() + "and then item.getId() + "and then item.getId() + "and then item.getId() + "and then item.getId() + "and then item.getId() + "and then item.getId() + "and then item.getId() + "and then item.getId() + "and then item.getId() + "and then item.getId() + "and then item.getId() + "and then item.getId() + "and then item.getId()" + "and then item.getId() + "and then item.getId() + "and then item.getId() + "and then item.getId() + "and then item.getId() + "and then item.getId() + "and then item.getId() + "and then item.getId() + "and then item.getId() + "and then item.getId() + "and then item.getId() + "and then item.getId() + "and then item.getId() + "and then item.getId() + "and then item.getId()" + "and then item.getId() + "and then item.getId() + "and then item.getId() + "and then item.getId() + "and then item.getId() + "and then item.getId() + "and then item.
I think this should be a warning.
I think this should be a constant
I think we should use the prefix prefix here.
I think this should be a warn
I think this should be "userIsAwaySelf"
I think this should be a warning.
I think this should be a WARN instead of an ERROR.
I think this should be a try-with-resources.
Don't catch Exception.
I think this should be:  java return new AggregateCursor(cursorXml, Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(lastUpdate), Optional.of(
I think we should return the enabledForMultipleContexts here.
I think we should add the topic to the message.
I think you can use the stream here
I think we should use the close() method here.
This is a good idea. You can use a try-with-resources statement here.
I think this should be a WARN instead of an ERROR.
I think it would be better to use Collections.singletonList()
I think we should also clear the pendingCallbacks_ when we're done with the callback.
This is not needed.
This is a bit hard to read. Can we extract a method to create a function?
please use Collections.singletonList()
This is not needed.
This is not a good idea. You can use a CouchbaseLoadGeneratorDriver.getDriver() method to get the driver.
I think it would be better to use a CountDownLatch instead of a CountDownLatch.
This is not correct. You should be able to write the bit on the same line as the if statement.
I think this should be "NOT_DELETE".
I think we should use the constant for the path.
I think we should use the same pattern as in the other methods.
shouldn't we use the tenantDomain as the tenantDomain?
This is a bit hard to read. I think it would be better to use the same approach as the one in the other class.
This is a bit hard to read. I think it would be better to use a StringBuilder instead of a StringBuilder.
I think this should be a warn
This is a breaking change.
This is a good candidate for a method to create the directory and return the directory.
I think we should use the constants defined in the ReplicationConfig class.
I think this should be a constant.
I think we should verify that the page is not empty.
Please use assertThat instead of assertEquals.
CodeSystem.class
I think this should be a WARN instead of an ERROR.
I think we should have a separate thread-safe version of the message in the message.
I think this should be a constant.
This is a bit confusing. I think it would be better to have a default case for the case.
I think this should be a switch statement.
This is not needed.
This should be a WARN instead of an ERROR.
I think this should be a separate test case.
I think this should be a try-with-resources block.
I think this should be a RuntimeException.
I think we should use the same approach as in the other methods.
Is this needed?
I think this should be a LinkedList instead of a LinkedList.
Should we add a check for replicationSpec.isMigratingToExternalTable() here?
I think this should be:  if (sceneOpaque == null) { setRenderBufferMask(sceneOpaque, true, true, true, true, true, true, true, true, true, true); }
I think this should be a RuntimeException
I think this should be entry.getValue()
This is not needed.
This is a good candidate for a method like GSON.fromJson(message, Map.class).
This is a bit hard to read. I think it would be better to use a boolean instead of a boolean.
I think we should log the exception here.
This is not a good idea. You can use a Set instead of a set.
I think this should be assertNull(value, "'value' must not be null.");
This should be a List, not a List.
I think this should be in the init method.
I think this should be a switch statement.
This is not necessary.
I think this should be a constant.
This should return the repoKey, not the repoKey.
Why is this a string literal?
I think numberOfRunningTransactions.get() == 0 is not necessary here.
I think this should be done in the constructor.
This is a good idea.
Please use parameterized logging instead of string concatenation.
I think this should be removed
@vilchik-elena Why not just use the string builder?
I think it would be better to use a lambda here.
This should be a constant.
I think this is a bit too complicated. Maybe we can use a regex to split the string and then split the string.
I think we should use the player's name here.
I think we should use the same approach as in the other files.
please use runVm() instead of runVm()
This is a very good place to do this.
Remove this line.
This is not necessary.
This is not needed.
This should be a WARN instead of an ERROR.
This is not needed.
I think this is not needed.
I think this should be named testGetStrippedVdsUniqueIdWithUnacceptedChars
This should be a constant.
I think we should also check the version of the client.
I think this should be debug
I think we should check for null here.
I think this should be a WARN instead of an ERROR.
I think this should be a constant.
I think this is a bit too complicated. I think it would be better to have a method for this.
This test is not testing the same thing as the previous one.
I think this is a bit too complicated. It's not a good idea to have a method to do this.
This is not necessary.
I think this should be GerritServer.getInstance().addServer(gerritServerOneName, true);
Why is this needed?
I think we should verify that the event is actually returned
I think we should verify that the task is actually created.
Why not just call super.getSchema(context) here?
I think this should be a constant.
nit: I think this is a bit strange to have a test for the case where we have a new set of time and we have a new set of time.
Shouldn't this be stop()?
I think this should be a warn instead of an error.
I think we should use a switch here.
I think we should also check that the method is not null.
I think you can use the new ArrayList<>() method here.
This is not necessary.
You can use Days.days(DateTime.now()) instead of new DateTime(DateTime.now())
I think you can use: java Set<DomainViolation> violations = violations.stream().map(v -> { ... }
I think this should be a WARN instead of an ERROR.
I think this should be a warn instead of an error.
This is not a good idea. You can use the new File(gitExe).getAbsoluteFile() to get the parent file.
I think this should be moved to the end of the method.
I think this is a bit strange. I think it would be better to have a test that checks the file contents and then check the file contents.
This is a breaking change.
I think this should be logged as a warning.
rename to resource
I think this should be configurable.
This is not necessary. The test will fail if the object is not found.
I think this is not necessary.
Please use MoreObjects.toStringHelper()
Use Locale.ROOT
This is a bit confusing. I think it would be better to return LongExpr(value).longValue()
I think we should add a check for tenantIndex == null here.
I think this should be part.getEtag()
I think we should use a CountDownLatch here.
I think this is not necessary.
This is not necessary.
I think this should be set in the constructor.
I think this should be a Set, not a List.
I think this should be a WARN instead of an ERROR.
This is not a valid ref name.
I think this should be a POST request.
I think this should be initialized in initPlugins()
I think we should log the exception here.
This is a good candidate for a more specific exception.
I think this should be LOG_ID_BITS
I think this should be in a try-with-resources block.
I think this should be a warning.
I think this should be "default"
Igneous.joystick1.getButtonSource(6)
I think this should be a switch statement.
I think this should be warn
Can we use Boolean.TRUE.equals() instead of a Boolean?
I think this should be a while loop.
I think this should be a StringBuilder instead of a StringBuilder.
I think we should also check that the file is actually a directory.
Extract the building of the ResponseMessage to it's own variable (in eclipse, select the text, right-click > refactor > extract local variable / select code + shift+alt+L). This will make the code a bit more readable, especially when you'll be passing in other things besides the ResponseMessage.
This is not necessary.
I18N
Optional.ofNullable(commitTemplatePath)
I think it would be better to use the constants defined in the enum
rename to quarks
You can use LocalDate.now() instead of new Date()
This should be a constant
I think this should be "kinda".equals(sacScale)
@vilchik-elena Why not use random number?
This is a bit hard to read. Can we make it a constant?
This is not needed.
I think this is a bit too long. Maybe we can use a lambda here?
@vilchik-elena Why not call visit(header, packet) here?
I think this is a bit too long.
This is not needed.
I think we should use the same constant for all of these.
Please use the same formatting as the rest of the file.
I think this should be a ConcurrentHashMap.
Why is this needed?
This is a bit of a good idea. I think it would be better to use a try-with-resources block.
I think this should be a warning.
I think we should use the same name as the methodSymbol.
I think we should log the error here.
I think this should be a WARN instead of an ERROR.
I think this should be sum.size()
This should be a debug statement.
I think this should be a static method.
nit: I think this is a bit strange to have a single line:  java if (index.getQueryResults(r)).mapToLong(n -> index.getQueryResults(r))).collect(Collectors.toList());
I think we should log the exception here.
This is not a good idea. You can use a filter directly to filter.
This is not correct. You can use a Set instead of a set.
I think this mock is not necessary.
I think this should be moved to the previous line.
I think this should be a for-each loop.
I think this should be removed.
I think we should use spy(MockApplicationRunner.class) instead of mocking it.
Shouldn't this be done in the transactionManager?
Shouldn't this be JobContext.getInstance()?
This is not a very useful way to identify the server. It should be a warning.
I think this should be a constant.
Is this needed?
I think we should use the same approach as in the other constructor.
use Arrays.asList(...)
nit: this can be private
This is a bit hard to read. How about using a for loop instead?  for (int i = 0; i < length; i++) { data[i] = 1; }
I think this should be >= 0.
I think we should log the exception here.
I think we should use a constant for "processNotification"
This is not needed.
I think this should be changed to JobExplorerFactoryBean.
This is not a valid value. You should use a StringBuilder instead.
This is a bit confusing. I think it should be called something like this:  java if (playerCamera == null) { // ... }
This is a bitrateController.
This is a bit confusing. I think it would be better to have a method called scheduleOnDemandRebalance(long delay) that takes a Runnable and then call scheduleOnDemandRebalance(long delay) and then call scheduleOnDemandRebalance(long delay) and then call scheduleOnDemandRebalance(long delay) and then call scheduleOnDemandRebalance(long delay) and then call scheduleOnDemandRebalance(long delay) and then call scheduleOnDemandRebalance(long delay) on the task.
I think we should move this logic to the task.getHandle() method.
I think it would be better to use a Set here.
Can we use a constant for "jdbc:h2"?
I think this should be done in the constructor.
I think you can use a.toString() here.
I think this is a bit too complicated. We should have a method in namespace that returns namespace and not namespace.
This should be a WARN instead of an ERROR.
I think this is a bit too complicated. Maybe we should extract a method to reduce duplication?
nit: can we make this a Set instead of a set?
I think this should be false
Please use Assert.assertEquals(expected, actual)
I think this should be a ConcurrentHashMap.
nit: I think we can use the same approach as the other one.
I think we should use the fChart.getImage(ISharedImages.IMG_ELCL_REMOVE) method to get the Image.
I think we should use Paths.get(path.getBspPath()) here.
Use UTF-8 instead of the default charset.
@voided can you please add a TODO to check if the patientIdentifierTypes is empty?
I think this should be done in the finally block.
You can use PhysicsObject.getMass() here.
I think this should be a WARN instead of an ERROR.
I think we should add a check that the timer is not expired before calling the method.
I think this should be a field of the class, not a field.
I think this should be a WARN instead of an ERROR.
I think we should throw a EOFException here.
I think it would be better to use the same name as the host.
I think we should use the same naming as in the other class.
This should be a WARN instead of an ERROR.
I think this should be a constant.
This should be a constant.
I think this should be wrapped in a try/catch block.
This is a breaking change.
I think this should be a warning.
I think this should be a warning.
I think we should use the same approach as in the other tests.
This is a bit of a very good place to do this. I think it would be better to have a single try-with-resources block for the statement.
I think we should use the constant here.
rename to binding
I think this should be a WARN instead of an ERROR.
nit: I think it's better to use the default value in the default constructor
I think this is not necessary. The consumer has already been created by consumerCurator.verifyAndLookupConsumer(eq(sourceConsumer.getUuid()))
Why not use the static import of the method?
I think we should use the super.hasText method here.
I think we should close the zip in finally block.
I think we should use the same URL for all the tests.
I think this should be LZ4Factory.safeDecompressor()
nit: you can use ImmutableMap.of("deprecated.legacy-log-function", "true")
why public?
I think this should be a warning.
This is not necessary.
This is not necessary.
This is not a part of the PR, but it seems like this should be a separate PR.
@vilchik-elena Why not just use the newAlternatives?
I think this should be in onDestroy()
I think we should use the constant here.
I think we should use the same approach as in the other tests.
I think this should be printMessage(kind, message )
@vilchik-elena Why not just use Rational.this.denominator?
This is not necessary.
I think this is a bit too long. Can we just use the input data in the input data?
Why is this method public?
I think this should be a field, not a property.
nit: put the client_2 in a variable
This should be Optional.ofNullable(new String[]{]{file.separator})
This test is not testing anything.
why not using runInternalAction()?
I think this should be a constant.
I think we should use the same name for the method name.
This is a breaking change.
I think this should be a StringBuilder instead of a StringBuilder.
I think this should be a constant.
I think we should add a check for the categoryUrls here.
This is not needed.
Use StringUtils.isEmpty(nameComponent)
I think this should be removed.
I think this should be a warning.
I think this should be a WARN instead of an ERROR.
I think this should be a WARN instead of an ERROR.
I think this should be a List<TestFitness>
This is a bit hard to read. Can we use a StringBuilder instead?
I think this should be a loop.
I think this should be a WARN instead of an ERROR.
I think this should be a map.
I think we should throw an exception here.
I think this should be a RuntimeException
nit: I think you can use the same approach as above.
I think this should be set to true only if the user is not configured.
I think this should be a constant.
This is a bit of a very good idea. I think it would be better to have a single log message for the log entry.
I think this should be called before the chart viewer is closed.
System.out.println("Repository initialization by Spring");
This is not correct. You can't set the default value to the default value.
This is a bit of a nitpicking, but I think we should use the classloader instead of the classloader.
nit: I think this is a bit weird. I think it would be better to have a test that verifies that the timestamps are equal to the expected timestamps.
I think this should be a Set, not a Set.
@ivandalbosco why not use the same variable variable variable?
I think this should be a warning.
This is a bit hard to read. Can we use a switch statement here?
@ivandalbosco why not using the expected value?
I think we should log the target class name here.
I think this should be a Long instead of a Long.
This is not a good idea. You can use a query to get the query.
This is a bit of a nitpicking, but I think we should use the FileCacheBuilder instead of the FileCacheBuilder.
I think we should use the same approach as in the XMLOutputSerializer.
This is a debug statement.
This should be:  java return cache.getCache().getCache().getCache().getCache().getCache().getCache().getCache().getCache().getCache().getCache().getCache().getCache().getCache().getCache().getCache().getCache().getCache().getCache().getCache().getCache().getCache().getCache().getCache().getCache().getCache().getCache().getCache().getCache().getCache().getCache().getCache().getCache().getCache().getCache().getCache().getCache().getCache().getCache().getCache().getCache().getCache().getCache();
I think you can use the ChannelHandlerAdapter.close() method here.
This is not a safe way to do this, but I think it would be better to use a simple if (value != null && value instanceof String) check.
Shouldn't this be inDefault?
This is not a snapshot, but the snapshot is not stored in the snapshot.
I think this should be a MongoWriteException.
I think this should be a lambda.
I think this is a bit too long. Maybe we can extract a method that takes a filter and then filter on the filter.
Can we use the same pattern as in VoltLogger?
I think this should be a CountDownLatch
I think this should be a constant.
I think we should also check that the config is not null.
This is not necessary.
This test is not testing anything.
Why not just use a.get(0) here?
I think this should be Jenkins.get().checkPermission(Jenkins.CONFIGURE.CONFIGURE).
I think this should be in the presenter instead of here.
I think this should be a WARN instead of an ERROR.
This is not a good idea. You can use a lambda here.
This is not a good idea. You can use the [this](<LINK_0>
I think this is a good candidate for a method to be used instead of repeating the code.
I think we should check the stateClass here.
I think this should be a field of the class.
I think we should have a more specific exception here.
I think this should be snapshot.getId()
I think we should use the KickstartFactory.lookupKickstartTreeByLabel(label) method to avoid the duplication.
remove
I think this should be a constant.
This is not necessary.
I think you can use the label label here.
I think this should be a filter, not a filter.
This is a bit hard to read. Can you please extract a method?
I think this should be <=
I think this should be List<ScalarImplementationChoice>
I think this should be a constant.
nit: I think this is a bit strange to have a test case for the case where the sample row keys are not empty.
I think we should also log the event here.
This is a bit hard to read. Can we use a switch statement here?
This should be a constant.
I think we should add a lock here to the PartitionWrapper.
please use getStoragePoolDao()
I think we should use the same approach as in the other tests.
I think this should be removed
I think this should be removed.
I think we should add a null check here.
I think this should be done in the callback instead of here.
I think you can use VectorUtils.of(new double[] {2, v.length}) instead of new HashMap<>(k, v)
Shouldn't this be in the if statement above?
This is a bit confusing. I think it's better to just use the card's name instead of the card name.
I think this should be a more specific exception.
I think we should add a null check here.
I think this should be moved to the previous line.
@bgeVam please use try-with-resources
This is not a good idea.
This is a bit hard to read. Can you please extract a method for this?
I think we should use a Set here.
I think this should be assertEquals(CoreUtils.getUserAgentPropertiesFromProperties("azure-core.properties").getVersion());
This should be a WARN instead of an ERROR.
I think this should be Jenkins.getInstance().
I think this should be a constant.
I think we should use the constant here.
I think this should be done in the constructor.
This is a bit confusing. I think it's better to have a single constructor that takes a list of addresses and then call it once.
Why do we need to synchronize on this?
I think this should be a Set<PosixFilePermission> since it's a Set<PosixFilePermission>.
This is not a good idea. You can use a File object to construct a directory.
I think we should use the preference to set the default value.
suggestion checkNotNull(channelID, "Channel ID cannot be null");
I think this should be a field of the class, not a field.
I think this should be a constant
This is not correct. It should be the same as the other.
I think this should be moved to the finally block.
This is a bit hard to read. Can you please extract a method?
I think this should be warn
I think this should be moved to the caller of this method.
I think we should use the adapter here instead of the adapter.
I think this is a bit too complicated. What if the reindex server is not a single core mode?
I think it would be better to use the EventHubProducer here.
I think this should be written as a byte[] rather than a String.
nit: I think we can use assertThat(logHandler.getStoredLogRecords().get(0).getMessage()).isEqualTo(logMessage)
This is a breaking change.
I think this should be a warning.
I think you can use the new method here.
I think this should be MekHqXmlUtil.writeSimpleXmlTag(pw1, indent + 1, "typeName", MekHqXmlUtil.writeSimpleXmlTag(pw1, indent + 1, "typeName", MekHqXmlUtil.escape(type.getInternalName()));
I think this should be a timeout.
I think we should use the same name for both cases.
I think we should use the same name for the log message.
I think this should be an error.
I think this should be a static method.
This is not needed.
I think we should log the error here.
Why not just use the String.join() method?
This is a breaking change.
Please use LocaleUtils.isEmpty(LocaleUtils.getDefaultConfigurationVersion())
log.error("RemoteException", e);
I think this should be in the @BeforeClass method.
I think this should be a WARN instead of an ERROR.
I think this should be filteredValues.remove(element);
I think this should be a static method.
This should be a constant.
This is not needed.
Collections.unmodifiableList()
I think this should be a switch statement.
I think this should be moved to the canDoAction() method.
This is not a good idea. You can use the same approach as in the other methods.
please use getBackend()
@vilchik-elena Why not using the primitive type?
This is not needed.
This is a bit confusing. I think it should be a boolean flag.
This should be a Timber.w
This is a bit confusing. I think we should have a method for this.
I think this should be a try-with-resources.
I think this should be private
I think it would be better to use the same approach as in the other methods.
I think this should be a constant.
This is not a valid range.
Shouldn't we log the config here?
I think this should be a try-with-resources.
Why is this needed?
This is a bit hard to read. Can we make it a constant?
This should be a logger.
I think this should be a warning.
I think this should be a constant.
rename to resource
This is a breaking change.
I think this is a bit too complicated. I think it would be better to have a method to add the key and the key to the map.
please use CollectionUtils.isNotEmpty()
@vilchik-elena Why not using the raw type?
I think we should use the same approach as the annotation type.
@ivandalbosco why not use the same pattern as in other places?
I think this should be a warning.
This should be CosemDateTime.
I think this should be assertNull(initialDispute.getEvidenceSubObject());
I think this should be moved to the top of the method.
Why not just call setSeltectedDevParams(list)?
I think this should be a switch statement.
This is a bit confusing. I think it would be better to have a method called something like isUnresolved(host) and then call that method.
I think we should verify that the serialDataReceived method is not called.
This should be a File.
This is a bit hard to read. I think it would be better to use a Map instead of a HashMap.
I think this should be error
I think this should be a GitException, not a GitException.
I think this should be removed.
I think we should use itemToolTip instead of itemToolTip here.
Extract the building of the ResponseMessage to it's own variable (in eclipse, select the text, right-click > refactor > extract local variable / select code + shift+alt+L). This will make the code a bit more readable, especially when you'll be passing in other things besides the ResponseMessage.
I think we should use the same error message as in the test.
rename to element
Please use StringUtils.join instead of StringUtils.join
I think this should be fArg1.isNoexcept(inCalledContext)
I think we should add a default case here.
This is not correct. You can use Tuple.equals(that.values)
I think this is a bit too complicated. It's not a good idea to have a separate method for a job.
This should be a constant.
I think this should be updatedEnqueuedWrites(long writes, long timestamp)
I think this should be called in the onChunkExecStateChanged() method.
I think this should be a warning.
I think this should be a constant.
I think this should be assertEquals(0, tracker.idleChannelCount( address ).
This test is not testing anything.
I think we should check that the payload is a List of events.
This should be done in onSuccess()
I think this should be in the finally block.
This is not thread safe.
I think this should be a constant.
You can use the same approach as above:  if (result != null && !result.isEmpty()) { return scale; }
I think this should be a constant.
This should be a GuidValue, not a Guid.
I think this should be a Set<Consumer> not a Set<Consumer>
This is a bit hard to read. Can we make it a constant?
This is not necessary.
I think we should use the constant DEFAULT_FONTS_FILE_PATH here.
I think this should be a while loop.
I think this should be a constant.
I think this should be a constant.
I think this should be removed.
Collections.singletonList
I think you should use the constant KEY_FIELD instead of KEY_FIELD.
This is not a good idea. If you have a single metric, you can use a single metric.
This is not necessary, you can just use the new method.
Why do we need to check for null here?
I think we should use the same approach as in the other method.
I think this should be a Map<String, Object>
@ivandalbosco this is a bit strange to me. I think it would be better to use the same pattern as the one above.
I think this is not needed.
I think we should throw a RuntimeException here.
I think we should use distributionTarget.getDataSource() here.
I think this should be in the if (index == 0) {
This should be final
This is a breaking change.
I think we should use org.junit.Assert.assertEquals(expected, actual) here.
I think this should be synchronized.
This is not needed.
This is not correct. You can't use the expectedYear variable.
Please use StringBuilder instead of StringBuilder.
I think we should use the action action here instead of the action action.
This is a bit confusing. I think it's better to return an empty list instead of null.
I think this should be a try-with-resources block.
this.elementSizeInBytes = elementSizeInBytes;
I think this should be moved to the top of the method.
I think we should return Optional.empty() here.
This is a good candidate for a private method.
This is not a good idea. You can use the DBProvider.get() method instead.
I think we should use the cache name here.
Can you use the same UUID as the one you did for the other one?
nit: I think we can just return the default value directly.
I think this should be a static method.
I think this should be moved to the top of the method.
This should be a constant
This is not a good idea. You can just use the keyOnlyTracker.
suggestion assertSignalEventExecutionSet(emptyTopEvent.getExecutionSet(), EMPTY_VALUE, CANCELLING, EMPTY_VALUE);
I think this should be a separate test case.
I think this should be a constant.
I think this should be a constant.
I think this should be moved to the start method.
Why not just use a CountDownLatch?
I think you can use the same code as in the above method.
I think this should be a WARN instead of an ERROR.
I think this is not necessary.
I think this should be enclosingClass.getEnclosingElement()
please use 'getStorageDomainId' instead of 'getStorageDomainId'
I think this should be a WARN instead of an ERROR.
@dalifreire why this is not public?
This should be "Export Wizard".
This should be a constant.
nit: I think we can use the same pattern as above:  int oldCount = tupleCounts.getInt(0, destRow);
I would prefer to use a switch statement here.
Should this be a WARN instead?
I think we should use the new GooglePubsubConsumer(this, processor) constructor here.
I think this should be debug level
I think this should be sortedAgencies.
I think we should use the new QueryParams class here.
I think we should use the same value for the GoogleApiAvailability enum.
I think this should be removed.
I think this is a bit too complicated. Maybe we can use FunctionType.getFunctionType() instead of FunctionType.getType(i).isVarArgs()?
I think this should be a field, not a field.
I think this is a bit more readable:  java .filter(b -> b.getAttribute("value").equals(value)) .findFirst();
I think this should be a try-with-resources block.
nit: you can use the same approach as above.
I think we should add a checkCache(metricRegistry, metricRegistry) method to updateCache(metricRegistry, metricRegistry, metricRegistry)
style nit: we don't use braces around single line blocks
I think we should add a check for null here.
This is a good idea.
This is not a good idea. You can use a Set here.
This is not a good idea. You can use a method reference here.
Please use CRED_USER constant
I think we should verify that the message is correct.
This is not correct. You can use the Objects.equals() method.
I think this should be a copy of the map.
I think we should throw an exception here.
This is a bit confusing. I think it would be better to have a method called setPartitionState(String regionNode) that takes a boolean parameter.
This is not needed.
I think this should be a List<Element>
I think this should be a warning.
I think this should be return Objects.equals(other.underlyingData().get());
Shouldn't this be set to false?
I think this should be a WARN instead of an ERROR.
@dalifreire this is not correct. You can use assertThat.isTrue(matcher.matches())
I think you can use Collections.singletonMap(doc_CAT_FASTA, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC_SUPERCAT_TOOLS, DOC
This is a good idea.
I think we should use a StringBuilder here.
I think this should be warn
I think we should log the exception here.
I think this should be a constant
I think it's better to use a shutdownTermination method here.
I think this should be a WARN instead of an ERROR.
I think this is not necessary.
I think we should use a lambda here
I think this should be written as a writeFixedLengthString(textSegment.getExtendedHeaderDataOverflow(), TextConstants.TXSOFL_LENGTH)
I think we should use a stream here.
This sleep is not needed.
Remove this line.
I think this should be numaFreeMemFreeMap.put("memFree", numaFreeMemFreeMap.put("memFree", Integer.valueOf(memFreePerNode));
I think we should use a constant for "row"
This is not a valid credentials.
I think this should be removed.
I think we should use the FlowRefFactoryBean here.
This is not a valid value. You should use a constant for the host name.
I think this should be a constant.
Can we use assertEquals here?
I think this should be in the finally block.
nit: this could be a static method
I think this should be a constant.
I think this should be a WARN instead of an ERROR.
Please remove this line.
This should be a constant.
I think we should use the same error message as above.
I think this should be moved to the finally block.
nit: I think the expected value should be the expected value.
I think this should be synchronized
return o;
This is a bit hard to read. Can we use a switch statement here?
I think this should be removed.
I think we should use the same approach as in the other methods.
I think you can use a Set here.
I think this should be a try-with-resources block.
I think this should be in a finally block.
I think this should be inside the if statement, otherwise the migration will fail if the migration fails.
I think this should be moved to the top of the method.
I think you can use the same buffer for both buffer and buffer.
I think we should add a null check here.
This is a bit hard to read. Can we just return true?
I think this is a bit too long. We should probably use a local variable for this.
This is a debug statement.
Please remove this.
I think this should be moved to the previous line.
minor: can you use the same order as above?  assertEquals(blobId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId, referencePartitionId);
This should be a constant.
This is a bit of a nitpicking, but I think we should use the try-with-resources pattern here.
Please remove this line.
I think we should use a more specific exception here.
This is not necessary.
This is not a good idea. You can use the same address as the previous one.
I think this should be a CommitTxnEvent.
I think this sleep is not needed.
This should be Sponge.getRegistry().
I think this should be moved to the previous line.
This is not needed.
@ivandalbosco Why not use the same pattern as above?
This is a bit hard to read. Can we extract it to a method?
I think this should be removed.
I think this should be removed.
Why do we need to do this?
I think this should be: java return Objects.equals(team1, team2.getTeamSkillLevel());
This is not a good idea. You can use the new method directly.
Can we use a linked list here?
This is a bit of a nit, but I think it's better to use instanceof instead of instanceof.
I think we should use a logger here.
This is a bit hard to read. I think it would be better to use a StringBuilder instead of a String.
I think we should use the same name as the other variable names.
I think we should log the exception here.
I think this is not needed.
please use getVmList() instead of vm.getStatus() == status
I think we should use the constant here.
please use parameterized logging instead of string concatenation
I think this is a bit too long. Maybe we can extract this into a method?
I think we should use the metricKey here instead of the metricKey.
I think we should use the same name for the project name here.
I think this should be a constant.
This is not necessary.
I think we should use the same approach as in <LINK_0>
I think this should be a Teleporter instead of a Teleporters.
I think we should add a null check here.
can we use Collections.singletonMap() here?
I think this should be a VillagerEntity, not a VillagerEntity.
I think this should be a constant.
I think this should be a WARN instead of an ERROR.
I think it would be better to check the type of the LiteralExpression and check it in the checkPositional method.
I think we should use a CountDownLatch here.
I think it would be better to use the constant here.
I think this should be a List<TagModel>
Can you add a message to the assertEquals statement?
Why not just use the diamond operator?
I think this should be a WARN instead of an ERROR.
This should be a WARN instead of an ERROR.
You can use the new method here.
This is not necessary.
I think this should be moved to the model attribute, not here.
remove
This is a bit confusing. Can we just return the configured address?
I think this is not needed.
This is not necessary.
Can you please use the same format as in the other files?
I think we should use the same action as the action.
I think this should be a warn instead of an error.
I think we should use ButterKnife @onClick annotation instead of implementing OnClickListener
I think this should be a WARN instead of an ERROR.
I think we should add a check for the input row to avoid the loop.
I think this should be a constant.
please use Collections.singletonList()
I think we should use the same format as in the other classes.
I think this should be a logger.
This should be a debug statement.
I think this should be t.end()
This is a breaking change.
I think we should use the default value here.
I think we should use Platform.getOS() instead of File.separator + mobileSession.getAppName() + File.separator + mobileSession.getAppName() + File.separator + mobileSession.getAppName() + File.separator + mobileSession.getAppName() + File.separator + mobileSession.getAppName() + File.separator + mobileSession.getAppName() + File.separator + mobileSession.getAppName() + File.separator + mobileSession.getAppName() + File.separator + mobileSession.getAppName() + File.separator + mobileSession.getAppName() + File.separator + mobileSession.getAppName() + File.separator + mobileSession.getAppName() + File.separator + mobileSession.getAppName() + File.separator + mobileSession.getAppName() + File.separator + mobileSession.getAppName() + File.separator + mobileSession.getAppName() + File.separator + mobileSession.getAppName() + File.separator + mobileSession.getAppName() + File.separator + mobileSession.getAppName() + File.separator + mobileSession.getAppName() + File.separator + mobileSession.getAppName() + File.separator + mobileSession.getAppName() + File.separator + mobileSession.getAppName() + File.separator + mobileSession.getAppName() + File.separator + mobileSession.getAppName() + File.separator + mobileSession.getAppName() + File.separator + mobileSession.getAppName() + File.separator + mobileSession.getAppName() + File.separator + mobileSession.getAppName() + File.separator + mobileSession.getAppName() + File.separator + mobileSession.getAppName() + File.separator + mobileSession.getAppName() + File.separator + mobileSession.getAppName() + File.separator + mobileSession.getAppName() + File.separator + mobileSession.getAppName() + File.separator + mobileSession.getAppName() + File.separator + mobileSession.getAppName() + File.separator + mobileSession.getAppName() + File.separator + mobileSession.getAppName() + File.separator + mobileSession.getAppName() + File.separator + mobileSession.getAppName() + File.separator + mobileSession
This is not needed.
I think this should be "No configured accounts"
This should be a constant.
I think this is a bit too complicated. I think it would be better to have a method for this.
I think this should be a WARN instead of an ERROR.
I think we should use the super.visit(e) here.
I think this should be debug level
I think we should log the exception here.
I think we should use System.nanoTime() here.
I think this should be a register(Signature<Function<Function<FunctionReference<>> params)
I think this should be a constant.
This is not necessary.
This is a breaking change.
I think you can use the expected values from the expected values to be returned by the method.
please use Objects.equals()
please use: Guid.createGuidFromString(disk.getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().getStorageDomains().get
Please use the constant for the project name.
Please remove this.
This is not needed.
I think this should be:  java this.pageNextButton.addClickHandler(new ClickHandler() { this.pageNextButton.addClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { this.pageNextButton.addClickHandler(new ClickHandler() { this.pageNextButton.addClickHandler(new ClickHandler() { this.pageNextButton.addClickHandler(new ClickHandler() { this.pageNextButton.addClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { this.pageNextButton.addClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { this.pageNextButton.addClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { this.pageNextButton.addClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { this.pageNextButton.addClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { this.pageNextButton.addClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { this.pageNextButton.addClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { this.pageNextButton.addClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { this.pageNextButton.addClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { this.pageNextButton.addClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { this.pageNextButton.addClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { this.pageNextButton.addClickHandler(new ClickHandler() { @Override public void onClick(event); } }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); }); });
I think this should be a ConcurrentSkipListMap.
Why do we need this change?
I think this should be a constant.
This should be run = false;
I think we should add a check for the type of the type here.
I think we should use the same error message as in the other methods.
I think you can use Objects.hash() here.
nit: I think this is a bit confusing. I think it's better to have a single thread pool that is created and then start the worker.
@dalifreire why we need to change this?
This is a good idea. You can use try-with-resources to close the stream.
remove
I think we should use the defaultWatcher here.
I think we should check for null here.
This is a bit of a good idea. I think it would be better to use a CompletableFuture<Future<Void> instead of a CompletableFuture<Void>.
This is not correct. You can use the accessibility directly to accessibility.
I think we should use a more descriptive name here.
I think we should use ObjectUtils.isObject(object) here.
You can use the diamond operator here
I think this should be a warning.
This is not a valid request.
This should be set to true.
Should this be a WARN instead?
I think we should use assertThat(result.get().getAuthors(), is(true));
I think this should be error
Why do we need to check if the leader is already expired?
I think this should be a constant.
I think it would be better to use the same error message as above.
This is not needed.
This is a bit hard to read. Can we make it a static variable?
This is a good example.
nit: I think we can use Collections.singletonList() here.
This should be TimeUnit.NANOSECONDS.toMillis(nsPeriod)
This is a bit confusing. I think it should be a boolean.
I think this should be a constant
You can use assertNull instead of assertNull.
I think this should be in the try block.
I think we should verify that the snapshot is completed before the call to .askAndProcessSnapshotOnDemand.
I think this should be a warning.
I think we should use the new Map<String, Component> here.
This is not a valid sender.
This is a bit confusing. I think it should be a TimeoutException.
I think this should be >= max.
I think we should use the same timestamp as the request.
I think you can use values(true, false) here.
This is a breaking change.
assertEquals(expected, actual)
I think this should be a warning.
You can use the new method here:  java if (event.getData() != null && event.getData().equals(originalId.toString())) {
This sleep is not needed.
I think this should be synchronized.
I think this should be a constant.
This is a bit strange, I think we should use assertThat(cache.getRuntimeConfiguration().getCapacityConstraint(), equalTo(1L));
I think this should be protected.
I think this should be a warning.
I think we should use the constant here.
minor: this could be a static method
Why not use the diamond operator?
I think this should be a == null || a.offset() > b.offset()
I think this should be a negative check.
I think this should be changed to Key.
I think this should be moved to the try block.
We should also check that the activity is not null.
I think this should be a static method.
This is not a good idea. You can use the built-in built-in built-in built-in for loop.
I think this should be in the try block.
I think this should be in.close()
I think this should be debug
I think this should be a try-with-resources block.
I think this is not needed.
nit: I think we can remove the requireNonNull(nameResolver, "nameResolver is null");
Why is this needed?
I think this is not needed.
This is a bit hard to read. I think it would be better to use a method reference: java return fieldsToJoin.stream() .map(f -> f.name == null ? f.name : f.name) .collect(Collectors.joining(", "));
This is not a good idea. You can use a method reference here.
This is a bit hard to read. Can you please extract a method to extract the Sudy name?
Why not just call setTopics(Arrays.asList(topics)) ?
you can use vmTo.getLastWatchdogEvent() == null && vmTo.getLastWatchdogEvent() == null
This is not a good idea. You can use the plugin instance directly.
I think this should be a warning.
Should this be a field so that it can be reused?
I think we should log the exception here.
I think this should be a for loop.
Is it possible to use a more specific exception?
This is not correct. You can use the same approach as the one in the other methods.
Please use a logger.error(message, e1, e1); instead of e1.
This is a bit confusing. I think it would be better to use a Set instead of a Set.
This is a good idea.
I think you can use assertEquals here.
I think this should be m_stateMachineMemberPath.
I think this should be in a try-with-resources block.
I think this should be removed
I think this should be Assert.assertEquals(expected, actual)
I think this should be a switch statement.
This is a good candidate for a lambda.
I think we should add a null check here to ensure we don't have to pass in the chargeEntity.
I think we should use the toStringHelper method here.
I think this should be a map instead of a map.
I think this should be a constant.
I think we should have a check for the configManager.get() != null before the check for the configManager.get() call.
This should be a logger.
I think this should be removed.
This is a good idea.
This should return GarbageCollectionStatus.SUCCESS
This is a bit hard to read. I think it would be better to use a map and then map the map to the map.
This is a bit hard to read. Can we use a simple for loop here?
Shouldn't this be a constant?
I think it would be better to use Collections.emptyMap() here.
I think this should be synchronized.
This is a breaking change.
I think it would be better to use model.getModel().getSelectedDataCenter() != null
This is not needed.
I think this should be leftOperand.setType(rightOperand.getTypeServices());
I think we should use the filter(partialFunction::isDefinedAt) method to avoid the need for the filter.
I think you can use the same order key as the one in the query runner
This is a bit hard to read. Can we use a lambda here?
I think this should be traceElement.isOpen()
This is not needed.
I think this is a bit strange. I think it would be better to use StringBuilder instead of StringBuilder.
I think you can use Objects.equals() here.
I think this should be a static field.
This is a good idea.
You can use the same approach as above: java List<RequestConstructor> result = splitUuidConstructor(result.get(0).getParameters().stream()).map(result -> { result.getParameters().forEach(param -> { result.getParameters().forEach(param -> { result.getParameters().forEach(param -> { result.getParameters().forEach(param -> { result.getParameters().forEach(param -> { result.getParameters().forEach(param -> { result.get(1).getParameters().forEach(param -> { result.getParameters().forEach(param -> { result.getParameters().forEach(param.get(0).getParameters().forEach(param.get(0).getParameters().forEach(param.get(0).getParameters().forEach(param.get(0).getParameters().forEach(param.get(0).getParameters().forEach(param.get(0).getParameters().forEach(param.get(0).getParameters().forEach(param.get(0).getParameters().forEach(param.getParameters()), ...)); });
I think this should be a field of the class.
I think this should be a warning.
I think we should use the constant here.
I think this should be implemented as:  java return interfacesInterfacesContext.getInterfacesInterfaces().stream().map(this::createTypeName).collect(toList());
This should be a constant.
This is not necessary.
I think we should use a constant for "Invalid row group checksum"
I think it would be better to use the static import of the static imports.
This is a bit hard to read. Can we just use a map?
This is not a block cache factory.
nit: I think we can use the new method here
I think this should be a Set<BehaviorNodeComponent>
I think we should log the exception here.
Shouldn't this be pushInlineDeployments?
Shouldn't this be set to the default value?
Shouldn't we use a logger here?
I think this should be set to the previous value of the setter.
I think this should be "lastModifier"
Why not just use the Xid directly?
I think this should be package-private.
I think this should be a constant.
I think we should log the exception here.
This is not necessary, you can just return true.
This is not a good idea. You can use a for loop here.
I think we should verify that the arguments are correct.
This should be a constant.
This is a bit confusing. I think it should be a set of PmProxies.
I think this is not necessary, since the data-gpt-params is already present in the data-gpt-params.
I think we should use the service reference here instead of the service reference.
@vilchik-elena Why not use the same variable for the member?
I think we should use the method invocation.getIteration().getDataVariables() here.
Why not just use the default value?
This is a bit hard to read. Can we use a method in the SchedulerConfig?
I think it would be better to use the processor.getExpression() method here.
This is not needed.
This is not correct. You should check itemClass.isAssignableFrom(MavenModuleSet.class)
This should be a constant.
I think we should also check that the value is the same as the one in the builder.
I think it would be better to use a Set<String> here.
I think this should be a constant.
I think this should be error
This is not necessary. The session is already initialized in the constructor.
Why is this needed?
why not use GlusterStatus.UP ?
I think it would be better to use the same approach as in the other commands.
Please use the new method in org.osgi.utils.utils.Utils.exec(String, int, Logger)
This should be cache.getOrDefault(resource, 0).
I think this should be in a finally block.
I think this should be a warning.
I think this should be mUseCaseGroup.
nit: I think this is a bit easier to read if you just return the value of the method.
I think this should be a constant.
I think this should be error
Why not just use the diamond operator?
I think this should be a warning.
This method should return the view type, not the view type.
This is a breaking change.
I think this should be logged as a warning.
This is a bit hard to read. How about using a lambda instead?  return getLocks() .filter(lock -> lock.getAcquired().isBefore(limitForAcquired)) .count() .count() > 0;
This should be moved to the top of the method.
I think this should be a WARN instead of an ERROR.
I think this should be a try-with-resources.
@Serranya same here, let's use the same approach as above
nit: can we make this a static final field?
This should return a Long
I think we should use the same name for all of these methods.
I think you can use the same block as in the Block constructor.
I think this should be a constant.
please use getDiskDao() instead of getDiskDao()
This should be a WARN instead of an ERROR.
I think this should be a string resource, not a string.
I think it's better to use the enum here.
This test is not testing anything.
I think we should also check the method name here.
I think this should be debug
I think this is not necessary. The original code was already in the Block constructor.
I think it would be better to use the constant here.
This is not a good idea. The status report should be returned as a StatusReport.
I think this is a bit strange. I think it would be better to have a test that checks for the first match.
I think this should be a separate method, like the other methods in this class.
I think this should be a WARN instead of an ERROR.
I think we should use the constants defined in the Constants class.
I think this is a bit strange. I think we should use the try-with-resources pattern here.
assertThat(result.toString(), is(true));
I think this should be a warning.
I think it would be better to use the AppEngineVersion enum here.
I think this should be a constant.
I think we should use the same name as the class name.
I think this should be a constant.
log.error("Couldn't launch module: {}", e);
I think this should be a separate test case.
I think this is a bit too long. Maybe we can use a method reference here?
UnsupportedOperationException
Is this really needed?
I think this should be a warn instead of info.
dataCloud Sign In is not a typical name.
This should be a copy of the list.
I think this should be a separate PR.
I think we should use a different name for the test name.
I think this should be a constant.
I think this should be moved to the plugin.
I think we should use the mocked mock here.
I think we should add the version to the attribute builder.
This is a bit confusing. I think it would be better to use the log message to indicate the problem.
I think this should be in the setup method, not in the setup method.
I think we should use the new AirMapGroundOverlay here.
please use the formatter
I think this should be a constant
I think it would be better to use KualiDecimal.parse(staleCheckRow.getCheckTotalAmount()) here.
@dalifreire why we need to use Thread.currentThread().interrupt() ?
I think this should be in a finally block.
I think this should be GerritConnector.getInstance().getRepository()
This is a bit hard to read. Can we just use the same pattern as the previous one?
@ivandalbosco Why not use a for loop here?
String.format() is a bit strange. Why not just use String.format()?
This should be "This action is destroying the content. Warning: this can't be undone!"
This should be a constant.
suggestion assertThat(secrets, hasItem(secretId));
nit: can we add a message to the exception message?
Status.BAD_REQUEST
nit: I think we can use the same style as the assignment operator.
please use injection for this
This is a bit hard to read. Can we make it a static method?
I think this is a bit strange. I think it would be better to have a single string builder that takes a string and then buildConflictingMessage() is called.
Use a try-with-resources block to close the stream.
I think we should use the same name as the other fields.
I think we should keep the old constructor and call initStat() on the new sessionAwareZNRecord.
This is not correct. You should check if the item is a child and not the child.
I think we should verify that the health check is correct.
I think this should be a field of the class.
I think we should throw a more specific exception here.
This is a bit confusing. I think it would be better to have a default value for the default value.
I think we can use the diamond operator here.
I think this should be a List<String>
This is not needed.
I think we should throw a more specific exception here.
I think this should be moved to the @Before method.
Why is this needed?
I think this should be a try-with-resources block.
I think this should be a synchronized block.
I think this should be a constant
This is a bit confusing. I think it would be better to have a method like isConnectedHostForOperation(PrimaryStorageHostRefVO ref) and call it from HostState.ConnectedHostForOperation(PrimaryStorageHostRefVO.class)
This is a bit hard to read. It's a bit hard to read.
This is not correct. You should use Objects.equals(indexAnalyzer, fieldType.indexAnalyzer)
This is a bit hard to read. Can we use a method reference instead?
I think this should be a UserContext.getCurrentUser()
This is not a good idea. You can use the same pattern as in the other methods.
Please use Objects.requireNonNull(value, "'value' cannot be null.");
I think this should be a Set, not a Set.
This is a bit hard to read. Can we use a method like this?  java if (driverClient.getCamoCategory() == Player.NO_CAMO) { return; }
I think this should be debug level
nit: assertThat(expectedStoreContent.isEmpty());
nit: this is a bit strange to have a test for the case where the class is a class.
I think this should be a constant
I think this should be a WARN instead of an ERROR.
I think this should be a setEmptyViewVisible(mAdapter.getCount() == 0)
I think this should be debug
This is not correct. You can use the following:  if (entity.forGroups().isEmpty()) { return true; }
I think we should add a log here to indicate that the secondary index was actually set.
I think this should be a constant
I think this should be mSnapshotMap.put(newIndex, snapshot);
I think this is not necessary. The only reason for this is to check if the tag is not null.
I think it would be better to use assertEquals(0, deadBug.length());
I think this should be maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength, maxLength.
This should be a constant.
I think this should be a constant
I think this should be a boolean instead of a boolean.
I think this should be in the else clause.
I think this should be a Set<Integer>
I think this is a bit too complicated. Maybe we should use a try-with-resources block here?
I think this should be a try-with-resources.
I think this should be moved to the try block above.
I think this should be a switch statement.
I think this should be done in the super class
I think you can use the trace object directly instead of calling the trace method.
I think this should be a method reference.
I think this should be a warning
I think it would be better to move this to a separate method.
@vilchik-elena Why not use name here?
This is a bit strange. I think it would be better to use StringUtils.join instead of StringUtils.join.
I think this should be a String.format
I think this should be removed.
This test is failing on CI builds.
I think this should be a try-with-resources block.
I think we should throw an exception here.
I think this should be done in the constructor.
I think we should use the same approach as in updateHostList.
I think this should be in the syncPoller.waitForCompletion() method.
I think this should be a WARN instead of an ERROR.
I think we should use the same error message as above.
I think this should be a warning.
This is a good idea.
I think this should be a warning.
I think we should use a constant for the LwM2mResponseBuilder
I think this should be Flux<Message>
I think this should be removed.
Why do we need to sleep here?
This is not necessary.
please remove this log statement
I think this should be a different method in the interface.
I think we should use the same approach as in the other classes.
I think this should be a while loop.
I think this should be removed.
Why not use @Test(expected = IllegalArgumentException.class) ?
I think we should log the exception here.
I think we should also check that the application is not null.
I think this should be cancel(false)
You can use BigDecimal.valueOf( Long.MAX_VALUE)
Extract the building of the ResponseMessage to it's own variable (in eclipse, select the text, right-click > refactor > extract local variable / select code + shift+alt+L). This will make the code a bit more readable, especially when you'll be passing in other things besides the ResponseMessage.
This is not necessary.
I think we should use the same approach as in the MessageValues class.
I think this should be "id=%s"
I think this should be trace.debug("ConnectState watcher: {}", event.getState());
@dalifreire this is not needed
This should be a List, not a List.
nit: I think we can use the same approach as in the other tests.
This is not correct. You should use the same name as the member name.
I think we should add a log here to indicate that the user is not able to connect to the same thread.
This is a bit hard to read. Can we use a function to get the stats from the app?
This is a bit confusing. I think it would be better to use the flag directly to make the flag clear.
I think this should be a List<MessageInfo>
I think this should be a WARN instead of an ERROR.
I think this should be a Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, Map<String,
I think this should be a warn
return hasNext() ?
I think we should add a null check here.
I think we should use the same span id as the one in the test class.
This is not a good idea. You can use a Set<Container> to check the container.
why not use the same name as the other one?
I think this is a bit too complicated. We should be able to use the NamedElement.getDefinition() method instead of the NamedElement.
This is a bit hard to read. Can you please extract a method to avoid duplication?
I think this should be a Set, not a Set.
assertEquals(0.0f, 0.0f);
This is not a good idea. You can use a CountDownLatch instead of a CountDownLatch.
I think this should be a GDK.gdk_pixbuf_new_from_file(buffer, null)
nit: I think we can use Optional.empty() here.
This is a good idea.
I think we should throw an IllegalArgumentException here.
This is a bit of a hack, but I think it would be better to use a static import for this.
I think this should be moved to the addPackage method.
I think we should use the new constructor here.
please use getVds_group_compatibility_version() instead of getVds_group_compatibility_version()
I think this should be a warning
This is not needed.
This is not correct. The test should fail if the path is not valid.
this.inBatchMode = inBatchMode;
This is a bit hard to read. Can we make it a static method?
I think this should be a constant
I think this should be a constant.
I think this should be a warn instead of info.
dataType is not a string, so toString() is not needed here.
I think it would be better to use a CountDownLatch here.
I think this should be a constant
This is not necessary.
This is a bit hard to read. Can we extract a method to reduce duplication?
I think this should be m_model.getLoadMetersEnabled()
This is a bit confusing. How about using the same approach as the one above?  int zoneOffsetSeconds = zoneOffsetSeconds; if (zoneOffsetSeconds == 0) { return zoneOffsetSeconds; } else if (zoneOffsetSeconds == 0) { return zoneOffsetSeconds; } else if (zoneOffsetSeconds == 0) { return zoneOffsetSeconds; } else if (zoneOffsetSeconds == 0) { return zoneOffsetSeconds; } else if (zoneOffsetSeconds == 0) { return zoneOffsetSeconds; } else if (zoneOffsetSeconds == 0) { return zoneOffsetSeconds; } else if (zoneOffsetSeconds == 0) { return zoneOffsetSeconds; } else if (zoneOffsetSeconds == 0) { return zoneOffsetSeconds; } }
I think this should be a CompletionStage.
Why not use a CountDownLatch instead of a CountDownLatch?
This is a bit hard to read. I think it would be better to use a StringBuilder instead of a String.
@Happy-Neko Same here, let's use a constant for the header.
I think this should be mAutoInsert.
I think we should use the constant DEFAULT_ID here.
I think it would be better to use Collections.singletonList()
This should be a constant.
nit: I think this is a bit strange to have a single return statement.
I think this should be a UserEntity instead of a UserEntity.
I think it would be better to use a Set instead of a List.
This should be a field of the class.
This is a bit confusing. I think it would be better to use a Set instead of a Set.
I think we should use assertThat(result, is(not(emptyOrNullString())) here.
This is not a good idea. You can use a plain plain string.
This should be a Logger.
I think you can use a static import here.
I think this should be a WARN instead of an ERROR.
I think this should be savedPage.getPersistedUrls()
I think this should be templateFileName.
I think this should be in the finally block.
I think this should be done in the constructor
I think this should be a TransactionException.
I think this should be a WARN instead of an ERROR.
This is not necessary.
I think this should be assertBuildSummary(view.getContentProvider()).thenReturn(createBuildPlan(BuildStatus.SUCCESS));
I think this should be moved to the super class.
R is a good candidate for a constant
This is a bit confusing. I think it would be better to have a method like isCollation() that returns a boolean.
This is a breaking change.
I think this should be done in a try-with-resources block.
This is a good idea.
I think we should add a null check here.
This should be a static method.
I think this should be removed
nit: I think we can just use the assertEquals method.
Shouldn't this be "Writing file Tailer state"?
I think this should be a ConcurrentHashMap.
I think this should be a constant.
I think this should be private
I think it's better to use Optional.ofNullable(SessionEditor)
I think this should be a sql statement.
I think we should use the new CloudBigtableTableConfigurationBuilder here.
I think we should add a check for null here.
I think we should log the exception here.
Why synchronized?
nit: can we use the same partition for the partition partition?
nit: I think we can just return null here.
This is not necessary.
I think we should log the tenant name here.
I think this should be:  java if (isEmpty()) { return false; } else { return false; }
I think this should be threadGroupCount - 1
why do you need to check for null here?
This is not necessary.
This is not necessary.
This is a bit confusing. I think it would be better to return a List<CompositeT> and then return a List<CompositeT>
I think this should be a WARN instead of an ERROR.
I think we should also check that the blobIds are not null.
nit: you can use the Objects.requireNotNull()
This should be a WARN instead of an ERROR.
I think it would be better to use the try-with-resources statement here.
This should be a List, not a Vector.
This is not a part of the API, but it's not a part of the API.
This should return the empty collection.
I think this should be a List<String>
I think this is a bit too complicated. Maybe we can extract a method for this?
I think this should be a Set, not a Set.
This is not a good idea. You can use the API directly to retrieve the loaded image.
I think this is a bit too long. Can we just return the list of media entities?
I think this should be a StringBuilder instead of a StringBuilder.
I think this should be a constant
This is a good candidate for a method to be used in the same package.
I think this should be a set instead of a set.
This test is not testing anything.
I think we should use the same name as the other test descriptor.
This is a bit confusing. I think it would be better to have a separate method for the same name.
I think this is a bit too complicated. I think it would be better to use JudgmentSearchResult.getJudges().stream().collect(Collectors.toList())
I think this is a bit too complicated. It would be better to have a single if statement in the if block.
I think we should use the style factory here.
This is not necessary.
This is not a good idea. You can use a boolean instead of a boolean.
I think this should be moved to the top of the method.
This should be debug
I think this should be a switch statement.
This should be a warning.
I think we should check that the parent is a revision of the tree before we check for the parent.
You can use the "getSiteUrl" method to get the site URL.
I think you can use the new method here.
This should be a try-with-resources block.
please add a null check
I think this should be pollResponseSignal.get()
I think this should be a List<Double>
I think this should be private
This is a bit strange. I think you should use a StringBuilder instead of a String.
I think we should use projectModel.getProjectModel().getProjectModel() here instead of projectModel.TYPE_VIRTUAL.equals(inputPaths)
This is not needed.
This is not necessary.
I think this should be moved to the 'if' block.
This should be a static method.
This is a bit hard to read. Could you please extract a method for this?
I think we should add the attribute name to the exception.
This should be a List, not a List.
I think we should log this error too.
Please use assertThat(messages).isEmpty()
This is a bit confusing. I think it would be better to have a method called validate(s) that takes a Function and returns a boolean.
I think this should be a try-with-resources block.
I think this should be a constant.
I think this should be a WARN instead of an ERROR.
I think this should be a ResponseData.
I think this should be in the loadWebViewUrl method.
This is a bit hard to read. I would prefer to use a static import for this.
I think this should be "return getId()"
I think this should be moved to the previous line.
Shouldn't this be an exception?
I think we should use SUSPICIOUS_ARRAY_ACCESSES.contains(variable) here.
I think this should be a singleton.
I think we should use a different name than the old property name.
I think this should be a constant.
Can we use the schema registry name here?
This is not a good idea. You can use a for loop here.
I think this should be IllegalArgumentException
This is not a test, it should be a separate test case.
I think this should be private.
This is a bit of a duplicate of the code in the if statement.
This should be a constant.
I think this should be a constant.
I think this should be a static method.
This is not necessary.
This is a bit confusing. I think we should have a default value for the app profile.
This is a bit hard to read. I would prefer to use a StringBuilder instead of a String.
I think this should be moved to the top of the method.
I think this should be "A problem occurred while creating: ";
This is not necessary.
I think this should be assertEquals(expectedEntries,ffTree.resolveEntries("src/main"));
This is not needed.
I think this is not necessary. The message is already being passed to the CompletionStageAssert.
This is a bit of a nitpicky, but I think it would be better to use StringUtils.isNullOrEmpty(value) here.
I think we should throw an exception here.
I think this is a bit too complicated. Maybe we can use the new method to get the diff?
This is not needed.
Please remove this line.
This is a bit hard to read. Can we use a regex to get the path?
This is a bit hard to read. I think it would be better to use Math.min() here.
Shouldn't this be a RuntimeException?
I think this should be called after the validation.
I think we should use the new method to get the extension name from the extension name.
I think this should be inside the if block, not here
This should be a constant.
I think we should use Mockito.spy(() -> mock(ProjectUploadController.class)) instead of mocking the mock.
This should be private.
I think this should be moved to the constructor of the JVM.
This is not a good idea. You can use the new method from the new method.
This is not a good idea. You can use org.jgit.util.StringUtil.isEmpty(String)
This is a bit of a nitpicking, but I think it would be better to move this into the if block.
I think we should use the same name as the key.
I think this should be a constant.
I think this should be a stream instead of a stream.
I think this test is not necessary. The test will fail if the header is not found.
I think we should use the same approach as in the other methods.
please use parameterized logging instead of string concatenation
rename to field
I think this should be private.
This is not thread-safe. You can just call mEnforcer.checkThreadAccess() directly.
I think we should use the new TimestampTest.secondsAgo(1) here.
I think we should add a check that the store is not null.
This is not a valid value.
This is a good idea.
I think we should have a test that verifies that the state is actually the same as the one in the state transition.
I think we should use the same message as in the message dialog.
This is a good candidate for a function to be used in the callback.
This is a bit of a nitpicky, but I think we should have a static import for this.
nit: can we use Collections.singletonList() here?
I think this should be a cacheKey, not a cacheKey.
Shouldn't this be Collection<E>?
This is a bit of a good idea. I think it would be better to use the default value of the default value.
This should be a warning.
Why not just use Object.equals(other.message)?
Why not return Collections.emptyList() ?
This should be a constant
This is not correct. It should be returning List<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map<Map
This is a bit hard to read. Can you please extract a method to reduce duplication?
why not just call this(null, null, new IFrontendMultipleActionAsyncCallback())?
I think it would be better to use a Set<Pair<Guid, Boolean> here.
This is a bit confusing. I think it would be better to have a single constructor that takes a list of gateChannelOffsets and then call chain.
I think this should be error
I think this should be moved to the finally block.
I think we should keep the check for the current value of the app.
nit: I think we can use the same name as the previous one.
This test is not testing the right thing. It should be the same as the other tests.
I think this should be a RuntimeException.
I think this should be a WARN instead of an ERROR.
This is not correct. You can use StringUtils.isNotBlank(this.changeDescription)
This should be removed.
This is a good candidate for a static import.
This is not needed.
I think this should be a constant
This is a bit confusing. I think it would be better to have a method called something like: java private SocketIOWithTimeout connect(Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket socket, Socket, Socket, Socket, Socket, Socket, Socket, Socket, Socket, Socket, Socket, Socket, Socket, Socket, Socket, Socket, Socket, Socket, Socket, Socket, Socket, Socket, Socket, Socket, Socket, Socket, Socket, Socket, Socket
This is not a good idea. You can use Map.Entry<String, String>
This should be a constant.
I think this is a bit too long. Maybe we can use a try-with-resources statement here?
I think this should be a WARN instead of an ERROR.
I think this should be inside the finally block.
This is a bit confusing. I think it's better to use the same pattern as the one in the method above.
Can we use the stream apiRoleList here?
I think this should be a warning.
I think this should be a try-with-resources.
I think this should be a Set, not a HashMap
I think this should be scheduleUpdate()
This is not a good way to test the version.compareTo(new Version(3, 2)) <= 0.
This is a bit hard to read. Can we use a StringBuilder instead?
This is a bit hard to read. I think it would be better to use a stream instead of a stream.
Why not use the new constructor?
Why not use the constant from DeviceSession?
I think this should be a debug statement.
I think this is not needed.
please use getVds() instead of getVds().getName()
Can you use the new static imports for the new methods?
Please use Objects.hash()
I think this should be a try-with-resources.
Why not just throw new InvokeActionException(e)?
Can we use a constant for this?
I think we should log the exception here.
Why do you need to synchronize here?
This is not needed.
I think it would be better to use StringBuilder instead of StringBuilder.
Why do we need to sleep here?
This is a good idea.
I think we should use the new CameraPosition.Builder() here.
I think this should be a WARN instead of an ERROR.
I think this is a bit strange. I think it would be better to use the same pattern as the one in the other file.
I think we should use the constant BLOB_TYPE_PREFIX here.
I think we should use the shared context here instead of the shared context.
I think this is a bit more readable:  Pattern pattern = Pattern.compile( "[\\x00-\\x1F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\
I think we should use the new build option here.
This is a bit confusing. I think it should be something like: java if (card1.mType.compareTo(card1.mType)) { retVal = 0; } else { retVal = 0; }
I think this should be changed to "1.0.Final"
We should probably use the same string for both strings.xml and use the same for both places.
This should be a constant.
I think this should be moved to the onSignalStrength check.
I think we should throw a more specific exception here.
I think this should be a StringBuilder, not a StringBuilder.
I think this should be a separate PR.
I think this should be a ConcurrentHashMap.
I think we should use the same error message as in the other overload.
I think this should be in a finally block
I think this should be a CountDownLatch
This is a good idea.
This is not necessary.
I think this should be index() == 4
I think this should be a fail() call.
Use logger instead of System.out.println.
I think we should use the new method here.
It's better to use the new constructor here.
rename to selection
I think we should log the exception here.
nit: I think it would be better to use ServerAddress.getServerAddress()
I think this should be a constant.
Shouldn't we use the default value for the userPrincipalLookupService?
This is a breaking change.
This is a very bad idea. I think it would be better to use a try-with-resources statement here.
please use injection for this
Please use Assert.assertTrue(selectAll.isChecked());
Collections.emptyList()
I think this should be a StringBuilder instead of a StringBuilder.
nit: I think this is a bit too long.
I think this is a bit too long. Can you please extract a method to reduce duplication?
Shouldn't this return RestView<TopLevelResource>?
@lautarobock why we need to close the connection here?
I think this should be a constant
This should be a constant.
This is a bit confusing. I think it would be better to have a method for this.
I think this should be a warning
I think this should be a switch statement.
Should this be warn?
I think this should be a try-with-resources block.
This is a pretty nice way to do this. It's a little hard to read.
This is not a good idea. You can use the vector directly.
I think we should use init(absoluteUri, contextPath, null) here.
This is a bit confusing. I think it's better to have a single constructor that takes a timeout and returns a timeout.
I think we should use the same approach as in the other tests.
This is not necessary.
I think you can use Objects.equals() here.
I think we should check the error message here.
assertEquals(lockResult.getSecond(), ERROR2)
This is a breaking change.
I think this should be a ternary
This is not needed.
I think this is not needed.
Should this be a WARN?
rename to var
I think this should be a while loop.
I think this should be a constant.
I think we should also test the case where the default is set.
I think this should be a try-with-resources.
This is a bit of a bug, but it seems like we should throw an exception here.
I think this should be a MongoApplicationTranslator.class.
this(client, path, LOCK_NAME, 1, driver);
I think this should be removed.
I think we should throw an exception here.
I think you can use the [StringJoiner](<LINK_0>
nit: space after if
I think we should use the QueryStockLedgerActionServiceImpl here.
I think we should use the same format as in other places.
I think we should use the Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch Elasticsearch
I think you can use the following:  java GitCorePreferences.core_sshClient.equals(event.getKey())
I think this is a duplicate of testRepo.toURI().getPath()
Why not call the other constructor?
I think this should be a null check.
Please use assertThat instead of assertEquals.
I think you can use the new method here.
I think we should also check that the exception is not thrown.
This is not needed.
I think this should be "shinyAppPath + "
I think we should use the constant here.
This should be error
please use injection for all injection methods
I think we should check the table status here.
I think we should use System.getProperty("java.home") instead of System.getProperty("java.home")
I think this is not needed.
I think it would be better to use the constant here.
@bgeVam please use the same naming convention for variable names
I think this should be a warning.
This is not a good idea. You can use a Set instead of a Set.
I think this should be a Set instead of a HashMap.
I think this is a bit too complicated. It would be better to have a single call to the compilerInput.getOwnSlot(provide) method that does the same thing.
I think this should be setPreferenceStore(Activator.getDefault().getPreferenceStore());
This is a bit hard to read. I think it would be better to use the same pattern as the one in the other place.
I think this should be a pre-load error.
I think we should use the same error message as the one above.
I think this should be a warning.
Can we use try-with-resources here?
I think this should be subscribe(master, RedisStore.SUBNET_ADDRESS, new MasterAttributePropagator());
I think we should add a check for the result of the checkMutable check here.
This should be a constant.
I think we should use the same approach as in the other methods.
I think this should be proposalRepository.findOne(proposalId)
This should be unimprovedDaysSpentInput.getValue().isEmpty() ? null : Long.parseLong( unimprovedDaysSpentInput.getValue().isEmpty() ? null : Long.parseLong( unimprovedDaysSpentInput.getValue().isEmpty() ? null : Long.parseLong( unimprovedDaysSpentInput.getValue() ) ? null : Long.parseLong( unimprovedDaysSpentInput.getValue() ) ? null : Long.parseLong( unimprovedDaysSpentInput.getValue() ));
This should be a constant.
This is not a good idea. You can use a StringBuilder instead.
This should be Optional.ofNullable(getColor())
This is not needed.
I think this should be a WARN instead of an ERROR.
I think this is a bit hard to read. How about:  java return Stream.range(2, max + 1).map(b -> BigInteger.valueOf(a).pow(b)) .map(b -> BigInteger.valueOf(a).pow(b)) .map(b -> BigInteger.valueOf(a).pow(b)) .distinct();
I think this should be a constant.
I think this should be a constant.
I think this is not needed.
I think this should be a field of ReportProgressEvent, not a field.
I think this should be a concurrent hashmap.
I think we should use the same error message as in the other methods.
This is not a good idea. You can use the new method to create the device.
This is not necessary.
I think this should be a WARN instead of an ERROR.
I think we should use the constant for the "line.separator"
I think this should be summing the total totalPushStat and totalQueuedBytesStat
Should we return true here?
This is not a valid scenario.
Why do you need to synchronize on bookmark?
Remove this line.
This is not necessary. StormSchedulerImpl is a singleton.
I think this should be a constant.
This should be Jenkins.CONFIGURE.
This is not a valid value.
rename to f
I think it would be better to use a CountDownLatch here.
I think this is not needed.
@bdragan I think you can use BstPreviewLayoutTest.class.getResource("abbrv.bst").toURI()
I think this should be a List<Thread>
This should be a constant.
I think this should be a separate method.
This is not a valid column type. You should use a constant for the column type.
I think this should be a constant.
This should be checksumName == null ?
I think this should be a WARN instead of an ERROR.
I think we should use the same handler as in the handler.
I think we should move this line to the Camera.CameraInfo.CAMERA_FACING_BACK.
This is not needed.
why not to use runInternalQuery(VdcQueryType.GetVmNextRunConfiguration, new VmRunConfiguration, new VmRunConfiguration, new VmRunConfigurationStatic, new VmRunConfigurationStatic, new VmRunConfigurationStatic, new VmRunConfigurationStatic, new VmRunConfigurationStatic, new VmRunConfigurationStatic, new VmRunConfigurationStatic, new VmRunConfigurationStatic, new VmRunConfigurationStatic, new VmRunConfigurationStatic, new VmRunConfigurationStatic, new VmRunConfigurationStatic, new VmRunConfigurationStatic, new VmRunConfigurationStatic, new VmRunConfigurationStatic, new VmRunConfigurationStatic, new VmRunConfigurationStatic, new VmRunConfigurationStatic, new VmRunConfigurationStatic, new VmRunConfigurationStatic, new VmRunConfigurationStatic, new VmRunConfigurationStatic, new VmRunConfigurationStatic, new VmDynamicQueryType.GetVmNextRunConfiguration, new VmDynamicQueryType.GetVmNextRunConfiguration, new VmDynamicQueryType.GetVmNextRunConfiguration, new VmDynamicQueryType.GetVmNextRunConfiguration, new VmDynamicQueryType.GetVmNextRunConfiguration, new VmDynamicQueryType.GetVmNextRunConfiguration, new VmDynamicQueryType.GetVmNextRunConfiguration, new VmDynamicContext());
please use getVmTemplate() instead of getVmTemplate()
I think this should be in a constant.
This is not necessary.
This should be a SearchBuilder
I think this should be a Map<String, Object>
Shouldn't we throw an exception here?
This is not a good idea. You can just call this.monitor.increaseStateChangeCounter() directly.
nit: I think we can use the ExpectedException rule here.
I think this should be a warning
I think we should add the correlationId to the log message.
I think this should be a warning.
I think this should be in the @Before method.
I think this should be a constant.
I think this should be a separate test case.
This should be a constant.
I think this should be set to null.
I think we should use the same approach as in org.apache.commons.lang.StringUtils.isEmpty(java.security.SecureRandom)
This is a bit hard to read. Can you please extract the strings into a constant?
This is not necessary.
This is a bit weird, but I think it would be better to use a switch statement here.
I think this should be a constant.
This should be a debug statement.
I think this should be a constant.
removeSessionImpl(sessionId, Acct.ReportReason.PRINCIPAL_LOGOUT, "Prinicial has been logout");
I think this should be a warning.
I think you can use a static import here.
This is not a good idea. You can use a boolean variable instead of a boolean.
I think we should use BenchFlowExperimentModelDAO.getExperimentModelDAO() here.
I think this should be a switch statement.
This is not a good idea. You can use the NullDatum.get() method instead.
This should be a log.error.
I think this should be private.
Why not just call the other constructor?
This query is not necessary.
nit: I think you can use ImmutableList.of("A", 0)
This should be a logger.error
I think this is a bit too long.
I think it would be better to use the constant here.
I think this should be username.equals("user")
I think this should be a for loop.
I think we should throw an exception here.
I think we should use a timer to get the time to get the time.
I think this should be a warn instead of an error.
I think it would be better to use the name of the enum here.
I think we should use the default.directory_provider here.
I think this should be a String[]
I think this should be a constant.
This is not needed.
I think this should be in the onCreate() method.
This is not a good idea. You can use the local variable directly.
This is not a good idea. You can use a for each.
This is not a query, it should be a query.
This is not a good idea.
I think we should check the expectedArgs.size() first, and assert that the expectedArgs.size() is the expectedArgs.size()
I think we should also assert that the exception is not thrown.
This should be a field so that it can be reused in multiple places.
I think we should use the same approach as in the other tests.
I think this should be a Set, not a HashMap.
You can use Collections.singletonList()
This should be: java LocalDate startDate = LocalDate.of(year, monthOfYear, 1);
I think this should be in a finally block.
I think this is a bit too complicated. Maybe we could extract it to a method?
I think this should be a Map<String, String>
I think this should be a WARN instead of an ERROR.
I think we should use the annotation annotation processor here.
I think this should be called from the constructor.
I think this should be in the InsnWrapArg constructor.
I think this is not necessary. The rule is already present in the rule and the rule is not filtered.
This is a breaking change.
I think this should be a constant.
I think this should be a constant.
I think this should be moved to the presenter.
I think this should be a constant.
please use injection for this method
I think this should be:  if (projectControl.controlForRef(getRefName()).canPerform( Permission.PUSH_MERGE) && canWrite()) { return projectControl.controlForRef(getRefName()).canPerform( Permission.PUSH_MERGE); }  I think it's more readable.
@vilchik-elena Why not make this constructor private?
This is not a warning.
I think this is a bit hard to read. I think it would be better to use the new File("target", "mvc-dispatcher-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-servlet-
I think we should verify that the expected value is the expected value.
This is not a valid port.
please use parameterized logging instead of string concatenation
This is a bit of a duplicate of the code above, maybe we can extract it to a method?
This is a good idea. We should log the exception and throw the exception.
I think we should log the exception here.
I think we should use the same style as above.
I think this should be a WARN instead of an ERROR.
@ivandalbosco why not use KieSession?
I think we should add a null check here.
I think we should use DockerClientException.class.getName()
I think this should be a constant.
I think this should be removed.
This should be a return statement.
Why not just use the string builder?
This should be a Map.
I think this should be a boolean rather than a boolean.
This should be a constant.
I think this should be a ConcurrentHashMap.
This should be a warn
I think this should be a Set<SortBy>
why not use stream?
I think we should have a test for this.
I think this should be a constant
I think this should be changed to properties.
Shouldn't this be GrillServices.SERVICE_MODE.OPEN?
Why do we need to do this?
I think this should be a WARN instead of an ERROR.
I think this should be:  java if (i instanceof CredentialItem.Username) { return true; } else { return true; }
This is a bit hard to read. I think it would be better to use a function to write the code.
I think we should use the same name for both the two variables.
This should be package private.
This should be cached.
This is a bit confusing. I think it's better to have a test that checks the handler and then check that the handler is not null.
nit: I think we can just use key.getOffset() here.
I think this should be a for loop.
This is a bit of a debug statement. I think it would be better to log the exception.
I think this should be a warning.
This is a good candidate for a try-with-resources block.
I think this should be setCursor(Cursor.WAIT_CURSOR)
I think this should be VCFHeader.CHATKVCFHeaderLines::getFilterLine
I think we should use the same pattern as in the other filters.
I think we should also check if the connection is closed.
Why do we need to verify that the message is sent?
I think this should be moved to the top of the method.
I think this is a bit too long.
@dalifreire this one too
I think we should use a constant for "dpp-shutdown"
I think it would be better to use assertEquals(1, borrows) here.
I think this should be private
I think this is a bit more readable: java if (ast.getType() == TokenTypes.PARAMETER_DEF) { return true; } else if (ast.getType() == TokenTypes.PARAMETER_DEF) { return true; }
This should be moved to the top of the method.
I think this is not needed.
I think we should use the messageHolder instead of the messageHolder.
I think this should be a boolean instead of a boolean.
I think this should be debug
I think it would be better to use the TaskInstance.getState() method instead of the TaskInstance.STATE_ACTIVE.
I think this should be a RuntimeException
This should be synchronized.
I think this should be a constant
This is a good idea.
I think this is not necessary. The test will fail if the limit is not greater than the maximum.
This is a bit hard to read. How about to use Optional.fromNullable(getTypeNameToCategoryMapIncludeDeprecated().get(categoryName)) instead?
I think it would be better to use the TaskListener instead of the TaskListener.
I think this should be a warning
This should be a constant
@vilchik-elena Why not using the same name as the one above?
This should be a warn instead of an error.
I think this should be the last event in the event that the event is updated.
I think we should check for null here.
I think we should also check that the entry is actually the correct one.
I think this should be called on the onMapReady callback instead of onMapReady callback.
I think this should be a warning.
I think this should be tearDownQueryTest()
This is not a good idea. You should use the error message to the user.
nit: I think we can just return indexHandle here.
This should be a constant.
This is not correct. You can use a boolean expression instead of a boolean.
I think we should also check that the pipeline is not null.
I think this should be removed
I think this should be a WARN instead of an ERROR.
This is not needed.
Can we use the HadoopyShardSpec.getActualSpec() here?
I think you can use Collections.emptyList()
nit: remove this line
I think we should use the same error message as the one above.
This is not a query, but the condition is not needed.
I think this should be a constant
I think we should use assertThat(payload).isEqualTo(1);
This is a bit confusing. I think it would be better to have a log message saying that the slaveInfo is not registered.
I think this is a bit too long.
This is not necessary.
This is not necessary.
This is a debug statement.
This is a bit hard to read. Can you please extract a method to get the feed name?
I think this should be !isInitialized()
This is a bit of a very broad loop. Can we just use a for loop?
This is a breaking change.
I think we should add a check for null here.
I think we should use the same string as the other string.
This is not necessary.
I think this should be a constant.
nit: I think this is redundant.
rename to layout
I think this should be in a finally block.
I think this should be a warning.
I think we should use a more descriptive name than "b_char"
I think we should use the same format as the one in the other format.
I think this is a bit strange. I think it's better to use a regex instead of a regex.
I think this should be a try-with-resources block.
I think this is a bit too complicated. Maybe we can extract a method to reduce duplication?
This is a good idea. You can use the BundleLoader.openPage() method instead.
I think this is not necessary.
I think this should be warn
I think this should be a WARN instead of an ERROR.
I think we should also verify that the entry is not present.
use assertThat(d.run().toJavaList(), is(d.run().toJavaList()));
I think this should be a WARN instead of an ERROR.
I think this should be a method on the interface.
I think we should also verify that the put operation is actually done.
This is a bit confusing. I think it would be better to use a switch statement here.
This is not a safe way to do this. You can use the super.appendAttributes(String) method.
I think we should use the constant here.
Please remove this line.
Collections.unmodifiableMap()
I think we should use a LinkedHashSet here.
I think this is not necessary. The job is already built in the Job.
I think we should add the cluster id to the log
This is not needed.
I think this should be a WARN instead of an ERROR.
I think this is not needed. The network is already present in the networkDao.
I think this should be a Set, not a Set.
This is a good idea. You can use the new method to create the IActivityListener.
I think this should be assertTrue
I think this should be Integer.parseInt(delta)
@lautarobock why do you need this?
please use getStorageDomain() instead of getStoragePool().getStorageDomain().getId()
I think this should be a GraphQLType.
I think this should be a counter
I think this should be a WARN instead of an ERROR.
I think we should verify that the refund is actually the charge.
This is not necessary.
I think this should be a constant.
This is a bit hard to read. I think it would be better to use a Set instead of a Set.
I think this should be a List<String>
This should be a constant.
We should not show the rate dialog in the dialog.
This is not necessary. The mMicToolBar can be null.
I think this should be a FeatureState.
This should be a WARN instead of an ERROR.
I think this is a bit too long.
I think we should make this package-private.
@dalifreire why not just return null?
I think this should be info level
@ivandalbosco Why not use the matcher pattern here?
Why is this needed?
Shouldn't we use the backgroundPart.getFigure().getChildren() here?
You can use mock(Bundle.class) here.
I think we should use a StringBuilder here.
I think this is not needed.
I think this is not necessary. The default file is already set in the constructor.
I think this should be a WARN instead of an ERROR.
I think this should be a constant.
I think this should be setMappedObject(metadataTermCode, "metadataTermCode");
I think you can use Pattern.compile(..) here.
I think this should be setInstalledLineNumber(int line)
I think this should be a volatile boolean
I think we should use the same approach as in the other classes.
nit: I think we can just use the new method here.
I think this should be Array.getLength( array ).
This is not a good idea. You can use the new Version.getVersion() method instead.
I think we should set the value to true here.
This is a bit hard to read. Can we use a method to get the context?
This is a bit hard to read. Can you please explain why you need to do this?
This is a good idea. We should probably use a more specific exception here.
I think we should check that the index is actually the index of the index.
I think this should be a warning.
This is a bit of a very good idea. Can you please explain why we need to add the relationship to the relationshipAPI?
This is a bit hard to read. Can you please extract a method to reduce duplication?
I think this should be wrapped in a NativeException.
This should be a constant.
This is a breaking change.
This is not necessary.
cache.size() <= cache.size()
I think this should be <=
I think this should be moved to the onStatusOnIccEf method.
I think this should be private.
I think this should be a WARN instead of an ERROR.
Why not just use the try-with-resources pattern here?
nit: can we just use the immutableTimestamp() here?
I think this should be a try-with-resources block.
please use the same formatting as the rest of the file
I think this should be a member, not a member.
nit: I think we can just use the default case here.
this.serverName = serverName;
I think we should add a null check here.
Why is this necessary?
I think we should use a AtomicInteger here.
rename to element
Please use the same name as the class name.
MergeZZZ?
This is a bit hard to read. Can we make it a static method?
I think this should be a separate method, like addStart, addStart, addStart, addStart, addStart, addStart, addEnd, addEnd, addEnd, addEnd, etc.
This is a bit of a nitpicking, but I think we can just do mAnimationCallbacks.add(callback) here.
nit: add a space after the {
This is not needed.
This is a bit hard to read. Can we use a switch statement here?
I think this should be a fail() call.
I think this should be a warning.
I think we should also assert that the bindings are not null.
I think this should be Gse.closeJob()
I think it would be better to use a Set instead of a set.
I think we should use the same message as PMDVersion.VERSION.
I think this should be xml.attribute("type", type)
I think this should be handled in the callback.onError()
This is not a good idea.
This is not a good idea. You can use Comparator.comparing(DetailedQcStatus::getId).
I think this should be a constant.
This test is not testing anything.
I think we should log the exception here.
This is a bit of a nitpicky, but I think it would be better to use a switch statement here.
I think we should use the new File(String, String) constructor here.
I think we should add a null check here.
I think this should be a Set<Target<Object>>
please use the log format
This should be a warn
I think this should be in the @Before method.
This is a very unfortunate change.
I think this should be moved to the finally block.
I think this should be a constant.
I think this should be annotationValidator.validateAnnotatedClass(annotation.annotationType())
This is not needed.
This is a bit of a performance-intentional, but I think we should use a for-each loop here.
nit: can we use the same naming as above?
I think it would be better to use try-with-resources here.
This is a bit hard to read. I think it would be better to use the header directly.
You can use the new LanguageDataGen().nextPersisted() method instead of duplicating the code.
This should be a copy of the object
I think it would be better to use the same name as the command name
rename to provider
this.nGrinderHomeReadAllowed = file;
This is a bit confusing. I think we should have a separate method for this.
please use getVm().getStatus() instead of getVm().getStatus()
This is a bit hard to read. I think it would be better to use a lambda here.
This is a bit hard to read. Can we make it a constant?
This is not correct. You can use the Objects.hash() method.
I think we should check if session is null here.
I think we should use the constant here.
I think this should be set in the presenter instead of here.
Use the constant for "eap"
I think this should be a WARN instead of an ERROR.
I think this should be removed.
This is not needed.
This is not a test, but it should be a separate test.
This is not correct. You can use Objects.equals(type, other.type)
This is not a part of the PR, but it seems like this is a bug.
@vilchik-elena This is a bit hard to read.
I think this should be debug level
I think we should log the lock path here.
I think this should be error
I think this should be a switch statement.
This is not necessary.
This is a bit hard to read. Can you please use a StringBuilder instead?
I think it would be better to use a lambda here.
I think we should throw an exception here.
I think this is not necessary, because the list is already a List.
This is a bit hard to read. Can you please extract a method to reduce duplication?
I think we should add a check for the connectionId here.
I think this should be >=
I think we should use the same ColorUtil.optJSONObject() method here.
nit: I think this is redundant.
I think we should use the same name as the key, not the one in the map.
This is a bit confusing. I think it would be better to use the same method here.
I think you can use the method reference here: <LINK_0>
This is a bit hard to read. Can you please extract a method to reduce duplication?
This test is not correct. You can use the same key as the key.
I think we should use the same naming as the other methods.
I think this is a bit too long.
I think this should be in the else clause.
This is a bit hard to read. I think it would be better to use the same approach as the previous one.
suggestion assertThat(taggedImage).contains("jclouds:testTag");
Please remove this line.
I think we should use the same approach as in other tests.
I think it would be better to use the same name as the one in the test class.
I think this should be a WARN instead of an ERROR.
This is not necessary.
I think we should add a listener to StatsMessageHandler here.
This is not a good idea. You can use the pluginPath.toPath() method instead.
I think this should be a warning.
I think this should be synchronized
This is a bit confusing. I think it would be better to have a check for the port and check if it is a port.
I think this should be a warning.
Is this log necessary?
I think this should be a try-with-resources block.
This is not necessary.
This should be a WARN instead of an ERROR.
This is not a good idea. You can use the same approach as in the other methods.
I think we should log the request here.
Should this be a warning?
This should be a S3Exception, not a S3Exception.
I think this should be a valid value, not a number.
@vilchik-elena This is a bit confusing. I think it would be better to use Optional.empty() instead of Optional.empty()
I think you can use the builder builder here.
I think we should use HadoopDruidIndexerConfig.JSON_MAPPER.writeValue(new FileOutputStream(hadoopJobIdFileName) here.
I think we should verify that times(1) is actually 1.
I think this should be a Mono<DetectLanguageResult> not a Mono<DetectLanguageResult>.
this.streamEstimator = null;
please use getDbFacade().getStorageServerConnectionDAO()
This is not needed.
Why not use the waitOn() method?
I think this should be a separate method, since it's a part of the interface.
Please use the same pattern as in the other methods.
I think this should be done in the constructor.
I think we should use the context.execute(project, ...) method to avoid the need for the context.execute(project, ...)
Objects.hash(machine, content)
You can use Collections.singletonList()
please use the same formatting as the other methods
This is a bad idea. I think it should be a SamzaException.
This should be a DamageEvent, not a DamageEvent.
This is a bit hard to read. I think it would be better to use a List<T> here.
please use Collections.singletonList
I think this should be removedProperty.set(name, property);
Can we use the logger here?
I think this should be:  switch (getFlashMode() == AeState.FLASH_MODE_OFF) { case FLASH_MODE_OFF: return state.getPreCaptureState().getAeState() == AeState.FLASH_MODE_OFF; case FLASH_MODE_OFF: return state.mPreCaptureState.getAeState() == AeState.FLASH_MODE_OFF; case FLASH_MODE_OFF: return state.mPreCaptureState.getAeState() == AeState.FLASH_MODE_OFF; case FLASH_MODE_OFF: return state.mPreCaptureState.getAeState() == AeState.FLASH_MODE_OFF; case FLASH_MODE_OFF: return state.mPreCaptureState.getAeState() == AeState.FLASH_MODE_OFF; case FLASH_MODE_OFF: return state.mPreCaptureState.getAeState() == AeState.FLASH_MODE_OFF; case FLASH_MODE_OFF: return state.mPreCaptureState.getAeState() == AeState.FLASH_MODE_OFF; case FLASH_MODE_OFF: return state.mPreCaptureState.getAeState();
I think this should be written as: java src.nioBuffer() + (int) result.longValue();
this.offset = offset;
I think we should also assert that the mapping is not null.
I think this is not needed.
I think we should use a lambda here.
I think we should add a check for the serverSpace property here.
I think this should be moved to the if statement below.
I think this should be a constant.
I think this should be a constant.
I think we should use the KotlinUtils.findKotlinClass(declaredMethod) method instead of the KotlinConstructor.
I think this should be a warning.
This is not a valid base file. It should be a base file.
I think this should be a List<String>
I think this should be removed.
nit: can be simplified to:  ImmutableList.builder() .add(Reassigner.withAlternativePartitioningScheme())
This should be a static method.
This is a bit hard to read. Can you please extract a method to reduce duplication?
I think this is not necessary.
This is not needed.
I think this should be a constant
This is not a good idea. You can use Jenkins.getInstance().getSimpleName() instead of Jenkins.getInstance()
This is a bit hard to read. Can we use a StringBuilder instead?
I think we should throw an exception here.
I think this should be a transaction, not a transaction.
nit: you can use the constant for "foo".
We should probably use a try-with-resources here.
I think this should be assertEquals(expected, actual)
I think we should use the new method instead of the old one.
This should be a List<String>
You can use the try-with-resources syntax here.
I think this should be a static method.
Please use a logger here.
I think this should be logged as a warning.
I think this should be a warn instead of info.
This is not a good idea. We should use the try-with-resources pattern here.
I think this should be a constant.
I think this should be a static method.
I think we should check that projectConversionEnabler is not null here.
I think this should be moved to the previous line.
I think this should be a constant.
This is a bit hard to read. Can we use a single statement?
I think this is not necessary.
please use formatter
I think this should be a constant.
I think this should be in the finally block.
I think this is not necessary.
I think this should be a WARN instead of an ERROR.
I think this should be a List<KeeperException>
Why is this needed?
I think we should use the dialog's name here.
I think this should be return (byteArray, offset, length) == 0;
This is a good idea. I think it would be better to throw an exception here.
Why not just return the result of the promise instead of the promise?
This is not needed.
You can use assertThat(rs).hasSize(2)
Can we use a more descriptive name?
I think we should throw an exception here.
This should be a WARN instead of an ERROR.
I think this should be a String.valueOf(value)
I think we should use the same approach as in the other methods.
I think we should use the default value for the default value.
This should be a static method.
This is not a valid session, but the session is not null.
This is not necessary. You can just use the diamond operator.
Why do we need to pass the message to the next batch?
This is not correct. The transaction is not in the transaction.
This is not necessary.
I think this should be error
I think this should be a Set, not a List.
close the inputStream?
I think we should use Objects.equals() here.
I think we should use the same approach as in the other methods.
Shouldn't this be in the serviceRegistry?
I think this should be a constant
I think we should use the same error text as the error text.
This should be private
I think this is not needed, the storage domain is already available in the storage domain.
I think this is a bit too long.
please use injection for injection
LOG.error("Unable to expose RPS/JSON result field", e);
I think this should be a warn instead of info.
I think we should use the target class here.
This should be parameterized
please use the log format
I think we should use the same ID for both the two variables.
I think this should be sum of the highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest highest
wait for the click
nit: you can use Collections.emptyMap()
This should be a warning.
I think this should be a List<String>
Can we use the optional here?
I think we should also check the MouseDown event here.
Please use StringUtils.isBlank(host)
I think this should be a warning
I think this should be a List<TaskExecutionAwareTaskDefinition>
Is this needed?
I think this should be a warning.
Remove this line.
This is not necessary.
I think this should be config.clustering().sync().replTimeout();
I think this should be a constant.
I think you should use the official way here true instead of "true"
I think it would be better to use a try-with-resources statement here.
I think this should be deleted.
I think this should be warn
nit: can be written as:  ImmutableList.of()
why not use runVdsCommand()?
I think this should be: SafeHtmlBuilder.appendHtmlConstant("<tr>").appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td>") .appendHtmlConstant("<td
I think we should also assert that the Kinesis proxy is not null.
I think this should be error == Errors.INTERNAL_PRODUCER_EPOCH || error == Errors.INTERNAL_PRODUCER_EPOCH || error == Errors.INTERNAL_PRODUCER_EPOCH || error == Errors.INTERNAL_FOR_MESSAGE_FORMAT
nit: I think you can use the expectedException rule here.
I think we should use the builder builder here.
You can use the folder object directly here.
I think this should be a separate method.
This is a bit strange. I think it would be better to use the same approach as the one in LpadRpadFunctionImplHelper.
I think it would be better to use a CountDownLatch instead of a CountDownLatch.
I think this should be a warning.
please use Collections.singletonList()
I think this should be a constant.
I think this should be a warning.
please use curly braces
nit: I think we can just use hck here.
This should be a FBO, not FBO.
This is not necessary.
I think we should use the same name as the other variable name.
I think this should be a WARN instead of an ERROR.
This is a bit hard to read. Can you please extract a method to avoid duplication?
I think this should be a field, not a field.
This is a bit confusing. I think it would be better to return a list of all the time.
This is not needed.
I think this should be private.
I think this should be a constant
I think this is a bit too long. We should probably have a static method for this.
I think this should be the first line count
I think this should be a Set<String, Definition>
I think we should use assertArrayEquals here.
I think this should be a try-with-resources block.
I think this should be in the else clause.
This is not a good idea. The histogram should be the average of the average and not the average.
This should be a debug statement.
@branco I think it's better to use the same name than the one that is defined in the same place.
I think this should be a WARN instead of an ERROR.
@bgeVam please use try-with-resources
This is not necessary. The test is failing on the test.
please use injection instead of injecting it here
Shouldn't we use the constants defined in the class?
This is not correct. You can use Objects.hash()
I think this should be a task != null && task.getSchedule() == null
I think we should use the same naming as the other classes.
I think we should use the new JREContainerPath class here.
I think we should not call this method from within the build method.
I think we should use the same name as the one in the other log messages.
Why do we need to catch this exception?
I think this should be a SamzaException.
I think we should use the same name for both the two methods.
I think we should use a Set here.
@ivandalbosco why not use try with resources?
This is a good candidate for a method to get the form file name.
I think this should be private
I think this should be leftPrec.
I think this should be KieServicesFactory.newKieServicesClient(config)
I think this should be a constant.
This is a bit hard to read. Can you please extract a method to reduce duplication?
I think this should be a constant.
nit: I think this is redundant.
I think it would be better to use assertEquals instead of assertEquals.
I think this should be in a finally block.
I think this should be a set, not a set.
This is a good idea.
I think this should be warnOnWrongModifier.
This should be a new line.
This is a good example.
I think this should be a StringBuilder instead of a StringBuilder.
I think this should be removed.
I think this should be a metric, not a metric.
I think we should use the preferenceManager.getDefaultSharedPreferences(this) here.
This is not a good idea. You can use the builder.withClientKeyPassphrase(true) method to get the credentials and then call it from the builder.withClientKeyPassphrase(false)
This is a breaking change.
I think we should use the same approach as in the other constructor.
wait.forElementPresent(PageObjectLogging.log("verifyUserLoggedIn", "userName%", userName.replace(" ", "_")));
Can you use StringBuilder instead of StringBuilder?
I think this should be "lockId"
This is not a valid hostname.
This is not a good idea. You can use the "etc/pki/vdsm/libvirt-spice/ca-cert.pem" constant.
I think this should be a WebApplicationException
This is not needed.
I think this should be envMap.put(new HashMap<>(jobDirectory, jobDirectory, jobDirectory).toString()).toString()
I think this should be virtSupported.
I think this should be:  java if (sshProperties.getHostKey() == null || !sshProperties.isStrictHostKeyChecking()) {
I think this should be: if (diff instanceof ReferenceChange) { return; }
I think this should be a try-with-resources block.
I think we should use the same string as the other string constants.
This is not a great way to do this. You can use the OAuth2AuthorizedClient.getTokenResponse() method.
I think this should be a warning
This is a bit confusing. I think it would be better to have a defaultZone and then use it.
This is not a good example.
I think this should be in the @Before method.
I think this should be a constant.
Use SWT.getPlatform()
This is a bit confusing. I think we should have a method to set the list of triggers.
I think we should also assert that the responses are sent to the cache.
I think this should be a timer.
I think we should use a different name for this.
I think this should be setAccessProtocols(true)
This is a bit hard to read. Can we make a static method in the class?
I think we should use the new constructor here.
I think this is not necessary.
I think we should use the same string for the email and email here.
I think we should also check that the key is actually the same as the one in the task name.
I think we should throw IllegalArgumentException here.
I think this should be return toLeg(startDate, endDate, payReceive, notional, true);
It's better to use seleniumWebDriverHelper.waitVisibility(By.xpath(fullNameXpath)) instead of seleniumWebDriverHelper.waitVisibility(By.xpath(fullNameXpath))
I think we should use the same partitioning logic here.
I think this should be private.
I think this should be split(s)
I think this is not necessary. The test is not testing the state of the resourcegroup.
I think this should be a double return.
I think this should be error
This should be a WARN instead of an ERROR.
This is a bit hard to read. Can you please use a StringBuilder instead?
I think this should be error
I think we should use GTK.GTK_VERSION here.
please use StringUtils.isBlank()
I think this should be a WARN instead of an ERROR.
I think we should use the same name as the one in the test class.
This should be a warning.
I think it would be better to use the constants defined in the URL class.
This is not necessary.
I think this should be a List<ScanFilter>
I think we should add a null check here.
This is a bit hard to read. Can we make a method that takes a String and returns a boolean?
I think this should be a StringBuilder
I think this should be in a finally block.
Should this be a WARN instead?
I think you can use i++ instead of i++
I think this should be a constant.
I think this should be moved to the top of the method.
It's better to use seleniumWebDriverHelper.waitAndClick() instead of seleniumWebDriverHelper.waitAndClick()
please use injection for all injection methods
This is not a good idea. You can use the method reference: suggestion return Pair.of(1.0d, distanceSensitivityBuilder.none());
I think we should add the schema name to the error message.
I think this should be private
I think this should be a warning.
I think we should add the itemType to the Builder class.
I think we should use a different version than the one in the MongoConfiguration.
Why is this needed?
This is not necessary.
I think this is not necessary. The tree.accept(idScanner) will return the same result.
This should be a constant
This is not needed.
This should be a warn instead of an error.
This is a bit confusing. I think it would be better to use a constant for "value"
I think this should be in the stop method.
I think this should be a constant.
I think we should use the same pattern as in other tests.
This is a bit confusing. I think it would be better to have a default value for the configured value.
This should be a WARN instead of an ERROR_MESSAGE.
I think this should be handled in the activity.startActivityForResult(typed.getPendingIntent(), typed.getPendingIntent(), typed.getPendingIntent(), typed.getPendingIntent(), typed.getPendingIntent(), typed.getPendingIntent(), typed.getPendingIntent(), typed.getPendingIntent(), typed.getPendingIntent(), typed.getPendingIntent(), typed.getPendingIntent(), typed.getPendingIntent(), typed.getRequestCode());
I think this should be a constant.
nit: we can merge both lines above as checkNotNull will return the given argument
Please use Preconditions.checkNotNull()
@pynicolas I think we should use the same name as the other variable name
I think this should be a constant.
This should be a TmfTimeViewAlignmentInfo, not a TmfTimeViewAlignmentInfo.
I think this should be done in the constructor.
@pynicolas I think it's better to use the new method here.
I think this should be a LOG.error()
I think it would be better to use the referenceList instead of the referenceList.
why not use the diamond operator?
nit: can we use the constant here?
Shouldn't we check for the consent ID here?
I think this should be in the if statement.
I think it would be better to use the same error message as the one that was defined in the exception message.
This should be a WARN instead of an ERROR.
I think this is a bit too complicated. Maybe we can use a method like:  Type type = type.createBlockBuilder(type, array, position); type.appendTo(array, position);  or  Type type = type.createBlockBuilder(type, array, position); type.appendTo(array, position);  or  type.appendTo(array, position);  ?
I think this should be a "else if" statement.
This should be a constant.
I think this should be inside the if block, not here
please use getDbFacade()
why not use the constants for the values?
This is a bit hard to read. I think it would be better to use a StringBuilder instead of a String.
This is a bit of a nitpicking, but I think it would be better to use a for loop here.
I think we should use a LinkedHashSet here.
This is a breaking change.
Boolean.valueOf( Preference.APPLICATION_SCOPED.get(BriefcasePreferences.BRIEFCASE_TRACKING_CONSENT_PROPERTY, Boolean.FALSE)
I think we should log the exception here.
I think this is not needed.
Please use the new method here.
This is a bit hard to read. Can we extract a method that takes a List<String> and then use it here?
@dalifreire why you need to use RqHeaders.Base here?
I think this is not necessary.
I think this should be left.transfer(left, currentExecRow)
@dalifreire why we need to create Subject here?
This should be removed.
I think this should be a List<StyleRange>
The super constructor should be private.
This is a bit of a very good idea. I think it would be better to use a LinkedHashSet instead of a HashSet.
I think this should be moved to the previous line.
I think you can use a for loop here.
This is a bit of a good idea. I think we should have a method for this.
I think this should be a Set instead of a HashSet.
I think this should be a static method.
Use a logger instead of printStackTrace.
I think this should be private.
This is not correct. You can't use the method == null.
I think you can use verify(view).updateListVisibility(false);
I think it would be better to use ToStringBuilder here.
I think we should use the same approach as in the other methods.
Can we use a more specific exception here?
I think we should log the exception here.
This is a bit hard to read. Can we make it configurable?
This is not necessary.
I think this should be a switch statement.
I think it would be better to use JobResult.getResultMap() instead of JobResult.
This is a debug statement.
I think this should be "Only one shm mounts present"
please use StringUtils.join instead of StringUtils.join
I think this should be a checkArgument
I think this should be a warning.
This is a good idea.
This is not necessary.
I think this should be a PrestoException.
I think this should be setListShown(true)
I think this should be a while loop.
This is a bit hard to read. I think it would be better to use a switch statement instead of a switch.
I would prefer to use the constant here.
I think this is a bit too complicated. Maybe we can use a stream and collect?
I think it would be better to use kernal.context().exceptionRegistry().printErrors(log); instead of the kernal.context().exceptionRegistry().printErrors(log);
I think we should remove the mRecycler.getViewTreeObserver().
This is a bit confusing. I think it should be a ReactorService.
This is a bit of a nitpicky, but I think it would be better to use the same pattern as the other way around.
I think this should be a TskCoreException.
I think we should use the same approach as in the other PR.
I think this should be a separate catch block.
This is not a valid id.
Please add curly braces to the if statement.
This should be a warn
This is a bit of a very bad idea. I think it would be better to throw an exception instead of returning null.
I think we should use the primitive boolean here.
I think this should be error
wait for the "instrNum" to be the same as in the method above?
I think we should use the MetricServiceExecutorConf.getMetricConf() method here.
I think it would be better to use the VmDynamicCommandCallback instead of the VmDynamicHandler.
Use logger instead of System.out.println.
I think this should be a constant.
Remove this line.
This is a bit weird. I think it's better to use the same approach as the one in the same class.
I think this should be a separate test case.
I think this should be a NoSuchElementException
I think this is a bit too complicated. We can use filter(p -> p.stream().filter(p -> p.stream().filter(pr -> !Context.hasPrivilege(pr.getPrivilege()))).map( Privilege::getPrivilege).collect(Collectors.joining(", "));
I think this should be a separate catch block.
This is a bit hard to read. Can we just use a boolean instead?
I think this should be a constant.
remove
I think we should use SecureStore.getInstance(secureStore) instead of the SecureStore.
This is not necessary.
I think this should be a copy of the list, not a copy.
This is a bit confusing. I think it would be better to use the split method here.
This should be a constant.
Use the constant for "src/main"
I think this should be a constant.
@bdragan I think we should use the same formatter for the new method.
I think this should be a separate commit
I think we should log the exception here.
I think this should be called before the requestLayout() call.
I think this should be a Set instead of a Set.
I think we should also check that the transaction id is not null.
I think this should be in the constructor of the class.
I think this should be a separate commit.
I think you can use the diamond operator here.
I think we should use the same style for all of the graphics widgets.
This is a bit hard to read. I think it would be better to use a builder.addParameter("rclimit", Integer.toString(batchSize));
This is not correct. You can use the isEmpty() check here.
I think this should be a stream instead of a collect.
I think this should be a constant.
This is not needed.
Why not just use the method reference here?
I think this should be a Mono<Response<Void>>
This is not a good idea. You can use a switch statement here.
I think this should be a Set<String>
I think this should be private
I think this should be a WARN instead of an ERROR.
This is not correct. You can use the new method to get the correct type.
I think we should use the same name as the one in the other trace entries.
This is not a good idea. You can use a java.util.Files.
I think we should use a try-with-resources here.
nationkey
I think you can use Collections.emptyList() here.
This is a breaking change.
why not use the logger?
I think we should log the exception here.
I would prefer to use the same approach as in other tests.
This is not a good idea. You can use a switch statement to avoid the need for the if.
I think this should be a WARN instead of an ERROR.
I think this should be a MapSqlParameterSource
I think this should be entry.getCheckpointIdLeastSignificant()
I think this should be a WARN instead of an ERROR.
I think this should be removed.
This is not needed.
This is a bit strange. I think it's better to use a boolean instead of a boolean.
This is not correct. You should use assertEquals
I think this should be "isRebaselined"
Should this be a WARN instead?
I think this should be private.
I think we should use the same approach as in the other methods.
I think this should be a constant
I think this should be a separate method.
@exper0 let's use the same approach as above.
Why is this needed?
This is not necessary.
This test is not testing the correct thing.
@ivandalbosco Why not use the same pattern as above?
I think we should remove the handlers from the messageHandlers map.
I think this should be a field of the class, not a field.
I think this should be:  java long groupId = type.equalTo(block, position, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values, values,
This is not necessary.
I think this should be a warning.
I think this should be a runtime exception.
This should be a warning.
I think this should be a ConcurrentHashMap.
This is a bit hard to read. How about using a stream instead of a stream?
nit: this can be assertRemoteNotFoundException
This is not necessary.
This should be removed.
I think we should use the same approach as in the other methods.
I think this should be:  java return appendAll(Stream.gen(() -> element).take(length));
I think this should be a StepVerifier.create()
This should be a static method.
I think this should be a WARN instead of an ERROR.
please use ObjectUtils.objectsEqual()
This is not needed.
I think this should be a constant.
I think this should be a static method.
I think we should also check that the creds are not null
I think we should add a null check here.
I think we should log the exception here.
I think this should be a constant.
I think this should be assertTrue(TestUtil.dataComplexToBytes(codec, decodedDataComplex), bytes).
This is not correct. You can use Objects.hash()
I think this should be refOffsetEnd
Why do we need to catch this?
suggestion if (input == null) {
I think this should be in the presenter instead of here.
I think this should be synchronized
This should be a PageSet.
I think we should also clear the hyperlink label here.
I think we should add a null check here.
I think this is a good idea.
I think this is not needed.
I think this should be a warning.
Why are we catching InterruptedException here?
I think this should be a constant.
This is a bit hard to read. Can you please extract a method to reduce duplication?
remove this line
This test is not testing the same thing as the one in the test.
I think we should check for null here.
I think this should be a try-with-resources.
I think we should add a check for config.isExpressionCacheEnabled() here.
I think this should be moved to the previous line.
log.error("Events did not received.");
Shouldn't this be subscribe(sc.getName(), "publishServoEvent", getName()) ?
please add a log message
I think this should be private.
This is not a good idea.
I think we should also assert that the file is not deleted.
Why do we need to synchronize on the TaskStatesPage object?
This is a bit confusing. I think it would be better to use the new TreeSet<String>() method instead of the new HashSet<>() method.
I think this should be synchronized.
I think we should add a check for ephemeralPath != null here.
rename to dependency
This is a bit hard to read. Can we use a for loop instead?
This is a bit confusing. I think it would be better to use a Set instead of a List.
I think this should be a field, not a field.
I think this should be template.get(EXTRA_SUBSTITUTIONS)
This is not needed.
this.type = requireNonNull(type, "type is null");
I think this should be called after the test case.
I think this should be debug
I think this is a bit too complicated. We should be able to do something like:  if (tags.containsKey(fromTag) && !resource.containsKey(fromTag)) { return; }  or  java if (tags.containsKey(fromTag)) { return; }  I think it's better to have a single if statement in the if statement.
Should this be a warning?
I think this should be assertEquals(authenticationToken1, user.getUsername());
You can use assertEquals(1, 2, 2, 3, 2, 3, 2, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
I think this should be set to true only if the user is active.
This is not a good idea. The base is a base.getObjectId().abbreviate(7).name()
I think this should be removed
I think it would be better to use a stream here.
This is a very good candidate for a method in the ConsoleCommandLineOptions class.
This should be a WARN instead of an ERROR.
use driver.waitUntilElementIsVisible()
@ivandalbosco Why not use the function name?
This is a breaking change.
I think this should be info
I think this should be a different test case.
@bgeVam please use SearchReferencesRequest.getDefaultFactory()
I think this should be a constant.
This is a bit confusing. I think it would be better to use a Set instead of a Set.
I think this should be called from the @AfterClass method.
This is a bit hard to read. Can we use a method reference here?
I think this should be a Set<AdditionalFeature>
rename to root
I think we should log the exception here.
This is not a valid value.
This is not needed.
This should be a warn
@exper0 let's use ExpectedException here
I think we should also check that params1 is not equal to 1.
This is not thread safe.
I think you can use Assert.assertTrue(entry.isEmpty())
I think it would be better to use the same name than the host id.
I think this should be a WARN instead of an ERROR.
I think we should use the SWTBotCLabel.getRightMargin() here instead of the SWTBotCLabel.
This is not needed.
I think this should be an if (marker != null) {
I think this should be:  if (customReason.isEmpty()) { return disabled(String.format("%s == null ? "" : disabled(String.format("%s == null ? "" : disabled(String.format("%s == null ? "" : " + reason, customReason)); }
Is this really needed?
I think this should be private
I think this should be a constant.
This is not needed.
I think this should be set in the constructor.
This is a breaking change.
nit: I think we can use the new method here
This should be private.
I think this should be a WARN instead of an ERROR.
I think this should be a static method.
This should be a BooleanStatus instead of a BooleanStatus.
I think we should use the same name as the other test method.
I think we should use the default package name here.
I think this should be private.
This is not needed.
I think you can use the try-with-resources here.
We should probably use the same logic here, like in the onFollowStatus method.
nit: I think we can use the same approach as in the other places.
I think this should be a case instead of an assert.
I think this should be readProtobuf(ProtobufWritable.class, message)
This is a bit hard to read. Can we make it a static variable?
I think this should be a WARN instead of an ERROR.
I think this should be refName.startsWith("refs/changes")
Shouldn't this be a constant?
rename to event
I think we should use the default value here instead of the default value.
It's better to use seleniumWebDriverHelper.waitAndClick() instead of seleniumWebDriverHelper.waitAndClick()
I think you can use the [String.format](<LINK_0>
This is not a good idea. You can use the FileRepository directly to get the working tree.
I think this should be a while loop.
I think this should be a synchronized block.
I think this should be initialized with the new id, not the new id.
Should we also verify that the resource has been disposed?
nit: I think the expected exception is more appropriate.
I think we should use the same approach as in the other methods.
I think we should add a flushIfNeeded(flushPredicate) method to flushIfNeeded.
I think this should be a streaming(InputStream stream) method.
This is a good idea. You can use try-with-resources to close the stream.
This is a bit hard to read. Can we just use a List instead?
I think this should be a WARN instead of an ERROR.
This is not correct. You can't return false if value is null.
I think this is not necessary.
I think this should be a more specific exception.
I think this is a good idea.
@ivandalbosco why not use Assert.assertEquals here?
I think this should be deleted.
I think it would be better to use the new method here.
I think we should add a check for config.getString(METRICS_RECORDING_LEVEL_CONFIG) to make sure that we don't have a config.
I think this should be a warning.
I think this should be a static method.
This is not needed.
I think this should be inside the lock, not here.
I think this should be moved to the coreSession.
I think this should be tested in the @Before method.
I think this should be private.
I think we should use a more descriptive name here.
I think it would be better to use the 'createNicLabel' method here.
I think this should be transcriber.isTranscribing()
I think this should be removed
I think this should be a string literal.
@vilchik-elena Why not just call this.maxIters.length()?
I think we should use the same name as the one in the log message.
I think this should be debug
This is not necessary.
Remove this line.
This should be a try-with-resources block.
I think we should use the same approach as in other places.
Objects.hash(this.getClass().getName(), sourceVariableDescriptor)
@dalifreire why not use RqFake here?
I think this should be a fail() call.
This is a bit confusing. I think we should have a method for this.
I think this should be a Set<K, V>
I think this should be done in the constructor.
I think this should be a StringBuilder instead of a String.
I think this should be a ConcurrentHashMap.
I think we should use the same name for both the two methods.
I think this should be moved to the previous line.
I think this should be a Map, not a HashMap.
I think this should be t instanceof Exception, not t instanceof Exception.
This is a bit confusing. I think it would be better to have a single constructor that takes a List<MessageHandlingMember<? super T> and then have a single return statement.
This is a good candidate for a static import.
I think this should be a warning.
I think we should throw DiscoveryException here.
I think this should be done in the transaction
I think this should be moved to the previous line.
I think this is a bit too complicated. It's not a big deal, but it's not a big deal.
I think this should be in onResume()
This should be a Log.e call.
This should be a warn
I think this should be a ConcurrentHashMap.
I think this should be a constant
I think it's better to use a try-with-resources here.
This is not correct. The value of this field is not used.
This is not needed.
I think this should be a constant.
I think we should add a check for the existence of the table name here.
This is not needed.
This is a bit confusing. I think it would be better to use the fieldsToKeep field instead of the field name.
I think we should use the strategy name here.
This is a bit confusing. I think it should be a string resource.
Use a StringBuilder instead of a StringBuffer.
I think we should check the parent of the parent.
I think this should be a WARN instead of an ERROR.
This is not a good idea. You can use a Set instead of a List.
This is a bit confusing. I think it would be better to return an empty mapGenStructure.
I think this should be a constant.
I think this should be unitToUse.
I think it would be better to use a constant for "org.apache.commons.lang.String"
I think it would be better to use the event type here.
I think this should be in the SanitizationHelper.sanitizeForLogMessage() method.
I think this should be 1, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d, 1d
This is not needed.
I think this should be moved to the previous line.
I think this should be split.length == 2
I think we should return a 404 instead of a 500 error.
I think this should be a PrestoException.
I think we should use the platform default encoding here.
I think this should be a constant.
I think this is not necessary. The check is already done in registerCheck().
nit: I think we can use the same style as above.
I think this should be a try-with-resources block.
I think this is a bit too complicated. It would be better to have a single if statement in the if block.
I think you can use the [StringJoiner](<LINK_0>
This method should be private.
This is a bit hard to read. How about:  java if (layerError == null || !layerError.hasSameSize(input)) { throw new Error; }
I think we should add a log here to indicate that the event is not enabled.
I think this should be a constant
I think we should use the same approach as in the other methods.
This is a bit of a hack to me. I think we should just use the context.getSubject() method instead of the try-catch.
I think this should be a volatile boolean
Can we move this to the top of the method?
I think this should be a timer.
please use the same formatting as the previous line
This is not needed.
I think it would be better to use the bytebuffer.length here.
I think this should be a warning.
I think this should be private
@vilchik-elena Why not just use the expression directly?
I think we should add the following check:  if (cliConfig.getMasterEndpoints().isEmpty()) { return; }
This is a bit hard to read. Can we just use SRC_TEST?
I think we should use the same naming as above.
I think this should be in the if (content instanceof Item) block.
This is not needed.
This is not necessary.
This is a bit hard to read. I think it would be better to use a Set instead of a Set.
This should be a logger.
I think this is not necessary. The original code was already in the original code.
I think we should keep the old method in the same package.
Why not just return null?
I think this should be error
This should be a constant.
I think we should use the same approach as in <LINK_0>
This is not a good idea. You can use a Vector.
This is a bit confusing. I think it should be a try-with-resources block.
This should be a warning.
This is not necessary.
This is a bit hard to read. I think it would be better to use a StringBuilder instead of a StringBuilder.
This should be a WARN instead of an ERROR.
I think this sleep is not needed.
Israel Standard Time is a good idea?
why not use vds.getId()?
I think this should be a constant.
I think we should use the new method here instead of the old one.
I think this should be a StringBuilder, not a String.
I think this should be a constant.
I think this is not needed.
I think this should be read < 0, not read < 0.
I think this should be a named constant.
nit: I think this is a bit strange. I think it's just a matter of taste.
This is a bit of a performance improvement, but I think it would be better to use a for loop here instead of a for loop.
I think this should be a NumberFormatException
This is not needed.
This is not a valid header name.
This should be a constant.
I think this should be txn.getStatus() == MARKED_ROLLBACK
This constructor should be private.
This is not necessary. You can just return the list of organizations.
I think it would be better to use a switch statement here.
I think this should be a RuntimeException
I think it would be better to use KieContainer.class.getSimpleName() here.
Objects.hashCode(broadcaster, uri, aliasNamespace, aliasNamespace)
please use static imports
This is not needed.
I think this is a bit too complicated. It's not a good idea to have a method for this.
This is a bit hard to read. I think it would be better to have a single function that takes a boolean parameter.
This is a good candidate for a method to get the input filter and return the error message.
This is a debug statement.
I think this should be a GAV.
I think this is a bit confusing. I think it's better to have a separate commit message for this.
This is not needed.
Can we use a try-with-resources pattern here?
Please use the same URL for both URLs and wikiURL.
I think this should be a list of trade.getTrade()
This is not a good idea.
suggestion info("Consistent ID: " + ignite.cluster().localNode().consistentId());
This is a bit confusing. I think it would be better to have a single constructor that takes a Map<String, String> and then call it from the constructor.
I think we should check containerBuckets.containsKey(bucketKey) here.
@vilchik-elena Why not just return the cause?
I think this should be a CitrusRuntimeException
This is not a good idea. You can use the new method to create a new object.
I think this should be a fail() call.
please use injection for VmDeviceUtils
I think this should be a long instead of a Long.
This should return Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response<Response>
This should be private.
This is a breaking change.
This is not needed.
I think this should be a boolean instead of a boolean.
This should be a constant
I think we should also check if the buffer size is less than MAX_VALUE.
I think this should be a switch statement.
I think we should also check that the list is not empty.
I think this is not needed.
This is not a good idea. You can use projectControlFactory.controlFor(p.getParent(), p.getParent()); instead.
I think this should be DEBUG
This is a bit confusing. I think it would be better to have a single constructor that takes a single argument.
I think this is a bit too much, but I think it would be better to use the String.format() method here.
This is a bit confusing. I think it would be better to use a Set instead of a Set.
this.isExternallyInducedSource = false;
@ivandalbosco Why not just use the following syntax?  java if (throwList == null) { return; }
I think this should be a constant.
I think this should be removed
I think this is not necessary.
I think this should be a runtime exception.
This test is not covered by the test.
This is not a good idea. You can use the searchView.setQuery(mSearchView.getQueryQuery()) method instead.
I think this should be a PageObjectLogging.log()
Why not just add the membership membership to the list?
I think this is a bit too complicated. Maybe we can use a method in the AbstractThreadLocalMap.java?
style nit: we don't use braces around single line blocks
I think we should also check that the list is not empty.
I think we should use the same partition method as the one in the partition table.
I think we should log the exception here.
I think this should be assertEquals(10, stereotypedClassEditPart.getChildren())
I think this should be a field of the class.
I think this should be a WARN instead of an ERROR.
I think this should be a constant
I think it would be better to use the Kafka 0.10 scan source here.
This is not a good idea. You can use a for loop here.
Why not use the factory?
I think this should be a CompletionStage.
nit: I think we can use leftProperties.get(0) here.
I think we should use the QuerySpec class here.
This is not a query, but it should be a query.
This should be a constant.
I think this should be moved to the previous line.
This constructor should be private.
I think this should be in the try-with-resources block.
I think this should be a WARN instead of an ERROR.
Please use the Objects.equals() method.
I think this should be a constant.
This is a breaking change.
I think you can use the new Object[] here.
I think this should be a WARN instead of an ERROR.
Why do we need this synchronized?
I think we should also test the case where the exception is not thrown.
This should be a constant
I think this should be assertEquals(0, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
I think it would be better to use ImmutableSet.of(HashSet::new)
I think this should be a List<String> so that we can use a List<String>
I think we should throw an exception here.
I think this is a bit too long. It's not a block, but it's not a block.
This is a bit hard to read. Can we use a single instance of the metricAccumulationLevel?
I think this should be version.getWatchdogActions().add(watchdogActions.values())
I think this should be moved to the commitChanges() method.
This is a bit hard to read. How about using a switch statement instead?
@bgeVam please use static import for assertEquals
I think we should use StringBuilder here.
I think this should be updatedMetacard.setAttribute(transientAttributeKey);
I think this should be a WARN instead of an ERROR.
this.containersMap = new HashMap<>();
I think this should be a WARN instead of an ERROR.
I think we should use Collections.singletonList here.
I think we should use the same name as the label.
Please use assertEquals(rs, rs.next()) instead of assertEquals(rs.next())
This is not needed.
please use static import
I think it would be better to use Cluster.getBiosType() here instead of newCluster.getBiosType() == null
I think you can use @Test(expected = NoSuchElementException.class) here.
I think this should be a constant
I think this should be in a finally block
I think this is a bit too long. Can we just use a for loop?
I think this should be moved to the top of the method.
I think we should use the same constant here.
I think it would be better to use the same name than the name of the variable.
I think this should be a constant.
@bgeVam please use person1.addName(person1) instead of person1.addName(new PersonName("givenName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName"), "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middleName", "middle
I think this should be a read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only read-only
I think it would be better to use a Set<String> here.
I think this should be error(s)
Please use a LinkedHashSet here.
please use Collections.emptySet()
I think this should be a constant
I think we should add the exception to the log.error() method.
I think this should be a warning
I think we should add a null check here.
Please use Preconditions.checkNotNull(cluster, "this.typeFactory is null");
This should be a static method.
I think we should use the same color as the icon, not the icon.
I think this should be synchronized
@vilchik-elena Why not check the value of the value?
Why not use the constant here?
I think this should be a warn instead of an error.
I think this is not necessary. We can just use the methodTree.declaration() directly.
This is a bit hard to read. It's not a good idea to use a string literal.
This should be a constant.
I think we should use the same approach as in the other methods.
This is a good example.
I think this should be a string resource, not a string.
why do you need to stop the bricks?
I think this should be error level.
I think this should be a RestStatusDto
I think we should use the constant here.
This is a bit of a hack to me. It's not a good idea to use the context.getWiki() method.
This is not a good idea.
This is a bit hard to read. Can we use Optional.ofNullable(Optional.of("jdbc namespace") instead?
I think this should be a Mono.empty()
Why not just call verify(mpPushSpy.getBitmapFromUrl(VALID_URL)).thenReturn(null);?
I think we should add a check for null here.
I think we should also check that the correct type is supported.
I think this is not needed.
I think we should use the same name for both strings.
Please use assertThat(result, is(not(result))
I think we should use the same version as in the other functions.
This is a bit of a very good idea. It's not a good idea to throw an exception.
why not use the storage pool?
I think this should be shutdownNow()
I think this should be synchronized
I think this should be a constant.
@vilchik-elena Why not just use the index index index index here?
I think this should be a Map<String, Object>
This is a bit of a nitpicking, but I think we should use the same approach as in the other methods.
nit: I think the first parameter should be true, not true.
This is not needed.
I think we should use TextUtils.isEmpty(preferenceKey) here.
I think you can use the diamond operator here.
This is a bit hard to read. Can you please extract a method to reduce duplication?
This is not needed.
Shouldn't this be getActiveTextEditor() != null?
This is not necessary.
I think this should be a BinlogPosition
I think this should be done in the presenter instead of here.
I think this should be a constant.
This is not necessary.
this.
This should be private.
nit: this can be private
This is not a good idea. You can use the new parameter directly.
This should be a constant.
This is not needed.
This is a debug statement.
You can use the same approach as in the other methods.
I think we should use the subscription id here.
I think this should be a constant.
This is not a good idea. You can use the cluster id from the cluster.
I think this should be xmlLoader.processResourceXml(new XpathResourceXmlLoader.XmlNode(vtdNav), new XmlContext(packageName, fsFile));
I think this should be a set of ObsService and not a set.
I think this should be a constant.
I think this should be a constant.
I think this should be a WARN instead of an ERROR.
I think this should be moved to the command.
This is not correct. The previous version was to use the new method.
This is not needed.
I think this should be a constant
I think we should use shutdownNow() here.
I think we should use the constant defined in the class.
I think we should have a test for this.
I think this should be extendedDiscoveryServices.
I think this should be a try-with-resources block.
I think we should use the same name for all the other methods.
Shouldn't this be assertTrue?
This is not correct. The state is always null.
please use injection for VdcActionType.getInstance()
style nit: no braces around single line block
I think we should use the same constant for both the "enable-basic-auth" and "enable-basic-auth"
This is not a good idea. You can use proxyHost.getHost() instead of proxyHost.
I think this should be a constant.
Shouldn't this be fields.get(Map.class) ?
Can we use assertEquals here?
This is not needed.
I think this should be a try-with-resources.
I think this should be a constant.
I think we should use a StringBuilder here.
I think we should use the same format as the other one.
I think this should be debug
This should be a warning.
I think this should be a constant.
I think this should be a StringBuilder, not a StringBuilder.
I think this check is not needed.
This is not correct. You can use the [StringUtils.isNullOrEmpty](<LINK_0> method.
@pynicolas I think this should be JpaUtils.initialize(judgment, Judgment.class)
I think this should be a try-with-resources.
I think we should use the default delimiter here.
I think this is not needed.
This is a bit hard to read. Can you please extract a method to avoid duplication?
I think we should use the new ValueValueTypeAggregator here.
I think this should be removed
I think this should be: if (referenceElement instanceof CreateEditPoliciesOperation) { return true; }
This should be a log.
I think it would be better to use the serviceClass here instead of the serviceClass.
I think we should use the error message here.
I think this should be a constant
I think this should be an error.
I think this should be private
This is a bit strange. I think it would be better to use a logger.log(Level.SEVERE, "Log exceeds limit: " + PluginImpl.getInstance().getMaxLogSize() + "MB");
I think this is not needed.
I think this should be a constant.
This is a bit hard to read. How about using a for loop instead of a for loop?
I think we should use the same bytebuffer for both of these.
I think this should be logged as a warning.
Why is this needed?
I think this should be the default value of the default value.
I think we should use a lambda here.
This is not necessary. You can use StringUtils.isNotEmpty(parts)
This is not a good idea.
This should be a static method.
I think this should be a List<E>
I think we should use the same exception message as the one above.
This is not necessary.
I think we should use the same name for the two cases.
Why do we need to set this?
suggestion assertTimerEventEmpty(emptyTopEvent.getExecutionSet(), NON_CANCELLING, EMPTY_VALUE);
This should be a logger.
This is a bit hard to read. Can we use a more descriptive name?
This is a bit hard to read. I think it would be better to use the same pattern as the one above.
I think this should be "The correct page range is from 0 to 0"
I think this should be Objects.hash()
I think this is a bit too complicated. Maybe we can extract a method that returns the offset and then use it here?
please use StringUtils.isBlank()
I think this should be in(Scopes.SINGLETON)
I think we should log the exception here.
This is a good idea.
This should be a new method.
This is a bit hard to read. Can we use a constant for the string?
I think this should be a warning.
I think this should be a List<String>
I think it would be better to use the new method getMessage() here.
This is not a good idea. The name of the variable is not a good idea.
Why not use the Socket.close() method?
This is a bit confusing. I think it would be better to use a boolean flag to indicate the file is not a file.
You can use the following:  assertEquals(1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
I think this should be a constant.
This is not necessary.
I think we should use the same instance id as instance id.
I think this should be a WARN instead of an ERROR.
I think this should be called only in the constructor.
This is a bit hard to read. Can we extract a method to reduce duplication?
please use getStoragePoolId()
I think this should be a warning.
I think this is not correct. The channel.getAdvertiseFrom() is a boolean.
This is a bit hard to read. Can we use a try-with-resources pattern here?
This is a bit confusing. I think it would be better to have a default value for this.port and set it to null.
I think this is a bit strange. I think it would be better to use a StringBuilder instead of a StringBuilder.
This is a duplicate of the one in the previous method.
I think this is not needed.
I think we should verify that the result is correct.
I think it would be better to use the same error message as in the other methods.
I think this should be in the try block.
I think this should be a Set instead of a List.
This is not necessary.
please use getStorageDomainDao()
I think this should be a list of available available hosts, not the one that is available.
I think this should be a scheduled event, not a scheduled one.
I think this should be synchronized
This should be a warning
I think this should be a IllegalArgumentException.
I think this should be a Set instead of a Set.
This should be a constant.
String.join() is a bit strange. Why not just use a StringBuilder?
This is a bit confusing. I think it would be better to use a map of the map and then check for the key.
I think this should be print(input, value)
I think this should be error
This should be a check for the viewer's viewer.
This is a bit of a hack. I think it would be better to use the following:  if (schemaName.contains(".")) { schemaName = schemaName.substring(0, schemaName.indexOf(".")); } else { schemaName = schemaName.substring(0, schemaName.indexOf(".")); }
why not just use the builder?
Please use Preconditions.checkNotNull(builder.key, "Name cannot be null");
nit: I think we can use the super constructor here.
I think this should be a constant
I think this should be a constant
I think we should use the same approach as in the test method.
This should return a null value.
I think this should be moved to the GerritConfigProvider.
I think this should be a List<DfsPackFile>
This should be a constant.
Please use the constant for the strings.xml
I think this should be an error.
I think this should be removed.
I think this should be jobConfig.getJobId()
I think it would be better to use == here.
remove this line
This should be a Log.e instead of printStackTrace.
This is not needed.
I think this should be moved to a @BeforeClass method.
Can we move this check into the metadata store?
This is a good idea. You can use the following:  java if (exercise.isLocked()) { return false; }
I think we should throw an exception here.
I think this should be "module$exports$instrument$code.instrumentCode(\"" + encodedParam + "\", " + lineNo + ")"
This is not a good idea. You can use the HomoglyphTokenFilter directly.
This should be a List, not a List.
This should be removed.
This is not a safe way to do this. You can use the MariaDbServerCapabilities.CLIENT_SESSION_TRACK constant instead of a hard-coded string.
I think this should be a checkArgument
I think we should use a Set here.
I think we should use the same approach as in the other methods.
I think this should be externalCodeEditFinal.getText().toString()
This is not correct. You can't return true for size == null || size.longValue() == -1.
This is a breaking change.
I think we should add a null check here.
I think we should use a StringBuilder here.
I think we should use the same pattern as in the other methods.
This is not necessary.
This is not a good idea. You can't do this in a separate PR.
I think this should be removed.
I think we should use the same approach as in the HLLComplexMericSerde.
nit: use assertReadOne here
This is not correct. If the buffer is in the buffer, the buffer will be cleared.
I think this is a bit strange. I think it would be better to have a single method that takes a File and returns a File.
rename to action
This is a bit confusing. I think it's better to use the comparator to compare the two fields.
This is not correct. The name of the store is a SecureStoreData.
I think this should be a sql statement.
this.
I think we should log the exception here.
style nit: no braces around single line blocks
I think we should also check that the expected value is correct.
I think this should be a constant.
This should be a WARN instead of an ERROR.
I think this should be a Composite
This is a bit confusing. I think it would be better to use a switch statement here.
I think we should throw an exception here.
I think this should be a warning.
I think we should have a test for that.
I think this should be in the if statement.
I think this is a bit too much. We can use the new File(exe).
I think we should add a check for the value of the timer to be less than zero.
I think this should be a constant
I think we should log the exception here.
Should this be a constant?
I think this should be a static final field.
I think this should be warn
I think this should be a spy so that the test is failing if the plugin is not installed.
I think this should be a List<ProducerBatch>
I think this should be a switch statement.
I think this should be a warning
I think we should use the same name as the other method.
I think we should also check that the span strategy is not null.
I think this should be removed
I think this should be a warning.
This is not a good idea. You can use a Set instead of a List.
I think this is not necessary. The test will fail if the exception is not thrown.
I think this should be a constant.
This is not correct. You can't visit the declSpecifiersWithMisalignedConst.add(declSpec);
This is not needed.
This is a bit of a duplicate of the code in the original code. Can we extract it to a method?
nit: I think we can use Preconditions.checkArgument here.
This is a bit of a copy/paste error. Can we just do:  if (filter.getColumnOffset() == 0) { return createChain(filter, F.qualifier().range(Bytes.toString(family)); } else { return createChain(filter, null, null); }
I think this check is not necessary.
I think we should add a check to see if the realm is actually in the cache.
I think we should add a metric name to the metric name.
No need to use Uri.create here.
This is not a valid environment.
This is a bit hard to read. Can we just use the enum instead of a boolean?
Why not use the same message ID as the message ID?
I think this should be inside the if block
This is a bit confusing. I think it's better to use a Set instead of a List.
This should be a constant.
I think this should be enabled only if the group is enabled.
This is not necessary, you can use DiseaseOccurrenceDao.getById(1)
Should this be a Logger?
I think we should check the group of the group in the message.
I think this should be a Glide.with(context)
I think this should be a switch statement.
This should be a constant.
I think it would be better to use a lambda here.
I think this should be ______TS("success: default value for lastName");
I think this should be deleted.
style nit: no braces around single line block
This should be a double instead of a double.
I think this should be sessionData.setTags(tagEntities.size())
please use StringUtils.isBlank()
style nit: we don't use braces around single line blocks
I think we should use a StringBuilder here.
I think this should be a bit more readable: OrderService orderService = Context.getOrderService(); OrderService orderService = Context.getOrderService(); OrderService orderService = Context.getOrderService(); OrderService orderService = Context.getOrderService(); OrderService orderService = Context.getOrderService(); OrderService orderService = Context.getOrderService(); OrderService orderService = Context.getOrderService(); OrderService orderService = Context.getOrderService(); OrderService orderService = Context.getOrderService(); OrderService orderService = Context.getOrderService(); OrderService orderService = Context.getOrderService(); OrderService orderService = Context.getOrderService(); OrderService orderService = Context.getOrderService(); OrderService orderService = Context.getOrderService(); OrderService orderService = Context.getOrderService(); OrderService orderService = Context.getOrderService(); OrderService orderService = Context.getOrderService(); OrderService orderService = Context.getOrderService(); OrderService orderService = Context.getOrderService(); OrderService orderService = Context.getOrderService(); OrderService orderService = context.getOrderService(); OrderService orderService = context.getOrderService(); OrderService orderService = context.getOrderService(); OrderService.getOrderService(); OrderService.getOrderService(); OrderService.getOrderService(); OrderService.getOrderService(); OrderService.getOrderService(); OrderService.getOrderService(); OrderService.getOrderService(); OrderService.getOrderService(); OrderService = context.getOrderService(); OrderService = context.getOrderService(); OrderService.getOrderService(); OrderService = context.getOrderService(); OrderService.getOrderService(); OrderService.getOrderService(); OrderService = context.getOrderService(); OrderService.getOrderService(); OrderService.getOrderService(); OrderService.getOrderService(); OrderService.getOrderService(); OrderService = context.getOrderService(); OrderService.getOrderService(); OrderService.getOrderService(); OrderService = context.getOrderService(); OrderService.getOrderService(); OrderService.getOrderService(); OrderService.getOrderService(); OrderService.getOrderService(); OrderService.getOrderService(); OrderService.getOrderService(); OrderService.getOrderService(); OrderService = context.getOrderService(); OrderService.getOrderService(); OrderService.getOrderService(); OrderService
I think this should be in the if block below.
I think we should throw an UnsupportedOperationException here.
This is a very bad idea. I think it should be a try-with-resources statement.
This should be a static method.
remove this line
We should probably check for null here.
I think it would be better to use TmfTraceManager.getTrace()
I think this is a good idea.
I think this should be put("grant_type", clientId);
Can you use a logger here?
I think this is not needed.
This is a bit hard to read. How about using a for loop instead?
I think we should use mListener instead of mListener here.
This is not needed.
I think we should use the following: java if (record.isPresent()) { return; }
I think this should be done in the constructor
I think this should be a constant.
I think this should be in a finally block.
I think this should be a WARN instead of an ERROR.
I think you can use the same approach as in the other tests.
@lautarobock why do we need to check if the connection is null?
This should be a completedFuture
remove
Why is this needed?
I think this should be moved to the for loop.
I think this should be called m_resolvedIntf.
I think this is a bit too much. We should probably use StringBuilder instead of StringBuilder.
I think this should be a switch statement.
You can use Collections.singletonSet()
I think this is a bit too long.
I think this should be moved to the if statement below.
I think we should use the same name for all the channels.
I think this should be a constant.
You can use try-with-resources here.
I think this should be moved to the 'isHostedEngineOnVdsCommand' method.
Can we use the log format here?
I think this should be a constant.
This is not a translation format, but it should be a translation format.
I think it would be better to use the constant here.
I think this should be called "Map<String, String> map1 = "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map2", "Map
I think this should be a static method.
I think it would be better to use the enum values here.
nit: I think this is a bit strange to have a taskRunnerWorkItem.setResult(taskStatus.getId(), taskStatus.getId());
I think we should use the same format as in the message.
I think this should be in the finally block.
I think it would be better to use the string builder here instead of the string builder.
This is not necessary. The certificate is already set by the certificate.
This is not a good idea. You can use the new one: return CommonPathCapabilities.NONE;
This is not a valid expiry date.
I think we should add a check for the selected item here.
This is not needed.
This is not correct. You can't update nextScheduleTime, but you are not updating nextScheduleTime.
please use Collections.singletonList()
This should be a Preconditions.checkNotNull(schemaName, "schemaName is null");
I think this should be a Set, not a List.
Can we use a for-loop here?
@vilchik-elena Why not use a regex?
This is a bit hard to read. Can we use a stream here?
I think we should use a different name than the one you are asserting.
This should be a WARN instead of an ERROR.
I think we should log the exception here.
I think this should be a runtime exception.
Please use injection for ValidationResult
rename to type
I think this is a bit too long.
I think this should be a WARN instead of an ERROR.
I think this should be declared as a constant.
This is a bit of a nit, but I think we should use the diamond operator here.
I think we should also check that the slot manager is not null here.
This is a breaking change.
This is not necessary.
This is not necessary. The header is already a header.
I think this should be "An error occurred"
I think we should add a check for the type of the column type here.
This is not a good idea.
why not return segmentsNeeded?
This is not a good idea. You can use the same approach as in the other methods.
I think this should be a List<String>
you can use the same approach as in the other methods
I think we should use the assertEquals method here.
nit: I think we can just use the KVS.getMetadataForTable(tableRef) method here
I think this should be a constant.
This should be a Map, not a HashMap.
I think we should verify that the code type is correct.
I think this should be a separate method.
I think this should be in the setupActionBarToggle() method.
I think this should be a WARN instead of an ERROR.
I think this should be error
Why is this needed?
@vilchik-elena Why not just use a variable?
This is a bit of a nitpicking, but I think we should add a check for the existence of the table path.
This is a bit hard to read. I think it would be better to use a for loop instead of a for loop.
please use getStorageDomainDAO().getAllStorageDomainDao()
I think we should use a threadpool here.
Please use parameterized logging instead of string concatenation.
I think we should use assertThat(this.defaultR2dbcMessageSource.getComponentType()).isEqualTo("r2dbc:inbound-channel");
This should be a WARN instead of an ERROR.
I think this should be a constant.
This is not a good idea. You can use the project name directly.
I think it would be better to use PlatformUI.getWorkbenchWindow() instead of hardcoding the string.
I think this should be verifyAccessibleForAdminToMasqueradeAsInstructor(submissionParams);
@vilchik-elena Why not use the same byte array?
I think we should log the exception here.
I think this should be a ConcurrentHashMap, no?
I think this should be a WARN instead of an ERROR.
We should probably use the new WeakReference<OnAuthenticatorTaskListener> here.
This is a bit confusing. I think it's better to have a single constructor that takes a boolean and returns a boolean.
I think this is not needed.
This is a bit confusing. I think it would be better to use a method like isCoercion and then check for the type of the field type.
I think you can use mVisitNoteEncounters instead of mVisitNoteEncounters
This is a bit of a good idea. I think it would be better to throw an exception instead of returning null.
I think this should be: return compareAnnotationValue(av1, av2) != 0;
I think this should be a warning.
I think this should be a Map, not a HashMap.
I think this should be getParameters().isEmpty()
This is a bit hard to read. Can we use a try-with-resources pattern here?
This is not correct. The name of the name is not the name of the package.
I think this should be indexMap.getIndexDescriptor().
I think you can use .filter(fieldName -> fieldName.equals(field))
I think we should use session.getModelAccessor().getPermissionAuthority() instead of the instanceof EObject.
This should be a constant.
I think this should be synchronized (sActiveDelegatesLock)
rename to jar
I think it would be better to throw IllegalArgumentException here.
This is not necessary.
This is a bit hard to read. Can we extract a method to reduce duplication?
This is not correct. The current user is not deleted.
I think we should also check the presence of the sonar.typescript.lcov.reportPaths.
I think we should use the same approach as in the onItemPress callback.
This should be error
This is not needed.
This is not a good idea. The handler is a handler, so it should be a handler.
I think this should be a constant.
I think this should be <= 100
This is a bit hard to read. Can you please extract a method to avoid duplication?
I think we should use the new method signatures here.
I think we should add the property name to the log message.
This is not a good idea.
I think this should be a registerClass(name, false) method.
I think you can use getUrl(url) here
why not use the context.getLogstashRestCalls() method?
This is a bit confusing. I think it would be better to have a method like this:  private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField; private Schema subField
@vilchik-elena Why not use the JsonParser?
Why is this necessary?
@bgeVam please use assertThat(sharedPreferences.getString(CrashReporter.EXCEPTION_FOR_REPORT, "").isEmpty());
This should be a null check.
This is a bit confusing. I think it would be better to have a single return statement.
Shouldn't this be readExpression?
please use Boolean.valueOf(vmInterface.isPortMirroring())
I think this is not needed.
Can we use a try-with-resources pattern here?
I think this should be a lock, not a lock.
I think this test is not necessary. The test will fail if the input is null.
This is not a good idea. You can use the constant here.
why not use the enum directly?
This should be a constant.
I think we should log the exception here.
I think we should have a test for this.
I think this should be in a finally block.
I think this should be set to true only if the preference key is not set.
I think this should be a try-with-resources block.
Shouldn't this be implemented with @Override?
please use string formatting
I think this is not necessary. The assertion is already done in the @Before method.
This is not a good idea. You can use a for loop here.
I think this is a bit too long. Can you please extract a method?
This should be logged as a warning.
This should be a WARN instead of an ERROR.
I think this should be a constant
nit: can we use assertEquals here?
nit: I think we can use assertThat(metrics.timer(timestampMetric).getCount(), is(1L))
I think this should be assertEquals(cause, cause.getMessage());
This test is not testing anything.
I think this should be a property, not a field.
I think this should be removed
I think this should be a constant.
I think you can use the [StandardCharsets.UTF_8](<LINK_0>
I think this should be done in the constructor, not in the constructor.
This should be done in the update method.
I think we should use Collections.singletonMap here.
I think we should use the super() here.
I think this should be a List<RiakTsPB.TsColumnDescription>
This is a bit hard to read. Can you please extract a method to avoid duplication?
I think this is not necessary.
I think we should log the exception here.
I think we should use the try-with-resources here.
This is not a good idea. The state of the transition is not in transition.
I think this should be a constant.
I think this should be a constant.
I think this should be moved to the top of the method.
nit: can we use a mock here?
can we make this private?
This is not necessary.
I think this should be "GNU C compiler (gcc)"
I think this is a bit strange to have a test case for a specific module.
nit: I think this is a bit confusing. I think it's better to use the buffer.position() + numBytes.
I think this is a bit strange. I think it would be better to use the java.io.File.separator to make it clear that the user is actually working on the classpath.
I think this should be removed.
why not use getBackend().runInternalAction(VdcActionType.ExtendImageSize, createExtendImageSizeParameters(), ExecutionHandler.createDefaultContexForTasks(getExecutionContext()) ?
I think this should be a Set<String>
@bgeVam please use try-with-resources
I think that this is not needed.
This is not correct. The first condition is false.
I think we should use GinFactoryModuleBuilder.build(MyTreeViewModelFactory.class) instead of GinFactoryModuleBuilder.
This is not a good idea.
Shouldn't this be idGenerationStrategy = idGenerationStrategy?
I think we should use IFileEditorInput.class.getSimpleName() here.
I think this should be moved to the start() method.
I think this should be max(size / 7, initialSize)
Boolean.parseBoolean(productionIngestAdvertiseFrom)
I think this should be a try-with-resources block.
I think this should be a WARN instead of an ERROR.
I think this should be a field of the class, not a field.
I think this should be a warning.
I think this should be a StringBuilder instead of a StringBuilder.
Why do we need this test?
This is not a good idea. You can use the same approach as the one in the other file.
log the exception
I think we should log the token type here.
I think this should be a constant
I think this is a bit too long. Maybe we can use a more descriptive name?
Why is this needed?
this is not a trace, it should be a trace
This is a debug statement.
please add a message to the message
I think this should be auditUnsafe(long record)
I think this should be a constant
I think this should be a static method.
please add a log.error() here
I think this is a bit too long. Can we just use a stream?
I think this should be moved to the top of the if statement.
This is a breaking change.
I think this should be a Function.identity()
I think this should be a List<Object> instead of a List<Object>.
I think we should use the same approach as in the other tests.
This should be a static method.
I think we should add a null check here.
This test is not testing anything.
I think you can use the same name as the old one.
I think this should be a query runner.
I think we should use the same name as the other metric name.
@dalifreire why you need to replace "/" with "/" ?
Why not use the constant from the class?
I think this should be a for loop.
please use static imports
I think this should be synchronized
I think this is a bit hard to read. I think it would be better to have a method that takes a String and then call it from the constructor.
I think this should be private
I think this should be a constant.
I think we should use the same name as the one in the log message.
This is not needed.
I think we should use the constant here.
This should be a logger.
This is not needed.
Why not use the logger?
I think this should be a constant.
@vilchik-elena Why not just call the other constructor?
I think this should be a constant.
I think this should be a constant
I think this should be a switch statement.
I think this should be a Set, not a Set.
I think we should use a constant for the 5 minutes.
I think this should be a switch statement.
Why not just return mapper.readValue((String) json, new TypeReference<List<Map<String, Object>>>())?
I think we should use Objects.equals() here.
This should be a try-with-resources block.
I think this should be a constant
I think this should be a WARN instead of an ERROR.
I think we should use the same approach as in the other methods.
Please remove this.
I think this is not needed.
I think this should be a WARN instead of an ERROR.
This is a bit confusing. I think it's better to have a separate method to track the metrics.
I think this should be "origin"
This should be a static method.
assertThat(batch.getEvent().getJSONObject("metadata").getString("flow_id"), equalTo("something"));
This is not a good idea. You can use the response.getStatusInfo() method to get the status info.
This should be a static method.
I think we should have a check for the resize before calling the callback.
I think you can use a Set here.
I think we should use a regex here.
This is a bit hard to read. Can we use a try-with-resources statement?
please use static imports
I think this is a bit too complicated. I think it would be better to use a switch statement here.
I think this should be moved to the previous line.
I think this should be a for loop.
I think this should be a constant.
I think we should use the same approach as in the other methods.
I think this should be done in the constructor.
This is a good candidate for a method in the base class.
This is a bit confusing. I think it's better to throw an exception here.
I think we should use the same error message as in the event handler.
This is not necessary.
I think this should be a warn instead of an error.
I think this should be a constant.
This should be a return statement.
This should be in a finally block.
I think this should be moved to the initCommandExecutor() method.
This is a bit hard to read. Can we extract a method to avoid duplication?
I think this should be a constant.
nit: I think we can use the same format as above.
I think this should be a WARN instead of an ERROR.
I think this should be a WARN instead of an ERROR.
Why not just return user.getName()?
Shouldn't we remove the session when we are done with the session?
I think you can use matcher.group(1) here.
I think this should be return logicalNodes.stream().map(l -> l.getNode().getNode().getNode().getSimpleName());
I think we should use the JUnit assertEquals here.
This is not necessary.
This is not a query, but the query is not executed.
This should be EVENT_ID.
I think this is a bit too complicated. Maybe we should use a transformer?
I think this should be a while loop.
I think you can use Objects.hash(chainId, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst, nwDst,
I think this is a bit too long. Maybe we can use a method reference here?
I think you can use the try-with-resources syntax here.
This is not necessary.
I think it would be better to use Locale.US here.
This is not needed.
I think this should be Optional.ofNullable(FrameworkUtil.getBundle(getClass()))
This is not needed.
I think we should use the same approach as in the Command class.
I think this should be a WARN instead of an ERROR.
@vilchik-elena Why not using the selector?
This should be package private.
I think this should be Throwable.class.
I think this should be debug
I think this should be a WARN instead of an ERROR.
I think this is not needed.
I think this should be a warning
I think we should use the same approach as in the other methods.
I think this should be a while loop.
I think this should be private.
This is not correct. You can use a regex to replace the first character.
I think we should use the same error message as in the other classes.
I think this should be a Set<Ticket>
I think this should be a static method.
I think you can use the try-with-resources here.
I think we should use a Set here.
This is not needed.
I think this should be a constant
I think this should be a constant.
I think this should be a constant.
I think this should be a different test.
I think we should use a try-with-resources here.
I think it would be better to use the constant here.
I think this should be warn
LOG.log(Level.WARNING, "Dashboard: Post request failed - ", ex);
This is a bit confusing. I think it should be:  playerCamera = worldRenderer.getActiveCamera();
I think this should be: return !isVoAdmin(voId) && session.isVoAdmin(groupId);
This is a bit confusing. I think it's better to use the same approach as the one in the database.
This is not necessary. The test will fail if the content type is not set.
I think this should be a warning.
This should be a constant.
I think this should be:  if (encounteredDriverGroups.size() == closedDriverGroups.size()) {
This is a good idea.
Please remove this.
I think this should be addVersion("1.10", new JavaLanguageHandler(7), false), false);
This is not necessary.
This should be a debug statement.
This should be a warning.
I think this should be asyncValue(delay).thenApply(rValue)
This is not needed.
remove
This is a very good candidate for a method to be used in the same class.
I think this should be in the test.
I think we should use the same approach as in DefaultUserRolesProvider.
Can we use a lambda here?
Why synchronized?
This should be done in the view model.
I think this is not necessary.
This is not necessary.
Should this be logged at error level?
This is not correct. The default case is default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default: default
I think this should be a WARN instead of an ERROR.
I think this should be firstRun && cursor.getCount() == 0
I think this should be a try-with-resources block.
I think we should use the same order as the one in the test method.
I think you can use Map.computeIfAbsent(key, value, value)
I think this should be a WARN instead of an ERROR.
This is a good candidate for a method to get the dataBundle from the json file.
I think this is a bit too complicated. Maybe we can extract a method to reduce duplication?
I think this should be a logger.
@bgeVam please use the same constant for all of the attributes.
I think this should be a WARN instead of an ERROR.
This is a breaking change.
I think we should log the exception here.
this.localPort = localPort;
I think we should use Boolean.valueOf(isSpark) here.
This is not a check, but the check is not necessary.
I think this should be private.
I think this should be replaced with a call to the new Substitution(position, referenceBase)
I think this is a bit too long.
I think this should be moved to the transaction, not the migration rule.
This is not needed.
you can use the URL constructor here
I think this should be a WARN instead of an ERROR.
Please use assertThat instead of assertThat.
This test is not testing anything.
I think this should be a warning.
Why not use the Objects.hashCode() method?
This is not a good idea. You can use the FlowPanel directly.
I think we should add a null check here.
I think this should be a warning.
I think this should be set to false.
I think this should be debug
wait.forElementClickable(element)
I think this is a bit too long. Can we make it configurable?
@vilchik-elena Why not just use the same name as the other variable?
This is not needed.
I think this should be removed
I think it would be better to use assertEquals(result, existingVm);
This is a bit of a duplicate of the code above, can we refactor it to a method?
I think this should be a ConcurrentModificationException.
I think it would be better to use StringUtils.isEmpty(value) here.
Collections.singletonList()
I think this should be a constant.
I think this should be a WARN instead of an ERROR.
Can we use a StringBuilder here?
You can use the new File(String) method here.
nit: "expectedRowGroup"
nit: can be replaced with a call to get(clientStates)
please use the formatter
This is not a good idea. You can use a Set instead of a List.
This is not a good idea. You can use the existing method to check if the content is null.
I think you can use assertNull here.
I think this should be debug
I think this should be private.
I think we should use the same naming as the other variables.
I think this should be ref.getName().startsWith("refs/changes/")
I think this should be a property, not a property.
I think it would be better to use CommandBuilder.createProcess() instead of new ProcessBuilder().command("bash", "-c", command);
This is not a good idea. You can use the HardMediumSoftScore class directly.
please use StringUtils.join instead of StringUtils.join
This should be private.
I think this should be done in the query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-query-
I think we should use a constant for "prefix"
I think this should be private
rename to p
I think we should also verify that the cache is not removed.
Why not use Long.parseLong() here?
Method is not implemented
I think you should use a logger here.
This is a good candidate for a method to throw an exception.
I think this should be private.
I think this should be an IndexOutOfBoundsException.
I think we should have a test for this method.
I think we should use the iteratorSamplerConfig here instead of the iteratorSamplerConfig.
This is not needed.
I think this should be info level.
I think this should be a WARN instead of an ERROR.
I think this should be written in a finally block.
This is a bit hard to read. I think it would be better to use the action's action instead of the action.
I think this should be error
I think this should be changed to the other constructor
Please use the same color as the other color values.
I think we should use the same value for the savedInstanceState here.
This is not a good idea.
This is a bit confusing. I think it would be better to have a single constructor that takes a boolean parameter.
I think this should be a WARN instead of an ERROR.
You can use the new method here:  java public void trackUserSubmitRating(String versionName, String rating) { event.putLong(Keys.APP_VERSION, versionName); }
I think it would be better to use the constant here.
I think this should be removed.
this.marketName = new HashMap<>();
@vilchik-elena Why not use the constant here?
I think we should use stream.forEach(message -> mutedTopics.contains(message.getStream().getId()))
please use 'CollectionUtils.isNotEmpty'
I think this should be a constant.
I think this should be a try-with-resources block.
I think this is a bit too complicated. It would be better to have a method like this:  public boolean renameInConditionalBuildStep(Project<T> cbs) { if (buildStep instanceof TriggerBuilder) { return true; } } else { return false; } }
This method should return List<SearchSuggestion>
I think we should log the case of the case where we can't find a case where we can't find a case where we can't find a case where we can't find a case.
I think this should be in the if block below.
This is a good candidate for a method to be used in the base class.
HDR_INGRESS_TIMESTAMP is a constant, so it should be DEFAULT_TIME
I think this should be !getOldNetwork().getLabel().equals(getNetwork())
suggestion checkArgument(size <= maxSamples, "size must not be larger than number of samples");
I think this should be a switch statement.
I think we should add a checkOpen(true) check here to ensure that the channel is closed.
This is not necessary.
I think we should use the JsonReader here.
I think this should be a constant.
I think we should use the constant here.
This should be a constant.
@exper0 let's use the same approach as above.
I think this should be a WARN instead of an ERROR.
This is a bit hard to read. I think it would be better to use a try-with-resources statement here.
I think we should add a check for leaderAddress here.
please use assertEquals instead of assertEquals
I think we should use the same pattern as in other tests.
I think this should be a Set instead of a HashSet.
This is a bit confusing. I think it should be a warning.
I think this should be a try-with-resources.
I think we should use the same approach as in the other PR.
Why do we need to create a temporary file here?
I think this should be a static method.
I think this should be a static method.
This is not a gamemode, but it should be GameMode.ADVENTURE.
I think we should verify that the exception is actually thrown.
I think it would be better to use a Set here.
I think this is not necessary.
I think this should be a try-with-resources.
This is not needed.
This is not needed.
I think this should be a constant
This is a bit confusing. I think it would be better to use a switch statement here.
I think this is a bit hard to read. I think it would be better to use a stream and filter on the stream instead of collect.
This is a bit confusing. I think it's better to use a cache.get() instead of a map.
This is not a warning.
I think this should be a WARN instead of an ERROR.
I think this should be a constant.
I think this should be in a finally block.
Please use diamond operator
This is a bit of a nitpicking, but I think it would be better to move the backup logic to a separate method.
This is not correct. You can use the string formatter here.
I think we should throw an exception here.
Why not throw an exception here?
This should be a switch statement.
I think we should also assert that the returned result is not null.
This is not needed.
This is not necessary.
I think we should use the same approach as in SocketConfig.custom()
remove the throws
This should be a static method.
Please remove this line.
I think this should be randomData(String prefix, int count)
I think this is not necessary. The Message is already Message.
I think this should be wrapped in a try/catch block.
This is a bit hard to read. Can you please use a method reference instead?
I think this should be moved to the methodTree.
This is a bit strange. I think it's better to use the iterator and then iterate over the files.
I think this is not needed.
I think this should be a fieldLayout.
This is not necessary.
I think you can use the diamond operator here.
nit: use ImmutableList.of()
I think we should return the boolean value here.
This is not needed.
I think we should use the new method on the new interface.
Shouldn't this be a warning?
I think this should be a constant.
nit: I think we can use assertThat(tm.getTables().size()).isEqualTo(0);
I think this should be left == null && opType == OpTypes.SMALLER_EQUAL
nit: I think you can use assertEquals(expected, actual)
nit: I think this is a bit strange to have a test that checks for the correct values.
I think we should use the constant HOST_NAME here.
I think you can use Objects.equals(k1, k2) here.
I think this should be a WARN instead of an ERROR.
Please use assertEquals(msg, message)
I think this should be a constant.
I think this should be a Set<String>
This is not needed.
This is a good idea. You can use Files.createDirectories(dir.toPath()) instead.
I think we should use the serviceManager.getProcessService().save(process) method to avoid creating a new service manager.
I think this should be synchronized
I think this should be a constant.
You can use the new method here.
This should be a WARN instead of an ERROR.
Can you use the same format as in the other files?
This is a breaking change.
I think this should be a Set<String>
@ivandalbosco Why not use tree.expression() == null || !isIncrementOrDecrement(tree.expression())) ?
This is not necessary.
This is not needed.
Why do we need this change?
I think we should use the same name as the one in the test class.
This is not necessary.
I think this should be a warning.
I think this should be private.
I think you can use Collections.singletonMap() here.
This is a bit confusing. I think it would be better to have a method called enablePlugins(Set<String> names) that takes a Set<String> and then call that method.
This is not a good idea. You can use a Set<File> to get the project info.
rename to listener
I think we should use KafkaLogAppender.class.getName() here.
I think this check is not needed. The check is done in the checkIfCpusExist method.
I think this should be a CompletableFuture<Void>.
This is a bit hard to read. I think it would be better to use the new method to generate the salt.
This is not necessary.
This should be a constant.
I think this should be a WARN instead of an ERROR.
I think we should use the "File:" prefix here.
I think this is a bit too long. Can we just use the default value?
This is not necessary. The pathAddress method already does this check.
This is not correct. You should use the new Objects.equals() method.
This is a breaking change.
This is a bit confusing. I think it would be better to use a map instead of a map.
I think this should be maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, maxRank, max
This is a bit of a nit, but I think we should use the default value instead of the default value.
This is a bit of a very bad idea. It should be a FetchException.
I think we should use Boolean.parseBoolean() here.
I think this should be a ConcurrentLinkedQueue.
I think we should also check that the start of the experiment is actually the same as the one in the experiment.
I think it would be better to use the response entity here instead of the response entity.
I think we should use the same name as the other variable name
I think Jenkins.ADMINISTER is not a good name.
I think this should be a constant.
I think this should be moved to the previous line.
I think this is not necessary.
This is a bit hard to read. How about using a for loop instead?
I think this should be a constant.
suggestion com.amazonaws.services.lambda.events.models.dynamodbStreamRecord.clone();
I think we should use the same approach as in the other methods.
I think this should be addIfPrivateOrPkgPrivate(cid, arg)
This is not a good idea. You can use a boolean instead of a boolean.
nit: I think this can be simplified to java return Optional.of(CompactBulkReader.factory(format)) .map(CompactBulkReader::factory) .map(CompactBulkReader::factory) .map(CompactBulkReader::factory) .map(CompactBulkReader::factory) .map(CompactBulkReader::factory) .map(CompactBulkReader::factory) .map(CompactBulkReader::factory) .map(CompactBulkReader::factory) .map(CompactBulkReader::factory) .collect(toImmutableList());
I think this should be a REPRODUCIBLE.
I think it would be better to use the cluster name here.
I think it would be better to use **waitForElementInVisibleArea** method to make sure that **SeleniumWebDriver** is actually **open**.
I think this should be a RuntimeException
I think this is a bit too long. Maybe we could extract this into a method?
I think this should be a return statement.
I think we should keep the cache as a field.
I think this should be a constant.
I think this should be done in the constructor.
@maria-farooq I think this should be a warning.
This should be a constant.
I think this should be a StringBuilder instead of a StringBuilder.
I think we should use the methodInvocationTrees.stream() here.
I think we should use the MDC.put() method here.
This is a good idea.
I think we should use a different name than "info"
I think this should be a warning.
This is not necessary.
This is a debug statement.
This is not necessary. The draw radius should be applied to the background.
I think we should use the toStringHelper method here.
This is not a good idea. You can use the same approach as the one in updateSolrClient.
nit: can be simplified to index.toArray(new Index.Indexer[idxrs.size()])
I think this should be a constant.
I think you can use Objects.hashCode(moduleSequence, moduleDescriptorKey)
This is not correct. You can use the "get" method to check if the name is correct.
I think we should use the same name for both the two strings.
I think we should use a StringBuilder here.
I think we should add a check for the entry set here.
I think we should use a stream here.
Why not just return the empty list?
This is not correct. The class name is not equal to the class name.
I think this should be in a @Before method.
I think this should be a WARN instead of an ERROR.
This should be a constant.
I think we should return here if the sessionId is null.
I think we should add a check for null here.
I think it would be better to use assertEquals instead of assertEquals.
I think this should be a warning
I think we should log the exception here.
I think you should use the new method here
This is a bit confusing. I think it would be better to use a Set instead of a set.
I think we should use the same pattern as in the other tests.
I think this should be done in the constructor, not in the ctor.
This is not necessary. You can just do:  if (resource.hasNext()) { resource = resIterator.next(); }
I think we should use the same naming as the other test methods.
I think it would be better to use the storage device list instead of the storage device list.
I think we should log the exception here.
This should be a warn
This should be private
I think this should be a stream instead of a stream.
I think this should be a Set<BadPluginInfo>
Why is this switch statement necessary?
I think we should add a null check here.
I think we should use a logger here.
This should be a static method.
This is not a good idea. You can use the default constructor to set the default value.
I think this should be a Repository.
This should be MongoCodeEntry.class.
I think we should add a check for the size of the message to avoid the allocation.
I think this should be protected.
This is a bit hard to read. Can you please extract a method to avoid duplication?
You can use assertEquals instead of assertEquals.
I think this should be > 1, not >1.
This is a breaking change.
I think this should be moved to the top of the method.
I think it would be better to use the trace name here.
I think this should be in a finally block.
This should be a ListTablesOptions.
UnsupportedOperationException
This is a bit hard to read. Can you please extract a constant?
This is a bit of a nitpicky, but I think we should probably use the same style as the previous one.
I think this should be a List<Cell>
I think we should use assertFalse here.
We should probably use the ExternalSearch class here.
@pynicolas I think this should be in the init method, as it is only used in the init method.
I think we should use the builder.buttonPositiveId here.
I think this should be a while loop.
I think we should use the same approach as in the other tests.
I think this should be a Double instead of a double.
This is not necessary.
I think we should use the same name for both the variables.
I think it would be better to use a StringBuilder here.
I think this should be a warning
I think we should add a default value to the retentionTimeout value.
We should probably use the same approach as in the onClickChangeMode method.
This should be a WARN instead of an ERROR.
This is not a debug message.
I think it would be better to use Files.move(Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source), Paths.get(source),
I think this is a bit too complicated. Maybe we can use a stream and collect the list to a list?
I think we should use a SetWrapper here.
I think this should be a constant.
I think we should use the super(protocol) constructor here.
I think this should be a debug statement.
This is a bit confusing. I think it would be better to use a for loop instead of a for loop.
I think this should be called after the test is finished.
try-with-resources?
I think this should be done in the constructor
I think this should be a Mono<Void>.
This should be a Long
I think this should be a WARN instead of an ERROR.
This is not necessary.
This should be a more descriptive error message.
I think we should use the deprecatedFallback here.
I think this should be a Set, not a Set.
This is not needed.
Why is this needed?
I think this is not necessary.
I think this should be a constant
This is not a good idea. You can use a CountDownLatch.sleep() instead.
I think this should be a switch statement.
I think this should be a Set<Object>
I think this should be GTK.gtk_widget_set_visible(topHandle, true)
I think this should be a constant.
I think this is a bit too long. Maybe we can extract a method for this?
This is a bit hard to read. I think it would be better to use a method reference: File::getParentFile
I think this should be warn
I think we should use the same hash of the hash table for all the hash table types.
I think this should be a StringBuilder, not a String.
This should be a constant.
I think this is a bit too long. Maybe we can use a simple for loop?
I think this should be a WARN instead of an ERROR.
I think this should be done in the constructor
I think we should add a check that tabletsRanges is not empty.
I think this should be a WARN instead of an ERROR.
This is not necessary. We can't use the input in the input.
I think we should use the same semanticTree.getEnclosingClass(identifierTree) here.
I think this should be a Text.
Why not just use a TreeMap here?
I think this should be private.
This is a bit hard to read. Can we use a switch statement here?
I think this should be new GregorianCalendar()
I think this should be a constant.
Please use static import for Assert.assertEquals
I think this should be a WARN instead of an ERROR.
I think we should use the same approach as in the other filters.
This is a bit confusing. I think it would be better to have a single constructor that takes a command context and returns a command context.
I think we should return null here.
please use Collections.emptyList()
I think this should be in a finally block.
why not use the new CommandContext(..) method?
This should be a WARN instead of an ERROR.
Can we use Long.parseLong() here?
I think this should be a separate method.
This is not a good idea. You can use the same pattern as the one above.
I think this should be a field in the registry.
Should this be a boolean?
nit: you can use ImmutableList.of(type, UNKNOWN.getFixedSize())
I think we should use a linkedlist here.
I think this should be a static method.
Collections.singletonList()
@bgeVam please use the same naming convention for variable names
I think we should use the default value here.
This is a bit confusing. I think it's better to use the same code as the one in the method above.
I think it would be better to use Long.valueOf(1) here
I think this should be a constant
I think this should be a WARN instead of an ERROR.
I think this should be a constant.
please use injection instead of injection
@jomarko I think this should be JavassistInputStreamInterceptorAdapater.inputStreamAdapterSupplier(JavassistInputStreamInterceptorAdapater.inputStreamAdapterSupplier(JavassistInputStreamInterceptorAdapater.inputStreamAdapterSupplier(JavassistInputStreamInterceptorAdapater.inputStreamAdapterSupplier(JavassistInputStreamInterceptorAdapater.inputStreamAdapterSupplier(JavassistInputStreamInterceptorAdapater.inputStreamAdapterSupplier(JavassistInputStreamInterceptorAdapater.class))
This is not needed.
I think we should log the exception here.
I think this should be moved to the top of the method.
This is not a safe way to do this. You can use a StringBuilder instead.
nit: I think we can use assertStatistics(stats -> stats.started(1).succeeded(1)
I think this should be moved to the try block below.
I think we should throw a more specific exception here.
minor: can be static
I think this should be deleted
This should return the enum value, not the enum.
This is not a good idea. You can use selector.nameLookup() instead.
I think this should be a warning.
I think this should be a WARN instead of an ERROR.
Can we use the same approach as in the other constructor?
why not use the try-with-resources pattern here?
I think this should be moved to the try block below.
nit: you can use Collections.singletonList()
I think this should be done in the mapper instead of here.
I think this should be a WARN instead of an ERROR.
This is not needed.
I think this is not necessary. The original code was already in the original method.
I think this should be a switch statement.
This is a bit strange. I think it would be better to use StringBuilder instead of StringBuilder.
This is not needed.
suggestion assertMessageEventExecutionSet(emptySubprocess.getExecutionSet(), EMPTY_VALUE, NON_INTERRUPTING, EMPTY_VALUE);
This is a bit confusing. I think it's better to have a single test case for the case where the file is not a directory.
I think this should be a constant.
I think we should check that the bean is actually a MyService2.class.
I think this should be assertEquals(FCondition.Min, fCondition.max())
I think this should be a checked exception.
This is a breaking change.
I think we should use the new ClientAuthenticationMethod.parse(auth) method here.
This is a bit hard to read. Can you please extract a method to reduce duplication?
This should be a WARN instead of an ERROR.
This should be a WARN instead of an ERROR.
This is a bit hard to read. Can you please extract a method to reduce duplication?
I think this should be a List<Statement>
nit: this.schedulerService = MoreExecutors.listeningDecorator(executorService);
I think we should use the constant for the key here.
This is not a good idea. You can use a CountDownLatch instead of a CountDownLatch.
nit: can we use partitionedFileSet.get() here?
This is a bit hard to read. How about adding a method to the VideoCodecMeta that takes a String and then call it from the constructor?
I think this should be a try-with-resources.
nit: can we use the same pattern as in the other methods?
This is not needed.
This is a bit confusing. I think it should be a constant.
This should be return Math.min(fromInterval.getStart(), fromInterval.getEnd() - 1);
This is a bit hard to read. Can we use a try-with-resources statement here?
I think this should be warn
I think this should be a lock.
I think this should be debug
This is not needed.
rename to resourceSetHook
I think this should be a warning
nit: I think we can use a static import for the function.
I think we should use the JmxReporter.registry() method here.
This is not necessary.
This is not necessary, you can just use Build.VERSION_CODES.HONEYCOMB.
I think this should be a constant.
I think this should be inConfigList.
I think we should use the same error message as in the other log messages.
I think this should be a constant.
I think this should be a JUnit fail() call.
I think it would be better to use a Set here.
I think this should be closed in a finally block.
Remove this line.
This is a bit confusing. I think it would be better to have a method called something like isRollingback() and have a single call to update.
This should be debug
nit: I think we can remove the assert since it's a private method.
Why not use the lock.acquire() method?
This should be a static method.
I think this should be assertArrayEquals(type, s);
This is not needed.
Why do we need this?
I think this should be private.
I think this should be a guard clause.
I think this should be a constant.
This is not a good idea. You can just use the getActivity() method.
I think we should use the new File(dockerHostEnv) method here.
I think we should use a lambda here.
Why is this needed?
I think we should add the exception to the log.
This is a bit hard to read. I would prefer to use the builder pattern to build the builder.
"Value to be written is bigger then allowed: value=" + value + "
I think this should be scheduleIfNoTaskRunning()
I think this should be the default value, not the default value.
This is a bit hard to read. How about using a method that returns a double instead of a double?
nit: can we use HdfsSinkConnectorConfig.getString(HdfsSinkConnectorConfig.TOPIC_DIR_CONFIG) here?
@dalifreire this one too
I think this should be done in the constructor.
I think we should also assert that the values are equal to the expected values.
rename to resource
I think this should be date(2014, 10, 13)
This is a breaking change.
I think this should be <=
rename to resource
I think this should be a warning.
This is not needed.
I think this should be a CoreException.
I think this should be in a finally block.
I think this should be a static method.
I think we should use a better name than "tags"
I think this should be PantsExecutionException.
I think this should be synchronized
I think we should use the same approach as in the other fileRoot.
String.format is not necessary here.
I think this should be removed.
I think this should be in a finally block
This is a bit hard to read. Can you please explain why it was changed?
This is not needed.
This should be a warning.
nit: we can use the same constant for the same value
This is a bit confusing. I think it would be better to use a constant for the key and use that here.
I think this should be a ZooKeeperUtils.wrapException(e)
I think this should be replaced with a stream.
I think this should be moved to the top of the method.
I think it would be better to return oldBehaviour(project) here.
I think this should be c == null.
nit: remove empty line
I think this should be a warning.
This is a bit of a nitpicky, but I think it would be better to use a constant for the name.
why not use the new method here?
I think this should be a constant.
I think this should be in a finally block.
Shouldn't this be task.getType()?
I think this should be a Set, not a Set.
I think this should be:  java return pattern.indexOf('[', index);  And then you can remove the else clause.
This is a bit hard to read. Can you please extract a method to reduce duplication?
I think this should be a List<String>
@exper0 let's use try-with-resources here
This is a copy of the list, so you can use ImmutableList.copyOf(Iterables.transforming(Iterables.toList(Iterables.toList()))
I think this should be removed
I think we should also check that the message contains the "A collection of privileges"
Why is this needed?
This is not needed.
I think this is a bit too complicated. What about just checking the extension?
please use Collections.singletonList
I think we should use the same naming as the other properties.
This is not a good idea. The base is a singleton.
I think this should be a WARN instead of an ERROR.
This should be a field of the class.
please use Collections.singletonMap()
This is a bit confusing. I think it would be better to return a string and then return a string.
This is not a refactoring, but the refactoring is not a refactoring.
Why do we need to do this?
I think this should be a constant.
I think you can use the new HttpGet(uri + "//" + s.getId())
I think this should be done in the constructor.
I think we should use the same name as the class name.
I think this should be put(key, template.keySet())
I think this is a bit too complicated. Maybe we can use a Set instead of a Set?
I think this is a bit too complicated. Maybe we can extract a method to avoid duplication?
This is not a good idea. You should use a lambda here.
I think we should use the same constant here.
This is not necessary.
Please use a try-with-resources statement here.
please add a message to the log message
I think we should check if the DITA is a DITA.
I think this should be delegate.doFilter(request, response, chain);
This should be a static method.
I think this should be in a finally block.
This test is not testing anything.
I think this is not needed.
This is not necessary.
I think this should be a constant.
This is not a good idea. You can use the standard Java 8 streams API.
I think this should be a try-with-resources.
I think this should be an IllegalArgumentException.
This should be a static field.
Should this be setStudyDataManager(studyDataManager)?
This is not needed.
I think we should add a check for "Oracle" here.
remove this line
I think this should be removed
nit: I think we can use Collections.emptyListTables() here
This should be a long.
I think this should be a constant.
This is a breaking change.
I think we should add a null check here.
@vilchik-elena Why not simply call the variable expectedException?
This is a bit hard to read. Can you please extract a method to reduce duplication?
I think this should be a constant.
I think this should be in the onExitTab() method.
why not use the super(vdsId, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null
I think we should verify that the account status is correct.
I think this is not necessary. The test will fail if the user is not authenticated.
I think this should be error.
This should be a constant.
nit: I think we can just use Optional.ofNullable here.
This is a debug statement.
@vilchik-elena Why not using Pattern.compile(reviewPattern).replaceAll(ReviewPattern.class) ?
This should be a warning.
I think we should keep the old behavior here.
I think it would be better to use the same name as numBlockOwnershipByEvalIdForServer.
This should be error
I think this should be a constant.
I think this should be t.isAlive()
please use formatter
This is not a good idea. You can use the same approach as the previousMealsByDay.get(i).getMealsByDay().get(i).getMealsByDay().get(i).getMealsByDay().get(i).getMealsByDay().get(i).getMealsByDay().get(i).getMealsByDay().get(i).getMealsByDay().get(i).getMealsByDay().get(i).getMealsByDay().get(i).getMealsByDay().get(i).getMealsByDay().get(i).getMealsByDay().get(i).getMealsByDay().get(i).getMealsByDay().get(i).getMealsByDay().get(i).getMealsByDay().get(i).getMealsByDay().get(i).getMealsByDay().get(i).getMealsByDay().get(i).getMealsByDay().get(i).getMealsByDay().get(i).getMealsByDay().get(i).getMealsByDay().get(i).getMealsByDay().get(i).getMealsByDay().get(i).getMealsByDay().get(i).getMealsByDay().get(i).getMealsByDay().get(i).getMealsByDay().get(i).getMealsByDay().get(i).getMealsByDay().get(i).getMealsByDay().get(i).getMealsByDay().get(i).getMealsByDay().get(i).getMealsByDay().get(i).getMealsByDay().get(i).getMealsByDay().get(i).getMealsByDay().get(i).getMealsByDay().get(i).getMealsByDay().get(i).getMealsByDay().get(i).getMealsByDay().get(i).getMealsByDay().get(i).getMealsByDay().get(i).getMealsByDay().get(i).getMealsByDay().get(i).get(i).getMealsByDay().get(i).get(i).get(i).get(i
This is a duplicate of the one above, why not move it to the beginning of the method?
I think we should use the path separator here.
You can use By.wait() instead of waitForElement()
I think this should be assertEquals(CharFormatUtil.unescapeIdentifier(":").isEmpty();
I think this should be configAccessor.getCustomizedStateAggregationConfig()
I think you can use the constants defined in the class.
I think this should be a ByteBuffer, not a String.
I think this should be private.
This should be a DimenUtil.getDisplayMetrics().heightPixels()
why is this needed?
I think we should add a check for Capability0 here.
Assert.notNull()
This should be a constant.
nit: I think we can use Collections.singletonMap() here.
This is a bit hard to read. I think it would be better to use a function to get the colorBuffer and use that instead of calling the method directly.
I think this should be a WARN instead of an ERROR.
I think we should show error here.
I think this should be config.validate(context.getInputSchema(), context.getInputSchema(), context.getInputSchema(), context.getInputSchema(), context.getInputSchema(), context.getInputSchema(), context.getInputSchema(), context.getInputSchema(), context.getInputSchema(), context.getInputSchema(), context.getInputSchema());
Should this be a warning?
I think you can use assertThat(expected.getMessage(), is(true)); here.
I think we should use the context.getApplicationInfo() here.
This should return an immutable list.
This is not a valid ip address.
I think this should be a Set<NotificationAction>
I think this should be called on the onCreate method.
I think this should be a warning.
I think this should be assertEquals(expected, actual)
I think this should be a warning
I think this is not needed.
This should be private.
This is not correct. The only thing I see is that the baseQualities of the Bases is the Bases of the Bases.
I think we should also check that the version is not greater than 4.
I think this should be debug
I think you can use the CountMarshallingPojo.getUnmarshallCount() here.
nit: you can merge these two lines
I think this should be a warning.
I think this should be a constant.
I think you can use the new API here: <LINK_0>
I think this should be a StringBuilder instead of a String.
This is not needed.
This is a very unreadable variable name.
Add newline before return.
This is not a valid assertion.
This is a bit hard to read. I think it would be better to use a static import for the resourceEstimates.
I think this should be private
This is not really a good idea. You can return true for the given Frozen object.
This is a bit hard to read. I think it would be better to use a switch statement.
I think this should be a lambda.
Why not just use spark.getSparkOptions()?
This is a bit hard to read. Can you please explain why you need to do this?
This is not correct. It should be assertTrue(ySeries).
This should be a WARN instead of an ERROR.
You can use assertEquals here.
I think we should use workspace.getConfig().getName() instead of "workspace"
This is a good candidate for a method to create a new method.
I think this should be a File.
I think this should be a @Rule, not a @Test.
This should be a constant.
I think this should be a while loop.
I think this should be private
This is not needed.
This is not a good idea. You can use String.format() instead of String.format()
I think you can use System.getProperty("os.name", "Windows")
I think this is a bit strange. I think it would be better to have a method in the base class that takes a Matcher and returns a Matcher.
This is not a good idea. You can use the new method to generate the key.
Why not use id.toString()?
I think we should add a check for the configPolicy.isNeverEnding() condition here.
I think we should verify that the callback is actually called.
I think this should be a warning.
I think we should also check that the node is connected to the same node.
I think we should use repositoryPathResolver.resolve(repository) here.
I think this is a bit too long. It's not a big deal, but I think it's a good idea to have a method for this.
This is not a good idea. You can use the GHOrganization object to get the team from the team.
I think this should be done in the constructor.
I think we should use the same approach as in the other files.
I think this is a bit too complicated. Maybe we can extract aggregation.getFunctionHandle() into a local variable?
This is a bit confusing. I think it should be a constant.
This is not necessary.
This is not necessary.
I think this should be a loop, not a for loop.
This is not needed.
I think we should use the new String.format() method here.
I think this should be a SolverException, not a SolverException.
I think we should use the same name as the other nameStorageDomain
I think this should be a WARN instead of an ERROR.
This is not correct. The name of the layer group name is already a string.
I think this should be a WARN instead of an ERROR.
This is a bit confusing. I think it's better to return true if the game is not active.
nit: you can use the static import here
why sleep?
please use the new method in GlusterVolumeActionParametersBase
This should be done in the constructor.
nit: I think we can use the same code as the one above.
I think we should add a check for oldValue != null here.
This should be a runtime exception.
I think we should use the new method here instead of the new one.
This should be a field of the class.
I think this should be synchronized
This should be a Log.e call.
I think this should be a WARN instead of an ERROR.
I think this should be a Map<String, String>
I think this should be a static method.
This is not a valid realm.realm.RealmModel.
style nit: we don't use braces around single line blocks
I think this should be in the finally block.
I think we should use a QueryQuery here.
This query is not used.
I think this should be a ScriptException, not a ScriptException.
I think this should be clientStatusList.containsKey(registration.getEndpoint())
This is not a good idea. You can use the cssOutput.length() method to get the themeProvider.
I think we should use the same name as the other variable name.
I think this is a bit too complicated. It would be better to have a method that returns a boolean.
I think this should be a switch statement.
I think this should be in the onClosedByKeyboard() method.
This should return an Optional<A>
This should be a more descriptive message.
This should be a warn instead of an error.
This is not needed.
Can we use Cassandra22XVersion.DEFAULT_VERSION here?
I think this is a bit too long.
I think we should verify that the passed Blob is not null.
This should be moved to a constant.
This is not a good idea. The metric is a double and a double.
Collections.<String>emptyList()
This is a bit hard to read. Can we extract a method that takes a list of OzoneAcl and then call that method?
I think this should be a Set, not a Set.
This should be a concurrent map.
I think this should be userRepository.save(new User
I think this should be a constant
I think we should use a constant for this.
I think this should be a warning.
I think it would be better to use a constant for "left"
I think this should be a warn instead of an error.
I think we should use the new VmAnalyzer(..) method to get the relevant info from the VmAnalyzer.
I think this should be in the presenterMap.
suggestion checkArgument(maxEntities >= 0, "cooldown should be non-negative");
I think this should be a try-with-resources block.
I think this should be PsiTreeUtil.getParentOfType(position, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, PsiTreeUtil.getParentOfType(position, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.APP, ErlangFileType.class)
nit: you can use the try-with-resources pattern here
I think this should be a MongoLiteException, not a MongoLiteException.
This is not needed.
Shouldn't we verify that the relationship type is actually the one you expect?
This should be a constant.
Unsupported operation
I think we should use the static import here.
close() is not needed
This should be a logger.error() call.
This is not needed.
please use the log format
I think we should throw an IllegalStateException here.
please use parameterized logging instead of string concatenation
I think we should use the constant here.
This is not a good idea. You can use agentStatus() instead of agentStatus()
I think this is a bit too long. I think it would be better to have a private method to translate the string and then use that.
nit: you can use Cache.Entry<Long, byte[]> entry = cacheManager.getCache(testName.getMethodName(), Long.class, byte[]) here
Why do we need to check the existence of the zookeeper client?
I think this should be removed.
I think we should use TextUtils.isEmpty here.
I think this should be a try-with-resources.
I think we should check that the configured mode is set to AUTOMATIC.
I think this should be moved to the previous line.
I think this should be done in the transaction
I think this should be a for loop.
please use the same naming as above
This is not needed.
I think this should be a switch statement.
I think we should add the default value to the message.
Can we use the same key as the key?
I think we should add a new method to Matrix to avoid code duplication.
This is a breaking change.
This is not necessary.
This is a bit of a very good idea. I think it would be better to have a method in the AbstractServerWebSocketHandler that takes a String and then call that method.
This method should be private.
I think this should be a warning
This should be a FeedbackQuestionType.TEXT.
I think this should be synchronized
This is not needed.
This is not a block.
I think this should be configurable.
This is a bit hard to read. Can we use a method reference?
I think this should be a static method.
I think this should be error level.
This is not a good idea.
I think it would be better to use the same name as the one in the test method.
I think this should be "GAVCE="
I think this should be a ConcurrentHashMap.
UnsupportedOperationException
I think this should be a fail() call.
I think we should use the same approach as in the other classes.
Why not use the new X509CertificateHolder(currentCert.getEncoded()) method?
I think this should be a property property, not a property.
I think this should be warn
This is a good candidate for a null check.
This is a bit confusing. I think it's better to use a boolean flag to indicate whether the page is in the page or not.
IgniteCheckedException is a RuntimeException, so it should be handled by the caller.
I think this should be a constant.
I think this should be done in the constructor.
Remove this line.
I think we should use mock(DynamicRepositoryDecoratorFactory.class) here.
I think we should use the same name for both of these variables.
I think this should be synchronized
I think this should be moved to the previous line.
I think we should use the same name as the one in the UI.
I think this should be priority - 1
Why not just throw new NoSuchElementException()?
This should be private
I think we should use the KeycloakSession here.
I think this should be entry.put(key1, "replSync").get(key2)
I think this should be a stream.
I think this should be a hash = (int) (hash = (int) (hash) * 0x45d9f3b);
I think we should throw an IllegalArgumentException here.
Why not just use topics.split(",")?
I think this should be done in the constructor
This is a good idea. You can use the FileBasedConfig constructor directly.
This is not a good example.
I think this should be a switch statement.
I think we should use the path separator here.
I think this should be a WARN instead of an ERROR.
This is not necessary. The title is already a String.
Shouldn't this be running = false?
I think we should use assertNull here.
I think this should be a warning.
This should be a try-with-resources block.
I think we should use the constant here.
I think this should be a constant.
I think this should be a Set instead of a List.
I think we should add the disk profileIds to the disk profileIds map, not the disk profileIds map.
I think you can use the diamond operator here.
I think this should be package-private.
This is a bit confusing. I think it would be better to have a method that takes a String and then call it from the constructor.
This is a bit confusing. I think it would be better to use BigDecimal.valueOf(x) here.
This should be a fail()
I think we should use the default value for the default value.
I think it would be better to use the string format here.
This is not necessary.
I think this should be removed.
I think it would be better to use analysisModules.get(moduleClass) instead of analysisModules.get(module.getClass())
This should be a logger.
I think this should be a IllegalArgumentException.
nit: I think it's better to use the built-in aggregator here.
I think this should be a trimString method.
This is a bit hard to read. Can we extract a method to get the reference set members?
@fanifieiev the same above.
I think this should be named "druid"
I think we should add a check for username != null here.
I think we should use the same approach as in HttpPostPost.java.
This is not needed.
I think we should use a different name than "image"
I think this is not needed.
This is a bit confusing. I think we should have a method to handle this.
I think this should be a constant
I think it would be better to use the same name as the old method name.
This is not a good idea.
I think this should be in the finally block.
nit: I think this is a bit strange to read the sequence number, but I think it's better to use the same value for the readBatchFilterOutNulls() method.
I think this should be a constant.
I think this should be a constant
I think this is not necessary. The parentResource is already created by the parentResource.
This is not a good idea. You can use a for loop here.
I think this should be a constant.
please use the enum values
This is a bit confusing. How about adding a field to the recordRead method?
I think it would be better to use a stream here.
I think this should be in a finally block.
This should be a WARN instead of an ERROR.
This is not correct. You can use the following:  if (failNext > 0) { return false; }
I think this should be a Set<SourceGroupPacketExtension> since it's a setMediaStreamTracks method.
This should be a stream, not a stream.
I think we should use a try-with-resources here.
I think this should be a constant.
I think this should be removed.
I think you can use a try-with-resources here.
I think we should use StringUtils.isEmpty( exclusion.getArtifactId()) here.
please use the diamond operator
I think we should use a StringBuilder here.
Use the same approach as in the other classes.
I think we should use the same approach as in the other classes.
I think this should be a test case.
nit: can we use the same approach as in the other methods?
@ivandalbosco Why not use the matcher pattern here?
Can we use StringUtils.isEmpty(gatewayRuntimeArtifact) here?
I think this should be a static method.
I think this should be a fail() call.
I think this should be private.
please use Optional.ofNullable
This is a bit hard to read. Can you please extract a method for this?
This is not needed.
I think this should be a static method.
This is not needed.
I think it would be better to check the return value of checkCondition(tileCount <= 1_000_000, "The zoom level is too large (more than 1M) to calculate a set of covering bing tile."
I think this should be a constant.
I think this should be a WARN instead of an ERROR.
Please remove this.
I think this should be a warning.
I think this should be a constant.
I think this should be a warning.
This is not needed.
I think this should be a List<Order>
I think we should use the marshaller.marshal(value, writer) method to avoid the need for the marshaller.
I think we should use the new one: this.script = (this.script, this.script, this.script, this.script, this.script, this.skipFrames);
Why do we need to send producer record?
I think this should be a query.
why not use the other method?
I think this should be moved to the previous line.
I think this should be a warning.
I think this should be:  if (isInetAddress(v6Address)) { return Optional.ofNullable(normalizeV6Address(v6Address) } else if (isValidV6Address(v6Address)) { return Optional.ofNullable(normalizeV6Address(v6Address) .map(Address::fromAddress) .orElse(null); }
This should be private
I think we should use the following syntax:  if (newName == null) { throw new AcceptableThriftTableOperationException(tableInfo.importDir, newName); }
This is not necessary.
I think this should be "defaultBootSequence"
This is not correct. The pathSeparator is already a dot.
I think this should be assertThat(fileContent.read(), StandardCharsets.UTF_8).hasSize(1);
I think this should be a constant.
@marchof I think we should use the same instance of MrProcessAssignment.class.
I think this should be a ConcurrentHashMap
Why not just use the new constructor?
I think we should use the same constant for all the values.
I think this should be removed.
Why do we need to create a new ObjectMapper here?
I think it's better to use a lambda here.
This is not correct. The check should be done in the DescriptorTypeVisitor.
This is a bit hard to read. Can we use a method in the HazelcastClientInstanceImpl?
I think we should use the same error message as in the other service.
I think this is a bit too complicated. Maybe we can extract a method to avoid duplication?
I think this is a good idea.
This is not needed.
This is not a safe way to do this. You can just do: if (getStreamingContent() != null) { return; }
I think this log message should be "Task has completed"
This is a good candidate for a method in DeviceID that takes a byte[], and returns the result of the method.
Shouldn't this be assertEquals?
This is not a good idea. You can use the JavaFileScannerContext.getClassLoader().getClassLoader() method to get the class name.
I think we should use the color index instead of the color index.
I think this should be setNeedsPrivateSection(false);
I think this should be synchronized
I think this should be a constant.
This is a bit hard to read. Can you please extract a method to avoid duplication?
I think this should be set in the constructor.
I think this should be private
@vilchik-elena Why do we need this?
I think this should be a Set instead of a Set.
This is not needed.
I think this should be debug level
This is a bit hard to read. How about using a method that takes a String parameter?
I think this should be a WARN instead of an ERROR.
I think we should use the same filter as the one in processInstanceIds.
please use 'NetworkQosId' instead of 'NetworkQosId'
return products.get(product);
I think we should use the same pattern as the other one:  final boolean value = row.get(i) == null ? "".equals(value) : false;
Why do we need to wrap this?
I think this should be a Flutation.put(null, mutation, col, ColumnConstants.DATA_PREFIX, 1, null, value.toArray())
I think this should be a more specific exception.
I think this should be changed to UserProfile.USER_ADD_PROFILE_FAILED
I think it would be better to use packList.get() here instead of pList.get()
I think this should be a static method.
I think we should log the exception here.
I think this should be PhoneUtil.resolve(this);
I think this should be a StringBuilder instead of a StringBuilder.
This should be a constant.
I think this should be a Map<String, Object>
I think we should use the constant here.
I think it would be better to use the version of the Script(String, String, String, String, String) constructor to encapsulate this type conversion.
I think this should be a trace, not a trace.
I think this should be a try-with-resources block.
nit: I think this is a bit confusing. I think it's a bit confusing to have a single value in the map.
I think this should be a constant.
I think you should use the service interface here.
This is a bit hard to read. Can we use the same approach as the one in AvroUtils?
I think this should be depthFirstSearch(node)
I think we should use the same approach as in the other methods.
I think this should be: java getView().setType(type);
I think we should log the exception here.
I think this should be a switch statement.
This is not needed.
I think we should use a constant for the action name here.
I think we should also check that the file is actually a file.
I think this is not needed.
I think you can use the new UpgradeV4Response() method here.
Shouldn't this be "Delete range"?
I think this should be a constant.
I think this should be a Set instead of a Set.
This is not needed.
I think this should be a constant.
I think you can use the new ArrayList<>() method here.
I think this should be a .orElse("")
log
I think this should be a WARN instead of an ERROR.
This should be a constant.
I think this should be a POST.
I think we should use the same name as the previous one.
I think this should be a constant.
This test is not testing anything.
I think we should use the same approach as in the other methods.
This is a bit hard to read. Can we use the file name instead of the file name?
I think this should be a partSpec.
I think this should be a while loop.
This is not needed.
This is not necessary.
I think we should use the message from the message to make sure we get an error message.
I think this is not necessary. The parentFqcn is already a parentFqcn.
nit: this can be a lambda
I think this is a bit too complicated. It's not a big deal, but it's not a big deal, but it's not a big deal, but it's not a big deal, but it's not a big deal.
This is not needed.
This is not a part of the PR, but it seems like it should be a separate PR.
nit: we can just use builder.addPartialRow(response) here.
This is not needed.
I think this should be done in the constructor.
can you make this a static final field?
ICS=false. Please remove this check.
I think this is a bit hard to read. I think it would be better to use a lambda here.
I think we should use the same byte[] as the second argument.
I think this should be loadBuildHostData(properties)
This is not necessary.
I think we should use the same approach as in the other classes.
I think you can use try-with-resources here.
I think this should be Map.of(Assigner.class)
I think we should use LocaleSettingHandler.getLocale(Locale) instead of LocaleSettingHandler.
@vilchik-elena Why not use random random number?
This is a bit of a very good idea. I think it would be better to have a method like this:  private static void addEntries(final Date entry) { if (entriesLeftBehind.isEmpty()) { return null; } }
Why is this needed?
I think we should verify that the response is actually sent.
I think we should use the thread name here.
I think this should be inside the if block, not here
I think this should be:  java return alarmNotYetRing && (alarmNotYetRing && isProcessedSmartAlarm) && isProcessedSmartAlarm && isProcessedSmartAlarm && isProcessedSmartAlarm && isProcessedSmartAlarm && isProcessedSmartAlarm && isProcessedSmartAlarm && isProcessedSmartAlarm && isProcessedSmartAlarm) && isProcessedSmartAlarm;
You can use assertEquals instead of assertEquals.
This should be a WARN instead of an ERROR.
This is not necessary.
This should be a Long
This should be a constant.
I think this should be private.
I think this should be cursor.getInt( offset ) instead of cursor.getInt( offset ).
This is a bit hard to read. Can we use a method like getString(String) that returns a string?
I think this should be "debug"
I think we should use the KFSConstants.SUPER_TYPE_NAME constant here.
I think it would be better to use the new method here.
I think this should be a constant.
I think this should be in a try-with-resources block.
This is a bit strange. You can use StringUtils.isEmpty(value)
Why do you need to create a new Date here?
I think this should be a WARN instead of an ERROR.
This is not necessary.
This is a bit hard to read. Can we use a switch statement here?
This is a breaking change.
Please use a more descriptive name.
This is not a good idea. You can use the new constructor to create the client.
This is a bit of a duplicate of the code above, maybe we can extract it to a method?
I think this is not needed.
I think this should be a List<Item>
I think it would be better to use Path.create(path) here.
I think we should use SecureStoreUtils.storeCredentials here.
This is a copy of the array, why not just use Arrays.copyOf?
I think we should throw UnsupportedOperationException here.
Should this return a null?
I think we should use the same name as the other variables.
I think this should be a RuntimeException
I think this should be new GregorianCalendar(2014, 8, 8, 8, 8, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00
This is not necessary, the StringBuilder is already a String.
I think we should use the same approach as in the other filters.
I think we should use a CompositeException here.
Why is this needed?
Shouldn't this be a Resource?
I think this should be in the else block.
I think it would be better to return an immutable map here.
This is a bit strange. I think it should be a StringBuilder instead of a StringBuilder.
This is a bit hard to read. I think it would be better to use a for loop instead of a for loop.
This is a bit confusing. Why not just return the value of the method?
I think this should be a RuntimeException
I think this should be in a finally block.
I think we should check for null first.
This should be private.
This is not a valid value. You should use the OS.getProperty("java.io.file.Path")
I think we should use the same approach as in the other methods.
nit: I think this is a bit strange to have a while loop.
This is a good candidate for a method to be used in the same class.
I think this should be error level.
I think this should be removed
I think this should be error. Proceeding is not a good idea.
I think we should add a checkNotNull here to make sure we don't have to worry about null values.
I think this should be "We have stopped already started"
nit: I think it's better to use the new constructor here
This is not a good idea. You can use the new method to get the network registry.
I think this should be a warning.
I think this should be a warning.
This is a bit hard to read. Can we use a method reference instead?
This should be a logger.
This is not a good idea. You can use assertEquals(slave.getLog(), message)
This is a bit hard to read. Can you please extract a method to reduce code duplication?
I think this should be done in the DB, not in the DB.
Can we use the HadoopSinkFormatProvider here?
I think we should use the new method here instead of the old one.
This is a bit hard to read. Can we extract a method that takes a UUID and then call it from the UUID?
nit: s3n://test-bucket/test/
This is a bit strange, but I think we should log the host name here.
I think this should be a static method.
I think this should be in the constructor.
This is a debug statement.
I think this should be moved to the end of the test method.
I think we should use the new method here.
This is not necessary.
This is not a valid state.
I think this should be in the finally block.
I think we should also check that the view is not null.
This is not correct. You can't compare the date of the date, but you can't compare it with the actual value.
I think this should be a static method.
I think we should add a new method to the base class to avoid duplication.
I think we should use the same format as the other format string.
please use Collections.singletonList()
I think we should use the same approach as in the other cases.
This is not thread safe.
I think we should use the constant here.
@vilchik-elena Why not using the same approach as above?
This should be a List<ExpressionResolver>
I think we should use switch statement here.
I think this should be a ConcurrentHashMap.
Remove this line.
This is a bit confusing. I think it would be better to have a method like isRealmExist(String realmName) that returns the boolean value.
I think this is a bit too complicated. Maybe we can use a for loop instead of a for loop?
I think this should be a constant.
return Collections.emptyList();
This is not a good idea. You can use the same pattern as the one in the other classes.
I think this should be a constant
This is a bit hard to read. Can you please extract a method to reuse the code?
I think this is a bit too complicated. It's not a good idea to have a constant for the class name.
I think this should be a List<WComponent> not a List<WComponent>.
This is not correct. You can use MediaListMode.GRID.equals(mediaListMode)
I think this should be: return AccountLinkingStatus.ENABLED.equals(getStatus()) && AccountLinkingStatus.ENABLED.equals(getStatus()) ? true : false;
please use the same formatting as the rest of the file
I think we should use the same approach as in the submitCategory method.
I think we should use the new method here:  return ast != null && ast.getType() == 1;  This will also allow the new method to be called in the same way as the new method.
You can use Bundle.getSimpleName()
This is a bit hard to read. Can you please extract a method to createDocOrgRelationMatcher?
This is not a good idea. You can use the version of the targetCommunitiesType.
I think we should use the same approach as in the other classes.
I think this should be a stream instead of a filter.
This is not needed.
I think this should be a switch statement.
I think you should use the FileRepository.createTempFile method here.
This is not needed.
remove
This is not a good idea. You can use the enum directly.
This is a bit confusing. I think it's better to have a method called addSong(String name, String name) that calls the addSong(String name) and then call that method.
This is not necessary.
I think it would be better to use the CosmosExceptionUtils.exceptionHandler() method here.
I think this is a bit strange. We should have a default value for "max size=" and then use it in the UI.
This is not a good idea. You can use the new method to create a new one.
I think it would be better to use the same approach as in the other methods.
I think we should also check if the observer is not null.
I think this should be synchronized
I think it would be better to use MongoFeedStatisticsStore.getInstance().getSimpleName()
This is a breaking change.
This is a bit hard to read. I think it would be better to use a switch statement instead of a switch.
I think we should use the same error message as in the other method.
I think this is a bit too long. Maybe we can extract a method for this?
I think this should be a warning.
This is not needed.
I think this should be moved to the registryRegistrationMap.remove() method.
I think you can use the diamond operator here.
This should be a synchronized block.
This is not a good idea. You can use the logWithFormat method to log the size.
Should this be set in the constructor?
I think we should use URI.create(url) here.
This is not needed.
We should log the exception here.
I think this should be a part of the 'if' statement, not the 'else' clause.
This is not needed.
@lautarobock why not use streams here?
I think this should be assertEquals(expected, actual)
I think this should be a constant.
I think this is a bit more readable:  for (Entry<JavaOperationSignature, Set<String>> entry : operations.entrySet()) { if (mask.covers(entry.getKey()).containsKey(entry.getKey())) { return true; } return true;
I think this should be a for loop.
I think this should be a Map<String, String>
I think we should set the scrollTargetCallback to null here.
I think this should be moved to the top of the method.
Can we use the full name here?
This is a bit of a duplicate of the code in the mergeDiff method. I think it would be better to extract the logic to a separate method.
I think we should also check that the index hasDocRefHitsAnyOrder, not the index.
please use getDbFacade().getCurrentVdsDAO()
I think this should be a warning
I think you can use Tree.Kind.METHOD here.
This is not necessary. The set is already set in the set above.
This is a debug statement.
This should be a WARN instead of an ERROR.
Why do we need this?
This is not necessary.
This is not needed.
I think this should be a List<LogMessage>
I think we should verify that the charge is actually payId
return json(null, null);
This should be implemented with @Nullable
This is not needed.
I think this should be a List<String>
This is not necessary.
rename to child
This is a bit hard to read. Can you please extract a method to avoid duplication?
I think this should be a WARN instead of an ERROR.
Shouldn't this be disposed?
I think we should move this logic to the consumer.
I think we should use the same timeout as the timeout.
I think you should use the new method here.
I think this should be inside the if block
This is not needed.
I think we should use the same approach as the one in the other class.
I think this should be debug level
This is a bit of a very bad idea. I think it would be better to have a single method that takes a String and returns a String.
I think we should use a StringBuilder here.
@ivandalbosco Why not use the diamond operator here?
I think this should be a for loop.
I think this is a bit too complicated. I think it would be better to use a for loop here.
I think this should be a constant
I think we should add a check for the topologyId here.
I think this should be moved to the if statement below.
I think this should be a warning.
This is not a good idea. You can use a Set instead of a set.
I think this is not needed.
I think we should log the exception here.
This is not needed.
I think this should be a method reference, since it's a lot of the time.
This should be a static method.
I think this should be a constant
nit: I think this is a bit strange to have a streamSet.stream() call.
I think we should use the new constructor here.
I think this should be set to null, and then the check for fDialogPositionInit is set to null.
I think this is a bit too complicated. Maybe we can extract a method for this?
I think this should be synchronized
I think this should be a separate commit.
Collections.unmodifiableSet()
I think we should have a default value for the default value.
I think this should be assertEquals(null, layerDescriptor.variable)
I think this should be a constant.
This is not a good idea. You can use the deprecated deprecated method.
This should be a WARN instead of an ERROR.
This is not needed.
I think we should verify that the requestsContinueWithOldClient is actually invoked.
This is not a good idea. You can use the new API to get the API API.
I think this should be a warning.
I think we should add a message to the error message.
This is not necessary.
I think this should be assertEquals(1, 2, 2, 2, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
I think this should be in a finally block.
I think this should be private.
Arrays.asList(args)
I think this should be a WARN instead of an ERROR.
I think this should be in a finally block.
I think you can use the trace directly here.
Why not use the comparator?
I think this should be a Map<String, VideoConstraints>
I think this should be a warning.
I think this is a bit too long. Can we just use a lambda here?
I think this should be initialized in the constructor.
I think we should also check if the adapter is not null here.
I think this should be aggCall.getAggregation().get(0)
This should be a try-with-resources block.
I think this should be a WARN instead of an ERROR.
I think this should be removed
I think we should use the same approach as in the test above.
I think this should be moved to the finally block.
This test is not testing the same thing as the one in the test method.
I think we should log this exception.
I think this should be moved to applyStereotype.
I think this should be in a finally block.
This is not necessary.
Why is this needed?
I think we should use builder.maxWaitTime(instanceProperties.getMaxWaitDuration()) here.
I think this should be a constant
@bgeVam please use GeneAnnotationParser.parseGeneAnnotations(genomeFile) instead of this.getClass()
I think this should be private.
This is not needed.
I think this should be synchronized
I think this should be protected.
This is a bit of a very good idea. I think it would be better to use a try-with-resources statement.
This is not necessary.
This is not necessary. The scriptGeneratorDataFileFolder() is already imported.
This should be a constant.
I think this check is not needed.
I think this should be moved to the top of the method.
I think you can use a more descriptive name here.
This is not a debug statement.
I think this should be removed
why not use getVdsDao().getAllForVdsGroupWithStatus(clusterId, VDSStatus.Up);
I think this should be a WARN instead of an ERROR.
I think this should be a constant
I think this should be a constant.
This is not needed.
I think we should use the same format for both JTS and JTS.
I think we should show the error here.
I think this should be a WARN instead of an ERROR.
I think we should use the same error message as in the error message.
I think this is not necessary.
Can we use the JodaUtils.umbrellaInterval(..) syntax here?
I think we should use Collections.singletonMap() here.
nit: can we move this to the top of the method?
This should be a Preconditions.checkNotNull(tabLayoutId, "tabLayoutId cannot be null");
This is a bit confusing. I think it would be better to have a method like isTask() that returns a boolean.
This should be a Days.daysBetween(overlap.getEnd()).
This is not a page name.
Please use the same formatting as the rest of the file.
I think this should be a Comparator.comparing(Language::getConfidence).
I think it would be better to use Integer.valueOf(Math.round(getParameters().getJobWeight() / 10d))
I think we should add a check for null here.
I think we should use assertEquals here.
Why 5?
I think this should be a constant.
This is a bit confusing. I think it should be a ConnectException.
I think we should use the same approach as in the other methods.
I think it would be better to use the same approach as the other methods in this class.
I think this should be a try-with-resources.
I think we should add a check for Realm.isDurability() here to ensure that the Realm cache is not null.
I think this is a bit too complicated. We should be able to use a method reference.
This is not necessary.
I think this should be a constant.
rename to currentBundle
This is not thread safe. You can use a thread pool here.
I think we should use the same approach as in the other classes.
I think this is a bit too complicated. Maybe we can just do something like:  if (aggs != null && aggs.length > 0) { ... }
I think we should have a separate method for this.
I think this should be a WARN instead of an ERROR.
This is not a valid state.
I think we should use the new PasswordCredential here.
I think this should be a Preconditions.checkNotNull(builder.kernelSize, "Padding should include padding for rows", builder.kernelSize);
I think this should be a switch statement.
I think this should be extracted to a separate method, since it's used in multiple places.
I think this is a bit too long.
Can we use a Set instead of a set?
I think this should be synchronized
We should probably use the new method here.
I think this should be a warning.
This is a good candidate for a method on the HttpHeaderNames class.
I think this should be a RuntimeException
I think this should be a method reference.
I think this should be a WARN instead of an ERROR.
I think this should be a static method.
This is a breaking change.
I think this should be private
Shouldn't we delete the delete?
Should this be a WARN instead of an ERROR?
Why not use the primitive long instead of Long?
I think we should add a check for null here.
I think we should log the exception here.
This is not necessary.
I think we should use assertNull here.
@vilchik-elena Why not just use RankingObj.getAccount()?
I think this should be a Set instead of a List.
This should be a constant.
I think this should be in a finally block.
This is not a valid hostname.
I think we should use the new ResteasyProviderFactory.newInstance().
I think this should be a warning
I think we should use the same approach as in the other classes.
This should be a List, not a List.
I think this should be a Set<TypeMirror> not a Set<TypeMirror>.
I think this should be done in the onCreate method.
I think this is not needed.
I think we should log the exception here.
I think we should use the same approach as in the other tests.
I think we should use the same name as the other log messages.
This is a bit of a hack. I think it would be better to use a try-with-resources statement here.
You can use the player.getAttributes() method here.
This is not correct. You can use the constant from the class name.
I think we should use the same pattern as in the other file.
I think this should be a try-with-resources.
I think this should be done in the constructor.
I think you should use the trace instance here.
This is a bit hard to read. How about using a map instead of a set?
I think this should be a Log.ef
I think this should be a constant.
This is not a good idea.
I think this should be a List, not a List.
I think we should have a null check here.
Should be a constant.
This is not a lambda.
This is not a good idea. The metacard is not used for title and title.
I think this is a bit too long.
I think this is not needed.
Why not use randomValue() here?
I think this should be a while loop.
This is a bit confusing. I think it should be a valid schema.
I think this should be assertThat(fileName).isEqualTo("embedding_-642587818.svg");
I think we should use the same timestamp as the timestamp, as we do in the processWatermark method.
I think this should be debug
I think we should use the new API here.
I think this should be a constant.
I think this is a bit too long. Maybe we can use a StringBuilder instead?
This should be Timber.w(e)
I think this is a bit too complicated. Maybe we can extract it to a method and call it from the other methods.
This is a breaking change.
This is not needed.
I think this should be assertEquals(personAddress.getCountry(), fetchedPersonAddress.getCountry());
I think it would be better to use the default value here instead of the default value.
please use Map<String, Object>
@exper0 let's use RqFake here
nit: I think we can use the new method here:  Map<String, HiveColumnStatistics> columnStatisticsMetadataTypes = columnStatisticsMetadataTypes.entrySet().stream() .collect(toImmutableMap(Entry::getKey, entry -> createColumnStatisticsForEmptyPartition(columnTypes.get(entry.getKey()), entry -> createColumnStatisticsForEmptyPartition(columnTypes.get(entry.getKey()), entry -> createColumnStatisticsForEmptyPartition(columnTypes.get(entry.getKey()), entry.getValue())));
This should return the value of the getter.
I think it would be better to use the same error message as the message.
This is not a good way to implement equals. You can use Objects.equals() instead.
I think this should be a WARN instead of an ERROR.
Why do we need to synchronize on the channelList?
I think this should be a constant.
suggestion Preconditions.notNull(conditions, "conditions must not be null");
I think we should add a null check here.
I think this should be a static method.
Why not use a ConcurrentHashMap here?
I think we should use the same name as the other test methods.
I think this should be a WARN instead of an ERROR.
I think this should be a constant
I think we should use a method reference here.
@dalifreire why you are using a string literal here?
This test is not testing anything.
This is not necessary.
I think this should be a constant
This is a bit hard to read. Can we just use a single thread?
I think this should be a Map<PatientDataDefinition>
This is a bit hard to read. Can you please extract a method to avoid duplication?
I think this should be removed
I think this should be a constant.
I think this should be a Map<String, String>
Why do we need this?
I think this should be a constant.
I think you should use the new method here.
I think we should log the query name as well.
@vilchik-elena Why not use static imports?
I think we should use the KBase constructor here.
I think this should be a constant.
I think this should be a constant
This is not a valid project configuration. It should be a project configuration.
I think we should use a StringBuilder here.
I think we should keep the original logic in the TransactionTransaction class.
I think this should be a WARN instead of an ERROR.
I think this should be called only if the storage pool is not null.
Why not use the diamond operator?
This is not thread safe. You can use a thread safe object.
I think this should be setSucceeded(false)
This is a bit confusing. I think it would be better to have a single if statement for the bucketed value.
StringUtils.isNotBlank(invoiceNumber)
This is not a good idea. You can use the following:  java if (jobtracker == null) { jobtracker = jobConf.get(RESOURCE_MANAGER_KEY); } else { jobtracker = jobConf.get(RESOURCE_MANAGER_KEY); }
please use formatter
I think this is a bit too complicated. Maybe we can extract it to a method?
I think this should be removed
This is a bit of a nitpicky, but I think we should have a method for this.
I think this should be a constant.
I think we should use Collections.emptyMap() here.
I think this should be a separate test.
why not using the 'guid'?
This is a bit confusing. I think it would be better to return an Iterable<InstanceInZone> instead of a List<InstanceInZone>
This is not needed.
This is a debug statement.
I think we should use try-with-resources here.
I think we should use ByteBuffer.allocate(Long.BYTES, Long.BYTES) here.
I think this should be assertEquals(1, result.size());
I think this is a bit too complicated. I think it would be better to have a static method in the TypeEquivalenceSet that takes a TypeSet and then call it from the constructor.
I think we should use the same timestamp as the one in the test method.
Why not use the same file name as the file name?
I think we should use the ComponentColumn.getLayoutComponent() method instead of the componentColumn.getLayoutComponent()
I think we should log the exception here.
I think it would be better to use the default value here.
This is a bit confusing. I think it's better to throw an exception here.
This should be a boolean, not a Boolean.
why not addCanDoActionMessageParameters() ?
I think this should be a transaction id, not a transaction ID.
I think this should be a constant.
I think we should use the same approach as in the other methods.
This test is not testing the same thing.
I think we should add the metadata key as the key value.
I think this should be a constant.
I think this should be a constant.
This is a bit strange. I think it would be better to throw an exception if the permissions are not allowed.
I think this is not necessary.
Use a try-with-resources block to close the stream.
I think this should be moved to the resourceManager.
this.dimensions = MonitorsConfig.getDimensions(props);
I think this should be debug
I think we should use the same format as the other format string.
This is a bit hard to read. I would prefer to use a switch statement to make it clearer.
I think we should use the same error message as in the other methods.
I think you can use the new method here.
I think we should have a fail() after this line.
I think this should be Economy.
I think you can use the trace variable here.
I think we should use the same instance as the one in ChannelFuture.
I think this should be a try-with-resources block.
I think this should be a WARN instead of an ERROR.
This is not necessary.
This should be a constant.
I think this is a good idea.
I think this should be a WARN instead of an ERROR.
I think this should be "lambdaInterface"
This should be package-private.
This should be a constant.
I think this should be a WARN instead of an ERROR.
This should return List<Integer>
This should be return get(key).isPresent();
I think we should add the lock lock to the lock.
I think this should be "No such"
assertEquals(1, principal1.getAllGroups().size());
I think this is a bit too complicated. Maybe we could extract a method for this?
I think this should be moved to the previous line.
This test is not testing anything.
This is a good candidate for a null check.
This is not necessary. You can just use the defaultLanguageList.size()
I think this should be a warning
This should be a constant.
I think this is a bit too complicated. I think it would be better to have a single if statement in the if statement.
Can we use the same format as the one in the log file?
I think this should be the default value of the default value.
I think we should use the super(conf, store, store, store, false) constructor here.
This is a bit hard to read. I think it would be better to use a stream and then collect the list of resources.
nit: can we make this a static final field?
I think this is a bit too long. Can you please extract a method to reduce duplication?
style nit: no braces around single line blocks
I think this is not necessary.
I think this should be a try-with-resources.
I think this should be deleted
I think we should use the same name as the one in the other commands.
I think this should be a List<String>
I think this should be a StringBuilder
I think this should be a constant.
I think this should be a constant.
I think this should be externalized.
rename to aspect
double check that no group has been created
I think this is not necessary. The validationContext is already checked in the validate method.
This is not a good idea. You can use a custom JELLY_BEAN_MR2 constant instead of hardcoding the string here.
This is not necessary.
I think this should be a while loop.
This is not a good idea.
This is not necessary.
I think we should use the default case here.
I think this should be error
I think we should use the new method to get the name of the class.
I think this is a bit too long. Maybe we can use a try-with-resources statement here?
This is not necessary.
I think you can use Jenkins.get().allItems(AbstractProject.class, i -> i.getAssignedLabel()).
I think we should use the constant here.
Why do we need to synchronize here?
@dalifreire why do you need to close the reader?
return this;
I think we should use the same name as the other method.
I think this should be a warning
I think this should be a List<Section>
nit: can we use hiveCheckpoint.getSeenPartitions() instead of hiveCheckpoint.getSeenPartitions()?
I think this should be a CacheFileCopy.
This is a bit hard to read. It's a bit hard to read.
why not addCanDoActionMessage?
This is a bit confusing. I think it's better to use the ItemStack directly instead of the ItemStack.
Can we use the diamond operator here?
I think this should be a BigDecimal instead of a BigDecimal.
I think this should be removed
This should be private.
I think this should be debug
I think this should be a WARN instead of an ERROR.
This is not needed.
nit: this.state = State.PENDING;
This should be a Logger.
I think this should be a method reference.
I think this should be a synchronized block.
please use 'else if'
I think this should be a warn
please use injection for injection
This is a good idea.
This is a bit confusing. I think it should be a switch statement.
This is a good idea. You can use a logger.error(e) method to log the error.
You can use the utility method here.
I think we should throw an exception here.
Is this a good idea?
@vilchik-elena Why not call the other constructor?
I think this check is not needed.
This test is not very reliable.
This is not necessary.
This is not correct. The current selection element is not the selected element.
This is a bit confusing. I think it's better to return the locale of the current locale.
I think this should be a field of the MetricFilter.
I think this should be onEntityRemoved(member)
This is not a valid value.
why not using job.getParentStep()?
I think this should be a if (requestHandlers != null && !requestHandlers.isEmpty())
This is not a good idea. You can use conf.getTrimmed(DFSConfigKeys.DFS_NAMENODE_SERVICE_RPC_BIND_HOST_KEY)
Should this be a streamConsumer?
return attachable == null ? false : attachable;
This is not correct. You can use the following:  return new DropCheckConstraint<>(table, ident.getValue());
I think this should be in the constructor.
I think this should be a constant.
please use formatter
This is not a good idea. You can use a for loop here.
I think we should use the same method as in the NotificationManager.
I think this should be moved to the previous line.
I think this is not correct. The implementation of this method is not consistent with the other classes.
@bgeVam please use try-with-resources
I think this should be a map, not a map.
I think this should be synchronized
I think this should be in the try-catch block.
This is not a good idea. You can use EntityNameFinderService.instance().getNameFinder(entityId) instead of the EntityNameFinderService.instance().getNameFinder(entityId).
The topology should be in the try block.
This should be a Double, not a double.
I think this should be a warning.
This is not necessary. The paymentPeriod.getAccrualPeriods() is already a sum of the two fields.
This is not needed.
I think this is a bit too complicated. We should be able to use a switch statement here.
I think we should also verify that the commit is in the commit message.
I think we should use %s for the %s.
I think we should use the same formatter for all the other methods.
I think you can use the index index index index index index here instead of the index index.
I think we should use the new Set<String> here.
I think this should be a static method.
I think this is a bit too long. Maybe we can use a regex to get the first match?
I think we should log the exception here.
This should be delegate.lineBreak();
This should be a constant.
I think this should be a constant.
I think we should log the key too.
Why not just return the result of the method?
This is not a good idea. You can use a logger.
I think this should be moved to the @Before method.
I think this should be a warning
I think this should be a constant
please use the new method in the message
Use constant
I think this should be a lambda.
Shouldn't this be set to null?
I think we should also assert that the consumers are not null.
I think this should be moved to the beginning of the method.
I think we should log the exception here.
I think we should add a check for the token here.
Shouldn't this be a constant?
I think this should be a warning
This should be error
I think this should be a separate commit.
I think this should be done in the try block.
I think this should be "BuildRequires: maven-local\n"
This is a bit confusing. I think it would be better to use a constant for the default port.
I think this should be in the clientStorage.getCurrentItem()
please use injection for this
This should be removed.
Shouldn't we set the current principal to null here?
Collections.singletonList
This is not a good idea.
why not use the getter directly?
This is not a valid Quay.io token.
nit: I think it would be better to use the new partitionName here.
This is not the right place to do this. You can just do: if (now.compareTo(expirationDate)) { return false; }
This is not correct. The object itself is not equal to the object.
I think this should be in a finally block
I think this should be a warning.
I think we should use the expected value here.
I think this should be a StringBuilder instead of a StringBuilder.
I think this is a bit too long. Maybe we can use the same approach as the other method?
I think we should verify that the serialDataReceived method is not called.
I think this is a bit too long. Can we just do a call to the exchange.getOut().setBody(exchange.getIn().getBody())?
I think this is not needed.
This is not a service.
This is not a public APIManagementException.
I think we should use the same pattern as in the other methods.
I think this should be a System.exit() call.
I think it would be better to use Map<String, Boolean> here.
I think this should be a GremlinScriptChecker.parse(g.with('evaluationTimeout', 1000L).with(true).V().out('\n').with(true).V().out('\n').with(true).V().out('\n').
This should be ForestryAPI.climateManager.getTemperature(worldObj, pos)
I think this should be a constant.
I think it would be better to use a try-with-resources statement here.
I think we should also check that the expression is not null.
IgniteCache<Integer, Integer> cache = ignite.transactions().txStart(transactionConcurrency(), isolation);
Shouldn't this be a WARN instead?
I think this should be removed.
Why not just return mgr.statusSnapshot().get().stream()?
I think this should be debug
This should be a logger.
I think this should be builder.add("\u00B7", "\u00B7", "\u00B7", "\u00B7", "\u00B7", "\u00B7", "\u00B7", "\u00B7", "\u00B7", "\u00B7", "\u00B7", "\u00B7", "\u00B7", "\u00B7", "\u00B7", "\u00B7", "\u00B7", "\u00B7", "\u00B7", "\u00B7", "\u00B7", "\u00B7", "\u00B7", "\u00B7", "\u00B7", "\u00B7", "\u00B7", "\u00B7", "\u00B7", "\u00B7", "\u00B7", "\u00B7", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020", "\u0020",
I think this should be a debug statement.
nit: this is redundant
This should be a constant.
I think this is a bit too long. Maybe we can extract a method for this?
I think we should use the same approach as in the other classes.
This is not a valid group role.
I think we should use a constant for "0"
I think this should be moved to the top of the method.
I think this is a bit too complicated. Maybe we could extract a method for this?
This is not necessary.
This is not needed.
I think this should be configurable.
This is not necessary. The test will fail if the block is not found.
Why do we need to set id here?
@vilchik-elena Why not just call the variable directly?
This is not a play, but the play method is called from the play method. I think it should be play(is, false) or play(is, false) to avoid the need for the play method.
I think this should be mocked to avoid mocking the event manager.
I think this should be a JBScrollPane instead of a JBScrollPane.
I think we should make this constructor private.
I think we should add the configured configured value to the log options.
I think this is a bit strange. I think we should have a method to get the file stream and then call it from the method.
This is not correct. You can use the new method to createRedirectResult.
I think we should use the constants defined in the class.
This is a bit hard to read. Can we have a single map of environment variables?
I think this should be a WARN instead of an ERROR.
I think this should be a constant.
I think this is a bit too long. Maybe we can use assertEquals(actual, actual) here?
This is not a supported exception.
I think this should be private
This is a bit hard to read. I think it would be better to have a method that takes a URI and then call that method.
I think this should be a constant.
I think this is a bit strange. I think it would be better to have a test for the case where the default is true.
This should return a list of query(String, String).
I think we should move this to the onRefresh() method.
I think we should use the constant here.
I think this should be a warning.
I think this should be a TmfTraceElement
I think this should be a try-with-resources block.
please use assertNotSame instead of assertNotSame
I think we should use a more descriptive name here.
This is not a blocker, but it seems like a good candidate for a method that returns a boolean.
This should be a try-with-resources block.
I think it would be better to use the TaskFailoverPolicy.getTaskFailoverPolicy() method instead of the TaskFailoverPolicy.
rename to pde.logs
This is a bit confusing. I think it would be better to have a single constructor that takes a File and then call the constructor.
I think this should be a try-with-resources block.
I think this should be a warning.
This should be a warn instead of an error.
I think this should be a WARN instead of an ERROR.
This is not necessary.
I think this should be a Gerrit.getUserAccountInfo()
This is not needed.
I think this should be a Schema.Type.DOUBLE.
why not use storageDomain.getVolume()?
I think this should be assertEquals(1, moduleGroups.size());
I think we should use the new FileChooser.ExtensionFilter here.
I think this should be synchronized
Why is this switch statement necessary?
I think we should use the same naming as the other variables.
Can we use the logger format here?
I think we should add a check for null here.
please use baseActivityTestRule.launchActivity() instead of baseActivityTestRule.launchActivity()
@bgeVam please use static import for assertThat
please use StringUtils.isBlank
I think this should be a VariantMongoWriter.
I think this should be removed.
This is not a good idea. You can use the same approach as in the other methods.
This should be a debug statement.
I think this should be a IllegalArgumentException.
Why not just use the new method?
Why do you need this?
remove
Should be public.
I think we should use the same approach as in the other class.
I think this should be a constant.
Please use Collections.singletonList()
I think this should be a hash code.
@bgeVam please use assertEquals
I think we should throw UnsupportedOperationException here.
This should be a constant.
I think this should be a constant.
nit: this is a bit strange to have a test that checks for the span span is a single span.
I think this should be a warning.
I think we should add a check for the return value of the method to avoid the need for the else block.
This is a bit hard to read. Can we use a map instead of a set?
This is a bit hard to read. Can you please extract a method to avoid duplication?
This constructor should be private.
I think we should log the exception here.
I think this should be a loop, not a for loop.
I think we should use a static import for this.
I think this should be "jgit ls-files-h"
Please use parameterized logging instead of string concatenation.
This is not needed.
Why do we need this?
I think this should be memoryAlreadyBeingRevoked.
I think this should be a ConcurrentModificationException.
I think this should be private
I think this should be a method reference.
Shouldn't we use the diamond operator here?
@ivandalbosco Why not use Tree#isAncestorOf?
This is not a good idea. You can use the new method to get thePhoneNumber and call it from the super class.
Please use static import for assertTrue
I think this should be a WARN instead of an ERROR.
I think we should use the default formatter here.
This is not needed.
I think this should be project.getProject().getLocation().
I think this should be assertEquals(Map.Entry<String, Object>::getSegmentedDataContainer).
@pynicolas Can we use a StringBuilder here?
I think we should add a check for the column name here.
I think this should be a constant.
This is a bit confusing. I think it would be better to use a switch statement here.
nit: can be final
This is not a PTGenericInvoiceEntity.
This is a bit hard to read. Can you please extract a method for the csl?
I think this should be a warning
I think this is a bit too complicated. We should be able to do something like:  if (requestPath.matchesOperation(Operations.UNDELETE) && !requestPath.matchesOperation(Operations.UPDATE_TTL)) { // ... }
I think this should be a try-with-resources block.
I think this should be setWaterMarks(chars, chars)
You can use try-with-resources here.
I think this should be Iterator<Integer>
This is not needed.
This is not necessary.
I think this should be called only in the PsiElement.
I think this should be in GoMethodType.java
@ivandalbosco why not use assertPath("../FOO", prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj, prj
GroupDto is a better name than GroupDto.
This is not correct. The name1 is not a label provider.
This is a bit confusing. I think you should use the super class to compare the fields.
please use runVm() instead of runVm()
Why do we need to sleep here?
nit: I think we can use the same approach as the one above.
I think we should use a better name than "merge_insert"
please add a check that the status is UP
I think this is a bit too complicated. Maybe we can use the same approach as the other one.
This is not a good idea.
This is a bit confusing. I think it would be better to use a method reference to get the pack source and return the file name.
Shouldn't this be in the finally block?
I think this should be done in the finally block.
Is this needed?
I think this should be a WARN instead of an ERROR.
I think this should be a debug statement.
please use isEmpty() instead of size() == 0
I think this should be a warning.
Should be a constant
I think this should be a try-with-resources.
This is not a good idea. You can use the new method createSecurityGroup(String name, Location location) and then use that method.
I think this is not needed.
This is a bit hard to read. I think it would be better to use a map of the key and then check if the key is a string.
rename to element
This is a bit hard to read. Can we make it configurable?
This is not a good idea. You can use a Set instead of a set.
I think this is not needed.
I think this should be a copy of the list.
@bgeVam please use assertEquals
This is not a good idea.
I think this should be a logger instead of System.out.println.
This is not a good idea. You can use the optional password instead of a null password.
This is a good example. You can use a try-with-resources statement here.
I think this should be a Set instead of a List.
Shouldn't this be inside the if block?
I think this should be in the ProjectConfig class.
I think this should be a constant.
I think this should be synchronized
I think this should be a warn instead of an error.
This is a bit hard to read. Can we use a static final variable?
Please use the same pattern as in the other methods.
I think we should log the exception here.
I think this validation should be done in HostSetupNetworksValidator.
This is not a good idea. You can use the new method to update the server.
I think we should use the same errorIndicatorValue here.
I think we should use try-with-resources here.
This should be a List<Iterable<?>>
I think this should be a field, not a field.
This is not a good idea. You can use FilesSkipped.NONE directly.
I think we should add a check for serviceAvailable here.
I think this should be a warn instead of an error.
I think it would be better to use waitInvisibility(elementLocator, defaultLocator) instead of waitInvisibility(elementLocator, DEFAULT_TIMEOUT)
This is a breaking change.
this.servers = new HashMap<>(originalConfig.getServers());
I think this should be private.
I think we should throw an exception here.
I think we should log the exception here.
I think we should check for isAskingToLike before checking for isAskingToLike before checking for isAskingToLike.
I think we should throw an exception here.
I think we should use the same message for both the and the payload.
I think this should be a try-with-resources block.
I think this should be a try-with-resources.
This should be a WARN instead of an ERROR.
I think this test is not needed.
I think this is a bit strange to have a method for this.
This is not needed.
I think this should be a ConcurrentHashMap.
This is a bit confusing. I think it would be better to use the new ArrayList<>() method.
I think this should be splitClassNames(Arrays.asList(new String[2]), new String[]{ "b"), new String[]{ "b"), new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[]{ "b"}, new String[
I think we should use selector.name() here.
This test is not testing anything.
This is not necessary. The test will fail if the file is not deleted.
I think this should be a constant.
I think we should use the same format as in the other files.
Please use assertThat instead of assertThat.
I think this should be int
I think this should be in a @Before method.
This is a bit of a good idea. I think it would be better to use a try-with-resources statement.
I think this should be a warning.
I think we should add a null check here.
I think we should use the constants defined in the enum.
I think this should be a different exception type.
I think this should be an error.
I think we should use a lambda here.
Can we use a constant for "logs/logviewer-startup.log"?
I think this is a bit too complicated. Maybe we could extract a method to reduce duplication?
I think this should be error level.
I think we should use the same approach as in the other tests.
I think this is a bit too complicated. Maybe we can extract a method for this?
I think this should be a constant
You can use Calendar.getDefault() instead of new CalendarAdapter(getContext(), dateList).
I think this is a bit too long. Can we just do blobURL.equals(blobURL) and then just do blobURL.equals(blobURL) ?
I think this should be removed.
Why is this needed?
I think this should be wait.forElementVisible(enableTestModeButton, 5, 1);
I think we should use the new HashMap here.
I think this should be a boolean
This is a breaking change.
please use parameterized logging instead of string concatenation.
I think this is a bit too complicated. Maybe we can extract a method to reduce duplication?
I think this is a good idea.
This is not a good idea. You can use a @Test(expected = IOException.class) to make sure the exception is not thrown.
I think this should be a more specific exception.
I think we should use the same name as the message.
This is a bit confusing. I think it would be better to use the new method to get the time and then return the same value.
You can use try-with-resources here.
I think this is a bit too long. Can we just use a lambda here?
This should be a switch statement.
I think this should be a constant.
This is not correct. You can use StringBuilder instead of StringBuilder.
This is not necessary.
I think this should be error level.
This should be a static method.
I think this is not needed.
This should be a logger.
I think we should add a log here to indicate that the requested partitions are sent.
It's better to use assertThat(result, is(not(empty()))
I think this should be a constant.
I think this is a bit too long. Maybe we can extract a method to reduce duplication?
I think this should be a field.getDatatype().equals(Datatype.TEXT)
I think this should be a boolean
This is a bit hard to read. Can we just use a Set instead?
I think this should be private.
Why not return Double.getFloat(MAJOR_COMPACTION_THRESHOLD, 0.6f); ?
This should be a switch statement.
This is not necessary.
This is a bit confusing. I think it's better to throw an exception here.
I think this should be a Fluid instead of a Fluid.
This should be a constant.
nit: I think this is a bit strange to have a long value for the task id and the task id.
I think this should be in a finally block.
nit: I think it's better to throw UnsupportedOperationException
This is a bit of a very broad way to do this. I think we should have a method to build the payload and return the payload.
Should this be a WARN instead?
I think this should be written as a while loop.
I think this should be a Long instead of a Long.
I think we should add a default case here.
Extract the building of the ResponseMessage to it's own variable (in eclipse, select the text, right-click > refactor > extract local variable / select code + shift+alt+L). This will make the code a bit more readable, especially when you'll be passing in other things besides the ResponseMessage.
This is not needed.
I think we should use the same approach as in the other methods.
I think this should be removed.
This should be a constant
This should be private.
I think this should be:  java if (hiddenCard.getType() == cardType && hiddenCard.getHashCode() == card.hashCode()) { return true; }  This way we don't have to check for null card type.
I think we should use the same error message as in the other methods.
UTF8
This is a bit hard to read. I think it would be better to use a try-with-resources statement here.
This should be a constant.
I think we should throw UnsupportedOperationException here.
I think this should be a for loop.
This is a bit hard to read. I think it would be better to use a method reference.
I think this should be a WARN instead of an ERROR.
Please use CollectionUtils.isNotEmpty()
This is not necessary.
I think this is a bit too long. Maybe we can extract a method for this?
This is not correct. You can use Vector2d.equals(x, v)
I think we should check that the command is not null before calling the checkStatus method.
I think we should also verify that the entry is not present.
Shouldn't this be inMaintenance = false?
I think it would be better to use the constant VDSGroup.getSupportedEmulatedMachine() instead of hard-coding the value.
Can you use try-with-resources here?
I think this should be a debug statement.
This is a good idea.
I think you can use the constant here.
I think this should be removed.
Why not just return an empty list?
This is a bit of a hack to me. It's not a good idea to have a Timer.
I think this should be inside the try block.
I think this should be a constant
I think this should be a WARN instead of an ERROR.
I think this should be "Migrating projects"
I think we should log the exception here.
I think this should be a warning.
I think this should be moved to the updateAnnouncement method.
I think this should be a lambda
I think this should be done in the constructor.
I think this is a bit too long. Maybe we can use a method reference?
This is not needed.
I think this should be addVersion("1.8", new JavaLanguageHandler(7), false);
I think we should use assertEquals here.
This is not a good idea. You can use a logger.error(Level.INFO, throwable.getMessage())
I think we should use the new IRoute here.
This should be a constant.
I think this should be a constant.
I think this should be a method reference.
This is not necessary.
I think we should use the new constructor here.
Remove this line.
please use static imports
@ivandalbosco Why not use the static method here?
This is a bit hard to read. Can you please extract a method to reduce code duplication?
I think this should be a NotificationSuccess.
This should be a constant.
This is a bit confusing. I think it would be better to use a Set<String> to avoid the extra array allocation.
I think it would be better to use the String.format() method here.
I think we should use a more descriptive name here.
I think this is a bit too complicated. It's a bit hard to read.
I think we should use a constant for STARTING.
I think this should be a constant.
I think this should be a switch statement.
This is not needed.
I think we should also check that the dependencies are not registered with the same package.
This is not necessary.
I think this should be a warn level.
This should be in the finally block.
why not use getStorageDomainId()?
I think this should be assertEquals(MessageTest.assertValid(m));
I think this is not needed.
I think this should be a field, not a field.
I think we should use a stream here.
This is a breaking change.
why not use the volumeSize variable?
nit: I think we can use Objects.requireNonNull(supplier, "supplier is null");
I think this should be a Set, not a Set.
I think this should be a constant.
I think it would be better to use the same pattern as the previous one.
This is not necessary.
I think this should be a warning.
This is not necessary.
This is a bit hard to read. Can we use a lambda here?
I think we should use the old version of Boolean.TRUE.equals(feature.getUserData())
Shouldn't this be a IllegalArgumentException?
I think this should be a static method.
I think this should be a constant.
I think this should be a mocked method.
I think this should be extracted to a method in HostUtils.
This should be a separate method.
I think this should be private.
I think this should be a constant.
please use ObjectUtils.objectsEqual(this, other.rootCommandId)
This should be ZoneId.of(Zone.getInstance().getTimeZone().getID())
I think we should log the exception here.
I think you can use the constant here.
This is a good idea.
This is a bit hard to read. Can we use a StringBuilder instead?
I think we should use the local variable for the plot name here.
Why not just pass the network id?
I think this should be a Map, not a HashMap.
I think we should use a different name than "read-resource"
I think this should be a Set instead of a List.
This should be a more specific exception.
I think this should be a Map.Entry, not a HashMap.
I think this should be a Set<SymbolicValue>
This is a breaking change.
I think this should be a constant.
I think we should use the [File.separator](<LINK_0> here.
This should be a static method.
this.licenses = licenses;
I think this should be packageManager.
I think this should be a method updateCloudletProcessAndPacketsDispatch(s)
minor: can be debug
This is not correct. You can use the new method to check if the list is empty.
I think this should be RxJavaPlugins.onError(e)
@dalifreire why we need to copy the file here?
Why is this needed?
I think it would be better to use the same approach as in the test method.
I think this should be done in the constructor.
This should be a static method.
Why do we need to run all thds in the test?
I think this should be a Flux.fromIterable(redisURIs)
I think we should use the new method toFallbackMethod(dispatch) here.
I think we should throw an exception here.
This should be a warning.
@ivandalbosco Why not use the pattern pattern here?
This is a bit hard to read. Can we use a lazy iterator?
I think this should be info level
This is not used.
I think this should be a constant.
This is a bit of a copy/paste error. I think it should be a copy of the file.
I think this is not needed.
This is not a good idea. You can use a Set instead of a List.
This is a bit of a very good idea. Maybe we should add a method toSubjects(List<X500Principal> subjects) to the list of X500Principal and call that method in the list of X500Principal?
why is this needed?
this can be replaced with getPermissionCheckSubjects()
I think this should be removed.
This is not a READ_ONLY.
I think it would be better to use the same approach as in the other classes.
please use the 'this' convention
I think this should be a try-with-resources.
This is not necessary. You can use the new API.
I think this should be eventExemption.setWhenCreated(when);
This is not a good idea. You can use the new URL for the test.
I think we should use the same approach as in the other methods.
This is not necessary. The value of the array is passed to the constructor.
I think we should use the same approach as in the other methods.
I think this is not needed.
This is not necessary.
This is a bit confusing. I think it would be better to use the player name instead of the player name.
I think we should also check that the stub elements are not empty.
I think we should use the new constructor here.
This should be a constant
I think we should add a register(TokenTypes.LITERAL_FIELD_DEF, IndexHandler.class) here.
I think we should use the same approach as in the onCreate method.
I think this is a bit too complicated. It's not a good idea to have a static method in PsiErrorElement.
I think we should use the constant here.
This is not needed.
I think this should be a Set, not a Set.
I think this should be a List<Aggregation> not a List<Aggregation>
nit: I think this could be written as:  ImmutableList.Builder<FlatRow.Cell> combined = ImmutableList.builderWithExpectedSize(allOf(familyCellList)); combined.addAll(familyCellList); combined.addAll(familyCellList); combined.addAll(familyCellList); combined.addAll(familyCellList); combined.addAll(familyCellList); combined.addAll(familyCellList); combined.addAll(familyCellList); combined.addAll(familyCellList); combined.addAll(familyCellList); combined.addAll(familyCellList); combined.addAll(familyCellList); combined.addAll(familyCellList); combined.addAll(familyCellList); combined.addAll(familyCellList); combined.addAll(familyCellList); combined.addAll(familyCellList); combined.addAll(familyCellList); combined.addAll(familyCellList);
This should be a constant.
I think this should be moved to the top of the method.
I think this should be a .map(a -> new SimpleGrantedAuthority(a.getUserRole()))).collect(Collectors.toSet());
I think this should be a stream instead of a stream.
This is a bit hard to read. Can you please extract a method for this?
please use assertEquals
I think this should be removed.
I think this should be synchronized
I think this should be a Set<String> instead of a Set<String>.
this.
I think we should use the new property here.
I think this should be a constant.
Why is this needed?
nit: remove unnecessary else
I think we should use the same approach as in other places.
I think this should be a constant.
This is a bit confusing. I think it should be a warning.
@vilchik-elena Why not use the constant here?
I think this should be a SamzaException, not a SamzaException.
This is a bit confusing. I think we should have a method to get the node and check if it is null.
I think we should use a ConcurrentHashMap here.
This should be a Log_OC.v call.
This is not a request class.
Please use assertEquals(element, other, other)
I think this should be a static method.
I think we should add a check for the openMRS.getInstance().getSyncState() here.
I think this should be a bit more clear:  assertEquals(1, foreignAchErrorMessages.size());
This should be a constant.
I think this should be a GoField.class.
I think we should use the same name as the other keySerde.
I think this should be env.jersey().register(new EmptyOptionalTo204ExceptionMapper());
suggestion throw new IllegalArgumentException("Convergence tolerance must be non-negative or got " + convergenceTol);
I think this should be a constant.
BATTERY_LEVEL_SAMPLE is a bit confusing. I think it would be better to use a constant for the string value.
I think this should be synchronized
I think we should use the same value for the default value.
I think this is a bit too verbose. Maybe we can use a Set<String> instead of a Set<String>.
I think this should be a constant.
This is a bit hard to read. I think it would be better to use the JsonValue instead of the JsonValue.
I think we should use assertEquals here.
I think we should use the same name as the other name.
This is not a good idea. You can use a Set<String> to avoid the need for the set.
I think this check is not necessary. The method is only used by the methodDefToken.
I think we should throw an IllegalStateException here.
This is a bit hard to read. Can you please extract a method to reduce duplication?
This is not a good idea. We should use the Json object to serialize the JSON.
This is not needed.
Why do we need to clear the principalName here?
I think this should be a TmfNanoTimestamp instead of a TmfNanoTimestamp
This is a breaking change.
This is a breaking change.
This is a bit hard to read. Can you please extract a method to avoid duplication?
I think we should use the constant here.
This is not needed.
This is not a good idea. You can use the form name directly.
This is a breaking change.
I think this should be a constant.
I think we should use the bytebuffer instead of the payload.
I think this should be a Log_OC.d
I think we should use the same color for the text, like the other values.
rename to file
I think we should use the same timestamp as the one in the test.
Please use assertThat instead of assertEquals.
I think this should be a constant
I think this is not needed.
This is a breaking change.
This test is not testing anything.
I think we should return the TableViewerColumn here.
I think this is a bit too complicated. Maybe we can extract a method to determine if the file is a file and if it is a directory, then we can get the content from the source file.
I think this should be moved to the 'if' block, so that we can avoid the 'else' clause.
This is not thread safe. You can use a CountDownLatch.
We should use StandardCharsets.UTF_8 here.
I think this should be the default value of the enum.
This is a bit hard to read. I would prefer to use a try-with-resources statement here.
Should this be offset - 1?
I think this should be a constant.
This is not needed.
I think this is a bit too complicated. Maybe we can use a stream and then collect the result?
This should be a try-with-resources block.
I think this should be handleRenamedFiles()
nit: can be simplified to: java if (rv != null) { return null; }
I think we should add a message to the message.
I think this should be moved to the firePropertyChange method.
I think we should log the exception here.
I think this should be a constant.
This is not a good idea. You can use the default formatter to format the code.
I think we should add a check for req.getHeader().getOperation() == BookkeeperProtocol.Request here.
I think this should be a WARN instead of an ERROR.
We should use the ExternalSearch.getInstance() method here.
I think we should use the same filter as the one above.
I think we should use the same converter for the messageConverter.
I think this should be a lambda
nit: I think we can use the new HashMap<>(outputKeys) method to avoid the need for the extra object creation.
I think this should be a warning
This is a bit confusing. I think it should be a constant.
I think this is not necessary. The only place where we have the module in the module is that the module is defined in the module is defined.
I think this should be a constant.
I think we should use the same message as in the other createContents method.
It's better to use a switch statement here.
I think this should be in the onOpenMessage() method.
This is a bit hard to read. Can you please extract a method to get the File and then call that method?
This is not necessary. You can use Collections.emptyMap()
This is not needed.
Why not return currentUserId?
I think we should use the SegmentRef.
removePatientFromCohort
This is not a good idea. You can use the default display refresh rate to set the default display refresh rate.
This should be a constant.
This should be a field of the class.
I think this should be removed
I think we should use the same order as above.
This should be a Set, not a Set.
I think you can use Tree.Kind.CLASS here.
I think this should be assertEquals(result, result)
I think this should be a catch block.
This is a good idea.
I think this should be a constant
I think we should add the policy name to the exception message.
This is a bit hard to read. I think it would be better to use a try-with-resources statement here.
This is a bit hard to read. I think it would be better to use a function to get the player name and then use it.
I think we should use the constants defined in the class.
I think we should use the subscription subscription here.
I think this should be a Logger.
@pynicolas can you please move this to a constant?
I think this should be task.getInternal().getScheduledTime() == -1
I think you can use the diamond operator here
This should be a static method.
This should be a warning.
I think this should be removed.
I think we should use the default path separator here.
I think this should be a singleton list.
Please remove this line.
I think we should use the same key for all the keys that are stored in the same key.
I think it would be better to use the module.getStateSystem() here.
This is not correct. The parent is the parent of the parent.
I think this should be logged at info level.
Shouldn't this be a RuntimeException?
I think we should use Timber.e here.
This is a bit hard to read. I think it would be better to have a method that takes a String and returns a string and then convert the string to a String.
I think it would be better to use the ExpectedException rule here.
I think this should be done in the refresh method.
nit: I think it would be better to use the constant for "kmsKeyName"
I think this should be removed.
This is not a good idea. You can use the new method to create a new feature.
I think this should be a constant.
I think we should use the same name as the other variable name
I think this should be a warning.
I think this should be a WARN instead of an ERROR.
Why not just use a for loop here?
This is a bit hard to read. I think it would be better to use a for loop instead of a for loop.
I think it would be better to check for the course ID here.
static import
return fbnElement.getType() != null
I think this is a bit too long. Can we just use the LDIFReader constructor?
I think it would be better to use the new method here.
Should this be a property so that we can set it in the properties map?
I think this should be package private.
I think we should add a log message here to indicate that the replication manager is not available.
I think this should be a warning.
This is not needed.
This is a bit hard to read. Can we make this a method?
This is not a good idea. You can use the new method to update the resource.
This is not necessary.
I think this should be done in the constructor.
I think this should be a switch statement.
please use injection for ValidationResult
This is a bit strange, but I think it would be better to use the constant here.
This is a breaking change.
I think this should be a constant.
I think this should be a WARN instead of an ERROR.
I think we should add a check for updateStoreStatistics(ctx, command) here.
This is a bit hard to read. Can we use a stream here?
I think we should use assertEquals here.
I think this should be a separate method.
I think this should be moved to the finally block.
This is a bit hard to read. How about adding a method to the DirectoryRecord that takes a File and then call that method?
I think this should be KiePolicyHelper.isPolicyEnabled()
I think this is not needed.
I think we should use the new method here instead of the old one.
Use a try-with-resources statement here.
I think this should be a constant.
I think this should be synchronized
I think we should keep the old behavior here.
I think this should be a WARN instead of an ERROR.
This is not correct. You can't use the player's return value.
I think this should be a 500 error.
I think we should add a null check here.
I think this should be a constant.
I think this should be config.save(new String[]{-1}),
I think this is not necessary.
I think this should be moved to the endActionOnVmConfiguration() method
This is a good candidate for a method to create a new one.
I think this should be a WARN instead of an ERROR.
This is a bit hard to read. Can we use a method reference instead?
This is a bit confusing. I think it would be better to use a method reference here.
This is a good idea. You can use a lambda here.
This is not needed.
Why do we need to do this?
I think this is not necessary, because you are using it in the UI page.
This is a bit confusing. I think it would be better to use a local variable to check if the value is a segment count.
I think this should be a List<T> since it's a List<T>
This should be return Default.useBase.isDefault() && default().useBase;
This is not needed.
This is a breaking change.
I think this should be a separate method, since it is a common practice.
I think this should be trackNewServerEvent(UsageEventType.FAILED_VALUE);
I think this should be setDefault(PreferenceConstants.P_ORGANIZATION, "");
I think it would be better to use the same name as the class name.
This should be a Double.parseDouble()
I think this should be a try-with-resources block.
Why is this necessary?
I think this should be moved to the previous line.
I think this should be a StringBuilder, not a String.
This should be removed.
I think we should use the same name for the event type here.
I think this should be a NumberFormatException.
I think you can use assertEquals here.
I think this should be a IllegalArgumentException.
I think this should be a RuntimeException
I think we should verify that the plugin is not null.
I think this should be a constant.
This is not a good idea. You can use the new method to create the properties.
I think this should be a WARN instead of an ERROR.
This is a very bad idea. I think it would be better to use a try-with-resources statement here.
I think this should be a field so that it can be reused in the future.
I think this should be a WARN instead of an ERROR.
This is not a good idea. You can use ObjectUtils.objectsEqual(Object, Object)
I think it would be better to use the constant here.
I think we should use the @Test annotation here.
I think this should be a warning.
This is not correct. You can't get the value from the map. You should use the value directly.
This is a bit hard to read. Can we make a helper method for this?
I think this should be a synchronized block.
assertEquals(1,tbm.getSize())
This is not correct. The name of the list is not the same as the original type.
I think this should be removed.
This is not needed.
I think this should be removed.
This should be a copy of the list.
This is not a good idea. You can use a Set instead of a List.
This is not necessary.
I think this should be a transaction
I think this should be a IllegalArgumentException.
I think this should be debug
I think this should be a WARN instead of an ERROR.
why is this needed?
This should be a List<List<?>>
I think we should use the same approach as in AbstractReviewTaskEditorPage.java.
This is a good candidate for a try-with-resources block.
I think we should use the same event type as the event type.
This is not a header, it should be a header.
please use assertEquals
This is a bit confusing. I think it's better to have a single log message for the block id.
This is not needed.
I think this should be ref.get(0)
Shouldn't this be swipeDismissListener != null && !swipeDismissListener.delete(position);?
This is a debug statement.
This is not necessary.
This is a bit confusing. How about just use the bigintVal variable?
I think this should be a List<StoreKeyAndSizeAndOffset>
I think this should be a try-with-resources.
This is a bit hard to read. Can we use a builder?
I think this should be a constant.
This is not correct. You can use request.getContextPath() + "/"
I think this should be a constant.
Use a logger instead of printStackTrace.
I think this should be a constant.
I think this should be infoMap.put("pci_0000_1b_10", getHardware(10)).
I think we should use a CountDownLatch here.
This is not a good idea. It should be a boolean instead of a boolean.
nit: I think you can use totalDeleteBeforePutRecords.get()
I think we should also assert that the path is the same as the path of the project.
This is not a good idea. You can use the primitive type directly.
The index file should be read in the index file.
I think this should be a constant.
I think we should check if the event is already completed before calling this.
This should be a static method.
This is a bit confusing. I think it should be a boolean flag.
This is not correct. You should be able to use the player's name.
I think we should use the [StandardSSHCredentials](<LINK_0>
I think this should be a Map<String, String>
I think we should log the exception here.
I think we should use the constants for these strings.
You can use new DateTime(item.get("timestamp").asText()).asText()
assertTrue(state.state(), ACTIVE);
Please use the constant HOST_NAME
I think this should be a constant.
I think this should be a List, not a List.
I think it would be better to use a method reference here.
This is a bit confusing. I think it would be better to have a method to check if the target is a valid value.
I think this should be a Preconditions.checkArgument
This should be a logger.error() call.
I think this should be StorageDriverConstants.SCOPE_LOCAL.equals(d.getAccessMode())
This is not thread safe. You can use a try-with-resources statement.
This is a bit hard to read. Can we use a method reference here?
I think this should be in the finally block.
I think this should be a constant.
I think we should use a CountDownLatch here.
I think this is a bit confusing. If the worker is not running, the worker is still running.
I think this should be a List<IMarkerEvent> instead of a List<IMarkerEvent>.
This should be runAsync(super::run)
This is a good candidate for a method to be used in the PlayerSelector.
I think this should be called "put("\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n", "\\\\n
I think this should be a switch statement.
I think this is not needed.
I think this should be List<ActionDescriptor>
This is not a good idea. The client should be able to create a client with a client.
style nit: no braces around single line blocks
This is not needed.
please use assertEquals
I think this should be a static method.
It would be better to use waitUntil(() -> result, matcher, OP_TIMEOUT) here.
I think this should be removed
This is not needed.
I think this should be a warning.
I think this is not necessary.
You can use Collections.singletonMap()
Please remove this line.
I think this should be a WARN instead of an ERROR.
I think we should use the same name as the other method.
This is not a good idea. You can use the new method to load the resource.
I think it would be better to use the parametersMap.put(param, value) method instead of calling the method here.
I think this should be error
I think we should throw an exception here.
This should be logged as a warning.
I think this is not necessary, the metricTypes is already set to true.
@bdragan use assertThat(attachment.get(name)).isEqualTo(alias.name())
I think we should use the default value here.
Should we add a check for the element being set to be "task-scheduler"?
This should be a return statement.
This test is not testing anything.
I think we should remove the listener from the _agsPub field.
This is a bit of a nitpicky, but I think it would be better to use a while loop here.
I think we should use the BundleContext.getBundle(0) here.
I think we should use the new method here.
This is not necessary, the Ddf2JsonGenerator.main() method already does this.
@#$%^&&&
I think this is not necessary. The callback is already called when the callback is called.
This is not necessary.
I think this should be a constant.
I think you should use the same message as the one in the method above.
I think this should be a constant.
nit: I think this is a little weird.
I think this should be removed
I think we should use the constant for "org.uberfire.java.nio.file.FileAlreadyExistsException"
@vilchik-elena Why not use the same pattern as in the other methods?
why not use Collections.singletonList ?
This is a bit of a very long method. Can you extract it to a method?
why not use the primitive type?
I think we should use the same error message as in the other overload.
I think we should close the connection in a finally block.
I think this should be kalmonLatitude
Why not just new Resource[] {new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource[] { new Resource
rename to path
rename to element
This is a bit hard to read. Can we use a regex instead?
I think we should use the attribute attribute attribute here instead of calling getAttribute() on the attribute attribute.
I think we should use the same approach as the one in the other classes.
I think this should be a field, not a local variable.
I think we should add a check here to ensure that the table is not null.
I think we should use the same approach as in the other classes.
I think this should be a WARN instead of an ERROR.
nit: this.errorHandlingMetrics = Objects.requireNonNull(connConfig);
It's better to use a try-with-resources statement here.
@ivandalbosco Why not use the following?  java if (calleeSymbol != null && "globals".equals(calleeSymbol.fullyQualifiedName()) {
This should be a constant.
I think this should be a static method.
I think this is not needed.
I think we should use the same label provider here as well.
You can use the same approach as above.
I think this should be Collections.emptyList()
This is not needed.
I think this should be moved to the top of the method.
This is a breaking change.
This is not a good idea. You can use a for loop here.
This should be a logger.
I think this should be a warning.
I think this should be a separate test case.
I think it would be better to use a constant for "application/json"
I think this should be a for loop.
This is not a good idea. You can use Optional.empty() instead.
I think this is not necessary. The test is failing on the next line.
nit: this is a bit confusing. I think it's better to have a single constructor that takes a boolean parameter.
I think this should be a WARN instead of an ERROR.
Can you use assertEquals here?
I think this should be done in the constructor
This is a good idea.
why not use the new method?
This is not necessary.
I think it would be better to use the new method here.
This should be a synchronized block.
rename to element
This is a bit of a very bad idea. I think it would be better to throw an exception instead of returning null.
I think this should be keyValueLineModel.getValue().setIsAvailable(false);
This is not necessary.
Why do we need to synchronize on the lock?
I think this should be done in the super class.
This is a bit of a nitpicking, but I think we should have a null check here.
This should be a warn
This is not needed.
I think we should log the exception here.
I think this should be a constant.
I think this should be assertThat(managementRegistry.getCapabilities(), hasSize(35));
I think we should use the @Test annotation here.
I think this should be in the if (rawMessage != null) check.
I think this should be in a finally block
I think it would be better to use a Set instead of a set.
I think we should check if the callback is cancelled before calling the callback.
I think we should use the expectedException here instead of just the message.
I think we should use the same name as the annotation name.
I think this is a bit more readable if you just use a for loop.
I think this should be shifted to the player's position.
I think this should be a constant.
I think we should use the same approach as in the other methods.
I think we should also check that the project endpoint is not null.
I think this should be a metric name, not a metric name.
I think this should be a warning.
I think we should use a sleep here.
I think this should be a constant
This is not a request.
This is not a safe way to do this. You can use a for loop.
I think this should be moved to the onServer method.
I think it would be better to use CompletableFuture<Void> here.
I think we should use the same naming as above.
I think this should be a String.class, not a String.
I think this should be a gauge, not a gauge.
This method should be private.
I think we should use the default port here.
@pynicolas can we use a constant for "password"?
Is this a debugging statement?
This should be a WARN instead of an ERROR.
I think this should be a warning.
I think this is a bit too complicated. I think it would be better to have a method in ProcessorState that takes a ProcessorState and returns a ProcessorState.
This is a bit hard to read. Can you please extract a method to reduce duplication?
I think this should be inside the if block.
nit: I think we can use the same approach as the other one:  java return joinConjuncts(mergeConjuncts(leftPredicate, node.getOutputSymbols(), node.getOutputSymbols(), node.getOutputSymbols())) .addAll(pullExpressionThroughSymbols(leftPredicate, node.getOutputSymbols())) .addAll(pullExpressionThroughSymbols(leftPredicate, node.getOutputSymbols())) .addAll(pullExpressionThroughSymbols(leftPredicate, node.getOutputSymbols())) .add(pullExpressionThroughSymbols(leftPredicate, node.getOutputSymbols())) .add(pullExpressionThroughSymbols(leftPredicate, node.getOutputSymbols())) .add(pullExpressionThroughSymbols(leftPredicate, node.getOutputSymbols())) .add(pullExpressionThroughSymbols(leftPredicate, node.getOutputSymbols())) .add(pullExpressionThroughSymbols(leftPredicate, node.getOutputSymbols())) .add(pullExpressionThroughSymbols(leftPredicate, node.getOutputSymbols())) .add(pullExpressionThroughSymbols(leftPredicate, node.getOutputSymbols())) .add(pullExpressionThroughSymbols(leftPredicate, node.getOutputSymbols())) .add(pullExpressionThroughSymbols(leftPredicate, node.getOutputSymbols())) .add(pullExpressionThroughSymbols(leftPredicate, node.getOutputSymbols())) .add(pullExpressionThroughSymbols(leftPredicate, node.getOutputSymbols())) .add(pullExpressionThroughSymbols(leftPredicate, node.getOutputSymbols())) .add(pullExpressionThroughSymbols(leftPredicate, node.getOutputSymbols())) .add(pullExpressionThroughSymbols(rightPredicate, node.getOutputSymbols())) .add(pullExpressionThroughSymbols(rightPredicate, node.getOutputSymbols())) .add(pullExpressionThroughSymbols(rightPredicate, node.getOutputSymbols())));
nit: this can be private
Can we use the same approach as in the other tests?
This is not needed.
Should this be a debug level?
I think we should use the stream API here.
boolean isOverlord(Properties properties)
Can we use a constant for this?
I think it would be better to use the same name as the other variable name.
use assertFalse
This is not a valid change.
This is not needed.
This is a bit hard to read. Can we use a switch statement here?
I think this should be a constant
I think we should add the lock to the log.
This is a bit hard to read. Can we just use a string literal here?
I think this should be in a finally block.
I think you can use the static import of Mockito.
I think this should be a separate commit
This is not a good idea. You can use StringUtils.isEmpty()
I think we should use the same name as the one in the log message.
I think this should be a switch statement.
I think this is not necessary. The test will fail if the request is not found.
I think we should remove the listener from the listener, because the listener is not added to the listener.
I think you can use the new id() method here.
I think this should be a field, not a field.
You can use the constant here.
I think we should also check that the cipher suite is not null.
nit: add space before "byte arrrays"
please use formatter
Should we check if the config is not null?
"Conventions must have a currency"
I think we should also check that the HazelcastInstance is not null here.
I think this should be a Set<Object> instead of a List<Object>.
@bgeVam please use UriBuilder.of(
This is a good idea.
This is a bit of a very good place to do this. Can we just do this in the constructor?
This is a bit hard to read. Can we use a single instance of the class?
I think this should be warn
I think you can use the new method referencePointOfChangedAnchor here.
I think this should be a RuntimeException
Collections.emptyMap()
I think we should use JdbiOptionals.findFirstPresent(type, value, config) here.
I think this should be a warning.
I think we should also check if the channel is already registered.
@vilchik-elena Why not use the same name as the method name?
This should be a different method withdrawFundsParams
I think this should be a RuntimeException
I think you can use InetAddress.getByName(hostName) here.
I think this should be a BranchAction_cannotCheckout, not a BranchAction_cannotCheckout
please use the same message as in the other methods
I think this should be a constant
I think this should be a StringBuilder instead of a String.
why not use the newAddress?
This should be done in the finally block.
I think we should use the new HashMap<>() method here.
I think this should be a constant.
return getProperty(name) != null ? getProperty(name) : null;
I think this should be disco.addPacketInterceptor(stanzaListener, outGOING_FILTER);
I think this should be warn
I think this should be done in the constructor
This is not a good idea. You should use a logger.
I think we should add a check for mAirplaneModeObserver != null here.
This is a bit hard to read. Can we use a CountDownLatch instead?
I think we should throw a more specific exception here.
This is a bit hard to read. Can we use a static instance of File?
This is not a good idea.
Extract the building of the ResponseMessage to it's own variable (in eclipse, select the text, right-click > refactor > extract local variable / select code + shift+alt+L). This will make the code a bit more readable, especially when you'll be passing in other things besides the ResponseMessage.
This is not necessary.
I think this should be a warning
This should be a static method.
Why do we need to wait for the thread to finish?
I think this should be a constant.
I think this should be a WARN instead of an ERROR.
I think this is not needed.
This is a bit hard to read. Can you please extract a method for this?
I think this should be a for loop.
please use injection for VmDeviceDAO
I think this should be protected.
This is not a good idea. You can use a Set<String> here.
I think this should be removed.
This is not necessary. The criteria is already a parameter of the method.
This is a bit hard to read. Can we use a stream and then collect?
I think we should use the constants defined in KFSConstants.COUNTRY_CODE_UNITED_STATES
Extract the building of the ResponseMessage to it's own variable (in eclipse, select the text, right-click > refactor > extract local variable / select code + shift+alt+L). This will make the code a bit more readable, especially when you'll be passing in other things besides the ResponseMessage.
I think it would be better to use the 'validate' method here.
I think this should be done in the super class.
I think this should be a switch statement.
Should this be Long.valueOf(999994)?
I think we should also verify that the class is actually called.
I think this should be session.getSessionEndTime()
I think this should be a List<String>
I think this should be a list instead of a list.
This is a debug statement.
I think this should be a constant.
Why is this necessary?
Should we check for the presence of the channels here?
I think this should be a constant.
I think this is not needed.
I think it would be better to use a function reference here.
I think we should also check that the servlet context is not null.
please use injection for VmDeviceDAO
I think this should be a constant.
This is not a good idea. You can use the Objects.toStringHelper() method.
This is a bit confusing. I think it would be better to have a method called something like isFunctionFunctionFunction(Function) and then call it from the method.
I think we should use the new constructor here.
This is a bit hard to read. Can we extract a method to avoid duplication?
I think this is not needed, because the next line will throw an exception if the logger is not enabled.
This is not a hibernate account, but it's not a hibernate account.
I think we should use the same pattern as in the other methods.
This test is not needed.
I think this should be a constant.
@vilchik-elena This is a bit hard to read.
I think this should be private.
This is not a good idea. You can use a different style item for the same line.
Shouldn't this be "X values must be set before setting Y values"?
you can use the Objects.equals() method
I think this should be moved to the previous line.
I think we should also test the case where the publisher is not null.
I think this should be inside the if (diskEntityType == null || !diskEntityType.isVmType())
Can we use SalesforceHybridSDKManager.getInstance().getLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().getSelectedLoginServerManager().
This should be a switch statement.
This is not a good idea. You can use FileSnapshot.
@fanifieiev the same above.
I think this should be a List<String>
I think it would be better to use a LinkedHashSet here.
I think it would be better to use the R.string.distance_meter constant here.
I think it would be better to use StringBuilder instead of StringBuilder.
nit: I think this is a bit strange to have a single statement in a single line.
I think this is not needed.
This is a bit of a nitpicking, but I think it would be better to use a for loop instead of a for loop.
I think this is not necessary.
Shouldn't we log the exception here?
This is a bit of a nitpicky, but I think it would be better to have a static import for LayoutModel.ChangeSupport.
nit: I think we can just use the index variable here.
I think this is a bit too complicated. It's not a big deal, but I think it's a good idea to use tlvs.stream().filter(tlv -> tlv.getProperties().entrySet().stream().filter(tlv -> tlv.getProperties().entrySet().stream().forEach(tlv -> tlv.getProperties().entrySet().stream().forEach(tlv -> tlv.getProperties().entrySet().stream().forEach(tlv -> tlv.getProperties().entrySet().stream()))
I think this is not necessary. The check for the entity is already done in the if statement above.
I think this should be removed.
I think this should be a WARN instead of an ERROR.
I think we should use the same error dialog as in the other method.
I think this should be set to true only if the value is null.
I think it would be better to use OGCGeometry.getGeometryType(GEOMETRY_TYPE_NAME) here.
Can we use the same name for the property store?
I think this should be a WARN instead of an ERROR.
I think we should use the same approach as in other places.
This is not necessary.
This is a debugging statement.
I think this should be a static method.
I think this should be ElasticsearchContainerHolder.getElasticsearchConfig()
I think this should be a Map, not a HashMap.
This is not necessary.
I think this should be a WARN instead of an ERROR.
please use formatter
I think we should add a message to the exception.
Can you use the same order as above?
I think we should have a more descriptive message here.
I think this should be a StringBuilder, not a String.
I think this should be protected.
I think this should be a constant.
I think you can use the diamond operator here
I think you can use Collections.singletonList(referencePoints)
nit: this could be replaced with a call to computeIfAbsent
This constructor should be private.
I think we should use the spring spring bean name here.
please use String.format()
nit: I think this is a bit more readable: java return Optional.of(ImmutableTableRefAndRemainder.of(tableRef, remainingBytes, (byte) 0));
Can we use a constant for the expected columns name?
This should return List<String>
I think this should be warn
I think we should add a check for the retryable error here.
I think this should be a constant.
I think this should be moved to the startPage method.
This is not a good idea. The responseProcessingTime should be a long.
This is not a good idea.
This should be private
Can you please use the diamond operator?
I think this should be UTF8.
nit: I think this should be config.startMiniCluster(NUM_SLAVES_BASE, true);
This is not a good idea. You can use the context.getServiceContext() method instead.
This is a bit confusing. I think we should throw an exception if the input is not a SnomedRelationshipCreateRequest.
I think this should be removed.
I think this should be a Set<Integer>
nit: I think we can use the default config directly instead of the default config.
I think this should be a warning.
I think this should be return new ResponseEntity<>(service.findChallenge(id), HttpStatus.OK);
Shouldn't we cancel the notification here?
I think this is not needed.
I think we should use the same approach as in update() method.
I think this is not necessary.
I think this should be a List<Pair<Boolean, StorageDomain>>
I think this should be a filter, not a filter.
This is not correct. You can use Objects.equals() to compare objects.
I think you should use assertFalse here
I think you can use the same approach as in the other methods.
I think this is a bit strange. I think we should use StringBuilder instead of StringBuilder.
I think this should be a warn instead of an error.
I think this should be private.
This is a good idea.
I think we should use the constant for the name of the datasetfieldtype.
Can you add a checkEnvVarSet() method to checkEnvVarSet()?
I think we should check for null here.
I think this is not needed. The superclass already does this.
This is a bit of a nitpicky, but I think we should have a default timezone instead of a default timezone.
This is a breaking change.
I think this should be removed
I think we should add a check for the handler to be null here.
I think this should be a constant.
I think we should add a check for the taskProcessCallback here.
nit: can we make this a static method?
I think this should be a warn instead of an error.
I think we should throw an IllegalArgumentException here.
I think it would be better to use the expected GeometryType here.
I think this should be Optional.empty()
This is not a good idea.
I think this should be a fieldApprover.approve(currentDescription.getValue())
I think we should log the exception here.
@vilchik-elena Why not use patientService.unvoidPatient(null) ?
I think this should be private
I think we should have a method for this.
This is a bit confusing. I think it would be better to have a method for this.
I think this should be in the constructor.
This should return a Map<String, Response>.
This is a good candidate for a method called handleError(Collection<T>) and call that method in the callback.
I think this should be a constant.
I think this should be a constant.
This is a good candidate for a method to create a string resource.
I think this is not necessary. The node id is already in the string, so the node id is not in the string.
I think this should be a WARN instead of an ERROR.
This is a bit hard to read. I think it would be better to use a StringBuilder instead of a StringBuilder.
I think this should be removed
I think this should be "Grinder" instead of "Grinder".
I think it would be better to use the built-in utility method here.
I think this should be a WARN instead of an ERROR.
I think this should be:  java if (project != null && !project.isEmpty()) { return true; }
This should be done in the super class.
I think this is a bit too complicated. Maybe we could extract a method to make it more readable?
Why not just ctx.kernalContext().gateway()?
Can we use a for-each loop here?
Please add a check for null before adding it.
I think this should be a method called Glowing, not a getter.
I think this should be a WARN instead of an ERROR.
I think we should use org.eclipse.jdt.core.tests.model.JavaIndexTests.equals(clazz) here.
This should be a constant.
I think we should use the new Object[] here.
I think this is not necessary.
Can we use a constant for this?
I think this should be a warning.
I think this should be removed
I think this should be a warning.
I think this is a duplicate of the one above.
This should be a Set, not a Set.
@pynicolas why not make patientProgram final?
why not use the diamond operator?
I think this is a bit too long.
I think we should use the tenantAware.getTenant() instead of the tenantAware.getTenant()
I think we should use the new method measure.isPop() here.
The Exception is never thrown.
I think this is a bit too long. Maybe we can extract a method in the execute method?
I think we should use the new MatrixFunctions.pow(alpha / localSize) here.
This is a bit hard to read. Can we just use a plain String instead?
I think we should use a Set here.
nit: maybe better to use Map<String, TopicNode>?
I think this should be a Map, not a HashMap.
@ivandalbosco Why do we need to create a new location here?
This is a bit hard to read. I think it would be better to use a method on the onItemLongClick method.
I think we should use a logger here.
I think this should be UnsupportedOperationException
I think this should be Assertions.assertNull(value, "value");
I think this should be configurable.
This should be a separate line.
I think this should be removed
I think this should be a WARN instead of an ERROR.
I think this should be configurable.
This should be private.
This should be t.OutputEnergyB <= 0.0001
I think we should use the new LinkedHashMap here.
Why not just throw new RuntimeException(e)?
I think this is a bit too verbose. We can just use the logger.debug() method.
I think we should add a callback to the FifoExecutor.
This is not necessary.
I think we should use analysisMetadata.setOrganizationsEnabled(organization) here.
This test is not testing anything.
I think this should be private.
I think this should be "[DEVELOPER]"
This is not a great idea. It's a good idea to use a different metric name than the one in the metric name.
I think this should be a String.
This is a bit confusing. I think we should throw an exception instead of returning null.
I think this should be a constant.
I think this should be a constant.
@lautarobock what is the reason for this change?
This is not needed.
I think this should be synchronized
I think this should be moved to the finally block.
I think we should use the same name for both the mediaBrowserType and the MediaBrowserType.
I think this should be a constant
I think this is not needed.
This should be a constant
I think we should use the same approach as in the other tests.
Why is this needed?
Can we use a different name for the same name?
I think this should be a StringBuilder instead of a StringBuilder.
I think this should be a try-with-resources block.
I think this is a bit too long.
I think this should be in a finally block.
please add null check
I think it would be better to use OperatorId.getAndIncrement() instead of new OperatorId.getAndIncrement()
@vilchik-elena This is not a Java class, so you can use a lambda expression here.
I think we should use the constant for "servlet"
This is not necessary.
This is a bit hard to read. Can we make it configurable?
I think we should log the exception here.
I think we should log the exception here.
I think this should be runResult = reporterFactory.createReporter();
This is a bit hard to read. Can you please extract a method for this?
I think this should be a WARN instead of an ERROR.
nit: I think we can use the same approach as in the other constructor.
I think this is not necessary. The check for null is done in the if statement below.
please use formatter
I think we should have a timeout here, like in the other cases.
This is not a valid value.
I think we should use the same approach as in the other methods.
Why is this needed?
this.columnHandles = new ArrayList<>(druidClient.getDql());
I think we should use a different name than "234.0"
I think this is not needed.
I think this should be a WARN instead of an ERROR.
I think this should be a warn instead of an error.
This is not needed.
I think we should check that received is not null here.
This is not necessary.
This is not necessary.
I think this is not needed.
I think it would be better to use t1 and t2 as timestamp instead of t2
I think this should be a constant.
@bdragan use try-with-resources
I think this should be a constant
I think we should use the new method here.
I think this should be a warning.
Why not use the expectedMsg variable?
I think we should use the same name for both of these.
I think this should be a Comparator.comparing(BootLogic::reversed).
Shouldn't this be a WARN instead?
I think this should be a constant.
I think this should be setOperationException(Exception)
I think this should be a constant.
Why not add the queueNames in the addQueues method?
I think you can use the style mapView.getMapAsync(this, null) here.
This should be a constant.
I think this should be a warning.
I think this should be "Going to User 1"
I think this is a bit strange. I think it would be better to use a StringBuilder instead of a String.
I think this should be a Set instead of a List.
I think we should use the namespace context here instead of the namespace context.
I think this should be a constant.
This is not a good idea. You can use a for loop here.
nit: this.responseHandler = authorizedClientManager;
This is not a good idea. You can use the builder.setState(state) method to get the state and set the state to null.
Remove this line.
nit: assertThat(getHiveBasicStatistics(toStatisticParameters(expected)) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .isEqualTo(expected) .is
I think we should use the solrSearchService.search( ) method to create the search filter.
I think this is not needed.
This is a bit of a nitpicky, but I think it would be better to use the static import for the return type.
This should be a constant
Shouldn't this be a warning?
I think we should add a null check here.
This should be a setKeywords method.
This is not a good idea. You can use CountStressorCompletion.
I think this should be a constant.
What is the purpose of this change?
Why is this change necessary?
I think this should be a RuntimeException, not a runtime exception.
I think this should be a switch statement.
I think you should use a logger here.
I think this should be debug level
I think we should use the same naming as the other test methods.
This is a bit hard to read. Can we make it a static variable?
I think this should be a && instead of a ||.
This should be a constant.
I think this should be a constant.
I think this should be a try-with-resources block.
I think this should be ArgChecker.notNull(yearMonth, "yearMonth");
This is not a good idea. You can use a Set instead of a List.
Same here, you can use OffsetDateTime.ofEpochMilli(LocalDateTime.now())
I think this should be a separate test case.
I think we should use StringUtils.isNotEmpty() here.
I think this should be removed.
Remove this line.
I think this is a bit too complicated. I think it would be better to have a method called updateWrittenAndUnread and updateWrittenAndUnread.
I think this should be a constant.
nit: this can be simplified to: java return Optional.of(target);
I think this should be a constant.
I think this should be a constant.
This is not needed.
Why do we need this sleep?
I think this is a bit confusing. I think it's not a huge deal, but I think it's a bit confusing to have a single return statement.
I think this should be moved to the pluginInfo.
I think this should be a constant.
This is not necessary.
I think this is not needed.
I think this should be a warning.
I think we should check that the completed counter is reached before the first check.
nit: you can use node.isDataDirectory()
I think this should be onLegoSensorPortConfigDialog()
This should be set in the constructor.
This should be a WARN instead of an ERROR.
This is a bit confusing. I think it would be better to have a method called setRevisionSupported(String revision) that returns the revision value.
I think this should be a warning.
This is a bit hard to read. I would prefer to use a method reference instead of a function reference.
I think this is not needed.
I think this should be assertEquals(0, savedInterval.getEnd());
Shouldn't this be 'externalNetwork'?
I think we should use Enums.isEnumsable(elementType) here.
nit: can we move this line to the top of the method?
nit: this is a bit confusing. I think it's not a blocker.
I think we should use the default value here.
I think this should be in the getRichFacilities method.
I think this is a bit too long.
Shouldn't this be a field so we don't have to create one each time?
I think this should be a switch statement.
I think this should be instructorAccountsActual.get(i).createdAt = null;
I think it would be better to use the new method here, to avoid the duplication.
@jomarko I think this should be a string resource, not a string.
nit: you can use the static import for the functionCall method
I think this should be a warning.
Use a try-with-resources statement here.
I think we should use the same URL for all URLs that are used in the URLForPatchSetOrBase.
I think this should be moved to the if block below.
I think this should be synchronized
please use injection for injection
Should this be a Long?
I think we should log the exception here.
This is a bit hard to read. I think it would be better to use a StringBuilder instead of a StringBuilder.
@vilchik-elena Why not use the default constructor?
I think we should log the exception here.
I think this should be Boolean.parseBoolean(requireDrug)
I think this should be "Cancel".equals(command.getName())
This is a bit confusing. I think it's better to use a Set instead of a List.
I think this is not necessary.
I think we should use the diamond operator here.
I think we should use the Log interface here.
This is a bit hard to read. Can we just use the method in the constructor?
Why is this necessary?
I think this should be simplified to: java if (geometry instanceof Polygon) { return unifyWindingOrderForPolygon(geometry, counterClockWise); }
I think this is a bit too complicated. We should probably have a consumer.readEvent().ifPresent(eventsQueue::add)
I think this should be a constant
This is not necessary.
This test is not testing anything.
I think this should be a Set instead of a Set.
This is not necessary.
Shouldn't this be error?
I think this is a bit strange. I think it would be better to use a StringBuilder instead of a StringBuffer.
This should be a IllegalArgumentException.
I think this should be called on the NativeInterface.MessageType.DELIVER_PENDING.
I think this should be a Set<TokenTypes>
This is not a good idea. You can use the new password to create the password.
I think this should be Map<String, Object> shouldSucceed = ImmutableMap.of(EQUALS, SUCCESS);
I think this should be moved to the previous patch setOldClusterVersionOfSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshotWithSnapshot
I think we should use the same filter as the one in the cache.
I think this should be a WARN instead of an ERROR.
This is not necessary.
Should we add a check for null here?
I think this should be removed.
This is not correct. You can use the new Integer[] { maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths, maxLengths
I think we should use the new method here.
I think this should be a constant.
This is a bit hard to read. Can we just use the following?  if (declaredIntentionToWrite.getMode() != WriteMode.STAGE_AND_MOVE_TO_TARGET_DIRECTORY) { recursiveDeleteFilesAndLog(declaredIntentionToWrite.getContext(), path, ImmutableList.of(), true, "staging directory cleanup"); }
I think this should be inside the if block.
I think this should be a constant.
Please use a logger instead of printStackTrace.
Please add a message to the log message.
This is a debug statement.
this.
I think it would be better to use Optional.ofNullable(node) here.
I think this should be !isCreditLine && !isCreditLine
please use getVdsDao() instead of getParameters().getImageGroupId()
I think this should be a CommitName.
I think this is not necessary. The default branch should be set by default branch.
I think this should be job.isEnabled()
I think this should be a try-with-resources block.
I think this should be a runtime exception.
I think we should use the new constructor here.
This is not a good idea. You can use a lambda here.
Shouldn't this be debug?
I think we should use the same name for both cases.
nit: I think we can use the same approach as in the other constructor.
I think we should use the same email address as the email address.
I think this should be a constant.
I think we should throw RestServiceException here.
I think we should log the exception here.
I think this should be removed.
I think this should be inside the if block.
Please use Preconditions.checkState(version == 1)
I think this should be a switch statement.
I think this should be a RuntimeException.
I think we should use the same URL as the previous one.
I think it would be better to use the XpathQuery here instead of the XpathQuery.
This is not a good idea. You can use the "test module-info.json" constant instead of "testModule-info.json"
I think this should be a constant.
I think this is a bit too long. Maybe we can just use a single if statement here?
I think this should be mSwitchAutoUpdates.setChecked(mPlugin.isAutoUpdateEnabled());
This is a very good idea. I think it would be better to use the File object instead of the File object.
This is a good idea.
I think we should use the same name for the dialog.
I think this should be configurable.
I think this should be a try-with-resources block.
This is a bit strange. I think it should be a warning.
@vilchik-elena Why not just call the other method?
I think this should be in the configurer.
I think we should add a null check here.
I think we should use the same name as the previous one.
This is not the right place to do this.
This is not correct. The oldpwd is not a valid password.
This should be a WARN instead of an ERROR.
I think we should use the constants defined in GIGABYTE.
I think this should be a constant.
This is not a good idea. You can use a Set<AccountGroupIncludeByUuid.Key> instead of a List<AccountGroupIncludeByUuid.Key>
I think this should be in the try block.
I think we should use the new API here.
nit: you can use try-with-resources here
I think this should be a method reference, not a DiseaseOccurrence.
@dalifreire this.fake = new RqMultipart.Fake.convert(req.head()), this.fakeBody(dispositions) );
I think this should be trace
I think this should be !ch.length() == 0
This is not a good idea. You can use a try-with-resources statement.
I think this should be a switch statement.
This is a bit hard to read. Can we extract a method to get the column name?
This is not a good idea. You can use the gitRepositoryManager.REF_CONFIG directly.
I think we should use the new method instead of the old one.
I think this should be debug
This is a debug statement.
I think this is not necessary. The message is already logged in the message.
I think we should use the callback here instead of the callback.
This is not needed.
I think this should be a WARN instead of an ERROR.
I think this should be "in class"
This is a bit hard to read. Can we extract a method to avoid duplication?
please use the same error message as above
RecycleRefactoring -> RecycleRefactoring
I think this should be a GradleParserStage.
I think this is not needed.
I think this should be a try-with-resources.
nit: this is redundant
I think this should be a WARN instead of an ERROR.
This is not needed.
I think this should be a constant.
I think this should be return findById(type, count(type));
I think this should be a constant.
I think this should be a separate method, since it's a lot of code duplication.
Why do we need to check if the metadata file exists?
I think this is a bit too complicated. Maybe we can use a stream instead of a stream?
This is a good idea.
This is a good idea. You can use BluetoothMediaBrowserService.addressedPlayerChanged(bluetoothPlayer.STATE_CONNECTING) instead.
nit: I think this is a bit confusing. I think it would be better to have a separate method for the first two.
I think this should be a lock.
This is not a safe way to do this. The group cannot be null.
I think we should use the same approach as in the other PR.
I think this should be a try-with-resources block.
This should be a constant.
I think we should log the exception here.
This should be a warn instead of an error.
This is a bit hard to read. Can we make a static method?
I think this should be GBufferPair.getStaleFbo()
this.
This is a bit confusing. I think it should be a boolean flagged = (mController.isMoveCapable(account) ? true : false);
I think this should be a warning.
I think we should add a check for the method.getReturnType() == Method.class.isAssignableFrom(method.getReturnType()) to avoid the null check.
I think this should be a MockScatterChartDataModel.
please use StringUtils.isEmpty
I think it would be better to use the new ArrayList<>() method here.
I think this is a bit too long. Can we just use a single Map<String, String> to buildInterval?
assertEquals(access.size(), 0);
@vilchik-elena Why not use the same pattern as above?
This is not necessary.
I think you can use the same constant here.
This is a debug statement.
I think this should be a constant.
nit: you can use the Objects.requireNonNull(data, "'data' cannot be null.");
I think this should be moved to the try block below.
I think this is a bit confusing. I think it would be better to have a test for this.
I think we should use the java.io.File.separator to avoid the need for the java.io.File.separator
I think this should be a switch statement.
This should be a WARN instead of an ERROR.
I think this should be a static method.
This is a bit confusing. I think it would be better to throw an exception here.
This is a good candidate for a test.
I think this is a bit too long. Maybe we can use the Comparator.comparingInt() method instead?
This is not needed.
I think this should be cached in the constructor.
I think this should be a WARN instead of an ERROR.
This is not needed.
I think we should use the same pattern as in the other classes.
I think this should be debug
I think it would be better to use assertEquals(expected, actual) here.
This should be debug
I think it would be better to use a monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor.monitor
This is a good candidate for a method to be used in the same class.
I think this should be a List<Diagnosis>
I think this should be removed.
I think this should be a RuntimeException.
I think this is a bit too complicated. I think it would be better to have a method in the interface.
I think we should use the same approach as in GelfConfiguration.
This should be a constant.
please use the static final variable for the config values
This is not a good idea. You can use the FenixSummary constructor directly.
I think this should be a separate method.
I think this should be a WARN instead of an ERROR.
Remove this line.
This is a bit hard to read. I think it would be better to use a SetCpeid to check for null.
I think you can use try-with-resources here.
I think this should be a WARN instead of an ERROR.
I think we should add a check for the methodConfig.getOnthrow() != null here.
I think this should be a constant.
Why not just use the diamond operator?
I think this should be GermplasmPedigreeTreeNode
I think this should be replaced with a call to getPackage()
I think this should be distance <= size, not distance <= size.
I think we should also check if the realm is not null here.
I think this should be package private.
I think this is not needed.
I think we should throw an exception here.
This is not necessary.
I think this should be a constant.
This is a bit confusing. I think it would be better to have a method to check if the scheme is a valid protocol.
I think this should be in a try-with-resources block.
I think this should be a WARN instead of an ERROR.
I think this should be deleted.
Why do we need to check for null here?
This is a bit strange. I think it should be "You have tried to remove the kit from pastebin.com"
This should be return NullHandling.ZERO_FLOAT;
I think we should add a check for oldStoreDef.getType() here.
I think this should be a warning.
please use assertEquals
@vilchik-elena Why not using the pattern pattern?
I think this should be trigger.getTriggerConfigURL() == null
I think this should be in a try-with-resources block.
This should be a constant.
This is a good candidate for a method to be used in the base class.
I think we should throw IllegalArgumentException here.
This is not a good idea. You can use the same approach as the one in the other method.
This is not a good idea.
I think this should be a constant.
I think we should keep the parent and the parent.
This is not a good idea. You can use the new method to get the roles from the DB.
I think we should add a check for the client being null here.
@bgeVam assertThat(query.getArg(), is(true));
I think it would be better to use a StringBuilder instead of a StringBuilder.
I think we should use a StringBuilder here.
nit: I think we can use the new KafkaStarterUtils.DEFAULT_KAFKA_BROKER_NAME constant here.
This is not needed.
I think we should use the same matcher matcher.
I think this should be moved to the try block below.
I think we should use the new ScannerScanner here.
I think this should be a WARN instead of an ERROR.
I think you should use a logger here.
I think we should use a stream here.
This should be a WARN instead of an ERROR.
I think it would be better to use the diamond operator here.
I think this should be removed.
I think we should use the new ExtensionController.getInstance().init(this.context) method instead of the constructor.
I think we should check the type of the method.
I think this should be a IllegalStateException
Shouldn't this be a WARN?
I think this should be in the presenter
I think we should use the constant here.
This is not necessary.
Can we use the constants from HadoopConfigurationInjector.INJECT_PREFIX here?
Why not just use Sets.newHashSet(person)?
Please use StringUtils.isEmpty()
This should be static
Should this be a timestamp?
I think we should add a check for the physicalKeyRow != null here.
I think this should be a constant.
I think this should be moved to the previous line.
I think we should also check that trackingKey is not null.
please use static imports
I think this is a bit too long.
This is a bit hard to read. Can we just use sum()?
I think this should be a switch statement.
I think this should be a Set<String>
This should be a constant.
assertTrue(isWorkspace)
Why do we need this sleep?
I think this should be a switch statement.
I think we should use the same approach as in HttpPipelineNextPolicy.
I think this should be a constant
I think this should be wrapped in a try/catch block.
I think this should be a warning
This is a bit confusing. I think it's better to have a default value for the version.
I think this is a bit too complicated. I think it would be better to have a method for this.
I think this is a bit confusing. I think it would be better to have a single test case for the case where the counter value is not a long.
This is not necessary.
I think we should use the same method as the one in the other class.
I think this should be a more specific exception.
I think you can use fail("Expected exception");
I think this should be a constant.
This is not a good idea. You can use the new method to get the revision name from the database.
This is a bit hard to read. Can we just return the image?
I think this should be a constant.
I think we should also assert that the method is not called.
Is this test still testing the case where the group is not a member of the group?
I think it would be better to use the tracePath here instead of the tracePath
Why do we need to close the stream?
I think this is a duplicate of the previous code.
I think this should be removed
This should be a WARN instead of an ERROR.
I think we should use the same timestamp as the one in the log message.
I think this should be moved to the previous line.
I think we should use the same name as the annotation.
I think we should add a check for the change item here.
Please use Collections.sort(hosts)
This is a bit hard to read. Can you please extract a method for the sake of readability?
nit: can be replaced with: java return CompletionController.getBlobInfo(blobId, futureResult, null, ROUTER_CLOSED_EXCEPTION);
I think we should add a check for pageBufferClientMaxCallbackThreads here.
I think we should use the same approach as in the other classes.
I think we should use the same wording as in the other tests.
waitForElementClickable?
why do you need to pass action?
This is not needed.
I think this is a bit too long. Can we make it a constant?
I think this should be a constant.
This is a bit weird. I think it would be better to use a for loop instead of a for loop.
This should be a static method.
This is a bit hard to read. How about using a method reference instead of a simple string literal?
I think this should be moved to the previous line.
Why do we need to sleep here?
This is not necessary.
Why do we need to create a new ArrayList here?
This is not correct. You should be able to use the path to get the path.
I think this should be a warning.
This is a bit hard to read. Can we just use the context.getAssets()?
This is a bit of a debug statement.
I think it would be better to throw an IllegalArgumentException here.
This is not thread safe.
@fanifieiev the same above.
I think this should be a IllegalArgumentException
I think this should be done in the presenter instead of here.
I think we should use the same name as the other one.
I think this should be a switch statement.
I think this should be a for loop.
This is not a good idea. The Java compiler will do this for you.
nit: I think we can use the same approach as in the other methods.
This is not needed.
I think we should use the adapter.getItemCount() here instead of the adapter.getItemCount()
I think this should be debug
This is a bit hard to read. Can we make a helper method that takes a tokenCredential and returns a tokenCredential?
I think this should be a warning.
This is a bit confusing. How about "Save button wasn't found"?
I think we should not use the project name here. It is not the project name.
I think we should use the constants defined in the Constants class.
This test is not testing anything.
I think this should be a PicardException.
I think this should be a static method.
I think this should be a WARN instead of an ERROR.
I think this should be a TmfNetworkEventMatching.
I think we should also check that the exception is not thrown.
I think this is not needed.
Why not use the new method from the new method?
This is a bit hard to read. I would prefer to use a StringBuilder instead of a StringBuffer.
I think you can use the diamond operator here.
I think this should be a && instead of a &&
I think this should be in the constructor of MapOperationProvider
I think this should be a Timestamp, not a Timestamp.
rename to childItem
This should be a warning.
I think this should be a fail() call.
Why do we need to delete the metadata file?
This is not correct. You can't do this. You can use assertValidStringClaim(jwt.getIssuedAt(), (Long) entry.getValue()).
This is not necessary.
I think it would be better to use the same procedure as the other tests.
I think this is a bit too complicated. Maybe we can extract a method for this?
Why is this needed?
I think this should be in the buildOrder method.
This is a good candidate for a method to get the resourceDao from the resourceDao.
nit: "No page sink provider for catalog '%s'
I think this should be a WARN instead of an ERROR.
This should be a WARN instead of an ERROR.
@kujtimiihoxha I think this should be in the constructor.
Why not just use the iterator?
This is a breaking change.
This is a bit confusing. I think it would be better to use a regex to get the first match.
This is a bit hard to read. Can we use a switch statement?
Why is this needed?
This is not necessary.
I think this should be a WARN instead of an ERROR.
Please use injection for VdcQueryReturnValue
I think this is not needed.
I think this should be a try-with-resources block.
I think we should use the same naming as oldRow.
I think we should have a switch statement here.
This is a bit confusing. I think it's better to use a linked list instead of a linked list.
I think this should be max.
I think this should be a warning.
This is a bit hard to read. How about using a for loop instead of a for loop?
This is not a good idea.
Harmonization Study ID cannot be null or empty?
This is a bit confusing. I think we should have a method for this.
I think this should be "logical %s"
This should be moved to the top of the class.
This is not needed.
I think this should be debug level
@ivandalbosco Why not use the Pattern class here?
I think this should be a constant
It's better to use SeleniumWebDriverHelper#waitForElementClickable() method instead of using SeleniumWebDriverHelper#waitForElementByElement()
This is not needed.
This is not necessary.
This is a bit hard to read. Can we use a boolean flag instead of a boolean?
I think this should be replaced with a call to the other one:  if (three == null) { return null; }
This is a bit confusing. I think it would be better to use a query.
Remove this line.
I think this should be refspec.getRef(Constants.R_HEADS + "tag").
This is a bit hard to read. Can you please extract a method to reduce code duplication?
I think this should be done in the constructor.
I think this should be a double instead of a double.
I think this should be a WARN instead of an ERROR.
I think this should be a constant.
I think this should be removed.
I think this is a bit too complicated. We should be able to just update the old one.
I think this should be a synchronized block.
This is not a good idea.
I think it would be better to use the same approach as in the other classes.
This should be a WARN instead of an ERROR.
This is not needed.
I think you should use the @Rule TemporaryFolder.
I think this should be removed.
I think we should log the exception here.
I think this should be a static method.
This is a bit confusing. How about just checking the total number of records?
Boolean.FALSE
I think we should set the default value in the constructor.
Can we use the default value of srcExt.toLowerCase() here?
I think this should be replaced with a call to .waitForElement(selector)
I think we should use Optional.empty() here.
I think we should throw an exception here.
I think it would be better to use a for loop here.
This is a bit confusing. I think it would be better to return null if start is null.
I think this should be a singleton.
please use injection for injection
I think this should be in a @Before method.
This should be private
I think we should log the exception here.
I think we should add a stageConfigDetailsResponse to the StageConfigDetailsResponse.
I think this should be info level
please use the new method from the super class
I think this should be a constant.
I think this should be cacheToReturn == null
Why not use a for loop here?
I think this should be a constant.
data.count is not used
@vilchik-elena Why not just use the new method?
I think we should add a WARN log here.
please use injection instead of injection
I think this should be synchronizedClient.registerToLogReplicationLock()
nit: I think we can use the static import for this.
I think this should be a warning.
I think this is a bit too long. Maybe we can extract the common part to a method?
I think this should be moved to the onSuccess() method.
This is not needed.
I think we should use the same approach as in the other methods.
I think we should use the new constructor here.
I think this should be a warning
I think we should also assert that the member is deleted.
I think this should be a List<T>
This is not a valid domain. It should be a Domain Domain.
style nit: no braces around single line blocks
I think this should be a private method in the interface.
I think this should be:  java headers = new LazyValue<>(() -> new CaseInsensitiveMultiMap(!preserveHeadersCase));
This is not a good idea. You can use a Query object to get the index.
This is a bit hard to read. Can we make a static method in the same class?
Please remove this line.
This is not needed.
This is not necessary.
This should be a warn instead of an error.
Why do we need to catch InterruptedException?
I think the chart should be a class field.
This is not needed.
This is not needed.
I think we should verify that the header header is actually set.
I think this should be a static field.
Shouldn't this be a constant?
I think this is a bit too long. We should have a method for this.
Use a try-with-resources to close the reader.
please use FeatureSupported.isDomainXMLSupported(VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager.VdsManager
I think this should be inside the if block.
I think we should use the same approach as in the other methods.
I think we should log the exception here.
I think we should check if the resource is a CoverageInfo.
I think we should use StringUtils.isEmpty() here.
We should log the exception here.
nit: can we make this a constant?
I think this should be a filter instead of a filter.
I think this should be a warning.
This is not needed.
I think this should be moved to the previous line.
This is a debug statement.
I think we should add a null check here.
This is a bit confusing. I think it's better to use the comparator to sort the list.
This is not correct. If the key is null, the value will be null.
This is not necessary.
nit: this can be a method reference
This is a bit strange. I think it should be a member variable.
This should be a constant.
Shouldn't this be the default branch name?
This should be a Log.e call.
why do we need this?
I think we should use the same value as the other property value.
I think this should be 'else if'
This is not a good idea. You can use a StringBuilder instead.
I think this should be a double, not a double.
This is a bit confusing. I think it's better to throw an IndexOutOfBoundsException instead of catching it and then catching it.
I think this should be a WARN instead of an ERROR.
I think we should throw an exception here.
This is a good candidate for a test.
I think this should be a warning.
why not to use runVdsCommand()?
Shouldn't this be in the finally block?
This is a bit of a nitpicky, but I think it would be better to have a single constructor that takes a list of all the segments and then call the other constructor.
I think this should be debug level
This is not necessary. The test will fail if the file is not read.
I think this should be job.getName().startsWith(JOB_PUSHING_DOCKER_IMAGE)
This is a debug statement.
I think we should use the same approach as in the event model.
I think it would be better to use the buffer buffer here.
This should be a switch statement.
This is not necessary.
I think we should add the retry policy to the end of the pipeline.
Ignite -> Diagram
This is a bit hard to read. Can we make a method in SpongeSelector that takes a parameter and returns a String and returns a String?
This is not necessary.
This should be a setVisitDate method.
This is a bit hard to read. How about using a single return statement?
I think this should be removed.
I think we should throw an exception here.
I think this should be a static method.
I think we should use the same format for all the JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON-based JSON
I think this is not needed.
This is a bit hard to read. I think it would be better to use a try-with-resources statement.
I think this should be a List<Log>
I think this should be a WARN instead of an ERROR.
I think this should be in the else branch.
I think we should use the enum values here.
I think this should be a WARN instead of an ERROR.
This should be a Ternary
I think this should be a constant.
I think this should be a LinkedList.
This is not a good idea.
This is a bit confusing. I think it's better to use the same name as the one used in the same class.
I think we should have a log.debug here.
I think this is not needed.
please use String.format
This should be a warning
I think this should be done in the constructor instead of here.
You can use the diamond operator here.
This is not needed.
This should be debug
I think this should be a static method.
I think this should be inside the finally block.
I think this should be a constant.
I think this should be completedCheckpointCompletedFutures.
This is a debugging statement.
I think this should be a constant.
I think this should be moved to the top of the method.
I think this should be a NotificationManager.notify(this, null);
Collections.emptyList()
This should be a static method.
This is a bit hard to read. Can we extract a method to reduce duplication?
please use Collections.singletonList
This should be a constant.
Why do we need this test?
This is not a good idea. It's not a good idea to use the distributionTranslator.fromDBObject(input, new Distribution())
Shouldn't this be onDestroy()?
I think we should use the cluster name here.
I think we should use the same name as the other property name.
I think this should be in the finally block.
This is not a good idea. You can use a for loop here.
I think this should be a set instead of a set.
I think we should use the same kind of method here.
This should be a constant.
I think we should use the same name as the other one.
I think this should be moved to the try block below.
Shouldn't this be 403?
I think this should be a warn instead of info.
I think this should be private.
I think this should be removed.
I think this should be a WARN instead of an ERROR.
I think this should be ChannelHandlerContext.
I think this should be a WARN instead of an ERROR.
I think we should remove the watcherType here.
rename to dangling
I think this is a bit strange. I think we should have a test that checks for the exception and then fail the test.
This is not needed.
I think this should be in a finally block.
This should be a WARN instead of an ERROR.
This is not a good idea. You can use a lambda here.
I think this should be a IllegalArgumentException
This should be a static final field.
I think this should be a switch statement.
Why not just use the static import here?
I think this should be assertEquals(1, allDrugs.size());
This is a bit hard to read. Can we use the try-with-resources pattern here?
Why not just use the method reference here?
I think this should be a constant
This is a bit of a nitpicky, but I think it would be better to move this into the if block.
why do we need this?
This should be a static method.
I think this should be removed
This is not a safe way to do this. You can use a lambda:  String operationOperations = context.getResult().set( operationOperations.values());
I think this should be a warn instead of an error.
I think we should throw an exception here.
I think this is a bit too complicated. Maybe we can extract a method for the first parameter?
I think this should be removed.
This is not needed.
Why do we need this?
I think we should use the same approach as in the other classes.
I think this should be a constant.
I think this should be a WARN instead of an ERROR.
I think we should check that runtimeConfigSupplier is not null here.
This is not needed.
I think this should be a try-with-resources block.
I think we should use the new name for this.
I think this should be a logger.
I think we should use the same metric name as the metric name.
This is a bit weird. I think it would be better to have a single set of breakpoints in a loop.
This is a bit hard to read. Can we make this configurable?
I think this should be decrementSearcherUsageCount(holder.searcher)
This should be removed.
I think we should throw an exception here.
I think this should be a warning.
This is not necessary.
This should be a constant.
I think we should add a check for null here.
I think this should be mTileRenderHandler.post(new Runnable() { @Override public void addTileToCurrentTileCanvasView( final Tile tile) { tile.setTransitionDuration( tile.getTransitionsEnabled()); }
This is not necessary. The test will fail if the image is not found.
nit: I think we can use the default value here.
Method not implemented for unspecified field
I think this should be a mergeTip.
I think this should be a JSONProcessingException
I think this is a bit confusing. I think we should have a single task task for the worker and the worker is running in the worker.
I think this should be synchronized
suggestion logger.error("failed to initialize executor comparator as the passed comparator list is invalid or empty.", entry.getKey());
I think this should be a System.out.println
I think this should be a fail() call.
I think this should be a logger.
I think we should use the same partitioned region here.
I think this should be inside the try block.
I think this should be a constant.
I think we should use the new JacksonTraverseCallbackMapKeyOrdered(generator) method here.
I think this should be called only once, and not in the constructor.
I think this should be a method reference.
This should be a List<IBaseEventInfo>
Use Logger.error() instead of printStackTrace()
This should be a stream.
I think this should be a WARN instead of an ERROR.
This is a bit confusing. I think it would be better to return an empty list instead of null.
You can use the same approach as the one in the other class.
I think this should be a warn instead of an error.
I think this should be in a finally block.
Is this a good idea?
This is not a header, it should be the same as the other.
This is not needed.
please use the same naming as isHotPlugSupported()
I think we should use a logger here.
I think this should be a constant.
I think this is a bit too long. I think it would be better to use a method reference.
I think we should use the same name for both the strings and the strings.
I think this should be a guard clause.
This is not necessary.
This is not a good idea. You can use the try-with-resources pattern to close the stream.
I think this should be inserter.flush()
I think this should be a WARN instead of an ERROR.
This is a bit hard to read. Can we use a switch statement?
I think this should be wrapped in a CompletionException.
Shouldn't this be id = id?
nit: I think we can use assertThat(ex.getMessage(), is("Your current Cassandra keyspace (atlasdb) has a replication " + "cluster."));
I think this should be a permission check.
Why is this needed?
I think this should be UnsupportedOperationException
I think we should move this to the previous line.
I think this should be a warning
nit: I think this should be package private
I think this is not needed.
Can we use the constants from the constants?
You can use the ByteBuffer directly.
I think this should be a warning.
I think this should be a constant.
I think this is a bit too complicated. It would be better to have a single quote statement for the first letter.
remove
style nit: we don't use braces around single line blocks
I think we should move this to the startJob method.
I think this should be Assert.assertEquals(expected, actual)
This is a bit of a duplicate of the code above, can we refactor it to a method?
I think you can use assertNotEquals here.
I think this should be a try-with-resources block.
This is a bit of a nit, but I think we should have a static import for this.
nit: I think it's better to use Optional.ofNullable()
this.name = name;
rename to extension
This is not a translation.
I think this should be synchronized
This is not necessary.
I think this should be error
You can use componentChanges.entrySet() here.
Remove this line.
This is a good candidate for a method to show the preview.
This is not necessary. You can use assertEquals(sourceInfo.getSourceConfiguration(), loadedVertex.getSchema());
This is not a valid selection.
I think it would be better to use the "addHostAction" method to check the status of the cluster is not null.
I think we should use the same format as the other one.
I think this should be a Set<Role> instead of a HashSet.
I think this should be done in the UserEntity constructor.
I think this should be a WARN instead of an ERROR.
I think this should be a RuntimeException
I think this should be package private.
Why not throw IOException?
I think this should be a warn instead of an error.
This is not needed.
rename to element
This should be a constant.
nit: I think it's better to use Arrays.stream(list).mapToInt(x -> (int) x).toArray();
Should this be a LockException?
I think we should throw IllegalArgumentException here.
I think this should be moved to the previous line.
nit: I think it's better to use Preconditions.checkNotNull(totalBytes, "buffers is null");
@vilchik-elena This is not a good idea.
I think this should be called onViewChanged.
I think this should be a Set instead of a List.
I think you can use assertEquals here
I think this should be a WARN instead of an ERROR.
please use Collections.emptyList()
Use a try-with-resources statement here.
I think this is not necessary.
I think we should log the exception here.
I think this should be ref.getName().startsWith(Constants.R_REMOTES)
this.freeVariables = new HashSet<>(arrayVariables);
I think we should use the same constants for the ProductType enum.
I think we should use the same name as containerClient.
I think this should be in a finally block.
I think this is not needed.
I think we should use the constant here.
Why not return the json array?
I think this should be a warn instead of an error.
I think this is a bit too long. Can we just use a String.format() here?
This is a good candidate for a method in NetworkException.
I think this is not necessary.
I think this should be a Mono.just(new SimpleResponse<>(responseItem.next()), null, context).
This is a bit hard to read. Can you extract a method to get the name?
This is a bit confusing. I think it should be a constant.
I think this should be removed
Why is this necessary?
I think it would be better to use DsfDebugOptions.DEBUG_SESSION_MODEL_ADAPTERS here.
I think this should be moved to the top of the method.
Why is this catch block necessary?
I think we should also check if evaluator is not null.
This is not necessary. You can use the @Test(expected = ParseException.class) annotation.
nit: use assertEquals
This should be a WARN instead of an ERROR.
I think this should be removed
Please use Assert.notNull()
this.length = end;
I think we should use the new method here.
I think we should log the exception here.
I think we should add a check here to ensure that the user is registered.
This is not a good idea. You can use the DatagramSocket directly.
I think you can remove the handlers.remove(ctx) here.
Please use the same error message as in the other log messages.
this.label = label;
This is not necessary.
I think this should be >=
This is not necessary.
please use getVmFromConfiguration()
I think you can use the constant here.
This is not a good idea. You can use a ternary operator.
nit: assertThat(rowsModified).hasSize(2)
This is not a good idea. You can use Objects.equals() instead.
I think this should be a constant.
I think this is a bit too complicated. Maybe we could extract a method to determine if the file is a directory or a directory.
Why not just use the JsonSchemaInferrer?
I think this should be removed
I think you can use a lambda here.
I think we should use Jenkins.getInstance().getVersion() here.
I think this should be replaced with a call to the expressionUtil.getParentOfType(element, ErlangExpression.class)
I think we should use the super.onSaveInstanceState(outState) here.
This is not necessary.
I think we should use the constant here.
please use stream api
Why not just recordSourceRawInputStats()?
I think we should use MoreObjects.toStringHelper() here.
I think this check is not necessary. The check for isPolymerClass() is already done in the check above.
I think this should be a metric.
This is a bit confusing. I think it's better to use a try-with-resources statement here.
I think this should be RosActivityComponent.newRosActivityComponent(notificationTicker, notificationTitle, this);
nit: remove System.out.println
This is not correct. You can use a for loop here.
I think we should throw an UnsupportedOperationException here.
I think this should be removed
This is a bit of a very long timeout. I think it would be better to use a static final variable for the timeout.
I think this should be a system property, not a system property.
I think you can use Objects.equals(data, null) here.
This is a bit hard to read. I think it would be better to use the following:  java if ( vfsFilename.startsWith( initialSchemes[i ] + ":" ) ) { relativeFilename = true; }
I think this should be removed
I think we should use the same error message here.
I think this should be a constant.
I think this should be a method on the MClassesWrapper.
I think this should be "send_resourcepack"
This is a bit hard to read. Can we make it a static method?
I think this should be a constant.
I think this should be a logger.
I think this should be a NuxeoException.
This is not necessary. The test will fail if the reader is closed.
nit: I think we can remove this line.
This is a bit confusing. I think it's better to use Objects.equals() to check if the parameter is null.
@vilchik-elena Why not use the InputStream directly?
This should be a constant
I think this should be removed.
I think this is not necessary. The group name is already in the namePattern.
Please use diamond operator
I think this should be a set of the time zone, not the one that is configured.
This is a bit of a nitpicky, but I think it would be better to use the same approach as the other methods in this class.
I think this should be a WARN instead of an ERROR.
I think you can use the same approach as the previous test.
I think we should use the new AtomicBoolean() method here.
I think this should be removed.
I think this should be the relation relation, not the relation relation.
I think this should be a WARN instead of an ERROR.
nit: I think this is a bit strange to have a local variable for the key, and then you can just return the value of the method.
I think this should be moved to the top of the method.
This is a bit hard to read. I think it would be better to use Comparator.comparing(Technology::getName).
I think this should be a bit more readable:  if (isSingleItem(srcMem, seed) && !isSingleItem(srcMem, seed) && !isSingleItem(srcMem, seed) && !isSingleItem(srcMem, seed) && !isSingleItem(srcMem, seed) && !isSingleItem(srcMem, seed) && !isSingleItem(srcMem, seed)) {
This is not needed.
I think we should log the exception here.
I think this should be a field of the class.
I think this should be private.
I think we should also check that the node is actually deleted.
This is not a good idea. You can use the SSLContext.getInstance("TLS")
I think this is not needed.
This is a bit confusing. You can use the same string as the other one.
Should this be a constant?
I think we should use the same approach as in the other commands.
I think we should use the same error message as in the other methods.
This should be a WARN instead of an ERROR.
I think we should use workspaceId here instead of workspaceId.
I think this is not needed.
This is not correct. The value should be the same as the value of the header.
I think this should be a WARN instead of an ERROR.
I think this should be a constant.
This is not needed.
I think we should use the same approach as in the other classes.
This is not needed.
I think this should be removed.
I think this should be setShareIntent()
I think we should log the exception here.
I think this is not necessary.
Why not just call super.go(replacement_) here?
I think we should add a check for aggregationType != null here.
I think this should be a ConcurrentModificationException.
I think this should be a for loop.
I think this should be length()
I think we should use assertSnapshotCacheKeys(0, 1, 1, 1, 1, 3) here.
You can use the same approach as above:  if (coll != null && !coll.isEmpty()) { coll.append(coll); }
I think this should be "createGroup"
This should be a warn
@exper0 let's use RqTest.METHOD_NAME here
This is not a good idea. You can use a set instead of a set.
This is not a good idea. You can use the model file name instead of the model file name.
I think this should be a FutureUtils.runLater()
This is not a good idea. The config is not a config.
I think this should be a warn instead of an error.
I think we should use the same approach as in the other parts of this class.
I think this should be a fail() call.
Why do we need to delete the directory here?
I think this should be in a finally block.
I think this should be the first line item instead of the second one.
@dalifreire this should be a try-with-resources block
I think this should be a warning.
Shouldn't this be in the validate method?
I think this is a bit too long. Can we extract the logic to a method?
Why not use the providerUrl.getPath()?
I think this should be a warning.
This should be a constant.
I think this should be extracted to a constant
I think we should use the same order as the other tests.
I think this should be set in the event.
I think this should be moved to the previous line.
Why is this needed?
This is not needed.
I think we should throw an exception here.
This is a bit strange. I think we should use the same approach as the one in the rule base.
I think this should be a constant
I think we should use volume.getName().equals(PROJECTS_VOLUME_NAME) here.
This is not a good idea. You can use a simple one-liner.
This is not a good idea. You can use the logger.error() method to log the error.
I think this should be debug
I think you can use the method reference here:  java final Map<String, Object> edgeProperties = new HashMap<>(genericEdge.asGenericEdge());
I think this should be moved to the previous line.
This is a bit hard to read. Can we use a stream and filter?
nit: I think you can use the constant here
I think this should be deleted.
why not use the new AtomicInteger(0)?
I think this should be a warning.
I think this should be "An dynaGroup based on [" + cge.getName() + " because CannedExpression was upgraded in plugin with " + cge.getName() + "
This is a good idea.
I think this should be false.
I think we should also check that the workspace is not running.
I think we should log the exception here.
I think this should be a logger.
This should be a static method.
I think this should be a constant.
Please add a message to the exception.
I think this should be a constant.
This is not a good idea. The key set is not used anywhere.
I think this should be a constant.
I think this should be a warning.
I think this should be a WARN instead of an ERROR.
This is a debugging statement.
rename to type
This is a bit hard to read. Can we have a method to get the target type?
I think we should throw an exception here.
I think this should be a List<Order>
This is a debug statement.
I think this should be a constant.
I think this should be moved to the top of the method.
This should be a logger.
I think this is not needed.
I think we should use the same approach as in CommonActions.clickOnAHiddenElement.
I think this should be in the url.properties file
This is a bit hard to read. How about using a static import for the method?
This is a bit of a hack to me. I think it would be better to use the same approach as in the other PR.
This should be a WARN instead of an ERROR.
I think this should be a try-with-resources block.
please use 'else if'
Objects.hashCode(projectUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, ceTaskUuid, analysisUuid);
This should be a constant
nit: I think this is a bit confusing. I think it's a bit confusing to have a separate method for the currentSortBuffer.
I think this should be a Map<String, String>
I think we should verify that the result is correct.
I think this should be a constant
I think this should be configRestartabilityAllowValue, not configRestartabilityAllowValue.
I think this should be a try-with-resources.
I think this should be a warn
This is not needed.
nit: I think this is a bit confusing. I think it's better to have a single check for the channelInfo and check if it's null.
This is a bit confusing. I think it would be better to use a Set instead of a List.
I think this should be a logger.error()
This is a bit hard to read. Can you please extract a method to reduce duplication?
I think this should be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed to be changed
This is a bit of a nitpicky, but I think we should use the same approach as in the other methods.
I think it would be better to use the new method in the IndexSegment.
I think we should use org.jdbi.util.Utils.isNullOrEmpty(String) here.
I think this should be a constant.
This should be done in the super class.
I think this should be error
This is not necessary.
I think this should be moved to the moduleBinder.bind method.
Shouldn't this be the default value?
I think this should be moved to the merge method.
I think this should be a warning.
I think this should be a constant.
This is not needed.
I think this should be debug
I think we should make this private.
Why not use the constant from the class name?
This is not a submon, but it's not a submon.
This should be a Map, not a Map.
I think it would be better to use the same approach as the new method in the same class.
I think this should be a WARN instead of an ERROR.
I think this should be a static method.
I think we should use parameterized logging instead of string concatenation.
This method should return List<String>
I think we should add a check for null here.
why not just channel.capacity() ?
I think this is a bit too long.
This is a bit hard to read. I think it would be better to use a StringBuilder instead of a StringBuilder.
I think we should use the same name for both the same and the one in the same class.
I think we should add a check for the proxy to be null here.
I think this should be a RuntimeException.
I think this should be in a finally block.
I think this should be in the constructor.
I think this should be in the validate method.
nit: I think it would be better to use a constant for "foo"
I think this is a bit too complicated. I think it would be better to have a single method in the same class.
I think this should be a constant.
This should be a field of the class.
style nit: no braces around single line block
I think you can use BranchState.FORWARD here.
I think this should be a transaction, not a transaction.
I think this should be a stack.
I think this is a bit too long. Maybe we can use a regex to get the top and then use a regex to get the top and then split the string.
@bgeVam please use DmsQueryException
This is a good idea. You can use Flux.error(t) instead of Flux.error(t)
This is a bit hard to read. Can we use a stream instead?
This is a bit hard to read. Can you please extract a method for the array?
This is not a good idea. You can use a LinkedHashMap instead.
This is not needed.
This is a bit of a nitpicky, but I think it's better to use a Set here.
I think we should use the new method here.
Can we use KafkaProducer here?
This is a bit confusing. I think it would be better to have a default case for the default case.
nit: I think we can use ImmutableList.of(new ConstantExpression(utf8Slice(KdbTree.getTypeSignature(), KdbTree.getTypeSignature()), VARCHAR))
I think this should be a constant.
I think this should be an else if
I think we should verify that the exception is thrown.
This is not a good idea. You can use File.separator() instead of File.separator()
This is not necessary.
I think it would be better to use try-with-resources here.
I think this is a bit too long. Maybe we could use a StringBuilder instead?
I think this is a bit too complicated. Maybe we could extract a method that takes a RuleResult and returns a RuleResult and then call the method that takes a RuleResult and returns a RuleResult.
I think this should be synchronized
This is not needed.
I think this should be a warning
This is a good candidate for a method to be used in the asyncQueryCollection.
This is not a good idea. You can use a Set<String> here.
I think this is not necessary.
I think we should use the same message as in the other methods.
This is a bit hard to read. I think it would be better to use a Set instead of a Set.
This is a bad request. It should be a bad request.
I think this should be a for loop.
I think this should be configurable.
I think this should be a WARN instead of an ERROR.
Shouldn't this be executed before the test completes?
This is a bit hard to read. Can we make this a method that takes a String and then call it from the constructor?
I think we should use the platform default encoding here.
This should be a warning.
I think we should use the same approach as in the other createTransactionCoordinator method.
This is not needed.
This is a bit hard to read. Can we use a boolean variable instead?
This is a debug statement.
I think we should also verify that the event is actually fired.
Seems like this should be a method on the interface.
I think this should be:  java return BrowserType.EDGE.equals(capabilities.getBrowserName()) || capabilities.getCapability("goog:chromeOptions") != null && capabilities.getCapability("goog:chromeOptions") != null;
I think this should be logged at error level.
This should be a static method.
I think you can use the new method here
I think this should be synchronized.
This is not necessary.
This is not a good idea. The metric family is not a metric family.
I think we should use the constant here.
This should be a List<DataChangedEvent> so that we can use the same list.
This is not necessary.
This should be a warn
I think this should be protected.
Please use a logger here.
I think this should be 'ListPermissionSubjects'
Use try-with-resources
I think we should throw an exception here.
I think this should be a long instead of a long.
This is a bit confusing. I think it would be better to use a for loop here.
This is not needed.
This is a bit hard to read. Can we use a constant for the string value?
This is not needed.
This is a breaking change.
I think we should use the new File(String, String) constructor here.
I think this should be a StringBuilder instead of a StringBuilder.
I think we should use the same naming as the other key values.
I think this should be removed
This is a very bad idea. I think it would be better to use the new File(url) method.
I think this should be in.isConnected()
This should be a GlowEntity instead of a GlowEntity.
This should be a constant.
I think you can use the query.getResultList() method here.
I think this is a bit too complicated. It's not a big deal, but I think it's a good idea to have a separate method for this.
I think it would be better to use try-with-resources here.
I think this should be info level
This is not a good idea. You can use a CountDownLatch instead of a CountDownLatch.
This is not necessary.
Can we use the diamond operator here?
I think this should be a constant.
This should be a static field.
This is a debug statement.
Remove this line.
This should be a static method.
I think this should be a field so that it can be reused in the same class.
I think this is a bit too complicated. It's not a good idea to have a single line.
assertThat(getTools().isEmpty(), is(4));
I think this should be a fieldmapBlockInfo.
Please use java.util.Objects.hash()
This is not a good idea. You can use a for loop here.
This is a bit hard to read. Can you please extract a private method to reduce the number of calls to this method?
I think it would be better to use StringUtils.equals(oldPost.getTitle())
This is not a good idea. You can use the color directly instead of the color.
I think this should be a constant.
I think this should be "gt".
This is a debug statement.
This should be a ServicePolicyEntity.fromServicePolicy(policy)
I think this should be a constant.
I think we should add the participantObject to the log message.
This is not a good idea. You can use a StringBuilder instead.
I think this should be a WARN instead of an ERROR.
I think we should use the same approach as in the client config file.
I think this is a bit too complicated. It would be nice to have a method like this:  private void deleteReferencedBlobs(String referencingEntity, String referencingEntity) { if (excludedBlobKey == null) { return; } }
I think this should be a Set instead of a Set.
I think it would be better to use a constant for the class name.
I think this is not necessary. The registerNextOperator method is only called from the registerNextOperator.
nit: maybe use a ternary operator?
I think this is a bit too complicated. Maybe we can use the enum directly?
This should be done in the transaction-support command.
waitForElementByElement(tablePropertiesInputs.get(2)).clickPropertiesTableButton(null);
return null;
I think this should be List<Object>
I think this should be a GdkRectangle instead of a GdkRectangle.
You can use Assert.assertTrue(errors.hasFieldErrors())
I think this should be logged as a warning.
I think it would be better to use a Set here.
LOG.error("Error calling addPatientCorrelation: {}", ex.getMessage(), ex);
Shouldn't this be a FileChannel?
This is a bit confusing. I think it should be the same as the one in the other constructor.
I think we should log the exception here.
I think we should use the new method here.
I think we should use the same approach as in the other methods.
I think this is a bit too complicated. It's not a big deal, but it's not a big deal.
I think this should be debug level
I think this line should be in the previous line
I think this should be a while loop.
I think this should be removed.
I think this should be a return statement
I think this should be a constant.
return Boolean.TRUE.equals(getCustomCustomFontMetrics())
I think this should be extracted to a method.
@ivandalbosco why not use try-with-resources?
I think we should throw RestServiceException here.
I think we should use the super(owner, detailFactory, detailFactory, detailFactory, detailFactory, detailFactory, detailFactory, detailFactory, detailFactory, detailFactory, detailFactory, detailFactory, detailFactory, detailFactory, detailFactory, detailFactory, detailFactory, detailFactory, detailFactory,
Shouldn't this be a RegionShortcut?
I think this should be: return value.equals("true") && value.equals("true")
I think this should be a instanceof InetSocketAddress
I think we should use the same name for both of these.
This is not needed.
This is not needed.
I think this should be moved to the top of the class.
I think this should be a warning
rename to extension
nit: this can be static
why not use java.util.StringUtil.isEmpty(java.lang.String, java.lang.String) ?
rename to child
nation -> nation
why is this needed?
I think we should log the exception here.
I think this should be removed.
I think we should use the same boolean as the other boolean variables.
I think this should be a Set<Integer>
This is not necessary.
I think this should be a RuntimeException, not a runtime exception.
This should be set to the maxTotal value of the maxTotal value.
This is not needed.
I think this should be a Log.e call.
I think this should be a warning
I think this should be a constant.
I think we should make this protected.
This should be private.
This should be a constant.
I think this should be a constant.
nit: use assertEquals
This is a bit confusing. I think it should be a boolean flag.
This should be a WARN instead of an ERROR.
I think this should be a warning.
This is a bit of a duplicate of the one in the BlobDataReadableStreamChannel. Can we refactor this to a common method?
I think it would be better to use a try-with-resources statement here.
I think this should be a constant.
Shouldn't this be a WARN instead?
Objects.hashCode(this.getConverters())
I think this should be a constant.
This is a bit of a very good idea. I think it would be better to use a more specific exception type.
I think this should be a constant.
I think this should be verify(this.firmwareService.isFirmwareFileAvailable(firmwareIdentification));
This is a bit confusing. I think it should be: if (forceAnsi) { return false; } else if (forceAnsi) { return false; }
I think this should be called in the finally block.
This should be "Expires at"
I think this should be done in the constructor
This should be removed.
I think this should be a String.valueOf(value)
Shouldn't this be in the finally block?
Should be "resourceId + ", "
I think this should be a logger.
I think we should add a check for retryCondition != null here.
This is a good idea.
I think this is a bit strange. I think we should have a test that checks for the content and the content is the content.
This is a duplicate of the original code, but I think we should move this to a new method.
I think this is not needed.
This is a bit confusing. I think it would be better to have a method called validatePipeline() that takes a String and then call the validate method.
This is a bit of a nitpicking, but I think we can do this in a single log statement.
Shouldn't this be in the onboardEndNode method?
please use getVmDao() instead of getVmDao()
nit: can we use a lambda here?
I think this is a bit too complicated. We should probably have a single query function that takes a query string and returns a string.
I think this should be a constant.
This is a bit hard to read. Can we make this a method in the base class?
Remove this line.
I think we should use assertEquals here.
I think this should be a waitFor(numOfQns, 0)
Why not just call getReservedRevocableBytes()?
I think we should use the new method here.
Why is this necessary?
I think you can use the new long[] array here.
Shouldn't this be a different error message?
This should be a WARN instead of an ERROR.
This is not needed.
I think this should be a WARN instead of an ERROR.
This is a bit hard to read. I think it would be better to use a Set instead of a set.
Why not use the new ArrayList<>() method?
You can use the same approach as in the other methods.
I think this should be a WARN instead of an ERROR.
I think this should be inside the if (getVmId().equals(Guid.Empty) check.
I think this should be a while loop.
I think we should use a thread pool here.
I think this is a bit too complicated. We should probably have a static method to do this.
This is a bit hard to read. Can we use a stream and then filter the list?
I think we should add a check for the property schema to the map before calling it.
This is not a good idea. You can use NetworkConnectionType.UNKNOWN instead of hardcoding the string.
I think this should be a Log.d
nit: I think we can use ImmutableMap.of()
This should be a constant.
This should be removed.
This should be a warning.
nit: can we use the method directly here?
This is a bad idea. You should be able to use the new constructor.
I think this should be moved to the try block below.
Why not just return the string of the string?
I think this should be a constant.
This is not necessary. The check for isHtmlTableNeeded is already done in the constructor.
This should be a warning.
This is not necessary.
I think we should use the GestureDetector.class here.
This is not needed.
Shouldn't this be synchronized?
I think this should be a constant.
This is not necessary.
I think we should use the same error message here.
I think this should be catalog.map(catalogName -> catalog.map(catalogName, catalogName))
this.link = link;
This is a bit hard to read. Can we use Fragment.InstantiationException(String.format(ERROR_MSG_INSTANTIATION, fragmentClass), e) instead?
I think this should be a synchronized block.
This is not correct. You can't use the bounds.
remove this line
I think this should be error level.
This is a bit hard to read. I think it would be better to use a switch statement instead of a switch.
I think you can use sum() here
I think this should be a constant.
I think this should be a warning
I think this should be a constant.
This should be a setSize method.
I think this should be removed.
@fanifieiev the same above.
please use StringUtils.isEmpty()
This is not needed.
I think this is a good idea.
I think this should be a POST instead of POST.
Why do we need this?
I think we should log the exception here.
I think you can use the static import for the assertEquals method.
I think we should also verify that the proxy is actually a valid one.
I think this should be a debug statement.
This is a bit confusing. I think we should have a test that checks the metadata and the metadata.
I think this is a bit too long. Can we just use a try-with-resources statement here?
This should be removed.
I think you can use Arrays.asList(arguments) here.
I think this should be a Set instead of a Set.
I think you can use the JavaSymbol.isPrivate() method here.
I think this should be sortedCompConstraintCountMap.
please use the validator validator
This is not a good idea. You can use the context context directly.
I think we should use the builder pattern here.
this.
I think this should be a log.debug
I think we should have a method in the actionEffect that takes action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action, action
I think this should be VoltType.STRING
I think this should be named queryParameter(QueryParameter.class, QueryParameter.class)
I think this should be a separate method, since the event is not used in the event handler.
I think this should be moved to the finally block.
I think this is not needed.
This should be a constant.
I think this is a bit too long. Maybe we can use a method reference instead?
This is not a good idea. You can use the super(null, "Check for smart notifications is available in the SonarQube edition", false);
I think this should be called mouseButton instead of mouseButton
This is a good candidate for a log.error() call.
I think we should add a check for isServerRouteLoaded here.
I think this should be moved to the 'if' block, so that we can avoid the 'else' case.
This is not needed.
Why do we need to wait for snapshot operation?
Please remove this line.
Why not just put the lock in the tryLock()?
I think this should be moved to the mountInfo class.
I think this should be a constant.
I think it would be better to use the same message as the one in the log method.
I think this should be in the ctor
This should be a Set, not a Set.
I think we should use the same exception as the one in the other catch block.
This should be a constant.
I think we should add the secondary locationLines to the error message.
I think this should be a WARN instead of an ERROR.
Why is this catch block necessary?
I think we should use the new method here.
Please use a logger here.
please use assertEquals
I think this is a bit strange. I think it would be better to use a StringBuilder instead of a String.
I think this should be private.
I think this should be a separate method, since it's called in the same class.
I think it would be better to use the builder builder here.
This should be a for loop.
I think it would be better to use the new method here.
I think we should use assertEquals here.
Why not just use a for loop here?
This is a bit strange. I think we should use a constant for the header name.
This is a good idea.
I think we should use the same approach as in the refreshIcons method.
I think this should be a WARN instead of an ERROR.
I think this should be a constant.
rename to event
nit: you can use the new observer pattern here
I think this is not necessary.
I think this should be a constant
This should be a warn
This is a bit confusing. How about just a single block size?
This is a bit of a duplicate of the code in the test. I think it would be better to move the code to a separate method.
I think this should be a constant.
I think this should be a Set, not a Set.
This is a very good candidate for a try-with-resources block.
This is a bit of a debug statement.
This is a bit hard to read. Can we just return true here?
Shouldn't this be loggedInUser?
This is a bit confusing. I think it would be better to use a LinkedHashSet instead of a LinkedHashSet.
This is not needed.
I think this should be replaced with a call to .repeat(80)
This is not needed.
This is not necessary. The default implementation of this method is already in the set method.
This is a good candidate for a static import.
I think we should use the default value here.
I think we should add a check for the error code here.
I think we should use the same approach as in ExpressionEval.of(arg, args.get(1).eval(bindings).
this.bytes = Arrays.hashCode(bytes);
I think this should be a switch statement.
I think this is a bit too long. Maybe we can extract a method to reduce code duplication?
This is a breaking change.
This is not correct. You should test the case where the uuid is not a uuid.
Can we use the constant here?
I think you can use an iterator here.
I think this is a bit too complicated. Maybe we should have a method like isBinary(Binary) and have a method that takes a Binary and returns a Binary.
I think this should be a try-with-resources block.
I think we should use the same header name as the header name.
I think this should be a list of strings that are not sorted by the user.
I think we should throw IllegalArgumentException here.
I think you can use assertEquals here.
I think this should be a constant.
I think this should be inside the transaction, not here.
Can be replaced with List.of(new Spec[list.size()])
You can use the Bundle bundle here.
This is a breaking change.
I think we should use mBlogName instead of mBlogName here.
I think this should be done in the constructor instead of here.
This is not a good idea. You can use Object.class.getSimpleName() instead of a class cast.
I think this should be a stream.
I think this should be a WARN instead of an ERROR_ATTRIBUTE.
I think this is a bit too complicated. Maybe we can extract a method to avoid duplication?
this.eStructuralFeature = eStructuralFeature;
please use the static import
Why do you need to call run() here?
This is not needed.
I think this should be static
I think this should be: java if (checkCorrectness) { return true; } else { return false; }
I think this is not necessary.
I think we should use try-with-resources here.
This should return a null value.
I think we should remove the context here.
I think we should use the new method here.
I think this is a bit too long.
I think that the previous version was more readable.
This is a breaking change.
I think we should use the BundleUtil.getStringFromBundle(dataFile) method to check if the file exists.
nit: I think we can avoid the if/else here.
This is a good idea.
I think we should return the result of this method.
I think this should be setSucceeded(false)
This is a good candidate for a method to be used in the command-side.
I think this should be a warning.
I think this should be debug
I think this should be private
I think this should be a WARN instead of an ERROR.
This is a good idea.
I think this should be moved to PlatformUI.getWorkbench().getDisplay()
I think we should use a constant for "processing.copyAttributes"
I think this should be a switch statement.
I think this should be:  bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers(); bufferManager.requestExclusiveBuffers
Why is this needed?
nit: remove final
suggestion log.debug("add new Identity Provider event received");
I think this should be a for loop.
I think we should use the same port as the one in the test class.
I think we should use replaceFirst(path) here.
I think this should be schedule, not schedule.
I think this should be error
I think we should add a null check here.
This is a bit confusing. I think it would be better to return true if the score is less than the threshold.
I think it's better to use the static import here.
This should be a try-with-resources block.
I think we should use the same name for both the two variables.
I think this is a bit too long.
This should be moved to the bottom of the method.
I think this is a bit hard to read. Can we use a StringBuilder instead?
I think we should also check that the group is not null
This is not a good idea. You can use the KILLBILL_GENESIS constant instead of the hardcoded value.
I think this should be in a finally block.
rename to occurrence
I think this should be a WARN instead of an ERROR.
I think we should add a null check here.
I think this should be createData.setOwner(true)
I think this should be a CountDownLatch
I think you can use verify(updateListener, times(1)).updateBatch(any())
I think we should use StringUtils.isEmpty() here.
I think this should be removed
This is a bit hard to read. Can we make a method that takes a String and returns a boolean?
use Long.valueOf()
I think this should be URLParseRequest.
Why is this catch block necessary?
I think we should use the new HashMap<>() here.
This is not necessary. The view is already clickable to the view.
This is not needed.
This is a bit hard to read. Can we use a switch statement here?
I think it would be better to use the KuzzleSecurity.updateRole method here.
I think this should be "A control with id {0} already exists"
I think this should be a separate test case.
This should be a warning.
I think this should be done in the transaction
I think this should be private
I think this should be a field, not a field.
I think you can use the diamond operator here
This is a bit confusing. I think it's better to use a specific task adapter to get the task adapter.
I think this is not necessary.
I think this should be assertEquals(methodAccessItemDtoList, methodAccessItemDtoList, methodAccessItemDtoList)
This is not needed.
This is not correct. You should check if the item is not null.
I think this should be a warning
nit: I think we can use the default schema name here.
I think we should use the @BeforeClass annotation here.
this.
I think this should be a new method in HashBasedTable.
I think this should be a static method.
This is not a good idea. You can use a ternary operator.
I think this should be a fatal error.
This is not a safe way to do this. You can use the new method to get the revision from the parent.
I think we should add a null check here.
same here, please use the new method
I think we should use the same approach as in the other classes.
This is a bit strange. I think it would be better to have a test that checks the content of the content of the file and then check if the content is the same.
why not use the static method here?
This is not a JavaScriptFiles. You can use javaScriptFiles.getJavaScriptExternalFilesClassRef(doc.getXMLReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWikiReference().getWiki
I think this is not needed.
I think this should be a static method.
This is not a filter, but the filter is not a filter.
I think this should be a methodParam.
I think this should be a Flux<AmqpEndpointState>
I think we should use the same approach as in the other classes.
I think this should be a Set<String> not a Set<String>.
I think this should be warn
This should be a WARN instead of an ERROR.
log
This is not a good idea. You can use the following:  java if (inputFormat instanceof InitializeOnMaster) { throw new IllegalStateException("Configuring the output format " + t.getMessage(), t); }
I think this should be a for loop.
nit: I think we can use the static import for this.
I think this should be in a finally block.
nit: can we add a message to the exception message?
It's better to use the same naming as above.
rename to child
I think this should be a more specific exception.
I think this should be a WARN instead of an ERROR.
Why not just use the count?
This is a bit hard to read. Can we use a Set instead?
I think we should use the same pattern as in the other methods.
This is not needed.
I think this should be removed.
I think we should make this private.
rename to binding
This should be a ServerAPIException.
I think you should use the expected value instead of the expected value.
I think this is not necessary. The previous clause is always true.
nit: can be simplified to return ImmutableSet.of(filterPushdownOptimizer);
This is not necessary.
I think this should be in a finally block.
I think this should be a synchronized block.
I think we should use the same approach as in the other class.
nit: this can be private
I think this should be private.
nit: I think it's better to use ImmutableList.of()
Objects.hash()
this.
I think this should be a Preconditions.checkNotNull(length, "length")
I think this should be instructor.email.
I think this should be a StringBuilder instead of a StringBuilder.
I think this should be Locale.FRANCE.
I think this should be a List<Element>
I think this should be a warning.
This is a bit confusing. I think it would be better to use a switch statement here.
I think this should be a WARN instead of an ERROR.
I think you can use assertEquals here
I think this should be debug
I think this is not needed.
I think it would be better to use the injected VmwareVmImplementer instead of the VmwareVmImplementer.
This is a bit hard to read. Can you please extract a method to avoid duplication?
I think this should be synchronized
style nit: no braces around single line blocks
I think this should be a warning.
I think this should be a warning.
I think this should be:  java Calendar.getInstance(TimeZone.getTimeZone("UTC")).getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .getTime() .get
I think we should use the same logging as the one in the method above.
This is not needed.
I think we should use a CountDownLatch here.
I think this should be a constant.
I think this should be a constant.
I think we should use the same approach as in the other classes.
This is not needed.
I think this should be a WARN instead of an ERROR.
I think this should be private
This should be a constant.
I think this should be in a finally block.
This is not necessary.
I think we should use the new pattern pattern here.
I think this should be a switch statement.
I think this should be a warning.
I think we should log the error here.
I think we should log the error here.
I think this should be set in the constructor
This is not needed.
I think this should be moved to the previous patch
Use logger instead of System.out.println.
This is not necessary.
I think this should be "Retreiveing door data"
I think this should be a constant.
I think we should add a check for the other parameters to the super class.
Shouldn't this be in the finally block?
This is a bit strange. I think it's better to have a test case for it.
Why do we need to set this?
Should this be a WARN instead?
I think you can use the constant here.
I think this should be synchronized.
I think this should be wrappedStream.skip(nextPos - pos)
nit: I think we can use the new TableFinishNode.getStatisticsAggregationDescriptor() method here.
This test is not covered by the test.
@vilchik-elena Why not use the same value as the one in the constructor?
This is not needed.
I think we should use the same name as the class name.
I think it would be better to use the service reference here.
I think this is not necessary. The variable name is not used.
This is a breaking change.
I think it would be better to use MoreObjects.toStringHelper() here.
This should be a list of all available available available in the list.
I think we should use the same name for the metrics.
Why do we need to sleep here?
This is not needed.
This is not needed.
I think this should be a WARN instead of an ERROR.
This is not a good idea. You can use Collections.singletonList()
I think this should be a debug level.
@bgeVam please use the constant for the class name
I think this should be a ConcurrentHashMap.
This should be a constant.
I think this should be expires != null && expires.before(validity)
I think this should be a constant.
This is a bit hard to read. I think it would be better to use a for loop instead of a for loop.
Why not use the string format here?
This is a breaking change.
I think this should be a synchronized block.
I think we should use assertThat(expected, actual) here.
I think we should log the exception here.
This test is not testing anything. You should check if the patient is in the database before the patient is created.
I think we should add a message to the exception.
I think we should also check for the parent of the parent.
I think this should be a WARN instead of an ERROR.
please use getBackend()
I think this should be a warn instead of info.
This can be replaced with: return Iterables.getFirst(imageApi.list().concat(), null).getId();
I think we should use the same approach as in the other pull request.
This is a bit of a nit, but I think we should have a method for this.
I think this should be a constant.
This is not a good idea. You can use a map.put(key, flag) method to get the value.
I think this should be safeDelete(path)
This is not needed.
I think this should be a constant.
This is a good idea. You can use a try-with-resources statement here.
This is a bad idea. You should throw an exception if the id is null.
I think we should use the same name as the last parameter.
I think you can use the following:  assertSameAsCGit();  and then you don't need to create a new one.
I think this is a bit too long.
I think this should be in the if statement.
This should be package private.
This should be private.
I think we should add a null check here.
This is a bit confusing. I think it would be better to throw an exception here.
I think this should be a warning.
I think this should be a List<String> instead of a List<String>.
I think we should have a test for that.
I think this is a bit confusing. It's a bit hard to read.
Can we make this constructor private?
I think this should be a constant.
I think we should have a test for this case.
This is a bit hard to read. Can we use a regex instead?
I think this should be removed
This is not a good idea. The key is the key for the key.
I think this should be a static method.
I think this should be a constant
This should be a constant.
I think this should be a constant
I think this should be a WARN instead of an ERROR.
nit: I think we can just use the TaskManagerConfiguration.fromConfiguration(configuration, rpc.getScheduledExecutor()).
I think this should be a constant.
I think we should have a separate method for this.
I think this is not necessary.
I think this is a bit too complicated. We can use a stream and then collect the headers to the map.
This is a bit hard to read. Can you please extract a method for the sake of readability?
I think this should be moved to the previous line.
I think this should be called from the context.getStatus().setFocus(true);
I think this should be ListOps.concat(listOps.concat(list, EMPTY_LIST));
Why not just use the for loop here?
I think this should be a RuntimeException
I think this should be a constant.
I think this should be a try-with-resources block.
this is not thread safe, you can use a concurrent map
please use injection for injection
IdealState is null here.
I think this should be a for loop.
I think we should use the same account as the previous one.
I think this should be a constant.
This is a good idea.
style nit: no braces around single line blocks
This is not a good idea. You can use CommonImages.getImage(CommonImages.OVERLAY_SYNC_INCOMMING) instead.
I think this should be a constant
I think this should be a warning
you can use getVm().getSnapshotName()
This is a bit strange. I think it's better to use a try-with-resources statement.
I think this should be removed.
I think this is a bit confusing. I think we should have a method with a method that takes a long time.
I think this should be a WARN instead of an ERROR.
I think this should be a separate test case.
Please use Collections.singletonList()
I think this should be a constant.
I think we should add a check for the result adapter here.
This is not a good idea. You can use a for loop here.
This should be a debug statement.
I think this should be in a finally block.
This is a very unfortunate test. I think it would be better to use a regex instead of a regular expression.
This should be a constant.
@danff let's use this.rpmRevison here
This should be System.out.println
This is a bit hard to read. Can we just call the method on the onActionResult?
This should be a warning.
This is a good candidate for a static import.
nit: can be final
I think this should be a warning.
I think we should remove the if condition here.
I think this should be a constant.
I think this should be written as if (bytesAvailable - count >= 0) {
This is a bit hard to read. You can use StringUtils.isBlank(content)
I think this should be a separate test case.
This is a bit hard to read. Can we have a common rule for this?
I think this should be a WARN instead of an ERROR.
I think this should be a more specific exception.
I think we should use the path separator here.
I think this should be a constant.
I think this should be a constant
I think this should be a lambda
I think this is not needed.
I think we should use the same name as the other name.
I think this should be a warning
I think this should be a WARN instead of an ERROR.
Shouldn't we throw an exception here?
please use Collections.singletonList
This test is not testing anything.
I think this should be synchronized
Can we add a log message here?
I think this should be a sqlSessionContextImpl.
I think this should be 6.
please use StringUtils.isBlank()
I think this should be a constant.
I think we should use the constant DEFAULT_BYTE_BASE_OFFSET here.
This is a bit confusing. I think it would be better to have a method in the StageExecutionDescriptor that takes a plan node and returns the plan node.
I think this should be a constant.
I think this should be addImportMenuItemImpl(menuItem)
I think this should be assertThat(method.toString(), methodElement).isEqualTo("");
why not use runInternalAction()?
I think we should log the exception here.
I think this should be a List<String>
remove
I think this should be a WARN instead of an ERROR.
You can use new Date().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().toInstant().
I think we should also check that the value is not null.
This should be synchronized.
Collections.singletonList()
I think this is a bit strange. We should use a StringBuilder instead of a String.
This should be a debug statement.
I think it would be better to use the new BlockChain(params, blockStore, blockStore) constructor.
This is not correct. The version is already taken from the version of the version.
I think this should be a constant.
@bgeVam please use a static import for assertEquals
nit: I think this is a bit confusing. I think it's better to have a method that takes a boolean and returns true if the property is not found.
I think we should use the same format for all the other variables.
This should be a WARN instead of an ERROR.
This is a bit hard to read. I think it would be better to use a static final String constant.
I think this should be a constant
I think this is not necessary.
This is not necessary.
I think you can use the same constant here.
I think this should be Comparator.comparing(Comparator::getComparator).
I think this should be warn
I think this should be debug level
I think this is a bit strange. I think it would be better to have a single boolean expression that checks if the user is active and the user is active.
I think this should be assertEquals(0, payload.length());
I think this should be in a finally block.
I think we should use FileService.readFromFile(file.getAbsolutePath()) here.
This is a very unfortunate change.
This should be a AtomicInteger
I think we should log the exception here.
I think this should be a switch statement.
nit: I think we can use the same error message as above.
I think this should be UnsupportedOperationException
This is a good candidate for a test.
I think this should be a WARN instead of an ERROR.
I think this should be readRecord(parsedValues, bytes, offset, numBytes, numBytes, bytes, offset, numBytes, numBytes, bytes, offset, numBytes, numBytes, bytes, offset, numBytes, numBytes, bytes, offset, numBytes, numBytes, numBytes, bytes, offset, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, numBytes, bytes, numBytes, bytes, numBytes, bytes, numBytes, bytes, numBytes, bytes, numBytes, bytes, numBytes, bytes, numBytes, bytes, numBytes, bytes, numBytes, bytes, numBytes, bytes, numBytes, bytes, numBytes, bytes, numBytes, bytes, numBytes, bytes, numBytes, bytes, numBytes, bytes, numBytes, bytes, numBytes, bytes, numBytes, bytes, numBytes, bytes, numBytes, bytes, numBytes, bytes, numBytes, bytes, numBytes, bytes, numBytes, bytes, numBytes, bytes, numBytes, bytes, numBytes, bytes, numBytes, bytes, numBytes, bytes, numBytes, bytes, numBytes, bytes, numBytes, bytes, numBytes, bytes, numBytes, bytes, numBytes, bytes, numBytes, bytes, numBytes, bytes, numBytes, bytes, numBytes, bytes, numBytes, bytes, numBytes, bytes, numBytes, bytes, numBytes, bytes, numBytes, bytes, numBytes, bytes, numBytes
Shouldn't this be canonicalOutFile.toPath().startsWith(canonicalOutDir) ?
@dalifreire why count is 1?
This is not needed.
I think this should be a WARN instead of an ERROR.
This should be a static method.
I think this should be a constant
I think we should log the exception here.
I think we should use the same port as the one in the constructor.
nit: I think you can use Preconditions.checkState(numEvents > 0 && idx < numEvents)
This is a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a bit of a
I think this should be moved to the top of the method, so that it can be reused in both places.
I think this should be in the onLoad method.
I think we should use the same approach as in the other methods.
nit: can we move this to the top of the method?
@dmzaytsev let's use try-with-resources here
@fanifieiev the same above.
I think you should use the new LabelProvider here.
This is not necessary.
I think we should log the exception here.
why not use LogKitten.wtf(CHECK_NAME,CHECK_NAME) ?
Why do we need to wait for the thread to complete?
This test is not testing the right thing. It should be the same as the one in the test.
I think this should be removed.
This is a good candidate for a static import.
I think this should be a try-with-resources.
nit: maybe we can use Optional.ofNullable here?
I think this should be a WARN instead of an ERROR.
I think this should be a List<Exception>
This is a good candidate for a method to get the index from the index.
This should be a constant
I think we should use Pattern.compile(envIdPattern) here.
This is not a good idea. It is not a good idea to use the same instance as the one used in the class.
I think this should be a constant.
I think this should be a List<Upload>
I think this should be writer.writeToFileWriter(writer);
This should be a WARN instead of an ERROR.
nit: can we move this into the if block?
@ivandalbosco why not use try with resources?
I think this should be a separate method.
I think this should be a UUID, not a UUID.
I think this is not necessary. The test is failing because the test is failing because the test is failing.
This is not necessary. The only place where you can do is to check if the group is in the list.
I think this should be a CountDownLatch.
I think this should be a debug statement.
This should be a warn
I think this should be "without"
I think this should be a WARN instead of an ERROR.
I think this is a bit too complicated. Maybe we can extract it to a method?
This is not a good idea. You can use Objects.nonNull(maxAuthorFullnameLength)
This is a bit of a very long method. Can we extract it to a method?
This is a breaking change.
This is a bit hard to read. I think it would be better to use a StringBuilder instead of a StringBuilder.
channelActive?
Why not use Collections.emptyMap() ?
Use the player's player's player's player's player's player's player's player's player's player's position instead of the player.getPosition()
I think this should be synchronized
This is a bit of a nitpicky, but I think it would be better to use a StringBuilder instead of a StringBuilder.
This should be a static method.
This should be a static method.
This should be a constant.
This should be debug
I think this is not needed.
I think we should use the builder here.
This is not a good idea. You can use the X509NameBuilder.
I think this should be a fail() call.
I think we should add a check for null here.
I think this should be a RuntimeException
I think we should use the same textSize variable here.
Remove this line.
This is not necessary.
This is not needed.
@dmzaytsev let's use logger here
I think this is not needed.
I think we should use Math.min here.
@vilchik-elena Why not use the same approach as in the other constructor?
This is not a valid regex.
I think this should be a NullPointerException.
I think this should be a WARN instead of an ERROR.
I think this should be a DEBUG instead of an ERROR.
This is not needed.
This is a good candidate for a method in Socket.
This should be a String.format call.
This is not needed.
nit: add space before if
I think this should be a more specific exception.
I think this should be a taskResult.
I think we should use a more descriptive name here.
I think this should be a warn instead of an error.
I think this should be checkNumberOfPatients(visit, visitRescheduleDto, visitRescheduleDto, visitRescheduleDto, visitRescheduleDto);
This test is not testing anything. You should check that the returned list is empty.
I think this should be a ConcurrentHashMap instead of a ConcurrentHashMap.
I think this should be inside the if (disk == null) block.
nit: can we use hiveConfDir.equals("") instead of hiveMetaStoreURIs?
I think this should be fValidatorStrategies.
I think this should be a UserNotFoundException.
@kujtimiihoxha I think this should be extracted to a method.
I think this is not necessary.
This is not necessary.
I think it would be better to use the new method here.
I think this should be <=
I think this should be a method parameter, not a method parameter.
I think this should be in the else branch.
I think this should be removed.
I think this is a bit too long.
I think this should be a static method.
Why do we need to close the queryRunner?
nit: this could be a static method
I think this should be cursor.getOffset() == 0
I think this should be a warn instead of an error.
This is not needed.
@vilchik-elena Why not just use input.getRowDimension()?
Use constants for "/tmp/upload"
This is not necessary.
I think we should use the same approach as in the other class.
I think we should add the namespace to the message.
I think this should be moved to the event handler.
I think this should be a WARN instead of an ERROR.
I think this should be a static method, not a static one.
This is a bit confusing. I think it should be a boolean.
I think this should be error.
Why not throw new RuntimeException("Access not authorized on field '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" + target + "' with value: '" +
Please use getStorageDomainId() instead of getStorageDomain().
This is not a good idea. You can use the session id instead of the session id.
I think this should be a warning.
I think we should throw an exception here.
I think we should use the same approach as in the other createRateLimiterRegistry method.
This is not a good idea. You can use the new method to build the version code.
I think this should be a warning.
I think this should be a more specific exception.
I think we should add a new method to the ITmfEventTableColumn that takes a TmfEventAspect and call the constructor with the aspect.
This is not needed.
Please use the new method to log the error.
I think this should be debug level
I think this should be done in a finally block.
This should be a WARN instead of an ERROR.
I think we should use the same approach as in the other tests.
I think it would be better to use a ConcurrentHashMap here.
please use Collections.emptySet()
This is not necessary.
This is a bit of a hack to me. I think we should just use the context.initSecContext(true) method instead.
Why is this needed?
I think this should be a constant.
I think this should be a RuntimeException
I think this is a bit too complicated. Maybe we can use a regex to split the string and then split the string into a single string.
I think this should be a separate method, like addAnswerView(context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context, context,
This is not a valid value.
This should be a static method.
This is not needed.
I think this should be removed.
I think it would be better to use the same name as the VM-specific one, i.e. "isSet"
I think this should be a try-with-resources block.
This should be a StringBuilder
This test is not testing the same thing as the one in the other tests.
This should be a logger.
Check the correctness of Attribute values
I think we should use SliceUtil.getBytes(tuple) here.
Can you use a logger here?
This is not a good idea. You can use a StringBuilder instead.
I think this should be telephonyRegistryManager.
I think this should be subApp.getType().getFBNetwork()
I think this should be ActionDeniedException.Unauthorized
This should be "Microsoft.ApplicationInsights."
We should use the same date as the one in the other place.
I think we should use the same approach as in the AbstractFormParser.
@vilchik-elena Why not use the constant from the class name?
I think this should be a constant.
style nit: no braces around single line blocks
I think this should be removed.
This is not necessary.
I think this should be wrapped in a try-with-resources block.
I think this should be a warning.
I think this should be hasNext()
I think this should be a warning.
I think you can use autoScaleDiagramCheckBox.getSelection() here.
This is not a part of the PR, but it seems like it should be a separate PR.
This is a bit hard to read. Can you please extract a method for this?
This is a bit hard to read. How about adding a helper method to generate the query type?
I think this should be a constant.
I think this should be a for loop.
I think this should be a constant.
return Optional.ofNullable(name);
I think it would be better to use the same approach as in the other methods.
This is not necessary.
I think this should be Collections.singletonList(new org.jboss.arquillian.warp.servlet.AfterServlet.class)
I think this should be debug
Why is this needed?
This should be a constant
Why not just use new GmmPartitionData(xs, pcxi, pcxi, pcxi)?
This is not needed.
Use logger instead of e.printStackTrace()
This is a bit of a nitpicky, but I think it would be better to use a static import for this.
Why is this necessary?
I think this should be project.afterEvaluate(p, e)
This is a bit confusing. I think it should be a local variable.
I think we should use the same approach as in the other tests.
I think this should be a named constant.
I think this should be a constant.
This is not needed.
Use logger instead of e.printStackTrace()
This is a bit hard to read. I think it would be better to use a static method to get the instance and then use it.
This should be debug
@ivandalbosco Why not just use a Set here?
I think this is not needed.
This is a bit confusing. I think it would be better to have a method called setLimit(int count) that returns the limit and then call setLimit(int count) and then call setLimit(2 * (offset + buffer.length)
Why is this needed?
I think this should be a constant.
This should be a List<String>
I think it would be better to use new BasisSurface(x, y, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z
I think we should throw a RuntimeException here.
This is not a valid URL, it should be a URL.
Can we use a try-with-resources pattern here?
I think this should be private
I think this should be a WARN instead of an ERROR.
I think this should be protected.
I think this should be a List<String> not List<String>
I think this should be a constant.
I think this should be verify(done);
nit: I think we can just do numWorkers = etMaster.getTable(inputTableId).getPartitionInfo().size();
This is a bit of a very bad idea. I think it would be better to throw a RuntimeException instead of a RuntimeException.
I think this should be: if (queryStateMap.containsKey(queryId)) { queryStateMap.remove(queryId); }
I think this should be moved to the ProjectData constructor.
I think we should log the exception here.
why not use runVdsCommand()?
I think this should be ss.getQuarkAbsolute(attr.getQuarkAbsolute())
I think we should have a cache store for the key and the key.
I think this should be debug
This is not a block builder, so it should be a field.
This is not a good idea. You can use a StringBuilder instead.
I think this should be a static method.
This test is not testing anything. You can use the full path to test the case where the scan is not null.
I think this should be in the finally block.
Should we use the full name here?
I think this should be int result = Integer.compare(depth, (ElementNode) other).depth;
I think we should add a check for the connectionId here.
This is not a good idea. You can use the new method to get the class name from the transport.
This is not a good idea. You can use the new exception message to the user.
I think this should be private
@bgeVam please use the same approach as in the other PR.
This should be private
I think this should be a Set<PageId> set = pageSet.stream().map(PageKey::add).collect(Collectors.toSet());
I think this should be a while loop.
This is a debug statement.
I think this should be a CheckpointFailureReason.values().
Why not use the iterator?
I think this should be done in the async task instead of here.
Shouldn't this be a WARN instead of an ERROR?
I think this is not necessary. The list is already sorted by the list.
Objects.hash()
I think we should log the exception here.
I think we should use StringUtils.isEmpty() here.
nit: I think we can use the same format as the other log messages.
I think this is not necessary.
why not just return the error channel?
This should be private.
I think this is a bit too complicated. Maybe we can extract a method for this?
I think this should be discontinueed
I think this should be a lock.
I think this should be a stream.
I think this should be a warning.
I think this should be a constant.
I think this should be setOutcomeSettings(Settings)
This is a bit hard to read. How about using a StringBuilder instead?
This should be a WARN instead of an ERROR.
why do you need to call this?
I think we should log the exception here.
You can use Collections.singletonList()
This is a bit of a bug, but I think it would be better to throw an exception here.
I think this should be assertThat(result, instanceOf(AbuseFilterEditResult.class))
This is not a good idea. You can use the ldapRealmInvalidRdnForAttribute(..) method to get the name from the ldapRealmInvalidRdnForAttribute.
This is not needed.
I think this should be unitFrom.convert(1, unitTo)
I think we should use a CountDownLatch here.
I think this is not necessary.
I think we should use a more descriptive name here.
I think we should use the same approach as in the other hand side.
I think this should be setWaterLevelIncrementRatio(waterLevelIncrementRatio)
I think we should log the exception here.
This is a good idea. You can use the new HashMap<>(2) method.
This is not needed.
This should be a WARN instead of an ERROR.
@bdragan use System.currentTimeMillis()
I think this should be synchronized
I think this should be private
Please use StringUtils.isBlank()
This is a very unfortunate error. I think it would be better to use a try-with-resources statement here.
I think we should use the same name as the tag name.
I think this is a bit too long. Maybe we can extract it to a method?
I think this should be a StringBuilder instead of a StringBuilder.
This is a bit of a nitpicking, but I think it would be better to use a switch statement here.
I think you can use the same name as above.
This is a bit hard to read. I think it would be better to use a switch statement instead of a switch.
I think this is a bit too long. Maybe we can use a StringBuilder instead?
I think this should be a try-with-resources block.
I think this should be debug
nit: I think this is a bit strange to have a prefix = ""; and then use the prefix variable.
I think this should be a constant
I think we should log the exception here.
I think this should be a checkArgument
This is not a good idea. You can use the new method to create the contentlet.
This is not needed.
Unnecessary?
I think this should be a string resource.
I think this should be removed.
I think we should have a test for that.
I think we should remove the vmDynamic.getId() from here.
I think this should be a WARN instead of an ERROR.
nit: I think this is a bit strange to have a check on the column family, not the column family.
This is a bit strange. I think it would be better to use a CountDownLatch.sleep() instead of a CountDownLatch.sleep()
nit: you can use assertEquals(Iterables.filter(cells, predicate))
I think this should be a NumberFormatException.
I think this should be wrapped in a try/catch block.
Is this change related to the PR?
This is not a good idea. You can use Objects.requireNonNull( action ).
This is a bit confusing. I think it would be better to have a single property for the DB and then have a single property.
I think this should be a RuntimeException.
I think this should be a DraftBuilder.
return doubles[index] == null;
I think this should be setQcowCompatForQcowImage()
I think this should be a trackEvent() call.
Why not just use the method reference here?
I think we should use the same name as the MessageProcessor.
I think we should use the same approach as the other one:  this.batchableGridDialect = (QueryableGridDialect<T>) asQueryableGridDialectOrNull( gridDialect );
@dmzaytsev let's use Xembly.head(pulse) here
I would prefer to use the constant for "file"
I think this should be in the setUp method.
I think we should use the same name as the activity_task_detail_container.
Why not use the new constructor?
This is a bit confusing. I think it would be better to use the same approach as the one in the createDynamicTableSource method.
This is not needed.
I think this should be a WARN instead of an ERROR.
This should be a field of the class.
Please use Objects.hash()
I think this should be onVideoStart()
I think this should be Map<ComponentType, String> result = new HashMap<>();
I think this is a bit too long. Can we just use a String constant?
I think this should be a warning.
I think we should log the exception here.
please use 'else if'
Why not just use the new char[].length()?
I think this should be removed.
I think this is a bit strange. I think it's better to use a CountDownLatch.
you can use List.of(List.of(cluster.getcompatibility_version(), asyncQuery))
I think this is a bit too complicated. Maybe we could use a stream and collect the keys in a list?
I think this should be a WARN instead of an ERROR.
I think this should be a WARN instead of an ERROR.
I think this should be a warning.
I think this should be a static method.
I think we should use the primitive type here.
This is a bit confusing. I think it would be better to use the enum as the key.
This is a bit hard to read. Can you please extract a method to reduce duplication?
This is not a good idea. You can use the same format for the file and the file name.
I think this should be a POST, not a DELETE.
I think we should use the same name as the other variable name.
This is not necessary. The ACL policy is not allowed to access control content.
I think we should use the new Eval(interpreter, ...) here.
This is a breaking change.
@bdragan I think we should use the same URL for all tests.
please use brackets
This should be a switch statement.
I think this should be setSkip()
I think this should be called fileDescriptorSource.
I think we should use the same name for both strings.
I think we should use a ConcurrentHashMap here.
I think this should be private.
This should be a constant.
This is not a safe way to do this. You can use the context.unwrapApi(CloudControllerConstants.AVAILABILITY_ZONE, String.class) method.
I think this should be private.
I think we should use a constant for the topicStoragePath here.
This is not necessary.
This is not necessary. The list is already a List, so the list is not needed.
Why not just use diamond operator?
I think we should also verify that the truststore is not null.
This should be return (prevValue == null) ? 0 : 0;
@vilchik-elena Why not using the method reference?
I think this should be a policy.
This is a good idea.
I think we should throw an exception here.
I think we should check the super class of the class.
return !name.isEmpty()
I think this should be extracted to a method, something like:  public static OperatingSystem apply(SoftwareDescription input) { return OperatingSystem.from(unfiltered).build(); }
You can use the constant from the class name
I think this should be null, not empty.
I think this should be a WARN instead of an ERROR.
nit: I think you can use the static import for the assertEquals method.
I think this should be moved to the try block.
I think we should use assertEquals here.
Is this really needed?
nit: this.schedulerStats is unused.
This should be a warn
I think this should be moved to the previous line.
I think this should be a constant.
I think we should check if the sizeLimit is > 0.
I think this should be int.
Shouldn't this be a constant?
This is a bit hard to read. How about using a map instead of a map?
I think we should throw NoSuchElementException here.
This should be done in the finally block.
This is not necessary.
I think this should be in the if block
I think you can use ASTLiteral.class.getName() here.
I think it would be better to use the AuthenticationUtil class here.
I think this should be a for loop.
This is a bit hard to read. I think it would be better to use a try-with-resources statement.
I think we should throw a RuntimeException here.
I think this should be a FileListHelper.sortFileList(modFile, modFile, modFile, ContainerType.JAR)
Please use NetworkCapabilities.TRANSPORT_VPN.
You can use random random here.
Remove this line.
This is a bit hard to read. Can you please extract a method to reduce duplication?
I think this should be "Samza"
I think we should use the same name for both the variables and the name of the variables.
This is a bit hard to read. I think it would be better to use a static variable for the columnIndices.
Shouldn't this be setDead()?
I think we should throw here instead of logging it.
This is not a good idea. You can use Collections.emptyList() instead.
This is not a good idea. You can use assertCodeDeploymentWorking(keyProcessor, "keyProcessor is not null");
This should be a constant
I think we should use the same filter as the one in the createBundle method.
nit: I think we can use the same approach as in the other tests.
I think this should be a switch statement.
nit: can we use the same pattern as in the other methods?
please use injection for the VnicProfileMappingMapper
I think this should be a try-with-resources.
This is not needed.
I think this should be a constant.
I think this should be a constant.
I think this should be a List<String>
I think we should also check that the cache is not null.
This is not a good idea. You can use the File object directly instead of a File object.
I think this should be a static method.
I think this should be a constant.
This is not correct. You can use Object o = (BoundDimFilter) o;
style nit: no braces around single line blocks
I think this should be a set of the set of the configuredGC value.
I think this should be "exiting"
I think this should be a warning.
I think this should be a constant
This is not a valid concept.
I think this is a bit too complicated. Maybe we could extract the common logic to a method in the top of the class?
This is not necessary.
I think this should be a separate method, like isMac()
This is a bit confusing. I think we should have a default value for the config.
I think this is not needed.
Please use StringUtils.isEmpty()
I think this should be done in the constructor.
I think this should be "select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"select * from \"employee\"
I think this should be moved to the previous line.
This is not necessary.
This is not a good idea. You can use a boolean instead of a boolean.
I think this should be: if (this == obj) { return false; }
why not use the diamond operator?
I think we should make this constructor private.
I think this should be a.getEntity() == null
I think this is a bit too complicated. Maybe we can extract a method for this?
I think this is not needed.
I think this should be in a finally block
Can we use the same error message as above?
I think this should be a constant.
This is not a good idea. You can use the callbackId variable directly.
I think this is a bit too complicated. It would be better to have a method in the graph that takes a list of strings and then call the method in the constructor.
I think this should be a warning.
This is a breaking change.
@vilchik-elena Why not throw the IndexOutOfBoundsException?
rename to process
nit: this.cassandraTables = new WrappingQueryRunner(queryRunner, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config, config,
please use assertEquals
I think this should be private
I think this should be in a finally block.
nit: can we move this to the constructor?
I think this should be a ConcurrentHashMap.
I think this should be project.getVisibility()
I think this should be in a try-with-resources block.
This is not needed.
This is a bit hard to read. I think it would be better to use the same pattern as the other methods.
This is not a good idea. You can use the context.getDefaultContext() method instead.
This should be a property change.
I think this should be a constant.
This is a debug statement.
This should be a WARN instead of an ERROR.
I think it's better to throw a CompletionException here.
I think this should be a constant.
nit: this.client = Objects.requireNonNull(client, "client is null");
I think this is a bit more readable if you just use a for loop.
I think this should be a warning.
I think we should use a CountDownLatch here.
please use the constant
Can we use Mockito.mock(BucketDataAccessor.class) here?
I think we should also clear the mShowHiddenSites if it is not enabled.
please use 'else if'
Shouldn't this be setSecondNode(startNodeId, endNodeId ) ?
This is not thread safe. You can use a lambda here.
This is not necessary.
This should be a field, not a field.
This is a very good place to do this.
This should be a WARN instead of an ERROR.
I think this is a bit strange. I think it would be better to have a test for the error message.
This is not needed.
This is not needed.
This is not needed.
@vilchik-elena Why not just use anonymous?
This should be a static method.
This is not a player.
nit: this.clientShallowCommits = Objects.requireNonNull(clientShallowCommits);
I18N.tr("") is redundant here
This should be done in the constructor.
I think this should be a constant.
This should be a separate method.
Please use the constant for "domainClass".
I think this should be a static method.
I think this should be a method on the onPositionObserverUpdate() method.
I think we should check if the projection converter is not null here.
I think this should be a constant
I think this should be a WARN instead of an ERROR.
This is a bit hard to read. I think it would be better to use a try-with-resources statement.
nit: can you please add a message to the assertThatThrownBy?
I think this should be a List<Pair<Throwable, ErrorType>
I think this should be a constant.
Shouldn't this be "throws ConfigurationException"?
I think this should be a warning
I think we should use the same approach as the other service.
This is not necessary.
I think this should be a warning.
I think this should be a field, not a field.
I think this should be a stream instead of a stream.
This is a bit of a debugging issue.
I think this should be a try-with-resources block.
I think this should be "Creating thing for type '{}'. Binding '{}' says it could not be created."
I think this should be userAndDomain.first, not userAndDomain.second
I think it would be better to use the same approach as in the previous test.
This is not necessary.
I think we should use the new method in the UIStats class.
This is a bit hard to read. Can we use a static final String to avoid the need for the string literal?
I think this should be return pathRaw.length == walker.getRawPath().length;
This is a bit confusing. You can't just use a boolean expression.
I think this should be moved to the UserProperty.
I think it would be better to use assertThat(cherry.get().messages).hasSize(2)
I think this should be private
This is a good candidate for a method to be used in the super class.
I think this should be a double[]
This should be a player draws.
I think this should be debug
This should be a logger.
I think this should be a while loop.
I think we should use FileChooserService.confirmFileSave(file, currentFile); here.
Why do we need to synchronize on the lock?
We should probably use the same name as the NotificationTitle.
I think this should be a WARN instead of an ERROR.
I think we should use the platform default path here.
I think we should also verify that the keys are not empty.
I think this should be warn
This is not necessary. The criteria is already defined in the query.
Please remove this line.
wait for element is not used
I think we should add the uri to the message.
I think we should use the defaultServiceId here.
I think this should be sorted.sort(Comparator.comparing(GroupModel::getName))
I think we should call this refresh() only if the callback is null.
I think this should be package private
I think we should use the same name as the other tests.
I think this should be a primitive type.
This is not needed.
I think we should use the new String[] here.
I think this should be a constant.
I think this should be assertEquals(EAP_SIM_RESPONSE_SIM_RESPONSE_PACKET, eapMsg);
I would prefer to use the new ArrayList<>() method here.
I think this should be in a finally block.
I think this should be in the finally block.
I think this should be a RuntimeException
This should be a WARN instead of an ERROR.
I think we should use the new method here.
nit: use ImmutableMap.of()
It's better to use Pattern.compile(pageMatcher, Pattern.compile(pageMatcher), Pattern.compile(pageMatcher, Pattern.compile(pageMatcher), Pattern.compile(pageMatcher), Pattern.compile(pageMatcher), Pattern.compile(pageMatcher), Pattern.compile(pageMatcher), Pattern.compile(pageMatcher), Pattern.compile(pageMatcher), Pattern.compile(pageMatcher), Pattern.compile(pageMatcher), Pattern.compile(pageMatcher), Pattern.compile(pageMatcher), Pattern.compile(pageMatcher), Pattern.compile(pageMatcher), Pattern.compile(pageMatcher), Pattern.compile(pageMatcher), Pattern.compile(pageMatcher), Pattern.compile(pageMatcher), Pattern.compile(pageMatcher), Pattern.compile(pageMatcher))); instead of Pattern.compile(pageMatcher)
I think it would be better to use the new method here.
I think this should be a constant
I think we should log the service name here.
nit: I think this should be a static method.
This should be a static method.
I think this should be a Set<Object> instead of a Set<Object>.
I think this should be a List<String>
I think we should use the same approach as in the other tests.
I think it would be better to use the same approach as in REPR_MAP_OPENING.
This is a good idea.
This is not correct. The name of the function is a function name.
I think we should also check that the observer is not null here.
I think this should be a constant
I think this should be a WARN instead of an ERROR.
This is not correct. You can use the new method here.
This is a debug statement.
I think this should be a RuntimeException
This is not needed.
I think we should use the JITSI_MEET_DOMAIN_BASE_HEADER constant here.
I think this should be a WARN instead of an ERROR.
why is this needed?
I think we should add a check for null here.
This is not necessary.
I think this should be replaced with a regex.
I think we should use the same approach as in the other classes.
I think this should be a warning.
@lautarobock what is the reason for this change?
I think this should be a WARN instead of an ERROR.
I think this should be in the if (procService != null) check.
Why is this needed?
I think this should be a fail() call.
I think this should be removed.
nit: I think we can just use switch-case here.
I think this should be removed.
I think it would be better to use the constant here.
I think this should be a Set, not a Set.
I think this should be setOATag(rec)
This is a bit hard to read. I think it would be better to use a for loop instead of a for loop.
I think we should set the game data in the constructor instead of setting it here.
This is a good idea. You can use FSDataInputStream in = null; and then you can use FSDataInputStream in = null;.
I think this should be synchronized
This is not necessary.
I think this should be n == 0 ? new Object[]{0, n) : arraysOfDepth( n-1 );
I think it would be better to use the same approach as in the other methods.
I think this should be logged as a warning.
This is not a good idea. You can use the new ArrayList<>() method.
I think this should be a Set instead of a List.
I think it would be better to use a cache instead of a map.
This is not a good idea. The method name is not clear.
I think this is a bit too complicated. I think it would be better to have a method to get the media unit from the treeStream.
I think this should be in the constructor, not here.
Should this be consumerLag == consumerLag?
This should be a WARN instead of an ERROR.
I think we should throw an exception here.
I think this is a bit strange. I think we should use a logger instead of System.out.println.
this.language = language;
You can use the getStringExtra() method here.
This is not necessary.
I think we should log the exception here.
I think this should be a Set<String>
This should be a runtime exception.
Why is this needed?
I think we should use the same approach as in the other methods.
I think this should be a WARN instead of an ERROR.
I think this should be txn.getStatus() == MARKED_ROLLBACK
I think this should be a switch statement.
I think this should be a constant.
Use assertEquals
I think you can remove the first parameter.
I think this should be a null check.
I think we should use the metric data set in the metric data set.
I think this should be moved to the JobDetail.
This is not necessary, the profile is already included in the profile.
Why not Collections.emptyList() ?
This is a good idea. You can use the new method to create the history file.
I think this should be a more specific exception.
I think we should verify that the loader is not loaded.
This is not necessary.
I think this should be a WARN instead of an ERROR.
This is not a valid error message.
I think this should be a WARN instead of an ERROR.
This should be a static method.
I think this should be removed.
I think this should be done in the constructor.
This should be a switch statement.
@vilchik-elena Why not use a StringBuilder?
I think we should use the KIEK2 rule rule here.
I would prefer to use the constant for the extension extension.
rename to listener
I think it would be better to use JSON_JSON_JSON_JSON_JSON_JSON_JSON instead of JSON_JSON
This is a bit hard to read. Can we use a try-with-resources pattern here?
I think we should add a check for numBlockByEvalIdForWorker.isEmpty() to avoid the null check.
I think we should throw an exception here.
Should we use the constants for the "LINK_1" and "LINK_1"?
I think this should be a WARN instead of an ERROR.
This is not necessary. The table is created in the UI thread.
I think this is a good idea.
This should be a WARN instead of an ERROR.
I think this should be in the startServer method.
I think this is not necessary.
I think this should be "workDir"
Please use injection for VdcQueryReturnValue
I think this should be a try-with-resources.
I think this should be "Successfully removed disabled bit for account"
This is not needed.
I think this should be inStream.
@dalifreire same here, let's use try-with-resources
I think this should be 'isNewStorage'
I think we should use the same naming as the class name.
Please use assertEquals(result, result)
This is not a good idea. We should use the JsonElement instead of a List.
This should be a Log.e method.
nit: this.joinAddresses = pageBuilder.findJoinAddresses(position, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, probe, and then check for null
This is not a good idea. You should use a logger instead.
I think this is a bit too complicated. Maybe we can extract a method to reduce duplication?
I think we should log the container name here.
I think we should also check that the list is not empty.
I think this is a bit too long. Maybe we can use a method like createMap(MapType mapType, MapType mapType, MapType mapType, MapType mapType, MapType mapType, MapType mapType, MapType mapType, MapType mapType, MapType mapType, MapType mapType, MapType mapType, MapType mapType, MapType mapType, MapType mapType, MapType mapType, MapType mapType, MapType mapType, MapType mapType, MapType mapType, MapType mapType, MapType mapType, MapType mapType, MapType mapType, MapType mapType, MapType mapType, MapType mapType, MapType mapType, MapType mapType, MapType mapType, MapType mapType, MapType mapType, MapType mapType, MapType, MapType mapType, MapType, MapType mapType, MapType, MapType, MapType mapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, MapType, Map
I think this should be a constant
I think this is not needed.
This is not a good idea.
This should be a Boolean.parseBoolean()
I think this should be replaced with a call to containsKey(startString)
I think we should use the same approach as in the other classes.
I think this should be a constant.
This should be a static method.
I think we should add a log here to indicate that the operation is not completed.
I think this is a bit too complicated. It's not a big deal, but I think it's a good idea to have a single constructor that takes a Map<S, StreamTracker> and then call it from the constructor.
This should be a constant.
return 0;
This is not a subunit.
I think we should use node.get(i).get("nuxeoLogin").textValue().equals(nuxeoLogin).textValue()
Remove this line.
I think we should use a Set here.
nit: can be replaced with:  return pendingPartitions.isEmpty() ? pendingPartitions.isEmpty() : pendingPartitions.size() > 0;
Why is this needed?
I think we should call untrackView(view) here.
This is a breaking change.
I think we should throw an exception here.
I think this is a bit too complicated. We should be able to use the same ordering as the other aggregation.
This is a bit hard to read. I think it would be better to use a method to build the string and then use that instead of the loop.
I think we should use the same joinNode.getId() here.
Why do we need this sleep?
This is a bit confusing. I think it would be better to have a single enum for the field name.
This is not needed.
This is a bit of a hack to me. I think it would be better to use a switch statement here.
I think this should be a WARN instead of an ERROR.
This is not a good idea. You can use the HadoopJobUtils.getHadoopTokens() method to get the configuration from the HadoopJobUtils.
I think this should be a while loop.
This should be a WARN instead of an ERROR.
I think this should be removed.
This is a bit hard to read. How about using a for loop instead of a for loop?
This is a breaking change.
I think we should use the constant here.
This is a debug statement.
I think this should be a warning.
This should be card.isEmpty()
This is a bit hard to read. How about using a method that takes a string and returns a string instead of a string?
This should be warn
I think this should be "your-job-id"
This is a bit hard to read. Can you please extract a method?
I think this should be moved to the registerCommands method.
I think this is a bit too long.
@bxf1231515 I think you can use the @Test(expected = IllegalStateException.class) here.
I think we should use the constant here.
You can use the newScale variable here.
I think this should be a static method.
I think this should be a constant.
This is a debug statement.
I think this should be mIsCreate, not mIsCreate.
Why do we need to sleep here?
I think this should be a Set<String>
I think this should be setLookAndFeel(getLookAndFeelInfo().getClassName())
I think we should use a Set here.
This is not a very useful error message.
This is not necessary.
This is a bit hard to read. Could you please extract a method to make it more readable?
please use java.util.Objects.equals()
I think this should be a WARN instead of an ERROR.
style nit: no braces around single line blocks
I think this is not necessary. The bamFile is already closed in the try block.
This is not a good idea. You can use a StringBuilder instead.
I think we should use the image descriptor here.
Why not just use the official way here?
I think this should be a constant.
I think this should be a WARN instead of an ERROR.
Please use assertEquals(String, Object)
I think this should be assertkeyPair(file, null);
this.forShareSupported = false;
I think we should return the value of the AndroidUtil.getFileNameFromPath(url) here.
I think we should return an empty collection here.
I think we should also check that the type is a subtype of the expected type.
this.schemaName = Objects.requireNonNull(schemaName, "schemaName");
nit: this is redundant
I think this should be taskConfig.getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTaskRunner().getTask
I think this should be a Config.
I think this should be a field of the View.
I think we should log the role name here.
nit: I think this is a bit strange to have a log message for the case where we have a task that has recordsQueued.
This is a good idea. You can use a File object to get the index and then iterate over the files.
I think this should be a switch statement.
I think this should be a static method.
I think we should use a try-with-resources here.
This is not needed.
wait.forElementVisible(internalLink.get(index)).getAttribute("href");
This is not needed.
Did you mean to remove this?
Should this be logged at error level?
why not just return the result of this method?
This is a bit hard to read. Can we make a helper method to set the scale and set the scale to the scale?
I think this should be a List<Group>
I think this should be scrollBy(0, mobileNavbarHeight, 0, mobileNavbarHeight, 0, mobileNavbarHeight, 0, mobileNavbarHeight, 0, mobileNavbarHeight, 0, mobileNavbarHeight, 0, mobileNavbarHeight, 0, mobileNavbarHeight, 0, mobileNavbarHeight, 0, mobileNavbarHeight, 0, mobileNavbarHeight, 0, mobileNavbarHeight, 0, mobileNavbarHeight, 0, mobileNavbarHeight, 0, mobileNavbarHeight, 0, mobileNavbarHeight, 0, mobileNavbarHeight, 0, mobileNavbarHeight, 0, mobileNavbarHeight, 0, mobileNavbarHeight, 0, mobileNavbarHeight, 0, mobileNavbarHeight, 0, mobileNavbarHeight, 0, mobileNavbarHeight, 0, mobileNavbarHeight);
This is not needed.
Should we log the exception here?
This is not needed.
I think this should be moved to the previous line.
This is not a good idea. You can use a Set instead of a Set.
This is a bit strange. I think it's better to use the toString() method.
I think this should be a for loop.
This is a breaking change.
I think this should be a warning.
I think this should be synchronized
I think this should be removed.
This is a bit confusing. I think it would be better to use a boolean variable to avoid the double parsing.
I think this should be a WARN instead of an ERROR.
I think this should be debug level
I think this should be a constant.
I think we should use a CountDownLatch here.
why not use the new method?
I think we should log the error here.
This is a breaking change.
I think this is not needed.
I think this should be a constant
This is a good idea. You can use a try-with-resources statement here.
I think we should use the same approach as in the onCreateView method.
This is a bit of a very bad idea. I think it would be better to use a stream instead of a for loop.
This should be set to true only if no results are set.
This constructor should be private.
I think this should be t.getPriority() != Thread.NORM_PRIORITY
Please use Assert.fail() instead of Assert.fail()
Should we add a null check for subscriptionKey?
I think we should also check that the group is not started.
I think this should be a warning.
I think this should be a switch statement.
I think this should be a constant
I think we should have a test for this.
Why do we need to check for msg here?
I think we should use the same name as the bundle name.
I think this is not necessary. The test will fail if the node is not available.
This is a bit of a duplicate of the one in the if statement above.
This is not a good idea. You can use the toString() method to build the string.
This is not a good idea. You can use a query to get the filter.
I think this should be moved to the parent.
I think this should be a PcapPacketException.
I think this should be synchronized
this.dot3adAggPortStatsLACPDUsTx = new Blue(buffer, Optional.of(4), buffer1));
This is not correct. You can't use the lowerBoundary, it is the lowerBoundary.
I think this is not needed.
I think we should use the new method here instead of the old one.
This is not a good idea. You can use a lambda here.
I think this should be a warning.
I think it would be better to check if the entry is expired before calling the check.
I think this should be the one above the other.
please use the following syntax: return failCanDoAction(() -> performActionForServicesOfServer());
This is a bit hard to read. Could you please extract a method to reduce duplication?
I think this check is not necessary. The check is done in the checkIsWorkspaceAssociated method.
This should be a WARN instead of an ERROR.
nit: s/ssp/ssp/ssp/ssp/ssp/ssp/ssp/ssp/ssp/ssp/ssp/ssp/ssp/ssp/ssp/ssp/ssp/ssp/ssp/ssp/ssp/ssp/ssp/ssp/ssp/ssp/ssp/ssp/ssp/ssp/ssp/ssp/ssp/ssp/ssp/ssp/ssp/ssp/ssp/ssp/ssp/ssp/ssp/ssp/ssp/ssp/ssp/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/s/
This is a breaking change.
I think you should use ContentModel.CONTENT_PROPERTY here.
I think this should be a warning.
Please use a more descriptive name.
I think we should use the [java.lang.String#replaceAll](<LINK_0>
This is a bit strange, why not just use the diamond operator?
I think this should be a constant.
This is not necessary.
I think this should be a switch statement.
This is a bit of a nitpicky, but I think it would be better to use a for loop here.
I think we should use builder.sb.length() > 0 here.
rename to decl
I think we should use the fGridLineColor.getColor() here instead of calling the method directly.
I think we should add a check for the first field in the list.
rename to rootEntry
@pynicolas Can we move this to the top of the class?
I think this should be a Set instead of a HashMap.
I think this should be in the constructor
Why not just use an enhanced for loop?
This is not needed.
Can we use a more descriptive name here?
I think this is a bit too complicated. It's not a big deal, but I think it's a good idea to use the same pattern as the one in the other class.
This is a bit confusing. I think it should be "dts".equals(getCodecA())
I think we should use assertThat(element.toString(), is(CLASS_NAME))
This should be a WARN instead of an ERROR.
I think this should be debug
I think this should be "root"
I think this should be logged as a warning.
Use a StringBuilder instead of a String.
I think it would be better to use the enum for the enum value.
@vilchik-elena Why not just use the expected exception type?
I think this should be a List<TermConceptMap> since we don't need to worry about the page anymore.
why not use the enum?
@bgeVam please use the same naming convention for readVarInt32
I think this is not needed.
This is not necessary.
This should be a constant.
This is not needed.
This is not needed.
This should be done in the ViewAdapter.
This is not necessary, the default is false.
I think this should be context = new Context(null);
This is not necessary.
This is a bit hard to read. I think it would be better to use the try-with-resources statement.
This is a bit confusing. I think it's better to use the same exception as the one that was thrown in the catch block.
I think this should be a separate test case.
I think we should log the exception here.
I think we should also test the case where the filter is not filtered out.
I think this should be a static method.
I think this should be a WARN instead of an ERROR.
This is not a config.
I think we should use assertEquals here.
I think this should be a constant.
I think we should throw an exception here.
I think this should be moved to the previous line.
I think it would be better to use the same error message as in the other test cases.
I think it would be better to use the matcher matcher here.
I think this should be snackbarErrorNotification.showError(R.string.course_dates_reset_unsuccessful, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
I think this should be a WARN instead of an ERROR.
I think we should log the exception here.
I think it would be better to use workspace name instead of workspace name
nit: I think we can use assertThat(mutated).isEqualTo(Duration.ofSeconds(5)).isEqualTo(Duration.ofSeconds(5)).isEqualTo(Duration.ofSeconds(5)).isEqualTo(Duration.ofSeconds(5)).isEqualTo(Duration.ofSeconds(5)).isEqualTo(Duration.ofSeconds(5)).isEqualTo(Duration.ofSeconds(5)).isEqualTo(Duration.ofSeconds(5)).isEqualTo(Duration.ofSeconds(5)).isEqualTo(Duration.ofSeconds(5)).isEqualTo(Duration.ofSeconds(5)).isEqualTo(Duration.ofSeconds(5)).isEqualTo(Duration.ofSeconds(5)).isEqualTo(Duration.ofSeconds(5)).isEqualTo(Duration.ofSeconds(5)).isEqualTo(Duration.ofSeconds(5)).isEqualTo(Duration.ofSeconds(5)).isEqualTo(Duration.ofSeconds(5)).isEqualTo(Duration.ofSeconds(5)).isEqualTo(Duration.ofSeconds(5)).isEqualTo(Duration.ofSeconds(5)).isEqualTo(Duration.ofSeconds(5)).isEqualTo(Duration.ofSeconds(5)).isEqualTo(Duration.ofSeconds(5)).isEqualTo(Duration.ofSeconds(5)).isEqualTo(Duration.ofSeconds(5)).isEqualTo(Duration.ofSeconds(5)).isEqualTo(Duration.ofSeconds(5)).isEqualTo(Duration.ofSeconds(5)).isEqualTo(Duration.ofSeconds(5)).isEqualTo(Duration.ofSeconds(5)).isEqualTo(Duration.ofSeconds(5)).isEqualTo(Duration.ofSeconds(5)).isEqualTo(Duration.ofSeconds(5)).isEqualTo(Duration.ofSeconds(5)).isEqualTo(Duration.ofSeconds(5)).isEqualTo(Duration.ofSeconds(5)).isEqualTo(Duration.ofSeconds(5)).isEqualTo(Duration.ofSeconds(5)).isEqualTo(Duration.ofSeconds(5)).isEqualTo(Duration.ofSeconds(5)).isEqualTo(
I think this should be a RuntimeException
Why not just use a for loop here?
This is a bit strange, but I think it's better to use the title of the song instead of the name.
I think we should use the new method here.
I think this test should be in a separate test.
I think this should be moved to the previous line.
I think this should be a stream instead of a stream.
I think this is a good idea.
@vilchik-elena Why not just return new Hex().decode(s.getBytes()).decode(s.getBytes()); ?
You can use the Single.just("foo").delay(1, TimeUnit.SECONDS)
This is a bit hard to read. Can we use a stream here?
Shouldn't this be "finishTaskInErrorTask"?
I think this should be a while loop.
You can use WebPage.createWebPage() here.
why not use the diamond operator?
This should be a static method.
I think this should be a warning.
I think this should be a WARN instead of an ERROR.
I think this should be diskInfoDestinationMap.values().stream().map(DiskImage::getStorageIds).forEach(diskInfoDestinationMap::values);
I think this should be a static method.
@ivandalbosco Why not use the diamond operator?
I think this should be initialized in the constructor, not here.
This is a bit hard to read. I think it would be better to use a method reference here.
This is a bit hard to read. Can we make this a switch statement?
I think it would be better to move this check to the WorkspaceState constructor.
I think we should use ctx.getMsgType().ignoreEpoch here.
Please use NetworkUtil.isConnected(email) instead of this.network_not_connected_short.
This is a breaking change.
This is not necessary.
I think this should be moved to the wizard.
Please use the constant here.
I think this should be:  if (StringUtils.isNotEmpty(accessObject)) { return true; }
This is a good idea. We should probably throw an exception instead of returning null.
I think we should also check that mInvocationStarted is not null here.
I think this should be scheduleFinalStub.isPresent()
This is a bit confusing. I think it would be better to have a separate method for the two cases.
This is a bit weird. I think it would be better to use the same approach as the other methods.
I think we should use the same approach as in the other filters.
This should be package private.
I think this should be a stream().map(BioWorkflow::class::cast).collect(Collectors.toList());
I think we should use a lambda here.
I think we should use the same name as the method name.
This is a good candidate for a try-with-resources block.
I think this should be a WARN instead of an ERROR.
I think this should be a WARN instead of an ERROR.
I think this should be a switch statement.
This is not a valid state. You should use the configuration.getClientBehavior().getChangePackageFragmentSize()
This should be a List, not a List.
I think this should be a constant
This is not correct. You can use adapter.getCount() == 0
I think we should use assertEquals here.
I think this should be a while loop.
I think this should be a warning.
I think this should be a warning.
I think this should be _maxAllowedCapacity
I think this should be a warning.
I think we should add a check for the error code here.
This should be a constant.
I think this should be "Core"
You can use assertj.
nit: this(retries, DEFAULT_PREFIX)
I think this should be a constant
I think this should be a field of the class, not a field.
I think this should be a boolean
Shouldn't this be set to the default value?
I think this should be in the try block to ensure the file is closed.
This is not a good idea. You can use the same API for all the server versions.
This is a bit strange. If the domain name is empty, the domain name is empty. I think it would be better to use StringUtils.isEmpty() here.
This should be a constant.
This is not needed.
This is not a good idea. You can use assertEquals(expected, actual)
I think this should be protected.
Why do we need this sleep?
This is a debug statement.
I think it would be better to use ShellIsAvailable instead of ShellIsAvailable
I think we should use assertIndexMap.isEmpty() here.
This is not correct. The value of the object is the same as the other.getDateCreated().
I think this should be a constant.
I think we should use the same approach as in the other methods.
I think this should be debug level
I think this should be done in the constructor.
This is a good idea.
This is a debug statement.
I think this should be synchronized
I think this should be Boolean.parseBoolean(miso.autoGenerateIdentificationBarcodes)
I think we should use the same auth system for all tests.
I think this should be a List, not a List.
I think this should be:  if (triggerConfigURL != null) { this.triggerConfigURL = triggerConfigURL; } else { this.triggerConfigURL = triggerConfigURL; }  This is the only place where the triggerConfigURL is set.
This should be a warn instead of an error.
I think this should be a return statement.
I think this should be a constant
This is not needed.
I think we should use the same approach as in the consumer.
This is a bit of a nitpicky, but I think we can just do this in the try block.
This is a bit confusing. I think it would be better to use a switch statement here.
Extract the building of the ResponseMessage to it's own variable (in eclipse, select the text, right-click > refactor > extract local variable / select code + shift+alt+L). This will make the code a bit more readable, especially when you'll be passing in other things besides the ResponseMessage.
I think this should be in the init method.
This is a bit strange, but I think it's better to use the same approach as the one in the constructor.
I am not sure if this is a good idea. If we are going to add a task to the task, then we should not have to add a task to the task.
This is a bit hard to read. Can we use a Set instead?
I think this should be a constant.
please use formatter
I think it would be better to use workspace.getProject(project) instead of project.getProject(project)
This should be a constant
rename to child or child
I think this should be private.
I think this is a bit strange. I think it would be better to use the StringBuilder instead of a String.
I think we should use mPresenter here instead of mPresenter.
I think this should be a ResourceNotAvailabeException, not a ResourceNotAvailabeException.
I think this should be in the if statement.
I think this should be setPort(getOrDefault(config.get(IotaBindingConstants.PORT), getPort()));
This should be error
This is not a good idea. You can use MoreObjects.toStringHelper()
I think we should also check if the value is not null.
This is not needed.
I think this should be Map<String, Object>
I think this should be a List<IProposalProvider>
I think this should be set to null, not set to the default value.
minor: can be simplified to:  java valueRawHashList.set(nodePointerToUse, valueOnlyRawHash);
This is a bit hard to read. How about using a query query instead of a query?
I think this should be done in onSuccess()
This should be a static field.
I think this should be called only if the card is not available.
return !isReady()
This is not needed.
This should be maxStackSize
I think this is a bit too complicated. It's not a big deal, but I think it's a good idea to have a method in the API.
I think this should be error level.
Please use the constant here.
I think this should be a WARN instead of an ERROR.
I think this should be a CoreException.
nit: I think this is a bit confusing. I think it would be better to have a single return statement in the if statement.
This is not a good idea. You can use a StringBuilder instead.
I think we should use the default value for the message.
I think this should be wrapped in a try/catch block.
I think it would be better to use By.tagName() here.
I think this should be ContainerScheduler.createContainerScheduler(context)
I think this should be synchronized
nit: maybe use assertTrue(timeoutFuture.isCancelled());
I think this is a bit too long.
This is a good candidate for a method to be static.
I think this is not necessary.
I think this should be a Future<T>
I think we should use the same approach as in the other methods.
This should be a List, not a List.
I think this should be moved to the top of the method.
This is not needed.
Should this be in.skipFully(length)?
This is not needed.
I think this should be a WARN instead of an ERROR.
This is a bit hard to read. Can we just use a lambda here?
nit: can be simplified to if (configMap.getData().equals(previousData)) {
I think this should be moved to the reloadIfRequired() method.
I think you can use Arrays.stream(getFeatureByName("Second feature").getElements())
This should be "itemcategory-standaloneprojects"
I think this should be a Set<Integer>
I think this should be in a @Before method
I think this should be in a finally block.
I think this should be a constant.
I think this is a bit too complicated. I would prefer to have a method in the pluginConfiguration that takes a parameter and then call it from the method.
This should be a constant
Please use the diamond operator.
I think we should log the exception here.
This is a bit of a nitpicking, but I think it's better to use the same code as the previous one.
I think it would be better to use the enum values instead of hardcoding the string.
I think this is a bit too complicated. Maybe we can extract it to a method?
This is not needed.
I think you can use a for-each loop here.
I think this should be replaced with new ArrayList<>(region.getKey(oldKey))
I think this should be error
This is not necessary.
I think this should be a WARN instead of an ERROR.
This is not correct. You can't parse the token.
I think we should use a constant for the literal "0"
I think we should use the same approach as in the other methods.
I think this is a bit too complicated. It's not a big deal, but I think it would be better to use the same approach as the other one.
rename to pack
I think this should be called in the initRuleRuntimes method.
I think this should be a WARN instead of an ERROR.
This is not needed.
I think this should be removed
nit: s -> s -> s.stream().map(TaskSource::getSplits)
This is not necessary. The check for is not necessary.
I think this should be "systemName"
I think we should also check that the rule is not null.
I think this should be a Set<Client> not a List<Client>.
This is not needed.
I think we should use Kind.LITERAL here.
I think this should be in the transaction
I think this should be a constant.
I think this should be a constant
I think this should be a warn instead of an error.
I think it would be better to use the new CommandInterpreter here.
This is not correct. The first occurrence of the first match is the first match.
I think this should be a warn instead of an error.
I think you can use verify(view, times(1)).showBusyIndicator();
I think we should have a test for this.
I think this should be private.
@ivandalbosco Why not use a for loop here?
I think this should be:  java if (this.entityConstructor == null) { return this.entityConstructor; }
I think this should be a constant.
I think this should be done in the constructor, not here.
I think this is a bit too long. Can we use a smaller number of files?
I think we should use a linked list here.
This should be a WARN instead of an ERROR.
I think this should be a WARN instead of an ERROR.
This is a bit confusing. If you have a problem with the code, you should be able to use the Java 8 syntax.
I think this should be a try-with-resources block.
I think this should be removed.
This is a breaking change.
I think this should be a constant.
This is not necessary.
You can use the @Rule TemporaryFolder to avoid the need for the @Before method.
This is a bit hard to read. Can we make it a static method?
I think this should be "jaas.file.name"
This is a bit confusing. I think it would be better to use a constant for "bed"
please use org.ovirt.engine.common.utils.Validate.isNullOrEmpty()
nit: I think this is a bit more readable as a map.
I think we should use Objects.equals() here.
I think this should be a WARN instead of an ERROR.
I think this should be return response(req -> ok(systemConfig.getApiTermsOfUse()));
I think this should be a WARN instead of an ERROR.
This is a bit of a duplicate of the code in the method above. Can we refactor it?
nit: you can use the constant here
I think we should use the same approach as in the other registerDefaultExceptionMapper() method.
I think you can use the FileRepository.getAbsolutePath() method here.
I think this should be synchronized
I think we should throw an IllegalArgumentException here.
I think this should be a constant.
I think we should use the same approach as in the other classes.
This is a debug statement.
This is a very unreadable way of handling the exception. I think it would be better to use a try-with-resources statement.
I think this should be a loop.
I think this should be trace.getTraceClass().newInstance()
This is a bit hard to read. I think it would be better to use the string format here.
I think this should be a constant.
I think this should be a constant.
This should be a constant
I think this should be a Mono.just() call.
I think this should be a WARN instead of an ERROR.
This is a bit confusing. How about adding a check for the day-of-day-day-day-of-day-of-day-of-day-of-day-of-day-of-day-of-day-of-day-of-day-of-day-of-day-of-day-of-day-of-day-of-day-of-day-of-day-of-day-of-day-of-day-day-of-day-of-day-of-day-day-of-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-of-day-day-day-day-day-of-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-day-
Use the try-with-resources syntax here.
Please use {} placeholders for logging.
I think we should have a test for that.
This is not necessary. The check for null is done in the constructor.
I think this should be in the try block.
Shouldn't stopAllGrids() be called after stopAllGrids()?
I think this is a bit too long. Can we just use the File object directly?
please use StringUtils.isEmpty()
I think this should be a loop.
I think this should be a constant
This is a bit hard to read. Can you please extract a method to avoid duplication?
This is a debug statement.
This is not needed.
status.equals(status) is a bit more readable
I think we should use the matcher matcher here.
I think this should be in a finally block.
Why is this needed?
Why not just return the size?
return other == other;
I think this is not needed.
I think this should be a static method.
I think this should be moved to the previous line.
Why do we need to sleep here?
This is not needed.
Shouldn't this be a constant?
This is not a block.
I think this should be moved to the top of the method.
I think this should be a try-with-resources block.
nit: I think we can use the following:  java if (BooleanUtils.isTrue(verifyBucketsSupport(config, client)) {
I think you can use the Objects.hashCode(item.hashCode()) here.
suggestion assertEquals(expectedScores, expectedSift, scoreComparator) >= 0);
I think we should use a try-with-resources here.
I think we should use the same name for both menu and menu.
This should be a static method.
I think this should be a ConcurrentHashMap.
I think this should be a constant.
I think we should use the same timestamp as the one in the test.
I think this should be a warning
You can use the trace variable here.
I think this should be debug
I think this should be a WARN instead of an ERROR.
I think it would be better to use the template id instead of the template id.
click() should be called beforeclick()
please use Assertion.assertEquals
This is a good idea. You can use the default constructor to set the default value.
Should this be setRadix(int radix)?
I think this should be debug level
I think we should use the same constant here.
I think this should be private.
I think this is not needed.
I think it would be better to use Objects.hash() here.
You can use method reference: suggestion return memberDescriptions.stream().flatMap(desc -> desc.members().stream()).collect(Collectors.toList());
I think this is a bit more readable.
I think this should be in the @Before method.
This is a bit strange. I think it should be a constant.
I think we should use a CountDownLatch here.
I think we should use the same key for both PutOperation and PutOperation.
I think this should be a constant.
I think this should be assert category.getCategoryCode() != null
I think this should be a WARN instead of an ERROR.
I think this should be a constant
This is a bit hard to read. Can you please extract a method to reduce duplication?
I think this is a bit strange. I think it's a bit hard to read.
Pair is a bit confusing. I think it would be better to use the key directly instead of the key.
I think it would be better to log the exception here.
I think this should be a logger.
Why not just use the new method referenceSequenceFileFactory.loadDictionary(dictionaryIn);?
I think it would be better to use the new method here.
I think this should be a warning.
I think this should be removed.
I think this should be removed.
I think this should be a method reference.
This should be a defensive copy of the list.
This should be a switch statement.
I think this should be a List<PermissionSet>
This is a bit hard to read. Can we use a switch statement here?
Why not just return the size of the set?
This is not a good idea. You can use the invoice invoice to get the information from the database.
I think this should be assertTrue(result.isEmpty())
This is a breaking change.
I think we should use the same pattern as in the rule rule rule rule rule rule.
I think we should also verify that the correct number of events were sent
Please use the same style as the other options.
This is not a valid header.
This is a breaking change.
I think this is not necessary.
Why not just use float?
I think this should be a static method.
I think this should be debug
This should be a WARN instead of an ERROR.
I think it would be better to use the new method here.
This is a good example.
I think we should use the new Datastore(key, value) method here.
rename to member
I think this should be a warning.
I think this should be a WARN instead of an ERROR.
We should probably check for site != null here.
This is a breaking change.
I think this is a bit too complicated. Maybe we can extract it to a method?
@vilchik-elena Why not using the Objects.requireNotNull() method?
I think you should use the @Test annotation here.
I think this should be resetIkeState()
I think this should be a warning
I think we should use the constant here.
nit: remove extra line
Why not use the new ArrayList<>() method?
This should be a constant.
This is not a good idea. You can use a latch to get the thread.
I think this should be a constant.
I think this should be in a finally block.
I think we should also verify that the event is actually fired.
I think it would be better to use the default value for the default value.
I think it would be better to use the metadata.getDescription() here.
This test is not testing the student's name.
This is not needed.
rename to event
I think this is a bit too complicated. It would be better to have a single constructor that takes a String and then call the other one.
I think this should be in a finally block.
This should be a constant.
I think this should be protected.
I think this should be a constant.
please use getDbFacade().getAllForVolumeGroup(storageDomain.getstorage()) instead
This is a breaking change.
I think this is a bit too long. Maybe we can use a method reference here?
return new RangeSet<>(dimension, dimension);
I think this should be a constant.
I think this should be clientIntelligence(ClientIntelligence.BASIC).
I think this should be createLocalComposite()
I think it would be better to use StringBuilder instead of StringBuilder.
I think this should be a WARN instead of an ERROR.
I think this should be a Set<Version>
This should be a concurrent list.
I think we should use the same approach as in the other methods.
Why not just use the diamond operator?
I think you can use the new method here
I think this is not needed.
This is a pretty good candidate for a method to create a new one.
Should we log the exception here?
I think we should also test that blobName is not null.
This is not a good idea.
I think this should be done in the constructor instead of here.
Please use log4j parametrization instead of string concatenation.
This is a bit strange. I think you should use something like:  if (view == null) { throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT); }
This is not a good idea. You can use a switch statement to avoid the if statement.
I think this should be a constant.
nit: I think we can use the same approach as in the other tests.
I think this should be a constant.
This is a bit hard to read. I think it would be better to use the same pattern as the one above.
style nit: no braces around single line blocks
Why do we need to create a new validatorLocator here?
Please use assertEquals instead of assertEquals.
I think this should be moved to the try block below.
log.error("export-common-cartridge type error outputting assignments", e);
I think this should be a warning.
I think this should be: return (mWifiStateMachine.getAggressiveHandover() != null) ? mWifiStateMachine.getAggressiveHandover() : null;
I think this should be in the @BeforeClass method.
I think this should be synchronized
This is a bit hard to read. Can you please extract a method to avoid duplication?
I think this should be a constant.
Why do we need to wait for the network to be stopped?
I think this should be a try-with-resources block.
I think we should use the enum here.
please use injection for VdcRetValue
This is a bit hard to read. I think it would be better to use the map.keySet() method instead of the keySet() method.
I think this should be in a finally block
I think this should be a static method.
I think this should be a warning.
I think this should be a WARN instead of an ERROR.
Why is this needed?
This is not needed.
I think this should be a static method.
I think this should be private
I think we should add a check for the result of the message to be sure that the message is not valid.
I think this should be softly.assertThat(query.getParameterBindings().get(0).getName()).isEqualTo("age");
I think this should be removed
I think it would be better to use Collections.unmodifiableList() here.
This is not needed.
I think this should be a warn.
assertEquals(totalConnectionsCount, connectionTracker.getAvailableConnectionsCount());
Why not assertEquals(1, message.getPayload()).getFieldNames().get(0).equals("message")?
This is not needed.
This is a bit hard to read. Can we use a method to parse the addressBytes?
I think this should be package-private.
I think this should be a warning
I think this should be !getMapGenerator().requiresInternetConnection()
I think we should use the tag tag here.
This is not a valid value. You should use the session id.
This should be a Set, not a Set.
I think we should log the consumerConfig here.
This should be a logger.error
I think this should be int
I think this should be a list of rules, not only the first one.
I think this should be a PrestoException.
I think this should be a static method.
I think this should be a constant.
requireNonNull
I think this should be in a finally block.
This should be a WARN instead of an ERROR.
I think this should be a try-with-resources.
I think we should use the same approach as in HttpEntityEnclosingRequestBase.
I think this should be removed.
This is not a good idea. You can use a StringBuilder instead.
I think we should use the serviceReference here instead of the serviceReference.
I think this should be a ClassCastException.
Why do we need to sleep here?
This is not correct. You can use the bigTo.subtract(bigTo).subtract(bigTo).subtract(bigTo).subtract(bigTo).subtract(bigTo).subtract(bigTo).subtract(bigTo).subtract(bigTo).subtract(bigTo).subtract(bigTo).subtract(bigTo).subtract(bigTo).subtract(bigTo).subtract(bigTo).subtract(bigTo).subtract(bigTo).subtract(bigTo).subtract(bigFrom).subtract(bigFrom).subtract(bigFrom).subtract(bigFrom).subtract(bigFrom).subtract(bigFrom).subtract(bigFrom).subtract(bigFrom).subtract(bigFrom).add(BigInteger.ONE));
I think this is not needed.
nit: can we move this to the top of the method?
I think we should use a lambda here.
I think you can use a more descriptive name here.
I think this should be a WARN instead of an ERROR.
nit: you can use the method referenceTable.getResolvedJoinPaths(table, column.getName())
I think this should be a constant
This should be a constant.
I think this should be a constant
I think this should be a stream.
This is not necessary.
I think this should be a WARN instead of an ERROR.
I think we should throw an exception here.
I think this should be configFile.
nit: this(kijiTableLayout, tableURI, new Function<KijiTableLayout, tableURI, new Function<KijiTableLayout, tableURI, new Function<KijiTableLayout, tableURI, new Function<KijiTableLayout, tableURI, new Function<KijiTableLayout, tableURI, new Function<KijiTableLayout, tableURI, new Function<KijiTableLayout, tableURI, new Function<KijiTableLayout, tableURI, new Function<KijiTableLayout, tableURI, new Function<KijiTableLayout, tableURI, new Function<KijiTableLayout, tableURI, new Function<KijiTableLayout, tableURI, new Function<KijiTableLayout, tableURI, new Function<KijiTableLayout, tableURI, new Function<KijiTableLayout, tableURI, new Function<KijiTableLayout, tableURI, new Function<KijiTableLayout, tableURI, new Function<KijiTableLayout, tableURI, new Function<KijiTableLayout, tableURI, new Function<KijiTableLayout, tableURI, new Function<KijiTableLayout, tableURI, new Function<KijiTableLayout, tableURI, new Function<KijiTableLayout, tableURI, new Function<KijiTableLayout, tableURI, new Function<KijiTableLayout, tableURI, new Function<KijiTableLayout, tableURI, new Function<KijiTableLayout, tableURI, new Function<KijiTableLayout, tableURI, new Function<KijiTableLayout, tableURI, new Function<KijiTableLayout, tableURI, new Function<KijiTableLayout, tableURI, new Function<KijiTableLayout, tableURI, new Function<KijiTableLayout, new Function<KijiTableLayout, new Function<KijiTableLayout, new Function<KijiTableLayout, new Function<KijiTableLayout, new Function<KijiTableLayout, new Function<KijiTableLayout, new Function<KijiTableLayout, new Function<KijiTableLayout, new Function<KijiTableLayout, new Function<KijiTableLayout, new Function<KijiTableLayout, new Function<K
This is not necessary. The process is already set by the process.
This is a breaking change.
I think this should be assertThat(command.isConsoleAddressPartiallyOverridden(mergedAddresses), is(true));
This is a bit confusing. I think it should be a boolean.
I think we should use volumeMount instead of volumeMount
I think we should use the same naming as in the other files.
I think this should be a WARN instead of an ERROR.
I think this should be loaded in the constructor instead of here.
I think this should be the other way around:  java if (this.name != null) { return Objects.hash(this.name, this.name); }
I think this should be a SpongeExecutorService.
I think this should be a synchronized block.
I think this is a bit strange. I think it would be better to use a StringBuilder instead of a StringBuilder.
nit: I think we can use Optional.ofNullable(metricName.safeTags())
I think this should be a WARN instead of an ERROR.
This should be a static method.
I think this should be removed as well.
Should this be a different exception?
This is not a good idea. You should use the logger.log() method instead of the logger.log() call.
I think you should use assertEquals instead of assertEquals.
I think this should be a constant.
@ivandalbosco why not use the new JaxbJobReader(dataCleanerConfiguration)?
I think we should throw an exception here.
I think we should add a check for the options here.
This is not a very useful message.
This is not needed.
Please use the static import for the assertNotEquals method.
I think this should be a constant.
I think this should be a WARN instead of an ERROR.
I think this should be debug
I think we should also check that the downstream is null here.
I think this should be a ConcurrentModificationException.
This is a breaking change.
This is not needed.
I think this should be a CompletableFuture<CorfuInterClusterReplicationServerNode>
I think we should use the same timestamp for all the queries.
I think this should be a System.exit() call.
please use getDbUser(String principalName, String authzName) instead of this
I think we should log the exception here.
Why not use System.currentTimeMillis()?
nit: could you please use a lambda here?
I think we should use the new HashMap<>() here.
I think we should use synchronized here.
This is a bit confusing. I think it's better to throw an exception instead of returning null.
nit: I think we can use the static import here
I think you can use the new method here.
This is a good candidate for a method on the SingleSubscriber.
Please use Collections.singletonList()
nit: I think this is a bit confusing. I think it's a bit confusing to have a single access to the rangeRequest, and then the other one that calls this method is called.
This should be unimprovedHoursSpentInput.getValue().isEmpty() ? null : Long.parseLong( unimprovedHoursSpentInput.getValue().isEmpty() ? null : Long.parseLong( unimprovedHoursSpentInput.getValue().isEmpty() ? null : Long.parseLong( unimprovedHoursSpentInput.getValue().isEmpty() ? null : Long.parseLong( unimprovedHoursSpentInput.getValue() ));
This is not necessary.
I think this should be a CopyOnWriteArraySet.
This is a bit hard to read. Can we use a try-with-resources pattern here?
I think this should be a warning.
I think we should log the exception here.
This should be a warn
I think we should also check that the server is not null.
I think this should be removed.
This should be a separate method, no?
this.
I think this should be a static method, so that it can be reused in all tests.
I think this should be in a finally block.
This is not a good idea. You can use GanttLanguage.getInstance().getText(key) instead of GanttLanguage.getInstance().getText(key)
I think we should use the primitive type here.
I think this should be error
I think this is a bit too complicated. Maybe we can extract it to a method?
This is a bit confusing. I think it would be better to have a single listener in the listener.
This is a bit hard to read. I think it would be better to use the method reference here.
This is a breaking change.
I think this should be a warn
This is a bit hard to read. I think it would be better to use the string resource here.
This is not correct. You can't use the string "TRIVIAL_REBASE".equals(excludeDrafts)
This is not needed.
I think this should be a static method, no?
This is not necessary.
I think we should use the same pattern as in the other methods.
I think this should be a switch statement.
I think this should be BigInteger.ONE.
LOG.info("setBankState, setting bank state to: {}", ToStringBuilder.reflectionToString(bankState));
This is a bit confusing. I think it would be better to have a method that returns the FileStore and return the return value.
I think we should log the interval here.
The context is not used.
I think this should be moved to the try block.
I think this is not necessary.
please use model.getName() instead of calling toString()
I think this should be debug
return Optional.ofNullable(description);
This should be a constant.
IgniteCache<Integer, Integer> map = new HashMap<>();
I think we should use the same error message as in the other classes.
This is not a valid value.
This is not a good idea. We should log the exception and throw it.
nit: I think we can use the same approach as in the previous version.
please use injection for VmHandler
This is not a good idea. You can use a Set instead of a List.
I think this is a bit too much. It's not a big deal, but I think it's a good idea to have a static method for this.
This is not needed.
I think this is a bit too long. Maybe we can use a lambda here?
This is a bit confusing. I think it would be better to have a method to check if the time is available.
This is not correct. You can't use the "else" clause.
I think this should be in.close()
I think we should use the same approach as in the other createSpanIndexRequest method.
Boolean.TRUE.equals(b)
I think this should be a warning
I think we should use the same name for the component id.
I think we should also check that the exception is thrown.
I think this should be a constant.
I think we should log the replicated cache mode here.
please use vm.getStatus() == VMStatus.Suspended
I think you can use the new ArrayList<>(boardSize.width)
This is a bit of a hack to me. I think it would be better to have a method in InputPreprocessor that takes inputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, InputType, Input
Why not just use the SingleTokenStats directly?
This is a breaking change.
I think this should be a Set<AnnotationMirror>
I think we should use the same approach as above:  java if (CorsHeaders.isEmpty()) { // ... }
I think this should be a List<UUID>
I think this should be changed to something like lastDismissedReminderMoreThan24hAgo()
This should be a static method.
This is not a good idea. You can use TmfFilterTreeNode.isTrue(value)
I think this should be a switch statement.
please use injection for VdsDao
I think this should be a WARN instead of an ERROR.
I think this should be assertComparable.
I think we should use the new method instead of the old one.
I think we should throw IllegalArgumentException here.
This should be Long.valueOf(number.longValue())
I think this should be a PDOMExternalReferencesList.
I think this should be a warn instead of an error.
nit: I think this is a bit more readable if we just use Comparator.comparing(Row::getRaw)
Shouldn't we use the view's view's view?
I think you can use the SingleResponseHandler here.
I think this should be enlargeBuffer(buffer, engine.getSession().getPacketBufferSize())
why do we need to sleep here?
I think we should add the partitionProperties.getBody() to the message.
I think this should be sortedPositions.sort(ComparatorComparator.comparing(ComparatorComparator::reverseOrder).
This is not needed.
Why not use for(E ep : endpointProvider.iterator()) ?
I think this should be clientError.
nit: can we move this to the top of the method?
I think this should be errorComponent.cause(e).
This is a bit hard to read. Can we use a try-with-resources pattern here?
I think this should be synchronized.
This is not thread safe. You can use a synchronized block to protect the client from being removed.
I think you can use the new Rectangle(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
I think this should be a warning.
I think this should be a List instead of a List.
I think this should be moved to the addClasspath method.
@vilchik-elena Why not just use the same pattern as above?
I think this should be a constant.
I think this should be a List<JsonObject>
This is not a good idea.
I think this should be removed
why not use DbVm.getConsoleCurrentUserName()?
This should be private.
I think this should be a WARN instead of an ERROR.
I think this should be a WARN instead of an ERROR.
Please add a check for the storage domain
I think this is not needed.
This should be a List, not a Collection.
I think this should be a static method.
I think we should log the exception here.
I think this should be a constant
This should be a WARN instead of an ERROR.
I think this should be a LiteralTree.
This is a breaking change.
nit: I think it's better to use new left.getOutputSymbols().stream().filter(newLeft.getOutputSymbols().stream(), newRight.getOutputSymbols().stream())
This is a bit confusing. I think it should be a constant.
I think this should be a warning.
You can use Arrays.asList(Object[]...)
Why not just call runOnDisposalList() here?
This should be a constant
I think we should use the same naming as above.
I think this should be a RuntimeException.
I think we should use the try-with-resources pattern here.
Please remove this line.
I think this should be moved to the presenter.
I think we should also assert that the record is actually recorded.
I think we should use the new method here.
This is a bit of a very bad idea. I think it would be better to throw an IllegalArgumentException instead of returning null.
I think we should use the same name for all the test cases.
This should be tSocket != null && tSocket.getSocket().getInetAddress().getCanonicalHostName()
I think we should log the exception here.
I think it would be better to use the constant here.
This is a bit confusing. I think it would be better to have a single constructor that takes a list of inputIntervals and have the inputIntervals as a list of inputIntervals.
I think we should make this constructor private.
I think this should be in the if (deleteFiles) { deleteResources(); }
I think this test is not needed.
I think this should be a warning.
@vilchik-elena Why not just call error.add(new ProblemImpl(errorMessage, name, element)); ?
I think this log message should be updated to reflect the fact that the ingest has completed.
Is this needed?
This is a bit hard to read. Can we make it a static method?
I think this should be a WARN instead of an ERROR.
I think this should be a Set<Class<?>>
I think this should be removed.
This should be a warn
please use getStorageDomain() instead of getStorageDomain().getStorageDomain().getStorageDomain().getStorageDomain().getStorageDomain().getStorageDomain().getStorageDomain().getStorageDomain().getStorageDomain().getStorageDomain().getStorageDomain()
please use formatter
please use assertEquals
I think this is not needed.
I think we should use a logger here.
I think this should be debug
I think this should be a set, not a set.
I think we should add a log here to indicate that the task locks are expired.
This is not correct. You should use the equals method.
This should be a constant.
I think we should use the same approach as in CheckpointCheckpointSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshotSnapshot
I think this should be removed.
This is not necessary.
I think we should use the same name for both cases.
I think this should be a constant.
I think we should use the SecurityConfigResolver.INSTANCE.getInstance(COOKIE_SECURE_RESOLVER) here.
I think you should use the super.initInput() method here.
I think this should be in the onViewDismissOnClick() call.
I think we should also check the other fields of the expected fields.
I think this should be in the @Before method.
I think this is not needed.
I think this should be a Set, not a List.
Shouldn't this be done in the finally block?
This is a bit confusing. I think it would be better to use a regex to get the cookie and then parse the cookie.
I think this should be debug
This is not a good idea. You can just call handler.handleIncomingPacket(PacketInfo.getPacket().length, clock.instant());
I think this should be moved to refreshTextures()
I think we should use the symbol style here.
I think this should be private
I think we should use the new ArcGISScene here.
I think this should be a Map<String, Object>
@vilchik-elena Why not just use RichGroup?
I think this should be:  java this.message = ...
This is a bit hard to read. Can we make it a static variable?
Why do we need to catch NumberFormatException?
I think this should be a constant.
You can use new Date() instead of new Date()
I think this should be a static method.
This is a bit hard to read. Can we use a Set instead?
suggestion log.warn("Error occurred while sleeping", e);
I think this should be done in the constructor.
I think we should throw an exception here.
This is not correct. You can remove the email from the email.
I think this should be a for loop.
I think this should be:  if (this.errorMapper == null) { this.errorMapper = errorMapper; }  This will allow us to avoid the null check in the constructor.
I think this should be removed.
I think this is a bit too complicated. I think it would be better to use ASTClassOrInterfaceBodyDeclaration decl = decl.jjtGetNumChildren() - 1;
This is not a good idea.
I think this should be error
This is not correct. You can use the constant for the column name.
This is not needed.
I think we should make this constructor private.
I think this should be a constant.
I think it would be better to use the "qcow2" constant here.
This is not a good idea. The key is not the key.
I think this should be inside the if block, not here.
This should be a logger.error() call.
I think this should be a WARN instead of an ERROR.
I think this should be a filter instead of a filter.
This should be private.
I think we should use IFunction.class.cast(IFunction.class::cast) here.
I think this should be a constant.
I think this should be a DrlParserParser.
I think this is not necessary. The owner of the list is already being deleted by the user.
I think this should be a lock.
This should be a constant.
Why not just use z3Context.mkInt(1)?
I think this should be a WARN instead of an ERROR.
This is not a safe way to do this. You can just do: if (StringUtils.isBlank(nameToken)) { return; }
assertNull(runtimeTree.getItemById(ITEM_TO_REMOVE));
I think this should be StoragePoolInfoReturnForXmlRpc
This is not needed.
I think this should be a StringBuffer instead of a StringBuffer.
nit: I think we can use a lambda here.
I think it would be better to use the diamond operator here.
Please use the new method: <LINK_0>
This is not a good idea. You can use a local variable for this.
I think this should be config.getObject("args").unwrapped()
This is a bit hard to read. Can you please extract a method to make it more readable?
Can we use a more specific exception here?
I think this is a bit too complicated. I think it would be better to just check if the value is a Collection and not have a Collection.
Why is this necessary?
This is not correct. You can use UndoRedoManager.getInstance().update( UndoRedoManager.StatusMode.DISABLE_UNDO);
This is not necessary.
I think it would be better to use URL.forName("http://") instead of url.
I think we should use the same approach as in the other methods.
This is a good idea. You can use a lambda here.
I think this should be a property.
assertEquals(pckIn.readString(), is(pckIn.readString()));
This test is not testing anything.
I think we should use a constant for the property name.
I think this is not necessary. The folderObjLoader.getFolderObject() is already called in the @Before method.
I think we should log the error here.
I think we should use the same name as the other one, like my_first_time
I think this should be wrapped in a try-with-resources block.
I think we should use the same approach as in <LINK_0>
I think this should be a WARN instead of an ERROR.
I think this should be splitName(String fullName)
please use getStorageDomainId() instead of getStorageDomainId()
This is a bit confusing. I think it would be better to have a method like isTableExists(tableName) that returns the table name.
I think this should be a constant
remove
I think we should log the exception here.
This is not a branch, branch.getGuid() is not a branch.
I think this is a bit too long.
This is a breaking change.
I think this should be a static method.
You can use the bundle.loadClass(className) method to get the bundle.
I think this is not necessary. The metric limit is already set by the caller.
No, this is not needed.
nit: can we move this to the beginning of the method?
I think this should be a try-with-resources.
I think it would be better to use the ID of the ID here.
I think we should use the super.remove() here.
I think this should be a switch statement.
I think we should use the new API to get the cluster ID from the cluster.
I think this should be a WARN instead of an ERROR.
I think this should be a warning.
I think this is a bit too long.
nit: I think we can use assertFalse(lock.tryLock(29, "Should not be executed from majority partition " + lock + " " + lock + " " + lock + " " + lock + " " + lock + " " + lock + " " + lock + " " + lock + " " + lock + " " + lock + " " + lock + " " + lock + " " + lock + " " + lock + " " + lock + " " + lock + " " + lock + " " + lock + " " + lock + " " + lock + " " + lock + " " + lock + " " + lock + " " + lock + " " + lock + " " + lock + " " + lock + " " + lock + " " + lock + " " + lock + " " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + " + lock + "
I think this should be in the constructor, not here.
I think we should also test that the file is not in the root.
I think this should be error.
You can use assertThat(project.getLanguages()).isEmpty();
I think this should be:  java if (queryStateMap.put(queryId, queryState) != null) { queryStateMap.put(queryId, queryState); }
I think this should be a constant
Please use Preconditions.checkNotNull(protocol, "protocol cannot be null").
I think this should be assertEquals(0, compressedPayload.readableBytes())
I think we should use the new value for the property value here.
I think this is a bit too long.
This is not correct. The hostname is a hostname, not a hostname.
I think we should use the same approach as in the other actions.
I think this should be a try-with-resources block.
why not use randomRandom here?
I think this is a bit too long.
This is a bit hard to read. Can you please extract a method to reduce duplication?
IkeManager.getIkeLog() should be used here.
I think we should use the ClientRegistration here.
This is not needed.
I think this should be debug
I think this should be a try-with-resources block.
I think we should log the exception here.
Why not just use the Objects.toStringHelper() method?
I think this should be a WARN instead of an ERROR.
This is not a block, it should be block.getType() == fluid.getType()
nit: can we use partitioningScheme.isPresent() instead of source.getProperties().getNodePartitioning().get()?
I think this should be a field, not a field.
I think this is not needed.
I think this should be debug
I think we should use the same naming as the other variable names.
This is not needed.
I think this is not needed.
This is a breaking change.
This should be a WARN instead of an ERROR.
I think we should use the same style as the other tests.
I think we should log the exception here.
I think it would be better to use the default value of the default value instead of the default value.
I think it would be better to use the Task.getItem() method here.
This method should be private.
Shouldn't this be a warning?
remove
This is not a safe way to do this. The task list is a set, so you can just return the set.
I think we should use the service name here.
This is a bit confusing. I think it should be a switch statement.
I think this should be in a finally block.
This is a good candidate for a method in the GitException class.
I think this should be a warning.
I think we should add a check here to make sure that the result is not null.
I think it would be better to use the same name as the method name.
I think this should be a warning
I think this should be moved to the finally block.
please use static imports
This should be a part of the target target.
I think this should be a WARN instead of an ERROR.
I think this should be a call to aggregateStorage().read(request)
I think we should have a null check here.
I think this is not necessary.
I think this is not needed.
This should be a constant.
This is a bit confusing. I think it would be better to use the same approach as the one in the other method.
This is a bit strange. I think it would be better to use a Set<T> here.
I think this should be in a try-with-resources block.
I think this should be a constant.
I think this should be set in the constructor.
I think this is not necessary.
I think this should be cluster.isSetRequiredSwitchType()
I think this should be: if (skipSystemScope && org.apache.maven.artifact.Artifact.SCOPE_TEST.equals(scope)) { return true; }
I think this should be moved to the try block below.
This is not correct. You can use the video.allSources.
I think we should use a volatileLong here.
I think this should be a foreach loop.
This should be a CloudStorageException.
please use assertThat instead of assertThat
Should we use a constant for the prefix?
I think this should be removed
suggestion return path.normalize();
I think we should use the constant here.
This should be a synchronized block.
I think this should be debug
I think we should use the same name for the method call here.
this is not needed
This is not needed.
I think this should be a switch statement.
I think this should be a WARN instead of an ERROR.
This is a bit confusing. I think it would be better to have a method that takes a tag and then call the method with the tag name.
please use static imports
This is a bit hard to read. Can you please extract a method?
This is a bit confusing. I think it would be better to use a constant for the string value.
I think this is a bit too complicated. Maybe we could have a method for this?
I think this should be a constant.
I think this is not necessary.
I think we should check if the observer is not null before notifying it.
I think this should be a debug statement.
I think this test is not needed.
I think it would be better to use a constant for "workers1"
I think this should be a constant
please use {}
I think this is a bit too long. Maybe we can extract a method for the project and use it here?
I think this should be "name"
I think this should be a lambda
This is not a service. It should be a service service.
I think this is not needed.
I think this should be f.testLangFilterList.equals(testLangFilter)
I think we should use the same error message as "in the rule"
I think this should be a Preconditions.checkNotNull(columnIndex, "field is not nullable");
I think this should be in the try-finally block.
I think this should be a List<PropertyDescriptor>
I think we should use the same error message as the one that says what happened.
I think this should be a bit more readable:  java checkState(kind == Kind.INTERFACE, "Field spec is not set for fields", kind, name, fieldSpec.name, check);
I think this should be a warning
I think we should close the cache in finally block.
I think this is a bit too long. Maybe we can use a method reference here?
I think this should be a StringBuilder instead of a String.
@lautarobock why do you use a try-with-resources here?
I think this should be enabled only if the user is not enabled.
@vilchik-elena Why not just use the string builder?
why not use the constant here?
I think we should use the same approach as in the other log messages.
This is not a good idea. You can use the constant from the Constants.CUSTOM_OTHER_STATUS constant.
I think this should be a try-with-resources block.
This should be a constant.
This is not a part of the patch, but please remove it.
I think this should be debug
This should be a WARN instead of an ERROR.
I think we should also check that the result is not null.
This should be a WARN instead of an ERROR.
This is not a valid scenario. It should be a different exception.
I think this should be a List<Integer>
This should be a field of the class.
I think we should log the exception here.
why not use the constant for "GRAPHQL_V1_0"?
I think this should be a warn instead of an error.
I think we should use the same logic as in BuildService.
This is not a good idea. You can use a local variable to get the history entry.
I think we should check that the returned value is not null.
why not use the lockImage() method?
This is not a good idea. You can use a stream and then collect the list of links to the list.
@vilchik-elena Why not use the constant here?
I think this should be a try-with-resources.
I think we should use the same name as the other variable name
This is not correct. You can use Objects.equals(obj, element.getComponentType())
I think this should be a TskCoreException
I think this should be in the try block.
This is a breaking change.
why not using the commandEntity.getEngineSessionSeqId()?
I think you can use assertThat(newItemTypes(), containsInAnyOrder());
I think this should be a WARN instead of an ERROR.
This is a duplicate of the one in the previous if statement.
nit: I think we can use assertEquals here.
I think this should be removed.
This is not necessary.
Should this be a warning?
I think this should be called on the storage domain, not on the storage domain.
I think this should be a constant.
I think this should be a switch statement.
I think this should be a StringBuilder instead of a StringBuilder.
I think this should be a constant.
nit: I think this should be LockClient.ANONYMOUS
This is not a part of the scope of this PR, but it seems like this is not correct.
I think we should also check that the layout is not null.
This is not a good idea. You can use a logger instead.
This is a bit confusing. I think it should be a boolean.
This is a good candidate for a method in AbstractViewAdapter.
Objects.hash()
I think this should be done in the constructor
I think this should be a constant.
Shouldn't this be setProviders(Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<String, Map.Entry<
I think this should be error
Why not just use the new MessageAttribute() method?
I think this should be a try-with-resources block.
This should be a set, not a set.
I think this should be a switch statement.
I think this should be a IllegalArgumentException
This is not correct. The code should be in the same package.
I think we should add a null check here.
I think this should be a WARN instead of an ERROR.
This is a bit confusing. I think it would be better to have a single poll() method that takes a long time.
This should be a constant.
This is a bit strange. I think it would be better to throw an exception instead of returning null.
This is a deprecated message, not a deprecated message.
I think this should be inside the if block
I think this should be a WARN instead of an ERROR.
Remove this line.
This is a bit confusing. I think it's better to throw an exception instead of returning null.
I think we should use the same width as the previous line.
I think this should be a Set<String> instead of a Set<String>.
I think we should use SelenideLogger.commitStep(new SelenideLogger(context.getTestMethod().toString(), context.getTestMethod().toString(), context.getTestMethod().toString(), context.getTestMethod().toString(), context.getTestMethod().toString(), context.getTestMethod().toString(), context.getTestMethod().toString(), context.getTestMethod().toString(), context.getTestMethod().toString(), context.getTestMethod().toString(), context.getTestMethod().toString(), context.getTestMethod().toString(), context.getTestMethod().toString(), context.getTestMethod().toString(), context.getTestMethod().toString(), context.getTestMethod().toString(), context.getTestMethod().toString(), context.getTestMethod().toString(),
I think this should be a Flux.error
I think it would be better to use a Set instead of a Set.
I think this should be moved to the top of the method.
This is not a safe way to do this. You can just do: if (set) { return; }
I think this should be a Map<String, Object>
Can you please use the same approach as in the other methods?
This is not a good idea. You can use a StringBuilder instead.
This is a duplicate of the one above, why not just use the iterator?
I think this should be a warning.
Why is this needed?
This is not needed.
I think we should use the same approach as in org.jdk.jdk.proxy.ProxyProxyProxy.
@m-g-sonar I think we should use the same pattern as in the other tests.
This is a breaking change.
This is not necessary.
This is a bit of a bug, but I think it would be better to throw an exception instead of returning null.
This should be a static field.
please use StringUtils.join instead of StringUtils.join
I think this is a bit too complicated. It would be nice to have a method like parseContentType(String name, int value) that returns the schema and the schema.
I think we should use the constant here.
Why not add warningsSeen = warnings.get(warningsSeen) ?
I think this is a bit more readable:  java for (Type[] bounds : types) { if (bounds.length == 1) { result.add(bounds[j] }
I think it would be better to throw a more specific exception here.
This is not a good idea. You can't do this in the handle method.
I think we should check for null here.
This is not correct. The value of dimIndex >= dims.length is not the same as dimIndex >= dims.length.
This is not necessary.
This is a bit of a good idea. I think it would be better to have a single constructor that takes a tuple and then call it from the input schema.
I think this should be a List<ReplicaId>
I think this should be a query parameter, not a query parameter.
I think we should use a mocked mock here.
nit: Comparator.comparing(Row::getRaw)
this.encoding = Objects.requireNonNull(encoding, "encoding cannot be null");
I think this should be a constant.
This is a breaking change.
This is not a good idea. You can use the same approach as in the other methods.
I think this should be a property, not a property.
I think we should add a message to the exception.
nit: I think we can just do:  RowFilter filter = buildFilter(scan.getStartRow()).setRows(rowSetBuilder.addRowKeys(ByteString.copyFrom(scan.getStartRow()));
@bgeVam please use static imports for all of these
This is not needed.
I think this should be a WARN instead of an ERROR.
This should be a defensive copy of the map.
please use String.format()
This is a bit hard to read. How about using a for loop instead of a for loop?
I think this should be Comparator.comparing(Object::getComparator).
why are we catching the exception here?
This is a bit of a very good idea. I think we should have a more specific exception type.
I think we should check that the payment status is not null here.
I think this should be a warning.
I think this should be removed
I think this should be a null check.
I think this should be a registerKeyword( "general")
I think this should be moved to the onSuccessInterface.
Why not just use the constant from the registryAccountCombo?
This is a good idea.
This should be a WARN instead of an ERROR.
This is not needed.
I think we should use ZoneSecond.now().
I think we should add a null check here.
This should be a set of library alias.
This is a bit confusing. I think it would be better to have a method to check if the member is a member of the member.
I think this should be a switch statement.
I think this should be a RuntimeException
I think this is a bit too much. We should be able to use the module dependencies directly.
This should be a constant.
I think this should be preLongs.
I think you can use the Patient object here
I think this should be done in the constructor
I think we should log the exception here.
I think this is not needed.
I think we should remove the callback from the onAdded method.
I think you can use a linked list here.
This is not needed.
I think this should be a constant.
I think this is a bit too complicated. Maybe we can extract it to a method?
This is a breaking change.
please use injection instead of access to the method
This is not a good idea. You can use the new File(args) method to create the directory.
I think we should use the schedulerNode.getUnallocatedResource() here.
I think this should be removed.
I think this should be changed to:  java if (update == null || update.isEmpty()) { // update default value }
This is not a valid index name.
I think we should use the OAuthResponse.error(String, Throwable) constructor here.
I think it would be better to use the new enum here.
I think this should be a warning.
nit: can we add a metric for this?
I think this should be removed
return Long.MAX_VALUE;
please use getStorageDomainId()
I think this should be a try-with-resources block.
this.
this.
I think this should be removed.
This is a bit hard to read. Can we just use the same string as the other strings?
I think we should use the same timestamp as the one in the message.
I think this should be TIME_ENTER_UPDATER.
I think this should be a static method.
I think it would be better to use the diamond operator here.
Is this really needed?
Can we use try-with-resources here?
This is a bit hard to read. Can we make it a static method?
I think this should be a constant.
This should be a RuntimeException.
I think we should use the scrollableColumn here instead of the scrollableColumn.
I think this should be moved to the onInit method.
I think it would be better to use the bytebuffer instead of the bytebuf.
I think this should be a List<...>
I think this is a bit confusing. I think it would be better to have a separate method that takes a boolean and a boolean flag.
I think we should use labelFilter here.
I think this should be maxSubscriptions = Integer.toString(config.get("maxSubscriptions"), null);
I think we should use try-with-resources here.
This is a good candidate for a more descriptive message.
I think this should be a WARN instead of an ERROR.
I think this should be a constant
I think we should add a null check here.
I think we should add the listener to the presenter, not the listener.
This is not a good idea. You can use ctx.alloc().buffer() instead.
Why is this needed?
This is not needed.
This is a breaking change.
This should be a List, not a List.
I think this is a bit too complicated. Maybe we should use a StringBuilder instead of a String.
I think this should be called after the sort is disposed.
change to "appendNewLine"
nit: I think it's better to use String.format() here.
I think this should be: java if (supportedProtocols != null) { params.setProtocols(protocolSelector.evaluate(supportedProtocols)); } else { params.setProtocols(protocolSelector.evaluate(supportedProtocols)); }
This is not needed.
I think this should be "element == null"
I think this should be a constant.
Shouldn't this be set to null?
I think this should be private.
log.error(e.getCause(), e.getMessage());
We should not be throwing the exception here. We should be able to handle the exception in the callback.
This is a breaking change.
This is not needed.
This should be a WARN instead of an ERROR.
I think we should add a check for null here.
This is not a good idea. You can use the MatchHolder directly.
I think this is a bit too complicated. Maybe we could extract a method to reduce duplication.
I think this should be a String[] array.
I think this should be a static field.
This is not necessary.
I think we should remove the path if we remove the path.
I think this should be set in the constructor, not here.
I think this should be debug level
I think this should be a Comparator.comparing(Locale::getDefaultLocale)
I think this should be index == 0 && index.nextReady();
This is not a good idea. You can use the new method to set the address to the server address.
This is not necessary.
This is a bit strange, but I think it would be better to use the same approach as the other one.
This is a bit hard to read. Can we use a constant for the "http://"?
This is a bit hard to read. Can you please extract a method to reduce duplication?
This is a bit hard to read. Can we extract a method?
I think we should use the Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing(Comparator.comparing
Why not just use the empty string?
I think you can use the URL.resolveUrl(url) method to avoid the need for the URL.
This should be a constant
I think this is a bit too long. Maybe we can extract it to a method?
This is not a safe way to do this. You can just do return (resourceStatePolicy.isDown()) ? SOFT_DOWN : SOFT_DOWN;
I think this should be a warning.
I think it would be better to use the same approach as the one in CommandContext.java.
Shouldn't we call super.onResume() here?
Why not just return null?
I think we should check if the device is not null before calling the method.
I think this should be a separate method, no?
I think we should use the super(parentShell, repo, SHOW_LOCAL_BRANCHES, SHOW_REMOTE_BRANCHES, SHOW_REMOTE_BRANCHES, SHOW_REMOTE_BRANCHES, SHOW_REMOTE_BRANCHES); here.
nit: I think this can be simplified to return readStartpointMap(Collections.singleton(ssp)), false).get(null);
This is not correct. The other object is not equal to the other object.
This is a bit of a duplicate of the code above, maybe we should extract it to a method?
This is a bit hard to read. I think we should use a try-with-resources statement here.
nit: I think you can use assertQuery here
This is not a good idea. You can use the super class to get the version from the super class.
I think we should use the same name for the test.
I think this should be a warn
This should be a constant
I think this should be private
I think this should be a try-with-resources.
I think this should be a warning
I think this should be a try-with-resources.
This should be movedRegions.add(region.getEncodedNameAsBytes(), targetServer);
you can use the pageObjectLogging.log( "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "typeInSearchField", "type
I think we should add a check for the non-null value here.
You can use the same pattern as above.
I think this should be a static method.
I think this should be a RuntimeException
This is a bit confusing. I think it would be better to have a cache key for the remote connection.
I think we should also check the message of the message.
I think this should be the default
I think this should be a warn
This should be a WARN instead of an ERROR.
I think we should use the same pattern as in the Message class.
This is not a service, but the service manager should be registered by the service manager.
I think this should be set to null, and then the null check is not needed.
I think this should be firstSense.plus(presentValueCurveSensitivity((CouponIbor) swap.getFirstLeg().getNthPayment(j), interpolator))
This should be a method reference.
This is a good idea.
I think this should be a try-with-resources block.
This is a very good candidate for a method called showHighlightOnUiThread()
I think this should be a warning.
@vilchik-elena Why not use the method("POST") method here?
@pynicolas can you use a logger here?
I think this should be a property, not a property.
Why do we need to create topic here?
I think this should be moved to the finally block.
I think this should be written as a writeMessage(S message, Long key, Long key) method.
This should be a list of options, not a list.
This is a bit hard to read. You can use the following:  String resourceName = name.substring(1); if (name.startsWith("/")) { return name; }
I think this should be a Long
Can we use a mocked one?
I think we should use FileDialog.getDefault().getShell() here instead of String.
I think this should be a constant.
Can we use the constant here?
Shouldn't outputln be called outputln?
I think this should be a warning.
This is a bit hard to read. I think it would be better to use a static final String like this: Color color = Color.fromColor(value);
count is not used
This is a good idea. You can use the schema directly to the db.
nit: maybe use tk1.hashCode() instead of tk2.hashCode()
I think it would be better to use CompletableFuture.completedFuture(() -> CompletableFuture.completedFuture(createUnknownJobResult(jobId)))
This should be in a finally block.
This is a bit confusing. I think it should be a boolean and a boolean flag.
This is a good idea.
I think this should be a WARN instead of an ERROR.
I think we should use a stream here.
This is not needed.
This is not a good idea. You can use the new API to get the current user.
I think this should be a different exception.
This should be a new constructor.
You can use Collections.singletonList()
@dalifreire why you need to close the stream?
@marchof I think we should use the same name as the other way around
I think this should be a comparison check.
I think we should add the operator to the error message.
This is not a good idea. You can use a log.isDebugEnabled() here.
@vilchik-elena Why not use xpathRuleQuery here?
This is not correct. You can use the cookie.getHeader() method to get the cookie.
I think this is not needed.
I think this should be a field of the class, not a field.
This should be a constant.
Shouldn't we use equalsIgnoreCase instead of equalsIgnoreCase?
I think this is a bit too long.
I think this should be a constant
I think this should be a WARN instead of an ERROR.
I think we should use Closer.close() here.
Please use assertQuery() instead of assertQuery()
This is not needed.
This is a bit hard to read. How about using a method that takes a Instant and then call it from the Instant?
I think this should be a GdcErrorExtractor.extractData(response) method.
Collections.singletonList()
I think this is not needed.
I think this should be moved to the top of the method.
I think this should be waitForAndDismissAlertModal()
I think we should use the same name for both the two variables.
This should be removed.
I think we should use the default case for the default case.
I think it would be better to write the write method in the write method.
This is not needed.
I think this is a bit too long. Can we just use a single buffer instead of a buffer?
I think this should be a Text instead of a Text.
This is not correct. You can use the new APIProviderImpl(user, id) method.
Why not just use the underscore?
I think this should be a debug statement.
This should be a List, not a List.
nit: I think we can remove the else here.
I think this should be a switch statement.
I think this is not necessary. The paymentGatewayStateTransitions.isValidTransition() should be tested for the state transition.
I think this should be vds.getHostName()
I think we should use the spmMap.put(spId, host) method to avoid the need for the map lookup.
This is a duplicate of the code in the parent class. It should be extracted to a method.
I think we should add a check for null here.
I think this is a bit too long. Can we have a method in the graphNodePriorityQueue that takes a StreamGraphNode and then call it from the graphNodePriorityQueue?
I think this should be configurable.
I think it would be better to use the config.getCoordinatorSegmentBytes() here.
This should be private.
This is not needed.
I think we should use the same name for the method name as well.
I think we should use Collections.sort(List) here.
This is a bit of a nitpicking, but I think it would be better to use a List instead of a List.
I think this should be UnsupportedOperationException
This should be a constant
Shouldn't this be "Fail"?
I think this should be a lock.
This is a bit of a very good idea. I think it would be better to have a single catch block for the specific exceptions.
This is not a good idea. You can use the Class<? extends Module> to avoid the cast.
I think this should be a WARN instead of an ERROR.
This is a breaking change.
This is not a good idea. You can use the new ArrayList<>() method.
I think this should be RexLiteral.stringValue(literal)
I think this should be a constant.
I think this should be a switch statement.
I think this should be a switch statement.
This is a bit hard to read. Can we make it a static variable?
I think we should also check that the path is actually the same as the one in the path.
I think this should be in the constructor.
I think this should be a synchronized block.
I think this should be a constant
I think this should be a constant
I think this should be sorted by the comparator.
I think we should use a stream here.
I think this should be a WARN instead of an ERROR.
You can use the super.start(context) method to avoid creating the module sources.
I think this should be a warning.
I think this should be a fail() call.
This is not a good idea. You can use the same approach as in the other methods.
I think this should be a method on the class that is used to be used to get the active order.
I think it would be better to use the same name as the newVm, i.e. newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, newVm, new
I think we should move this line to the end of the method.
please use Collections.singletonList()
I think this should be a regex, not a regular expression.
I think this is not necessary. The message is already sent to the remote command.
I think this check should be done in the checkUser method.
This is a bit of a bug, but I think it would be better to use a Set instead of a Set.
This test is not very readable.
Why not just return the node status?
I think this is not necessary. The link is not included in the tag.
I think this should be a IndexOutOfBoundsException
I think this is not needed.
This is a bit confusing. I think it's better to have a method called addEndpoint(String port, int port) that takes a String argument.
Why not just use a linked list here?
This is a bit strange. I think we should use a logger instead of a string concatenation.
I think we should use the username and password here instead of the username.
This is not necessary.
@vilchik-elena Why not just use the diamond operator?
This is a bit hard to read. Can we make a method that takes a TProtocolException and then use that?
This is not necessary.
I think we should throw a AuthenticationException here.
This is not thread safe. You can use a thread safe one.
This is not needed.
I think this is not necessary. The modifiers.findFirstToken(TokenTypes.LITERAL_PUBLIC) will return the same value.
IgniteClientException is a runtime exception, so IgniteClientException is not a runtime exception.
suggestion com.amazonaws.services.lambda.events.models.lambda.events.models.lambda.events.models.lambda.events.models.lambda.events.models.lambda.events.models.lambda.events.models.lambda.events.models.lambda.events.models.lambda.events.models.lambda.events.models.lambda.events.models.lambda.events.models.lambda.events.models.lambda.events.models.lambda.events.models.lambda.events.models.lambda.events.models.dynamodbStreamRecord.clone();
I think this should be synchronized
I think this should be a Log.e
This is a bit hard to read. How about using a default value instead of a default value?
I think this should be a try-with-resources block.
This is not a safe way to do this. You can use SanitizationHelper.sanitizeForHtml(name)
This is a good idea.
I think this should be a StringBuilder instead of a String.
This is a bit hard to read. Can we use a static import?
Why is this needed?
Please use the same error message as above.
I think this should be a warning.
Can you use the constant for the property name?
This is not correct. It should be timestamp = timestamp == null ? timestamp : timestamp;
I think it's better to throw an exception here.
I think we should verify that the record is actually sent
This is not a good idea. You can just use the verifyToken method.
I think this should be removed as well.
I think this should be a static method.
This is not needed.
I think this should be a WARN instead of an ERROR.
Why do we need to check for the groupIds here?
This is not needed.
@vilchik-elena Why not use the [ ]*%s[ ]*%s[ ]*%s[ ]*%s[ ]*%s[ ]*%s[ ]*%s[ ]*>"?
I think it would be better to use the expectedException matcher here.
I think this should be !StringUtils.isEmpty(getOldDisk().getDiskAlias())
I think this should be a warning
I think this should be a WARN instead of an ERROR.
This is a bit of a very bad idea. I think it would be better to throw an exception instead of returning null.
Why is this needed?
I think we should use the message from the message to indicate the wrong message.
This is not a good idea. You can use the toString() method to get the hostname and name.
you can use the diamond operator here
This is not a good idea. You can use assertEquals(expected, actual)
This is not needed.
This should be removed.
This is not a good idea. You can use a for loop here.
Shouldn't this be a String?
return B == V;
This is not needed.
I think this should be a player instead of a player.
This is not a good idea. You can use the same message as the message.
This is a bit hard to read. Can you please extract a method for the sSize?
@vilchik-elena Why not just return TokenTypes.LAMBDA?
I think this should be private
Why do you need to sleep here?
This is not a "good" message.
I think this should be !TextUtils.isEmpty(text)
I think this should be a try-with-resources block.
I think this should be a try-with-resources block.
I think we should use the tenantDomain variable here.
I think this should be a constant.
I think this should be waitForVideoPlayerVisible(slotName)
This is not equivalent to the other.referenceBinding.equals(other.referenceBinding)
I think it would be better to use the same approach as in the other functions.
I think this should be a static method.
I think we should use the context here instead of the context.
This should be a field
This is a debug statement.
This is not necessary.
I think this should be error
This is not a metric registry.
I think this should be a Log.e
I think we should use the same pattern as in the other validateScanStartupMode method.
waitForElementByElement(driver);
This is a good idea.
@bdragan I think we should use the same name for both test cases.
This is not necessary. The dialog is already logged in the dialog.
This is not needed.
This is a bit confusing. I think it's better to use the following:  java int delta = value - 1; if (delta > 0) { return -1; } return -1;
This is a bit confusing. I think it would be better to use a Set instead of a List.
This is not a safe way to get the state from the disk, so you can get the state from the disk.
I think we should throw an exception here.
I think this should be a constant.
Why not just use the new method?
This is not needed.
I think this should be a constant
@dalifreire why you need to declare throws Exception here?
I think this should be a WARN instead of an ERROR.
I think we should use the same approach as in the test above.
I think this is not necessary.
I think we should use the same approach as in the other methods.
nit: I think we can remove this line.
This is not correct. The parent has a subsystem.
wait.forElementVisible(undeleteLinkBy);
I think this should be a constant.
I think this should be in a finally block.
I think we should add a null check here.
I think this should be SpongeMod.class.
You can use the new JsonReader(Paths.get(getPathToTestStatisticsResultsFile())) method instead of creating a new one.
I think this should be a Set instead of a set.
why not use the diamond operator?
I think this should be a lambda
This should be a File.
This is not necessary.
I think you can use assertQuery(() -> query(...) here.
I think this should be a constant.
This should be a constant.
I think this should be removed.
I think it would be better to move the logic to the BackendVnicProfileMapper.
I think this should be removed
I think this should be a constant
I think this should be a StringBuilder instead of a String.
I think this is a bit too complicated. It's not really clear what it is.
This is not needed.
why not use the VdcQueryType.GetStoragePoolById here?
I think we should also check the event listeners here.
I think we should use the platform default encoding here.
I think we should add ruleSetReferenceId.getRuleName() to ruleSetReferenceId.getRuleName()
I think we should also verify that the exception is not thrown.
This test is not testing anything.
I think this should be synchronized
Can you use the new ObjectMapper() method here?
I think we should use the same date as the date value as the date value.
This should be private.
This is a bit of a very long function. Can we move it to a method?
I think this should be a while loop.
I think we should add a null check here.
I think this should be a static method.
This is a bit hard to read. Can we use the same approach as the one above?
please use Map.Entry
I think this should be a String.
I think this should be "Jenkins Global Configuration File"
I think this should be a switch statement.
I think this should be a static method.
I think we should add a check for the block id here.
I think we should log the exception here.
this.keySize = Objects.requireNonNull(alg, "keySize is null");
I think this should be a warn
I think you should use the logger here.
I think we should log the exception here.
I think we should use StringUtils.isEmpty() here.
I think this is a bit too long. Maybe we can use StringUtils.isBlank(value) here?
I think this should be a WARN instead of an ERROR.
You can use mockChartData2D(editor) instead of mockChartData2D(editor)
I think this should be a WARN instead of an ERROR.
@bxf12315 I think we should use the new ArrayList<>(Arrays.asList(...)) here.
I think this should be removed.
This is not a good idea. You can use the logger directly.
I think this should be a return statement.
This should be a WARN instead of an ERROR.
Why is this needed?
This is not correct. The toString() method is not supposed to be called for any version.
I think this should be removed.
I think this should be a Set, not a List.
Please use InputNoCloneCheck.class.
I think this should be a WARN instead of an ERROR.
This is not a good idea. You can use a for loop here.
This is not needed.
This is not a good idea. You can use a lambda here.
I think this should be called "EditTextPreference"
I think we should use a lambda here.
This should be a constant
I think we should use the constant DtlsEndpointContext.HANDSHAKE_MODE_NONE here.
This is a bit of a hack to me. I think it would be better to use a string literal here.
I think this should be "Title", not "Title".
This should be a WARN instead of an ERROR.
This is a good candidate for a method to be used in the PlayerCubeMap.
I think it would be better to use XxHash64.hash(StandardTypes.REAL) here.
I think this should be "canBeMember"
I think it would be better to use the 'getForceDelete' method here.
I think it would be better to use the default value of the default value of the default value of the default value of the default value of the default value.
I think we should return an empty list here.
This is not a good idea. We should not be using the query builder.
I think this is a bit confusing. I think it would be better to have a method called something like isSealed(DataNodeId mountPath) and then call it from the method.
Please use the same naming convention for both classes.
I think this should be a separate method.
I think this should be a constant.
This is not necessary.
This should be error
This is not needed.
This is not needed.
I think this is not necessary.
I think this should be a warning.
Please use the same error message as above.
You can use the try-with-resources pattern here.
This is a good candidate for a method in NodeConfiguration.
I think this is not needed.
I think this should be a foreach loop.
I think this should be a synchronized block.
I think this is a bit more readable if you just split the string first.
This is not correct. The maximum should be the minimum and not the maximum.
nit: I think it's better to use offsetLimits.computeIfAbsent(newLimits, newLimits)
I think we should use CDebugUtils.getFileParts(missingFileParts) here.
I think this should be a TmfTraceUtils.getTrace()
I think this should be a constant.
I think this should be a WARN instead of an ERROR.
I think this is not necessary.
I think this should be removed
nit: I think this can be written as  java checkArgument(missingKeysPageBuilder.isEmpty(), "indexKeysRecordSet must have same schema as missingKeys");
I think this should be a more specific exception.
Shouldn't this be "addNetworkPartitionDeployment"?
This should be error
This is a bit confusing. I think it would be better to have a method to do this.
I think we should use the Client.getBlobId() here.
I think this should be a StringBuilder instead of a String.
I think this should be clientDetailsIdPCache.acquireReadLockOnKey(key)
remove
This is a good idea. You can use the new method to get the object from the cache.
please use formatter
This is a bit of a nitpicky, but I think it would be better to use ProgramEnrollmentService.updateProgramEnrollment(stateUuid) instead of programEnrollmentService.updateProgramEnrollment(stateUuid)
This is a bit confusing. I think it should be long.
I think it would be better to use the same name as the command action, i.e. actionState
I think this should be in the try block.
I think we should also check the message of the exception.
This is a good candidate for a method to be used in the public API.
This is not correct. You can use the same pattern as the field name.
This is not a valid error message.
I think it would be better to use the toStringHelper method here.
I think this should be moved to the previous line.
I think this is a bit more readable: java return (Character.isWhitespace(string.charAt(i))) && (Character.isWhitespace(string.charAt(i)))
This is a bit confusing. I think it's better to use a for-loop to get rid of the loop.
I think this should be a static method.
This should be a TableMetadata.
This is not needed.
I think we can use the new method here:  checkColumnType(alias, alias, alias) .add(getChecksumAlias(column), testResult.getChecksumAlias(column)) .add(getChecksumAlias(column)) .add(getChecksumAlias(column)) .add(getChecksumAlias(column)) .add(getChecksumAlias(column)) .add(getChecksumAlias(column)) .add(getChecksumAlias(column)) .add(getChecksumAlias(column)) .add(getChecksumAlias(column)) .add(getChecksumAlias(column)) .add(getChecksumAlias(column), checkColumnType(alias)));
Please remove this line.
I think this should be cachedOwnAttrs.put(attr.getName(), attr)
I think this should be debug level.
I think this is not necessary. The mockedUserResponse.setClient(new BitreserveRestAdapter("foobar")); is already called in the mockedUserResponse.
I think we should use the logger instead of System.out.println.
I think it would be better to use the new int[] newIds instead of new int[].
You can use CollectionUtils.isNotEmpty(eventsList)
nit: I think we can just do this:  java return this;  and remove the assignment to the assignment below.
I think we should log the exception here.
I think this should be a constant.
I think this is not needed.
I think we should log the exception here.
return "" + index;
I think this should be:  ComparisonChain.start() .compare(unbreakable, o.hideCanRemove().get()) .compare(unbreakable, o.hideCanRemove().get()) .compare(unbreakable, o.hideCanRemove().get()) .compare(unbreakable, o.hideCanRemove().get()) .compare(unbreakable, o.hideCanRemove().get()) .compare(unbreakable, o.hideCanRemove().get()) .compare(unbreakable, o.hideCanRemove().get()) .compare(unbreakable, o.hideCanRemove().get()) .compare(unbreakable, o.hideCanRemove().get()) .compare(unbreakable, o.hideCanRemove().get()) .compare(unbreakable, o.hideCanRemove().get()) .compare(unbreakable, o.hideCanRemove().get()) .compare(unbreakable, o.hideCanRemove().get()) .compare(unbreakable, o.hideCanRemove().get()) .compare(unbreakable) .compare(unbreakable) .compare(unbreakable, o.hideCanRemove().get()) .compare(unbreakable) .compare(unbreakable, o.hideCanRemove().get()) .compare(unbreakable) .compare(unbreakable, o.hideCanRemove().get()) .compare(unbreakable, o.hideCanRemove().get()) .compare(unbreakable, o.hideCanRemove().get()) .compare(unbreakable, o.hideCanRemove().get()) .compare(unbreakable) .compare(unbreakable, o.hideCanDestroy().get()) .compare(unbreakable, o.hideCanRemove().get()) .compare(unbreakable) .compare(unbreakable, o.hideCanDestroy().get()) .compare(unbreakable) .compare(unbreakable) .compare(unbreakable) .compare(unbreakable) .compare(unbreakable, o.hideCanRemove().get()) .compare(unbreakable) .compare(unbreakable) .compare(unbreakable) .compare(unbreakable, o.hideCanRemoveRemoveDiscellaneous) .compare(unbreakable) .compare(unbreakable) .compare(unbreakable) .compare(unbreakable) .compare
@bgeVam please use assertThat(out).hasSize(2)
I think this should be traceEntry.getCurrentEndTime()
I think this should be a constant.
I think it would be better to use the new PatternScatterGraphViewer(NonNullUtils.checkNotNull(parent), "Duration", "Duration") instead of the null check.
I think it would be better to use StringBuilder instead of StringBuilder.
This is a bit confusing. I think it would be better to use a constant for the first letter.
This is not a safe cast.
This is a bit hard to read. Can we make this a private method?
I think this should be a WARN instead of an ERROR.
This is not necessary.
Why is this necessary?
I think this is a good idea to use a try-with-resources statement.
This should be List<DynamicStringProperty>
This is not necessary.
I think this should be called only if the user is not in the database.
This is a bit confusing. I think it would be better to use a Set instead of a Set.
This should be a TmfTraceContext.
I think this should be a byte[], not a byte[].
This should be a logger.
I think you should use the new method to check if the folder exists.
This is a bit confusing. I think it would be better to have a method called something like:  public BlockSplitBloomFilter( BlockSplitBloomFilter column, BlockSplitBloomFilter column, BlockSplitBloomFilter, BlockSplitBloomFilter column, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloomFilter, BlockSplitBloom
I think we should use the same string for both the strings and the strings.
I think this should be a constant
This should return a ObjectId, not a ObjectId.
I think it's better to use the same name than the one in the event.
please use injection instead of access to the same package
I think this should be a warning.
I think this should be debug level
please use getVm() instead of getVm()
please use getStorage().getDiskStorageType()
I think this should be a for loop.
I think this should be a loop instead of a for loop.
This should be a more specific exception.
I think this should be agnostic
I think this should be a ConcurrentSkipListMap.
I think this test is not needed.
I think this should be a WARN instead of an ERROR.
I think this should be a constant
This is not correct. The name of the parameter is not the name of the parameter.
Why do we need to put the message here?
This test is not testing the correct platform type.
I think we should add a check for this condition to ensure that the network agent is not null.
I think this should be synchronized
I think this should be a switch statement.
I think this should be in a finally block.
I think this is a bit too long. Maybe we can use a static final String variable for the string?
I think we should have a check for the attribute count and throw an exception if it's not a valid value.
This is a bit confusing. I think it's better to return a List<Date> instead of a List<Date>.
I think this should be a constant
This is not a good idea. You can use the new method to get the class name from the context processor.
I think this should be a for loop.
This is a debug statement.
why do we need to create a new list here?
Please use a logger instead of printStackTrace.
I think this should be a constant.
I think this should be a Set instead of a List.
I think this should be moved to the top of the method.
This is a bit hard to read. I think it would be better to use a function reference.
I think we should use assertj here.
I think this is not necessary. The test will fail if the expected exception is thrown.
@bgeVam please use static imports for the JSON
I think this is not needed.
@ivandalbosco Why not use the same approach as above?
I think we should use the same name as the other ones.
I think you can use the new method here:  assertThat(suspect instanceof Predicate) && !suspect instanceof Predicate.
This is not a good idea. You can use the following:  if (previousObligation != null ) { return; }
I think this should be trace.
nit: can we add a message to the exception message?
I am not a fan of this test. It's not a good idea to test the case where the exception is thrown.
This should be done in the constructor.
I think this should be traceRequest(request)
I think this is a bit too complicated. We should be able to use the function directly to get the function.
I think this should be "Deleting snapshot (id: %d)"
I think it would be better to use assertEquals instead of assertEquals.
I think this is not necessary. The snapshot version is already present in snapshotVersion.
This is not necessary, you can remove it.
I think this is a bit too complicated. Maybe we can use a StringBuilder instead?
I think we should add a null check here.
This is not needed.
This should be a constant.
I think this should be a WARN instead of an ERROR.
This is not necessary.
I think you can use assertThat(map.size()).isEqualTo(0);
Why do we need to start the subscriber here?
this is not needed
This is not a good idea. You can use Collections.singletonMap() to avoid creating a new object.
This is not necessary.
This is a bit hard to read. I think it would be better to use a method reference.
This is a bit hard to read. I think it would be better to use a function reference.
I think you can use a stream here.
I think we should log the exception here.
I think this should be a warning.
This is not necessary.
I think this should be removed.
I think this should be a WARN instead of an ERROR.
I think we should use ThreadPoolTaskScheduler.getThreadPoolTaskScheduler() here.
This should be a Log.e call.
This is a bit hard to read. Can you please extract a method to reduce duplication?
I think this should be a warn instead of an error.
Shouldn't this be in onResume()?
I think this should be a constant
This is not needed.
This is not a good idea. You can use TopologyZKUtils.getTopologyById(hostCount, sitesPerHostMap, kfactor);
nit: I think it's better to use String.format() here.
I think you can use the Objects.equals() here.
This should be a warn instead of an error.
I think you can use Assertion.assertEquals(elem.getText(), false) here.
I think this should be a constant
I think this should be a constant.
nit: I think this is a bit strange to have a test that checks the exception and the exception is not thrown.
I think this should be INSTANCE.IOIteratorNext(this);
I think this should be a WARN instead of an ERROR.
I think this should be in a finally block.
Collections.unmodifiableList()
I think we should use MockVaadinServlet.getInstance().getSimpleName() here.
I think we should log the exception here.
This is a bit hard to read. I think it would be better to use a function to show the name.
rename to element
please use the new method to create a new method to create a new method
I think we should also assert that the exception is actually thrown by the method.
Why not just use the DeviceProvider directly?
This should be a constant.
I think you can use KieContainer.newKieContainer(kbuilder.getKieModule().getReleaseId()) here.
This is not necessary.
I think this is not necessary. The referenceBases field is already set by the referenceBases field.
This is not a good idea. You can use a for-each loop here.
@m-g-sonar I think we should use the same name as the prefix of the message.
I think this should be private.
I think this should be a constant.
I think this should be private
I think this should be if (repo.isAuthzClient(id) && !repo.getAuthorizationProperties().get(id).getOnDemand())
This is a good candidate for a static import.
I think this should be a constant.
I think this should be a constant.
I think this is not necessary. The default style is already set by default.
I think this should be infiniumNormalizationManifest.
I think this should be an error.
I think this is a bit strange. I think it would be better to use a regex to build the pattern and then check if it matches the pattern.
This is a bit strange. I think it's better to use the method reference:  java return (xmax >= y && y + height) && (ymin >= y && y + height) && (ymin >= y && y + height) && (ymin >= y && y + height) && (ymax >= y + height) && (ymax >= y + height) && (ymax >= y + height) && (ymax >= y + height) && (ymax >= y + height) && (ymax >= y + height) && (ymax >= y + height) && (ymax >= y + height) && (ymax >= y + height) && (ymax >= y + height) && (ymax >= y + height) && (ymax >= y + height) && (ymax >= y + height) && (ymax >= y + height) && (ymax >= y + height) && (ymax >= y + height) && (ymax >= y + height) && (ymax >= y + height) && (ymax >= y + height) && (ymax >= y + height) && (ymax >= y + height) && (ymax >= y + height) && (ymax >= y + height) && (ymax >= y + height) && (ymax >= y + height) && (ymax >= y + height) && (ymax >= y + height) && (ymax >= y + height) && (ymax >= y + height) && (ymax >= y + height) && (ymax >= y + height) && (ymax >= y + height) && (ymax >= y + height) && (ymax >= y + height) && (ymax >= y + height) && (ymax >= y + height) && (ymax >= y + height) && (ymax >= y + height) && (ymax >= y + height) && (ymax >= y + height) && (ymax >= y + height) && (ymax >= y + height) && (ymax >= y + height) && (ymax) && (ymax) && (ymax) && (ymax) && (ymax) && (ymax) && (y + height) && (ymax) && (y + height) && (y + height) && (y + height)
I think this should be KStreamImplJoin.
This is a copy/paste error.
nit: this.systemAdmins = new StreamManager(systemAdmins);
this.namespaceSet = checkNotNull(builder.namespaceSet);
This should be a list of all supported supported types.
I think this should be inside the if block.
I think this should be a constant.
This should be a warning.
Should this be error?
I think this should be a .equals(item, i)
This is a bit weird. I think it should be a MindstormsException.
nit: you can use the same style as above.  java serverBootstrap.option(optionsEntry.getKey(), optionEntry.getKey(), optionEntry.getValue());
This should be a constant.
I think this should be a try-with-resources block.
This should be a constant.
I think this should be a field of the aggregator.
This is not a good idea. You can use the new LobCreatorArgumentPreparedStatementSetter(lobCreator, parameters) method.
I think we should also check that the Flux is not null here.
I think we should use the default port here.
I think we should add a message to the log message.
This test is not testing anything.
This is not a URL, so it should be URL
I think we should add a check for null here.
This is not a good idea. You can use a Set instead of a List.
This test is not testing anything.
I think this should be a warning.
Use logging instead of System.out.println.
This is a bit confusing. I think it should be a FileLink.
I think we should remove the cache registry from the cache registry.
nit: "partitionIndex" -> "partitionIndex"
This should be a WARN instead of an ERROR.
Shouldn't this be !StringUtils.isBlank(topic) ?
nit: this.type is not used
This should be a synchronized block.
I think this should be a WARN instead of an ERROR.
I think this should be RexUtil.makeBigintLiteral(BigDecimal.ONE)
This should be a constant.
qe-dmn-grid-context-menu-item
I think this should be "redirect:/banner-manage/list"
This is not thread safe. You can use a TreasureChestItemIterator.
I think this should be a stream.
I think this should be a constant.
This is a bit hard to read. Can you please extract a method to reduce duplication?
Why is this needed?
I think this should be a synchronized block.
I think we should use a Set instead of a List.
Why not just use a for loop here?
This is not needed.
This is not needed.
I think this should be a more specific exception.
I think this is not necessary, because the message is already logged in the log message.
I think this is a bit too long.
I think this should be a WARN instead of an ERROR.
I think this should be a IndexOutOfBoundsException.
I think we should add a null check here.
I think this should be a constant
I think this should be a warning.
remove() is not needed
Why is this needed?
I think we should use the same error message as above.
This should be a RouteTarget instead of a RouteTarget.
This is not necessary.
This is a breaking change.
This should be a warn
This is a bit hard to read. How about using a method reference?
This is not a good idea. You can use a stream and filter on the result.
I think this should be moved to the previous line.
style nit: no braces around single line blocks
I think it would be better to use the same name as the first argument.
This is not needed.
please use injection for injection
This is a bit hard to read. I think it would be better to use a simple schedule(recursiveAction, initialDelay, unit) method to avoid repeating the schedule method.
I think this should be a warning
I think this should be a synchronized block.
nit: you can use MoreObjects.toStringHelper()
I think we should use the new method here.
@dalifreire why we need to flush the writer?
nit: can we use the same pattern as above?  if (handle.getTableStorageFormat() == handle.getTableStorageFormat()) { ... }
This should be a constant.
This is a bit strange. Why not just use the String.join() method?
I think this should be a warning.
This is a good idea.
I think we should add the querySpec.withRangeKeyCondition(..) here to avoid the duplicate code.
Please remove this line.
I think this should be a logger.
I think this should be a WARN instead of an ERROR.
This is not a service, so it should be registered with the service.
Use getBytes("UTF-8")
I think this should be setPassive(false)
I think this should be a warn instead of an error.
This should be a constant.
entry
I think we should add a check for the value of the value to make sure that the value is not null.
I think we should use the new Matrix4f() method here.
This is not needed.
I think this should be a constant.
nit: I think this is a bit strange to have a log message saying "Traced a call to {} ms. It will be called to {} ms. It will be printed as " + tableRefs.stream().map(TableReference::getQualifiedName).collect(Collectors.joining(", "));
I think this should be error.getMessage()
I think this should be a separate test.
I think it would be better to use the same message than the message.
I think this should be a warning.
I think this should be Objects.equals(o, that.typeClassNameInternal())
This is not needed.
nit: can we use datastream.getSource().hasPartitions() instead of datastream.getSource().hasPartitions()?
I think this should be return lift(new OperatorTakeLast(count));
Please use the new method here.
I think we should use the context.getXWikiContext() method here.
I think this is not necessary.
I think we should not call inputMethodManager.hideSoftInputFromWindow(focusView.getWindowToken(), 0); here.
This is not a good idea. You can use a more specific exception.
I think we should log the exception here.
I think we should use the same approach as in the other methods.
This should be private.
I think this should be removed.
This is not necessary.
This should be a WARN instead of an ERROR.
I think this should be warn
This is a bit confusing. I think it's better to have a method that takes a account and then use it to get the account.
Shouldn't this be a warn?
This is not needed.
I think this should be action.getResult().getFailCount() > 0
I think it would be better to use a for loop here instead of a for loop.
This should be private.
I think we should use the constants defined in the class.
I think this should be a while loop.
This is a bit confusing. I think it should be a boolean.
I think this should be a constant.
I think this should be Locale.getDefault()
I think we should add a null check here.
I think this should be moved to a finally block.
This should be private
This is a breaking change.
This is a bit hard to read. Can we use the same approach as the previous one?
why not use the 'getStoragePool' method?
I think this is not needed.
I think we should use the new method here instead of the new one.
assertEquals(1, newPackingPlan.getContainers().size(), 2);
I think we should also check for the video view here.
I think this should be a constant.
Why is this necessary?
This is not needed.
nit: I think we can use Optional.empty() here
This is a good candidate for a method to be used in the AbstractFeatureFlagProvider.
This is not a good idea. You can use a logger.isDebugEnabled()
I think we should use a method name here.
I think this is a bit strange. I think it would be better to use a try-with-resources statement here.
This is a bit of a very good idea. I think it would be better to have a method to get the path and check if it is a LayerGroupInfo.
I think it would be better to use the Task object here instead of the Task object.
This is a bit hard to read. Can we extract a method to make the code more readable?
This is not necessary.
I think this should be wrapped in a try-with-resources block.
I think this should be a constant
nit: I think we can use the same style as above.
I think this should be done in the onCreate method.
This is a bit confusing. I think we should use something like this:  if (fileName.contains(".")) { return String.format(", ").replaceAll("."); } else { return Arrays.asList(fileName, fileName.substring(0, fileName.indexOf(".")); }
I think this should be http.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server
This should be error
nit: can we use a CountDownLatch here?
I think this should be a RuntimeException
You can use new Patient(..)
I think this should be inside the for loop.
I think this should be removed.
I think this is a bit too complicated. I think it would be better to have a method in the same package.
I think this should be a Set, not a Set.
I think this should be removed.
This is not a good idea.
I think this should be assertEquals(HEARTBEAT_TYPE, getField(constants, "MSG_HEARTBEAT"))
This is a good idea.
This is a bit strange. I think it's better to use a CountDownLatch.sleep(100) instead.
I think this should be moved to the if block below.
I think this should be set to null, right?
nit: I think we can just use offsetAndMetadata.offset() here.
This should be a constant
I think this should be trace.isEmpty()
I think this should be removed.
I think this should be a try-with-resources.
rename to element
I think this should be a switch statement.
return 0;
I think this should be a warning
I think we should add a check forTradeWrapper here.
I think this should be assertEquals(e.getMessage(), CoreMatchers.containsString("A Realm controlled by the user is still open. Close all Realms before logging out")
nit: assertNotYetLocked(futureToken)
I think we should use the same approach as in the other methods.
This is not necessary.
I think you should use the trace id here instead of the trace id
nit: can we make this a static final variable?
I think this should be moved to the hostList method.
Please remove this line.
I think this should be a StringBuilder, not a StringBuilder.
I think we should add a check for null here.
I think this should be a constant.
I think this should be a.match(cd) && b.match(cd)
I think this should be warn
Can we use assertThat here?
rename to unit
I think this should be a WARN instead of an ERROR.
This is a bit strange. I think we should use a logger instead of System.out.println.
I think this should be a constant.
This is not a good idea.
I think this should be a constant.
I think this should be checkState(isMainThread())
I think this should be a try-with-resources block.
I think this should be a constant.
remove(referencePoint)
why not brick.setStatus(GlusterStatus.DOWN);
I think this should be a WARN instead of an ERROR.
This is not needed.
I think we should use Pattern.compile("iot.(.*).amazonaws.com")
I think this should be assertEquals(expectedType, actualType.formCode, actualType.formCode);
I think we should use assertFalse here.
I think it would be better to use the OS_VERSION constant instead of hardcoding the string here.
I think it would be better to use Collections.sort(sortedTis, sortedTis)
I think we should add a null check here.
I think this should be a warning.
I think this is not needed. The artifact.getVersion() will be the same as the old version.
nit: I think this is a bit strange to have a single call to getVirtualBucket(bucketCount, file.getPath())
I think this should be a try-with-resources.
I think this should be a constant.
I think this is not needed.
nit: I think you can use try-with-resources here.
I think this should be a service service.
This is a bit confusing. I think it should be: if (number instanceof Number && (number instanceof Number))
I think we should also accept the xpath filter, not the xpath filter.
I think this should be a Set instead of a List.
I think this is not needed.
I think this should be moved to the top of the method.
I think we should remove the filter from the view here.
This is a bit hard to read. Can we use a method to get the name of the file?
This is not correct. You can use the following:  if (String.valueOf(attribute.getName()).equals("fallthrough")) { return true; }
I think this should be a fail() call.
Shouldn't this be the last page?
Why do we need to close the reader?
I think this should be a lambda
This is not correct. You can use the form-data.equals(part) method.
I think it would be better to use Collections.emptyList() here instead of creating a new ArrayList.
This is a bit hard to read. Can we just use a stream and collect the list?
I think this should be a warning
I think this should be a Set<String>
I think this should be a WARN instead of an ERROR.
I think this should be a link instead of a link.
This is not a good idea. You can use a boolean variable to check if the value is true.
This should be a static method.
I think this should be "ex.getAuthentication().removeAttribute(FiltersHelper.Constants.BASIC_KEY"), no?
This is not a good idea. You can use the artifact name from the artifactFragment to get the artifact name from the artifact.
This is not needed.
This is a breaking change.
I think we should use assertInException here.
I think this should be assertTrue(tc.isRunning());
This is not needed.
This is a good candidate for a method to throw an exception.
Should we log the exception here?
This is not necessary.
I think this should be a debug level.
please use getVdsGroup() instead of getVdsGroup()
I think we should use assertThat(verifierNode.cache(CACHE_NAME).get(entry.getKey()).isEqualTo(entry.getKey()) here.
I think this should be readPreferenceTagSet.isEmpty()
I think this is a bit too long. Maybe we can use a method to get the name of the zip file?
I think this should be a mockStore, no?
I think this should be a constant.
This is not correct. You can use the Objects.equals() method.
This should be private
I think we should use the same approach as in the other tests.
I think this should be set to the DlmsConnectionHolder.
This is not a part of the project tree, but the site node is not a site node.
I think this should be a fail() call.
I think you can use the rule directly here.
I think we should log the error here.
Shouldn't this be false?
This should be a list of pubsubPrefixes, not a list.
why not use the same short for loop?
This is not necessary.
I think this should be a PayForOrder.
I think this should be a static method.
This is not needed.
Can we use a more specific exception here?
I think we should use the same name as the metric name.
I think this should be in the presenter.subscribe() method.
I think we should throw an IllegalArgumentException here.
I think this is a bit too long. Can we have a single function that takes a long time?
I think this should be private.
I think this should be a spy
This is not a great way to do this. You can use a method reference: <LINK_0>
I think this should be a WARN instead of an ERROR.
I think we should log the exception here.
This is not a valid check.
I think we should use a constant for the 5 seconds here.
I think this should be moved to the previous line.
Why not just Arrays.asList(topics)?
This is a bit confusing. I think we should have a method that takes a Interval and returns a boolean.
IgniteCacheFuture.get2()
I think this should be a constant.
assertNull(reader.next().index());
Please use assertThat(userService.findValidSubscribers(..)) instead of assertThat(userService.findValidSubscribers(..))
I think this should be a warning.
This should be a constant.
nit: I think it's better to use the expected exception here.
I think this is a bit too long.
I think this is a bit confusing. I think it would be better to have a separate test case for this.
please use the diamond operator
I think this is not necessary. The message should be "JSON object is missing field: alpha"
I think this should be a synchronized (this) { this.samples = Math.sqrt(this.samples); }
This is a breaking change.
This method should be private.
This should be a List, not a List.
This is a very unfortunate error. I think it should be handled by a try-with-resources block.
This should be private
I think we should use the new HashMap<>(headers) method here.
This is not a good idea. The value should be a long and then a long.
This is a bit confusing. I think it would be better to use a Set<String> here.
I think this should be done in the lock view
I think we should log this as debug.
I think you can use the same message as the one above.
This is not necessary. The address is already in the addressCloneTest method.
I think you can use GhostGroupElement.addAll(new GhostGroupElement(x, y, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z
@vilchik-elena This variable should be named something like: Xpp.Xpp
I think we should use the new ArrayList<>(config.getBlacklistedAlgorithms()) here.
I think we should use the same style for all of these methods.
I think this should be a constant.
I think we should use the same name as the one in the log message.
I think this should be Optional.ofNullable(compilerOutputPath)
I think this should be a static method.
This is a bit hard to read. Can you please use a StringBuilder instead?
I think this should be a constant
This is a debug statement.
I think this should be a constant
I think we should use workspace instead of workspace
This is a bit of a duplicate of the code above, maybe we should extract it to a method?
Please use assertThat(paramsMock.getVdsUniqueId(), is(not(empty()))
@bgeVam please use static imports for expected and actual values.
please use: profileList.stream() .filter(profile -> profileList.getItems().isEmpty()) .findFirst() .orElse(Collections.emptyList());
I think this should be in the if (request.getElements().length == 0) check.
please use assertFalse instead of assertFalse
This is a bit hard to read. I think it would be better to use a static method to get the configuration and then use that.
This is a good candidate for a method called createFeatures(Map)
I think this is a bit strange. What if the file is not a directory?
I think this is a bit too long. Can we just do: if (description.testable() || !description.testable()) { description.setTestableDeployments(new TestDeployment(deployment.getDescription(), applicationArchive, auxiliaryArchives), serviceLoader.get().all(ProtocolArchiveProcessor.class)); }
This is a bit hard to read. Can we use a regex to make it more readable?
I think you can use File.separator here.
I think we should log the exception here.
I think this should be a Double.valueOf(tempStrokeDashArray[i])
This is not needed.
I think this should be a bit more readable:  if (quickInput.hasField(IDDOrderLineQuickInput.getM_Product_ID())) { return; }
This is a bit of a nitpicking, but I think it would be better to use Collections.singletonList() here.
You can use the "else if" here.
I think this should be <=
I think this should be a warning.
I think this should be translated
This test is not testing the exact same thing as the one in the test method.
I think this should be a warn
This is a bit hard to read. Can you please extract a method for this?
I think we should use the same approach as in the old code.
I think this should be a WARN instead of an ERROR.
I think you can use the [try-with-resources](<LINK_0>
I think this should be in the field declaration.
This is a bit confusing. I think it should be a boolean instead of a boolean.
This should be a User, not User.
This is not a good idea. You can use the new method to get the encryption result.
This is a bit hard to read. Can you please extract a method to reduce duplication?
why not just return childCommandIds.stream().map(CommandBase::getCommandId).map(CommandBase::getCommandId).collect(Collectors.toList());
this.
This should be a static method.
This should be a static method.
This is not a good idea. You can use a for-each loop here.
This is not a good idea. You can use a for loop here.
nit: this is redundant
I think this should be a queue instead of a queue.
I think it would be better to use the 'getParameters().getForce' method here.
I think this should be a spy.
I think this is a bit too long.
This is a bit hard to read. Can we make this a private method?
I think this is not necessary. The binLoad[binIdx] will be the same as the binLoad[binIdx].
I think we should have a test that checks if lastConfirmed is false.
I think this should be a sql.
I think it would be better to use the same message than "internal error".
I think this should be a WARN instead of an ERROR.
I think we should use a regex here to make sure the input is a valid input.
nit: I think we can use assertThat(stats.getLast(), greaterThan(0));
I think this is a good idea.
I think this should be a constant
I think we should log the exception here.
This should be a static method.
This is not correct. The default timeout is 1, and the default timeout is 2.
why not use the static method here?
I think this should be a WARN instead of an ERROR.
This should be a warning.
I think we should add a checkNotNull check here.
I think this is not needed.
I think we should use the same approach as in the other tests.
This is not a valid portable.
I think this should be a constant.
I think this should be a pre-auth token, not a pre-auth token.
Whenever damage is a source of damage?
I think we should use a try-with-resources here.
This is a good idea.
I think we should add a check here to ensure that the maxAttempts is not >= 0.
I think we should use the logger instead of printing the stack trace.
This is a bit confusing. I think it would be better to use a switch statement here.
I think this is a bit too long. Can we just use the ByteBuffer directly?
This is not a good idea. You can use a setter for this.
I think this should be removed.
This should be a constant.
I think this is a bit too long. Maybe we can use a lambda here?
You can use Collections.emptyList()
This is not correct. You can't use the equals method.
I think this should be in the setup method.
I think this is a bit too complicated. I think it would be better to have a single constructor that takes a List<String> and then call it from the constructor.
I think this should be a try-with-resources block.
Please use a StringBuilder instead of a StringBuilder.
I think this should be a List<TableColumnState>
I think this should be a warning.
I think this should be a WARN instead of an ERROR.
This test is not testing anything.
I think this should be a constant.
I think this is a bit too long. Maybe we can use a regex to get the first character.
This should be stateValue
I think this should be x.toLong()
I think this should be a WARN instead of an ERROR.
Can we make this constructor private?
I think this should be a boolean.
nit: remove the space after the closing bracket
I think this should be a warning.
I think this should be a switch statement.
I think we should add a null check here.
please use getStorageId() instead of DbFacade.getInstance().getDiskImageDao().getAncestor(disk.getImageId())
Why do we need this sleep?
I think we should have a test for this.
This should be a warning.
I think this should be GDBDebugServicesFactory.GDB_7_7_VERSION
I think this should be a constant
This should be implemented as: return support.isInVisibleLines(this);
please remove this line
I think this should be left.getKind()
I think this is a bit too complicated. What about extracting a method that takes a Set<Symbol> and then passing it to the Set<Symbol>?
I think this should be a for-each loop.
I think we should throw an exception here.
This is not a valid MIME type.
I think this should be done in the buildCardDetailsEntity method.
I think it would be better to use Collections.emptyList() here.
This is a bit hard to read. Can we make it a static method?
I think this should be a switch statement.
I think this should be a warning.
I think this should be a warning.
This should be a constant.
This should be a static method.
I think this should be synchronized
I think we should add a null check here.
I think we should also check that the number of attempts is correct.
This should be a constant.
I think this should be shutdownNow()
I think this should be Integer.parseInt(stringVal)
nit: can we use a switch statement here?
I think we should log the exception here.
I think you can use the logger here.
Why is this method static?
I think this should be "visit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStopDatetime() != null && otherVisit.getStop
I think this should be a try-with-resources block.
I think this is not necessary.
This is not correct. You can use Objects.equals(this, other)
Why synchronized?
This should be a constant
I think we should verify that the cursors returned by commitCursors(any(), any()).
Please use the same approach as in the other tests.
I think you can use assertEquals(expected, actual) here.
I think this should be cached.unboxInt()
This is a bit of a nitpicking, but I think we should probably use a method reference here.
This is not a good idea. We should log the exception.
This is a bit of a nitpicky, but I think it would be better to use a Set instead of a Set.
This is not a good idea. You can use the Objects.equals() method.
This should be a copy of the list.
I think this should be inside the if block, not inside the if.
I think this is a bit too complicated. I think it would be better to use a Set instead of a set.
I think we should log the exception here.
I think this should be trace.
You can use assertEquals
I think this should be removed.
I think this should be "EntityType with id [" + entityTypeId + "] does not exist. Did you use the correct URL"?
This is a good candidate for a method to get the target directory and the target directory.
This is not necessary.
this is not needed
I think this should be position = getPositionForNoteUnfiltered(newNote.getId());
I think this should be a constant.
I think it would be better to use try-with-resources here.
This is not necessary.
nit: I think we can remove the _consumerAssignment variable and just use _taskUpdates.add(datastreamConstants.UpdateType.PAUSE_RESUME_PARTITIONS)
This is a breaking change.
I think you can use Objects.equals(content, content) here.
This is not a good idea. You can use the color directly to get the color.
I think this should be a constant
I think we should use a different name for the key here.
Shouldn't this be "add_android_devices"?
This is a bit hard to read. Could you please extract a method to reduce duplication?
@ivandalbosco why not use name.asSymbol()?
@bgeVam please use the same naming as above.
I think this should be a try-with-resources block.
I think this should be a CountDownLatch.
This is not needed.
Please remove this line.
nit: I think it would be better to use the static import for the method name
I think this should be a boolean instead of a boolean.
I think this should be a constant.
This should be a constant.
I think this should be a warning.
I think this should be sortedVariants.stream().sorted(o1, o2).sorted(o1, o2)
This is a bit hard to read. Can we extract a method that takes a boolean parameter?
This is a breaking change.
Please use ShellIsAvailableException
I think this should be synchronized
This is not a good idea. You can use a switch statement here.
I think we should log the exception here.
Shouldn't we call super.onClose(); here?
I think this should be sortedStates.values().stream().map(entry -> new StoredWorkflowDefinition.State(state.getKey()))).forEach(entry -> { ... });
I think we should use the same constant for the test case.
close the stream?
This is a bit of a nit, but I think we should have a more descriptive message.
I think this should be a project.
style nit: no braces around single line blocks
I think this should be a WARN instead of an ERROR.
This is not a safe way to do this. You can use the new method to get the root ACL status.
This is a breaking change.
I think it would be better to use the constant Zn_data.event_type_name here.
I think this should be a WARN instead of an ERROR.
I think this should be a try-with-resources block.
I think we should verify that the consumer is actually actually a consumer.
I think we should add a check for the task being null here.
I think this check should be done in the checkUserOwner method.
I think this should be a static method.
I think this should be a constant.
rename to descriptor
I think this should be a constant.
Shouldn't this be done in the dispose method?
I think we should use the tag tag here instead of the tag tag.
This is a bit hard to read. I think it would be better to use a switch statement here.
I think this should be: if (groups.get(0).getRule() != null) { groups.add(0, new AuthorizationGroupBean()); }
I think this should be a User.TYPE_DEMO.equals(u.getUserType())
I think we should use the KEMException.compilerError() method here.
I think this should be a warning.
I think we should use the new HttpResponseResponseResponseResponse.
style.isVariableHeight()
I think this should be a warning.
I think this is not necessary.
I think this should be a constant
I think it would be better to use the same name as the VM.
I think this is not needed.
I think this should be namespace.getStatus().getPhase()
I think this should be a switch statement.
I think this should be errorHandler.onFatalError(new FlinkException("Application failed unexpectedly.", t));
This is a bit of a hack, but I think it would be better to use a method referenceView.
This is a bit hard to read. Can you please extract a method to get the file name?
Please use Assert.assertEquals()
I think it would be better to use Java 8 streams here.
I think we should use the same approach as in updateStatusOnGH.
I think we should use the correlation ID here instead of the correlation ID.
I think this should be a NumberFormatException, not a runtime exception.
this.
I think we should use the same approach as in the other methods.
This is a bit hard to read. Can we use the same approach as in the other methods?
remove
@bgeVam please use static imports for Assertions.assertThat
I think this is not needed.
No need to use UriBuilder
I think we should use the same approach as in the other methods.
I think we should use the same semantic as the one above.
wait for the first element to be clickable
You can use assertThat(container.isEqualTo(12)).isEqualTo(12)
I think this should be a constant.
I think this should be inside the if block.
nit: can we use the same convention for the two above?
This is not a valid attribute. You should use the mappingType.getTypeConfiguration() method instead.
I think we should use the new HttpContext(URI uri) constructor here.
This is not necessary.
This should be a constant.
I think we should log this exception.
I think this is a bit too complicated. I think it would be better to have a method in the enum.
@vilchik-elena Why not just use the release.remove(release)?
I think we should use the same order as the other constructor.
I think we should use the same pattern as in the other methods.
This is a bit strange. I think it would be better to use the same pattern as the previous one.
I think we should log the tenantDomain here.
rename to trace
rename to resource
I think this should be EVENT_STACK_CONIFG_UPDATES_EVENT.name()
This is not needed.
I think this should be synchronized
I think this is not necessary. The statisticsAggregationOperator is not used in the statisticsAggregationOperator.
rename to featureModel
I think you can use the static import for the assertNotEquals method.
This switch statement is not needed.
I think we should log the exception here.
I think this should be a constant.
I think this should be in the @Before method.
I think we should use StringUtils.isNotEmpty() here.
I think we should check if the URI is absolute or absolute URI.
please use the same error message as in the other log messages
I think this should be a == 42
log the exception
This is a bit strange. I think it would be better to use a for loop here.
I think this should be a WARN instead of an ERROR.
I think we should use a try-with-resources here.
This is a bit of a bug. It should be handled by the caller.
This is not a good idea. You can use a Set instead of a Set.
This is not correct. You can use the string builder.
Why not use the new ShellUtils.getProcessBuilder() method?
I think this should be debug
I think we should add the accountId to the log message.
I think we should use JabRefDesktop.openExternalFileAnyFormat here.
This is a breaking change.
I think we should add a null check here.
I think this should be synchronized
I think this should be a warn instead of an error.
I think this should be a constant.
I think this should be a WARN instead of an ERROR.
I think this should be a PackMismatchException.
I think this is a bit too long. Can we just use the map directly?
I think this should be a constant
I think we should use DistributedMetaStorageCasAckMessage.isAckMessage()
This should be a constant.
I think this should be a ConcurrentHashMap.
I think we should add a check for the error code here.
This is not a good idea. You can use a for-each loop here.
This should be logged.
I think this should be a for loop.
nit: I think this should be requireNonNull(column, "column is null");
This is a good candidate for a method in the startAppiumServer()
This is not a good idea. The message should be "The system_server process has not started."
I think we should use the same approach as in the other methods.
I think it would be better to use the asyncErrors.add(t) method instead of the asyncErrors.add(t)
I think we should use the local variable for the local variable here.
I think we should use a Set here.
I think this should be a Map instead of a HashMap.
I think this should be warn
I think this is a bit too long.
Shouldn't this be a List<TopologyProcessor>?
This should be a logger.
I think we should use a constant for the identifier.
This is not needed.
I think this should be removed.
I think you can use a StringBuilder here.
nit: move this to the previous line
I think this should be assertExprFail(() -> assertExprFail("strlen(a)", AssertionError.class, null));
I think this should be a mocked class.
This is a good idea. You can use a try-with-resources block to close the FileReader.
I think we should use context.isSet() here.
I think this should be a System.out.println
This is not a good idea. You can use the toString() method to print the IPTypeToString.
This is a good candidate for a method like extractChallenge(HttpPipelineNextPolicy, String name)
I think this should be done in the constructor
I think this should be done in the presenter
I think we should use the http:// prefix here.
This is not a good idea. You can use distinct() directly.
I think this should be moved to the previous line.
I think this should be a constant.
I think this should be private
This should be a constant.
This should be package private.
@bgeVam please use the same variable name for both the same name
This is a bit confusing. I think it should be return !isDeletable() || isDeletable()
I think we should check that the property is not null.
I think this should be a finally block.
This is a bit hard to read. Can we extract a method to get the identifier and reuse it?
This is not needed.
I think this should be protected
I think this should be a WARN instead of an ERROR.
This is not necessary.
This should be a switch statement.
This is not needed.
This is a good candidate for a method to be used in the same package.
I think this should be a constant
I think this is a bit too complicated. Maybe we could extract a method to avoid duplication?
I think this should be a WARN instead of an ERROR.
I think we should use the same approach as in the other methods in this class.
I think we should use the same approach as in the other classes.
suggestion throw new UnsupportedOperationException("This Jobby does not implement getJobStats().");
This is not needed.
Should this be synchronized?
This is a good idea.
null is not a valid value for product.
I think we should use the new KeyValueUtil.computeIfAbsent(rc, r -> new Mutation(r.toArray()))
Why not just return null?
I think this should be a method on the SongService.
Use {} for logging.
I think this should be removed
I think this should be Objects.equals(message, that.message)
This should be a WARN instead of an ERROR.
I think this should be "Clear alarm register result is OK for device: "
I think this is a bit too much. Maybe we can use a StringBuilder instead of a StringJoiner?
I think it would be better to use the expectedException here.
This is a bit hard to read. I think it would be better to use URI.create(String.format("<LINK_0>", http_port));
I think we should use the same name as the one in the transaction manager.
instance is not thread safe, you can use instance.get()
I think we should add a check for newAddress != null here.
This is a bit strange to have a single filter. I think it's better to have a single filter.
I think this should be a constant
I think this should be a RuntimeException, not a runtime exception.
This is not needed.
I think this should be a constant
I think this should be a try-with-resources block.
I think this should be a field, not a field.
Please remove this line.
This is not necessary.
This is not correct.
I think this should be a separate committerSupplier.
I think this should be removed.
I think this should be a nativeDaemonConnectorException
This is not necessary.
@jomarko I think this should be a @Test(expected = ...) method to avoid the need for the try/catch block.
nit: I think this should be a static method.
This is not necessary.
I think this should be a Cache.Entry<K, ValueHolder<V>> entry = iterator.next();
I think we should use a latch here instead of Thread.sleep.
This is not needed.
I think this should be a Map<String, DataSourceCompactionConfig>
I think this should be a Mono.error(e) since it's a Mono.error.
I think this should be warn
This is not necessary.
I think this is not needed.
I think we should fail the test case.
I think we should make this constructor private.
I think this should be a WARN instead of an ERROR.
Why do we need to check for null here?
This is not needed.
You can use the same name as the other variables.
This is not needed.
I think this should be model.getEmulatedMachine().setSelectedItem(emulatedMachine.getSelectedItem());
This is not necessary.
I think this should be in the constructor.
I think this should be a constant.
I think we should also verify that the response code is actually the same as the one in the response.
I think this should be the one above the hashCode() method.
This is not correct. You can use the Build.VERSION_CODES.MINIMUM_SDK_VERSION_OF_TESTING_DEVICE constant.
I think you can use the constant here.
I think it would be better to use the new API version of the experiment task instead of the new one.
Let's use a constant for "transactionKey"
This is a bit confusing. I think it would be better to have a single Runnable that takes a Runnable and then use a boolean flag.
I think this should be FluoAdmin.AlreadyInitializedException
I think we should use the constants for the http headers.
use String.format instead of string concatenation
I think we should use a stream here.
I think this should be inFactory.createInputStreamFactory(params.getData())
This should be a static method.
This is not a good idea. You can use a boolean instead of Boolean.
This is a bit hard to read. Can we make this a method in the same class?
I think this should be private
Shouldn't this be "php.ini analyzer"?
This is not a good idea. You can use a latch to get the results from the thread.
This is not a test, but it's not a test.
Why is this needed?
Why do we need to create a new object here?
I think this should be warn
I think this should be handled in the handle method.
This is not a good idea. You can use a Set instead of a Set.
This is a good idea.
This is a bit confusing. I think it would be better to have a method called createLedgerDirsForNewLog() that takes a File and then call it from there.
I think this should be a WARN instead of an ERROR.
I think this should be a constant
assertEquals(stream.getPointList().size(), 0, stream.getPointList().size());
I think we should use the super(cleanupUrl, artifactId, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson, gson
I think we should throw an exception here.
I think this should be setPriority(i)
I think we should also check that the view is not null.
I think this should be a constant.
I think we should verify that the populator is not null.
This is a bit hard to read. Can we use a lambda?
Collections.emptyList()
This is not necessary. You can use an iterator to get the person from the person.
I think this should be a WARN instead of an ERROR.
I think this should be a WARN instead of an ERROR.
I think this is a bit strange. I think we should have a test that checks for the version of the directory and not the one that is actually working.
I think we should use the same approach as in the refreshRestApiSession method.
This should be removed.
I think this should be a warning.
I think this should be a constant
I think this should be a WARN instead of an ERROR.
I think we should throw a CustomFilePersistenceException here.
I think this should be debug
I think this is a bit too long. Maybe we can use a method in the Block that takes a long array and then call it from the method.
This is not a good idea. You can use a Set<String> instead of a List<String>.
I think this should be a constant.
This should be a try-with-resources block.
I think we should log the exception here.
I think we should use the constant here.
I think this should be moved to the previous line.
This is not a good idea. You can use the new method directly.
I think this should be a stream.
please use {}
I think we should add a listener to the adapter here.
I think we should add a check for the registry here.
I think this should be removed.
This test is not testing anything.
I think we should use a different name for this.
assertEquals(expected, actual)
This is a good candidate for a method to get the version of the response.
rename to p
This is not a good idea. You can use the JobMessages.cancelability_monitor_abbrevUnitSeconds() method instead.
I think this should be a constant
I think this should be "Exile the top card of the library. This is a land card, not a land card".
This is a bit hard to read. I think it would be better to use a try-with-resources statement.
Shouldn't this be a constant?
This should be a debug statement.
I think we should use the same approach as in the other classes.
I think this should be a constant
I think this should be a boolean instead of a boolean.
I think this should be private.
Please use injection for VdsDao
I think this should be a fail() call.
I would prefer to use the constant defined in the Constants class.
I think this should be a constant.
I think this should be hasChanges()
I think this should be moved to the try block.
Shouldn't we call super.onCreate here?
This is a good idea.
Let's use a more descriptive name here.
I think this is not needed.
I think we should use the default value of the default value instead of the default value.
click on the left
I think this should be a static method.
I think we should throw an exception here.
I think this should be a constant
@fanifieiev the same above.
I think this is a bit too long. Maybe we can use a method in the constructor?
This should be logged as a warning.
I think this should be Jenkins.get().checkPermission(Jenkins.ADMINISTER, Jenkins.ADMINISTER, null)
Please remove this line.
I think this should be a WARN instead of an ERROR.
remove this line
I think this should be a MapEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntryEntry
I think this is a bit too long.
I think we should use the same approach as in the other methods.
I think you can use the same approach as in the other methods.
This is a bit hard to read. Can you please extract a method to reduce duplication?
Objects.hash(position, sequence)
This should be private.
I think we should add a check for null here.
I think this should be a warning.
I think we should also check that the session is not null.
Why do we need to create a new instance of ACE?
I think this should be moved to the finally block.
I think we should use the @BeforeClass annotation here.
I think it would be better to use StringBuilder instead of StringBuilder.
I think this should be a ConcurrentHashMap.
I think we should use the same name as the old one.
This is a bit confusing. I think it would be better to use a StringBuilder instead of a String.
I think this should be moved to the finally block.
I think it would be better to use the constants defined in the enum.
I think we should add a refund_id to the database
I think this should be a static field.
I think this should be a Set, not a List.
I think you can use verify(adminDAO, never()).executeSQL(null, true);
This is a bit strange. I think we should use a regex instead of a regular expression.
I think this should be a trace statement.
This is a bit hard to read. I think it would be better to use a constant for "HTTP/1.1"
I think this should be a static method.
This is not needed.
I think this should be inside the if block.
Why not just do this in the constructor?
Please remove this line.
please use getVm().getVm()
I think it would be better to use the expected values for the expected values.
This is a good idea.
I think this test is not needed.
I think this should be removed.
This is a bit confusing. I think it should be Boolean.TRUE.equals(ignorePolicy.get())
Please remove this line.
@bgeVam please use the same constant here.
I think this should be asserted that the encoding is not null.
Why is this needed?
Why not just call label.isEmpty()?
I think it would be better to use StringBuilder instead of StringBuilder.
I think this should be concurrentUpdateSessionInfo = null;
I think this is a bit strange. I think it's a bit confusing to have a single byte buffer size. I think it's a bit more efficient to have a single byte buffer size.
I think it would be better to use the same approach as in the other classes.
I think this should be a logger.
Please use the static import for the assertThat method.
I think this should be removed
This is a debug statement.
I think we should add the namespace to the error message.
@dalifreire why we need to change this?
this.authIdsForRootInstallation = authIdsForRootInstallation;
This is a bit hard to read. Can we use a StringBuilder instead?
I think this is not needed.
I think this should be a List<Entity<?> instead of a List<Entity<?>.
I think we should use try-with-resources here.
I think this should be a warn instead of info.
I think this is not necessary.
This is a good idea.
This is a breaking change.
I think this should be deleted.
This should be debug
I think this should be replaced with a call to getCurrentSuiteName(iTestResult.getTestContext())
I think this should be a constant.
This is a bit confusing. I think it would be better to have a method that takes a chunk and then call it from the caller.
Shouldn't numberOfPrograms be Integer?
This is a bit confusing. I think it would be better to throw an exception instead of returning null.
I think this should be a WARN instead of an ERROR.
I think you can use a logger here.
I think we should use the super class here instead of the super class.
I think this should be a ConcurrentModificationException.
@vilchik-elena This is not a good idea.
I think we should add a check for null here.
This should be a IllegalArgumentException.
I think this should be cache.put(pluginKey, value)
This should be debug
I think this should be in the else block.
I think this should be a constant
I think this should be a debug statement.
This is not a valid return type.
This is not necessary.
I think this should be moved to the try block below.
This is not needed.
I think this should be a static method.
I think this should be a WARN instead of an ERROR.
I think this is not needed.
This is not correct. You can't return null.
I think this is a bit too long. Maybe we can extract a method to reduce duplication?
I think this should be int indexDiff = variantContext.getEnd();
This should be a constant.
please use formatter
I think this should be a try-with-resources block.
This is a bit confusing. I think it would be better to have a test that checks for the disabled value and then check if it is not null.
I think this is not necessary.
Why is this needed?
This is not needed.
This is a bit confusing. I think it would be better to use the default implementation of Optional.ofNullable(toolNameToUse)
I think this should be: java return (getSupportedSearchParams().contains(queryParam.getKey()) || isBlank(queryParam.getValue()));
I think this should be a constant
This is a bit confusing. I think it would be better to have a method called validateFormat() that takes a String and then call that method.
I think this should be a Set<Integer>
I think this should be airdResource.getResourceSet()
I think this should be a ToolException.
I think this should be synchronized
This is a bit confusing. I think it would be better to have a method that takes a boolean and returns the boolean.
I think this should be return (tryActivateAndGet(e, item) != null);
I think we should use the same approach as in the other pull request.
This is not a good idea. You can use filter(exam, filter(exam, room) instead of filter(exam, room)
I think this should be a constant.
This is not correct. The default should be the default.
I think it would be better to use a try-with-resources statement here.
This is not needed.
This should be done in the constructor.
This is not needed.
This is not necessary.
I think this should be traceModel.getStatus()
I think we should use the patternFilter instead of the patternFilter here.
I think we should use the same URI for all of these.
This is a good example.
I think this is not necessary.
I think we should check that the value is not null.
I think we should throw a more specific exception here.
I think this should be a warning.
style nit: no braces around single line blocks
This is a breaking change.
This should be made package-private.
This should be removed.
I think this should be false.
I think we should use INSTANCE_MAP.containsKey(neo4jConfiguration) here.
This should be Class.forName(klass)
I think this should be a constant.
This is not necessary.
I think this should be moved to the CuCamsConstants.CapAssetApi.
I think it would be better to use here the 'getFirst' method.
This is not necessary.
Can we use a more descriptive name here?
I think this should be a switch statement.
I think this should be moved to the top of the method.
I think this should return a Publisher<Integer>
I think we should also check the menu loader is not null here.
I think it would be better to use OGCGeometry geometry = new Point(x, y, SpatialReference.create(4326));
Please use the new method here.
I think this should be a constant.
I think this should be a GradleSyncState.
I think we should add a Log.w() here to prevent the app drawer icon from being saved.
I think this should be a metric, not a metric.
@vilchik-elena Why not just return battleState.getUnits(EnumSet.of(side)).getUnits(EnumSet.of(side) ?
I think you can use assertThat(oneToOne).isEqualTo(1, "One").lift().apply(1);
This is not a good idea. The message should be "not implemented yet"
This is a breaking change.
I think you can use Hash.identity() here.
Please remove this line.
This is not thread safe.
This is a bit hard to read. How about using a for loop instead?  for (String i = 0; i < signature.size(); i++) { if (i < signature.size()) { return ""; } return ""; }
I think this should be done in the constructor, not here.
I think this should be a static method.
I think we should use the SharedPreferences.Editor.getPreferences() here.
nit: I think we can use assertTrue(infoTH, "jvm.pause.monitor"), "false");
I think this should be updatedStatusTags.clear()
I think it would be better to use a stream here.
I think we should use a thread.interrupt() here.
I think this is a bit too complicated. I think it would be better to have a method in the SucceedingPositionsToFail that takes a list of positions and then iterate over the values.
I think this should be a constant.
This is a bit confusing. I think it would be better to use a method reference.
This is not a valid format.
This is not a valid key, it should be a valid certificate.
I think this should be final
I think this should be in a try-with-resources block.
I think we should also check the exception message here.
This is a bit confusing. I think it would be better to use a for loop here.
I think this should be in the load method.
This is not correct. The object is not a DeployDestination.
I think this should be artifactList.getSelectedValuesList().isEmpty()
I think this should be fmsGroup.withName(umsGroup.getCloudIdentityList())
Please add a check for monthMonth and monthMonth.
This is a bit confusing. I think it would be better to use a method reference.
please use StringUtils.isBlank
I think this should be a Map<String, Object>
This is not necessary.
I think this should be in the onResume() method.
I think we should use the same approach as in the other api classes.
I think we should use the same approach as in the other methods.
I think this should be Long.parseLong(contentLength.getValue())
I think it would be better to use MoreObjects.toStringHelper() here.
I think this should be:  if (this.messageListenerContainer == null) {
I think you can use Collections.singletonList()
I think this should be a warn instead of an error.
hashCode can be null
please use Collections.singletonList
This should be done in the presenter
This is a good candidate for a static import.
This is not necessary.
please use the same name as the other variable name
I think this should be canceled.compareAndSet(false, false)
This is a bit hard to read. Can you please extract a method for the return type?
I think this should be a separate method.
I think we should avoid using the ternary operator here.
I think we should use the same approach as in the other classes.
I think this should be a constant
rename to image
Collections.singletonList
This is not a good idea. You can use a logger.
nit: can we just do _partitionMetadataManagerMap.put(partitionId, new PartitionUpsertMetadataManager(partitionId)) ?
I think this is not necessary.
I think this should be wrapped in a if (passivationCapable) { ... }
Shouldn't this be GrowthbeatCore.getInstance().getContext().getPackageManager() ?
Dunge onPopulator()
I think it would be better to use a JUnit rule here.
please use 'else if'
This should be set to the default value of the default value.
I think this should be a constant.
I think we should use the same error message as in the other catch block.
nit: this.currentTable = connection.getBufferedMutator(p);
I think this should be done in the transaction instead of in the transaction.
I think this should be a constant
I think this should be buffer = (E[]) buffer = (E[]) new Object[capacity];
I think this should be a constant.
This is a bit hard to read. Can we use a for each loop?
I think this should be removed
I think we should move this to the onCreate method.
I think we should use the try-with-resources here.
I think this should be instructor1OfCourse
This is not a part of the patch, but I think it should be removed.
I think this should be a WARN instead of an ERROR.
This should be a string resource.
This is a bit hard to read. Can you please extract a method to avoid duplication?
This is not correct. You can use StringUtils.isEmpty(value)
I think it would be better to use String.format here.
This should be a constant
Shouldn't this be a String?
I think this should be done in the update method.
Why do we need to check if syncSession is null?
I think you should use the official way here true instead of "true"
This is not correct. The test should fail if the feature is not found.
This is a good candidate for a more specific exception.
I think this test is not necessary. The test should be tested with the new method.
I think this should be a constant
This should be a primitive long.
nit: I think we can use the same approach as in the other classes.
I think this is a bit strange. I think we should use the logger instead of System.out.println.
I think this is a bit too long.
This is a bit strange. I think it should be v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >> v >>
This is a bit strange, but I think it would be better to use the constant here.
I think this should be a constant.
I think this should be a constant.
This is not correct. The first character is the first character.
I think this should be a while loop.
@dmzaytsev let's use the same approach as in the other methods
I think this is not needed.
I think we should log the exception here.
I think this should be a stop() call.
I think this should be a constant
I think we should use a Set here.
I think this should be a Glide.
I think we should use the builder here.
I think this should be a Timber.d
I think this should be a constant
This should be a constant.
I think this should be a warning.
I think we should add a check that batched is not empty.
I think this should be a shutdown() call.
Shouldn't this be a MongoMongoDbFactory.setDatabaseNameForCurrentThread(DatabaseAdaptorConnector.getDBName(species)) ?
This is not needed.
I think we should use the new TransactionMode enum here.
I think this is not necessary.
I think this is a bit too complicated. Maybe we can use a for loop instead of a for loop.
I think it would be better to use a StringBuilder here.
I think we should log the exception here.
Why do we need to initialize the beanFactory?
I think we should use the newKey here.
This is not correct. You can't use assertPostParamNotNull.
I think this should be a constant.
please use formatter
This should be done in a try-with-resources block.
This is not a good idea. You can use the http://host/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port/port
This is not needed.
@ivandalbosco why not mocking this rule?
I think this should be T.
This is not a good idea. You can use a for loop here.
@vilchik-elena Why not just use the new Fraction( 1, 64 ) here?
I think this should be a loop.
I think we should log this as a warning.
typo: "type"
I think we should add a null check here.
Please move this line to the previous line.
I think this should be a try-with-resources block.
This test is not very readable.
I think this should be a WARN instead of an ERROR.
This is a bit confusing. I think it should be "Prompt is not allowed to be allowed to prompt the token"
This is not a request.
This is a bit confusing. I think it would be better to have a single boolean flag for the file and then check if the file is a file.
I think this should be a WARN instead of an ERROR.
This should be a warn
This is a bit confusing. I think it should beGEN
Should this be logged as error?
I think this should be a Set instead of a Set.
I think we should set the threadKeepAliveTime to the same value as setKeepAliveTime
I think we should use the tenant name here.
I think this should be 1, not 6.
I think this should be a constant.
I think this should be a warn
I think this should be a RuntimeException, not a ParquetDecodingException.
I think this should be "computer-x.png"
Shouldn't this be assertFalse?
I think this should be a Set<String>
I think we should throw a more specific exception here.
I think this should be a field, not a field.
This is a bit hard to read. Can we make a method that takes a string and returns a string?
I think this should be a warn
This is a bit of a hack to me. I think it would be better to use the same formatter as the one in the other classes.
I think this should be a warn instead of an error.
@bgeVam please use request.path("/repos")
Can we use assertEquals here?
I think this is a bit too complicated. We can just use a Set here.
This is a very long method, you can use a method reference.
This should be a WARN instead of an ERROR.
I think this check should be done in validatePatchRequest
This is not needed.
This is a bit of a very broad way to do this. Could you please extract a method to get the folder and then use that method?
This is not a good idea.
I think you can use JsonParser.jsonObject(jsonObject.get("eventRef_ID")).getAsLong() here.
I think we should use a StringBuilder here.
I think this is not necessary.
This test is not testing anything.
This method should return the certificate, not the certificate.
This is not correct. You can use the index column in the index column.
I think this should be error
I think this should be tetheringInactive.
This is not a good idea. You can use the new method to calculate the random value.
I think this should be debug level
I think we should add a log here.
I think we should check if the metric name is empty.
I think this should be entry.getValue()
This should be a constant.
I think we should add a check for the options.getBulkMaxRequestSize() here.
I think this should be inside the if block, otherwise the menu item is not shown.
I think this should be moved to the try block below.
This is a bit confusing. I think it should be called only once.
I think this should be a constant
I think it would be better to use the same approach as in the other classes.
This should be a try-with-resources block.
Ignite -> KMeansTrainer
I think we should log the volume id here.
waitForElementVisibleByElement(suggestedWidget);
I think this should be warn
I think this should be in the finally block.
Why do we need to close the connection here?
I think this should be "cellTableSelectedRow"
I think you can use new VenueGroup("group") here
I think this should be a different test case.
This is not a safe way to test. You can use a method reference.
This is not a valid expression.
I think this should be a regex.
I think this should be a FlurryAdBannerListener
I think we should use the default value here.
I think we should throw the exception here.
I think we should use the same name as the widget name.
I think we should throw an exception here.
I think we should throw IllegalArgumentException here.
I think this should be removed
This is not necessary. The aggregator is already registered in the post aggregator.
This is a good idea. You can use the new method to get the noteId from the noteId.
I think this should be removed.
please use Collections.singletonMap()
I think we should use the new instance of the key here.
This is a bit confusing. I think it's better to have a single method that takes a QueryProviderOutbound and a single parameter.
This should be private
I think this should be in the entity's entity
I think this should be a try-with-resources block.
This should be a UserExternalId.
I think we should check the type of the field too.
I think this should be a constant
I think we should use the new byte[0], byte[0], byte[0], byte[0], byte[0], byte[0], byte[0], byte[0], byte[0], byte[0], byte[0], byte[0], byte[0], byte[0], byte[0], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[],byte[0], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte[]], byte
I think this is not necessary. The test will fail if the listener is not null.
This is not necessary. The list is already a list.
I think this should be a WARN instead of an ERROR.
This should be a constant.
This should be a constant.
This is not needed.
I think this should be a constant.
Shouldn't this be "Already closed"?
@dalifreire why not random?
I think this should be a warn instead of an error.
This is a debug statement.
This is not correct. You can use the new method to check if the name is null.
I think this should be a warning.
I think we should log the exception here.
This is a bit hard to read. I would prefer to use a Set instead of a Set.
I think this should be private.
I think we should use a @Rule TemporaryFolder here.
Why is this necessary?
I think we should add a check for connection.getState() == ConnectionState.CONNECTED to the ChannelState.
rename to processor
I think we should use the following:  for (Map.Entry<VirtualFile, Collection<VirtualFile, Collection<LocalIssuePointer>> entry : map.entrySet()) { entry.getAllFiles().stream().forEach(this::removeFile); }
assertTrue(userGroups.isEmpty())
I think this should be moved to the @Before method.
This is not correct. The value should be the same as the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value.
I think this should be warn
I think we should throw an exception here.
I think we should use the same name for both the two variables.
This is a bit hard to read. Can you please extract a method that takes a string and returns a boolean instead of a boolean?
This is not a valid card type.
This is a bit of a nit, but I think we should have a log here.
I think this should be in a finally block.
I think we should use the ruleMetrics.ruleEnd() method here.
why not call the super.getReturnValue() method?
I think we should use a different name for cube.
This is a bit hard to read. Can we use a method like this?  java if (allAccounts.length != 0) { username = navHeaderView.findViewById(R.id.username); } else { username = navHeaderView.findViewById(R.id.user_icon); }
Shouldn't this be in the finally block?
I think this should be a constant.
I think we should use the same error message as in the other log messages.
Please use the new method in VdcQueryReturnValue.
I think this should be a constant.
I think this should be debug
I think we should add a check for the type here.
I think this should be removed.
I think this should be a WARN instead of an ERROR.
This is a debug statement.
I think we should use the constant here.
I think we should use a more descriptive name here.
I think we should check that the account name is the same as the other one.
I think this should be done in the @BeforeClass method.
@ivandalbosco Why not use the referenceStartPattern.matcher(lineOne).find() here?
This should be a WARN instead of an ERROR.
I think you can use a for-each loop here.
I think this should be debug level.
I think this is a bit too complicated. Maybe we can extract a method for this?
@m-g-sonar I think this should be Assert.assertEquals(x.toString(), x.toString(), x.toString())
I think we should move this to the onCreate method.
This should be a static method.
This is a bit of a nitpicky, but I think it would be better to use a for loop here.
This is a bit of a very bad idea. I think it would be better to throw an IOException instead of returning null.
I think this should be serverVariablesObject.
I think this should be synchronized
This is not necessary.
I think this should be a filter, not a filter.
I think this should be inside the if block
This test is not testing the same thing as the one in the test method.
I think this should be moved to the top of the method.
this is not needed
WFS?
I think this should be a constant
I think this is not needed.
I think we should log the exception here.
I think this is a bit confusing. I think it would be better to have a separate method to create a separate class.
please use 'getSelectedItems()' instead of 'getSelectedItems()'
please use the same formatting as in line 272
I think we should use the same approach as in the other methods.
This should be a constant.
This should be a warn
I think this should be removed.
remove
I think this is not necessary.
I think this should be in.close()
This is a bit weird. I think it would be better to use the default value in the constructor.
style nit: no braces around single line blocks
Shouldn't this be UnsupportedOperationException?
I think this should be a for loop.
This should be a constant.
This should be a WARN instead of an ERROR.
I think this should be !isAuthorized()
I think we should also check the exception message here.
This is a breaking change.
I think this should be a Map<UUID, T>
I think we should use the same port as the other one.
I think this should be a Set<String>
I think we should log the exception here.
This is a bit confusing. I think it should be a boolean and a boolean.
I think this should be trace
I think you can use the new StringBuilder here.
I think this should be a List<LogEntry>
I think we should log the error here.
This is not needed.
I think this should be a Set<Location>
I think this is a bit confusing. I think it would be better to have a single constructor that takes a List<String> and then call addAll.
This should be a CannedAccessControlList
I think we should use the same approach as in the other tests.
Shouldn't this be a WARN instead of an ERROR?
I think we should also validate the path of the destination path.
Shouldn't we use a lambda here?
I think this should be a try-with-resources.
This is a bit confusing. I think it would be better to have a single constructor that takes a ConfigSource and then call it from the constructor.
I think we should add the cache name to the cache name.
This is not correct. The localId is not used.
I think this should be a warning.
I think this should be a constant.
nit: this.maxInitialSplits = new AtomicInteger(maxInitialSplits, maxInitialSplits, maxInitialSplits, maxInitialSplits);
This is not a good idea. You can use a List<String> instead of a List<String>.
I think this is a bit too complicated. Maybe we can use a Set<Map.Entry<String, String>> instead of a Set<Map.Entry<String, String>>?
I think it would be better to use the 'validate(..)' method to check the 'networkDoesNotExist' field.
This is a bit strange. I think it would be better to use a string literal to get the scheme.
I think this is a good idea.
I think this should be a long
I think this should be a try-with-resources block.
I think this should be <= 0, not <= 0.
I think this should be removed.
I think this is not needed.
Why do we need this sleep?
This is a bit of a very bad idea. I think it would be better to throw an exception instead of returning null.
I think this should be called after the page is completed.
I think this should be UUID.randomUUID().toString()
why not just pass the whole config object?
rename to script
I think we should use the builder here.
I think this should be a constant.
I think it would be better to use the message.getClass().getName() here.
I think this should be a Set, not a Set.
Shouldn't this be in onSaveInstanceState?
This is a bit confusing. I think we should use a Set instead of a Set.
I think this is a bit too long. Maybe we can use a method reference instead?
I think this should be a constant.
nit: I think we can use the same approach as in the other constructor.
I think we should use the same name as the other log data.
I think this should be removed
I think this should be a WARN instead of an ERROR.
I think we should use the new ClientBuilder here.
I think this is not necessary.
nit: I think we can use Optional.ofNullable() here
I think we should log the exception here.
This is a bit confusing. I think it's better to use a map and then use a map.
remove
I think we should also verify that the result is correct.
This method should be private.
Use assertEquals instead of assertEquals.
I think this should be assertEquals(Arrays.asList(s).contains(s).
This is a bit confusing. I think it should be a boolean.
This is a bit hard to read. Can we just use a while loop?
This is a bit hard to read. Can you please extract a method?
I think we should use ExpressionAnalyzer.createWithoutSubqueries(metadata.getFunctionRegistry(), session, types, ImmutableList.of()) here.
This is a good candidate for a method in the AbstractJettyUtils.deleteDirectory(String) that takes a File and returns a File.
I think we should log the exception here.
This is a bit hard to read. Can you please extract a method to check if the value is a string and use it here?
I think this should be moved to the transaction scope
This is not a good idea. You can use a for loop instead of a for loop.
I think this should be private
please use StringUtils.isNotEmpty
I think we should use the new method writeDependencyManagement(writer, settings) here.
I think we should use the primitive long here.
I think this should be logged as a warning.
Please remove this line.
I think this is a bit strange. I think it would be better to have a single method called deleteDir(Path path) that returns the path and then call deleteDir(path) and then call deleteDir(path) and then call deleteDir(path) and then call deleteDir(path) and then call deleteDir(path) on the path.
I think this is not needed.
Use try-with-resources to ensure that the stream is closed.
This is a bit hard to read. I think it would be better to use a for loop instead of a for loop.
I think you can use the same approach as in the other methods.
This is not a good idea. You can use a for loop here.
I think this should be a field name, not a field name.
you can use the constant here
You can use assertEquals(0L, page.getResults().size())
I think this should be done in the update method
I think this is not necessary. The test will fail if the pipeline is not found.
I think this should be in the order group
I think this should be a Long
I think we should use HttpGet.CONTENT_TYPE here.
I think this should be a try-with-resources block.
This should be null, not null.
nit: I think this is a bit strange. I think it's a bit confusing to have a single tuple of tuple and tuple.
I think this should be a constant.
This is not needed.
This is a duplicate of the previous one.
This is not needed.
I think this is a bit too complicated. I think it would be better to use a for loop instead of a for loop.
I think this is not needed.
I think we should add a log here to indicate that the batch size is larger than the maximum allowed.
This is not a good idea. You can use the default value of "true" instead of "false".
please use 'else if'
This is a bit hard to read. Can we make this a method that takes a string and returns a boolean and returns true if the error is not found?
This is not a test.
This is a bit hard to read. I think we should use the same pattern as the previous one.
This is a good candidate for a @Rule for TemporaryFolder.
I think this should be a stream.
This is a bit hard to read. Can you please extract a method for this?
I think we should add a check for the group-id here.
I think this should be a constant.
I think this should be a try-with-resources block.
I think this should be a List<String>
I think this should be removed.
This is not needed.
This is not a reliable way to do this. You can use a simple String.format() method.
I think this should be enabled only if the config is enabled.
I think this should be debug
I think we should use the constant here.
I think this should be a List<LdapUser>
I think this should be removed
I think this should be a WARN instead of an ERROR.
I think we should add a log.debug here to indicate that the queue size is not larger than maxBufferedSize.
Shouldn't this be a WARN?
I think this should be a constant
Please use the new method here.
I think this should be synchronized
remove
This should be a constant.
suggestion throw new IllegalArgumentException("owner is null, lacks an ID");
nit: can we use assertEquals here?
I think this should be a constant.
I think this should be private.
I think this should be a warning.
I think this should be a RuntimeException.
This is a good idea.
This is not correct. You can use a for loop here.
This should be a WARN instead of an ERROR.
I think this should be a List<String>
I think this should be savedIntermediateDataSetIds.size()
This is a bit confusing. I think it would be better to have a method called something like:  java if (isOnlineMode()) { return; }
This is not needed.
This is not correct. The super class is not supposed to be a subtype of the class.
I think this should be a constant.
This is a bit hard to read. I think it would be better to use a map of ban and ban to find the ban.
@dalifreire why not use queryVars.containsKey(qf) ?
I think this should be a warn instead of an error.
This should be a constant.
why not use storageDomain.getVolume()?
This is not correct. You can't use the default value of the default value.
This is a bit hard to read. Can we just use the new API?
Should we check if the position is not null?
@ivandalbosco why not use instanceof here?
This is not a good idea. You can use the static import for the method.
I think this should be a synchronized block.
I think this should be debug
Why not just return the future?
This is not a good idea. The messageId is not used for the task id.
I think we should add a check for this.host to be consistent with the other configs.
This is not necessary.
Shouldn't this be removed?
This is a bit hard to read. Can you please use the Objects.toStringHelper() method?
This is not needed.
I think this should be a switch statement.
I think this should be !mbusChannelElements.hasMbusVersion().
I think this should be a CompletionException.
Dog should be removed.
I think this should be shiftedKind = (short) (getAssociatedNumericalValue() != null) ? 0 : 0;
This is not thread safe.
I think this should be org.geotools.gml3.v3_2.GMLConfiguration.class.
I think this should be a byte[]
why not use the constant here?
This is not correct. The default case should be the default case.
I think this should be sharedRealm.realmConfiguration.
I think this should be a List<PointSegment>
I think this should be debug
please use StringUtils.isEmpty()
Should this be a constant?
This is not a good idea. It should be a rateLimiter.
I think this should be a separate PR.
I think this should be a RebaseInteractivePlan
return !isCancelled()
rename to childElement
This is not a good idea. You can use the same pattern as in HostRouteUtils.addHostRoute(mInterfaceName, inetAddress);
This is not necessary.
This is a good idea.
This should be a constant.
I think this should be a switch statement.
I think we should use the same naming as the old one.
Why is this needed?
@vilchik-elena Why not use the super.visitIfStatement(tree, message) method?
I think this should be a warn instead of an error.
please use String.format instead of string concatenation
I think this should be a WARN instead of an ERROR.
I think we should log the customSerializers map too.
This is not a good idea. You can use the context.getCurrentAddress() method to get the address.
I think this should be a Set, not a Set.
This is a bit hard to read. Can we have a method in the same package?
I think we should verify that the callback is called before calling the callback.
I think we should add a check for permissionsAPI.doesUserHavePermission(parentFolder.getHostId()) to make sure that permissions are not in the list.
remove this line
I think this should be entry.getKey()
This should be removed
I think this should be a NoSuchElementException
I think this should be a method reference.
I think this should be in the @BeforeClass method
nit: I think we can just use value.count.toIntValue() here.
I think we should use the same name for the method instead of hardcoding the string "iconCart"
rename to key
I think it would be better to use the constant here.
This is a bit confusing. I think it should be called loadQueryResults()
I think we should use the same name as in the other register methods.
I think this should be a regex matcher, not a regex matcher.
nit: can be final
I think this should be a relic of a relic of the same message.
This should be warn
I think this should be a Set<String>
This is not a good idea. You can use the JamesCliException.
I think this should be a WARN instead of an ERROR.
I think this should be a WARN instead of an ERROR.
This should be a static method.
I think this should be a constant.
This is a bit of a very long method. Can you please extract it to a method?
I think this should be a static method.
Shouldn't this be done in the clear() method?
I think this should be a checkState
I think it would be better to use a Set instead of a List.
I think this should be in the ctor
I think you can use the methodInvocationTree.getTree() here.
I think this should be a List<FavourGroup>
This should be a warning.
I think this should be removed.
This should be a constant.
I think this should be a constant.
I think this should be a debug statement.
I think this should be a TreeMap, not a TreeMap.
I think this should be a static method.
please use injection for VmDao
Please use Objects.hash()
This should be a String, not a String.
I think this should be a WARN instead of an ERROR.
I think we should log the exception here.
I think this should be a constant.
I think this should be a static method.
I would prefer to use a Set instead of a HashSet.
I think it would be better to use the publishers.add(nodeEngine) method instead of creating a new one.
This is not correct. You can use List<UpdateField> and then you can use List<UpdateField>
This is a good idea.
I think we should use the ZoomLevelSelectorPresenter.show() method instead of the ZoomLevelSelectorPresenter.
Why do we need to catch the exception here?
@vilchik-elena Why not use the pattern pattern?
I think this should be in the constructor.
I think we should also check that the name is not null.
This is a bit confusing. I think it would be better to use a for loop here.
@vilchik-elena Why not just use RtLanguage.getLanguage()?
nit: can we make this a static final field?
I think this should be a constant.
This is not a test, but it should be a test.
Why not just use name here?
This is a bit hard to read. Can we use the same pattern as the above?  if (keytag < 0 || keytag < 0 || keytag > 65535) { throw new AttributeParseException("Invalid keytag: " + keytag, value); }
I think this should be a WARN instead of an ERROR.
Please use a constant for "localhost:0"
This should be a warn
nit: I think we can use the same format as the other format methods.
I think this should be a constant.
I think we should also check that the task is actually running in the task.
I think this should be a separate method.
I think this is not necessary.
This should be a constant.
I think we should also check that the region is not null.
I think you can use the diamond operator here.
This is not needed.
I think we should use a callback.onPreConnect() here.
I think it would be better to use the model model here.
This should be in.getLastActivityTime()
I think this should be called before the test is executed.
I think we should use the Keystore class here.
I think this should be set to true only if the value is set.
I think we should use a thread pool here.
This is a bit hard to read. How about: return Objects.equals(value, other.numberOfVotes);
I think this should be a List<OrganizationType>
nit: I think we can remove the else block and just return.
nit: use assertEquals
This is a bit hard to read. Can you please extract a method to reduce duplication?
This is a bit hard to read. Can you please extract a method?
please use the same formatting as in the other methods
Hue Light Discovery Service activated -> Hue Light Discovery Service
I think we should add a check for the cluster name here.
I think this should be a WARN instead of an ERROR.
Why not return _maxCapacityUsageGauge.getValue() directly?
I think this should be a StringBuffer
I think this should be:  cal.setHeader("birthday:yyyyMMdd", "19740421");
I think this should be operatingSystemToOsFamily
I think we should use the same order as the previous one.
I think this should be a while loop.
I think we should use StringUtils.isEmpty(messageFormat) here.
This should be a static field.
I think this should be a RuntimeException.
I think this should be a constant.
I think we should check that source() is not empty before calling this method.
I think this should be a constant
I think this should be "Analyzing analyzing recipe"
This is not correct. You can use the "String" object.
This is a bit confusing. I think it would be better to use a Set instead of a List.
I think we should use the same icon for both icon and icon.
this.isInverted = isInverted;
@vilchik-elena Why not just use the default implementation of the method?
I think it would be better to use the static import for the assertEquals method.
Is this really needed?
I think this should be: if (beginValidTime != null && endValidTime != null) {
This should be a static method.
I think we should use a constant for "currentTime"
This is not thread safe.
This is a breaking change.
I think this is a bit too complicated. Maybe we could extract a method to reduce code duplication?
