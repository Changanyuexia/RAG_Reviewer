Same thing here, there shouldn't be a space before the colon.
do `this.cacheProvider = this.config.get('cacheProvider') || this.config.get('hibernateCache');` for backward compatibility in places where we fetch value form config
I think the recommendation should be page/elements/foot?
Spacing for `<%=` and `%>`.
mindfuck with names. can it be improved?
Just an interesting observation but we were calling `cannotSee[username]` in line 55 when `cannotSee` is an Array. I think we fixed that line now that this is an object now.
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
Is this file here to make editable installs work (for python 2)? It is not included in the actual package (wheel/sdist), correct?
The name "bookkeeping" feels a bit unusual here for a public facing thing. Should it be `PULUMI_HOME_DIR`? or `PULUMI_HOME`?
Can you use gobblin.util.ExecutorsUtils.newThreadFactory(Optional<Logger>, Optional<String>) so that we can name the thread for debugging purposes and we log uncaught exceptions?
Remove the cast
This is adding two new failure conditions to the `add_process_metadata` processor. If there's an error accessing the process' owner, or looking up the user ID, the whole process enrichment operation will fail. This is dangerous as this code is expected to run in all supported OS and under unprivileged conditions. It's possible for example for this code to only be successful when run with high privileges. I think it's better for GetProcessMetadata to still succeed if any of this calls fails and silently leave the Username field empty.
explain how this padding value will be translated to bytes on the wire. it may be unexpected that 256 is allowed when the frame definition only allows for 8 byte length.
Can you provide background why this needed to change? I expected it would be unaffected.
pre-existing, but mutation of args always rubs me the wrong way.
This 'http://' check is useless, if anything - it should be removed. Same thing with the Form validation method.
Why does the revision change here? Different conanfile content?
See this discussion: huggingface/transformers#5507
nit: you can merge both lines above as `checkNotNull` will return the given argument
Device_id would be the correct field to check
Isn't this implied by the ordering of `ss` in `newPriorityQueue` can this change after the fact?
Why is this change needed?
Wondering if it can be used for `DECIMAL` columns as well?
are we expecting this class to get have further sub class, if not then we can make it final which can save making future mistake of overriding the getClassLoader.
isnt it `targetGroupId`?
I'm hesitant about using an explicit path here. Perhaps making this default opaque to people and just use a secured temp folder is better.
this was a change for preventing stateful test failures in `test_client` whenever your credentials file exists but is empty
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
Lets link to the globalize source in the commit message to show where this was taken from. Use symbol keys for the attr names if possible.
DumpSegment needs this stuff?
I don't believe any of these using statements are necessary. Also copyright missing.
Is this really needed? I something is deleted, he will see it upon refresh, and this won't help. Except, if there is another reason for this change...
Nitpick: We prefer to not introduce indirection in such simple cases.
Should we disable play if there is no device id? I'm not sure what the behavior of <Audio /> is if we don't set a sink id.
Excellent!   Could we get an example of the output? Does it include the `resp.Status` in the happy (error) path?
[nit] Could be `func (*State) EnsureNoProjectsMissing(context.Context, []string) error {` but doesn't matter
I'd probably prefer to have `chainID` as the second parameter right after `db` but I think it's too much work to rearrange this now.
Ideally this would not require the config and be initialised earlier then passed into config as an injected dependency.
This test is validating that the `new Uri(...)` throws, right? What's the purpose of the line after it? Isn't that dead code? Same for cases below.
won't this fail as the formats are different unless you also update this method?
This same function is called by the WS view handler, which has no request arguments to pass, hence the default `None` parameter. Not sure if there's a cleaner way to go here.
Not sure if changes to this file are necessary.
Probably not the one you intended.
seems there a lot of line endings changes that make tracking the real changes more difficult. Any idea whats going on there?
Why we move import here?
Rename, because this is not actually a prefix, but a piece of metadata. Also make sure it is placed in the metadata table when used.
This should be `javax.validation.constraints.NotNull` instead.
This is different from the c conversion tool. In effect it means that `buffer_size_sec` is different when reading with python version if `n_trial` == 1. I don't know the consequences of changing this so I didn't do it. Changing it also makes our tests fail.
Should it be changed to paused?
why need this change ? The sequence of sending SCMCommand and removing state may affect SCM HA.
do we need this?
Refactoring because the name `EsClient` does not fit any longer.
it seemed to need less code to account empty buckets rather than tombstones, so i did that.
To me this just looks weird. We don't pass this variable anywhere after it. So why would it make a difference?
msg: 'Failed to normalize glob patterns: ' ?
This should not be a public var.
worth noting that, while this basically looks like a no-op, and is for sqlx.DB, the sqlx.Tx version doesn't take a context, and I pass in ctx.Background(). I assume this is fine, but I haven't dug very deep into sqlx
In this PR we changed the default value from an empty list to a list with an empty string in it. Just pointing it out in case this makes a difference and results from a typo and not a deliberate choice.
unrelated to this PR but return node.textContent.trim() !== ''; will be significantly faster and less CPU-intensive than the regex
Let's explicitly initialize this to zero for readability here and in `edonr_test.c`. `int aok = 0;`
Why remove generics?
Should we cache `n` so that we don't have to compute it again for the same row?
If this is not related to consensus, so the node.Consensus.PubKey.GetAddress() shouldn't be needed, right?
moved to a unix build file because `Mkfifo` doesn't exist on windows
is there some reason we wouldn't just destroy the entire session (log the user out) at this point?
why remove this line?
Why not `TokensFilePath`? We always create only 1 file (called `tokens`) inside the dir, which looks more natural to allow to configure the full filepath. BTW, I would call it `TokensFile...` instead of `TokenFile...` since it contains all tokens.
Part of the conflict, not quite sure if I should have replaced os/exec for this
Unwind rate would work better here for clarity but it's used in the old logic still
Why do we remove the @Override for equals?
should this be something that sets AAL3? Or does it come from the issuer?
Ah, this is legal? So this would appear in an importing package as `Parent` and not `Parent::Parent`?
how's this move not breaking anything?   I guess we call `.decorate` already somewhere :D
Since this is a "special" `JsonPropertyInfo`, maybe it should be renamed to reflect that more explicitly. Same elsewhere.
Other parts of Epetra64 have a convention for naming templated routines: the templated version / implementation method of a nontemplated method starts with T.
I'm not sure but is this safe to remove?
If I understand correctly, this means that the diagnostics path will end up in the cache key (but not the contents), right?
We don't need that class, right?
I think we should remove `requestDigest` from the message to be hashed. I don't think it achieves anything, but makes the protocol more fragile and difficult to implement. I suppose it might make finding a service-agreement preimage to an already-signed hash trickier, if keccak is ever broken, but I think that's unlikely. Should be easy to remove: just take it out of here, `Coordinator#getId`, `calculateSAID2` in `helpersV2.ts`, and the tests which explicitly construct the signee message here and in `Coordinator_test.js`.
`console.warn('Invalid transaction hash', id)` rather than two separate warnings?
IIUC run_using_threadpool accepts any iterable, so forcing a list is redundant.
This feels like an unfinished sentence, does it just need a period at the end?
This docstring is out-of-date. The implementation now will create a tempfile matching the `__file__` name instead of raising a RuntimeError.
Missing a closing paren in the string
Do we currently have a use case for anything other than `Headers<CharSequence, CharSequence>`? If not, perhaps we should drop one or both parameters altogether?
If the principal attribute password is not defined, could we fallback to the pooledBindAuthnHandler?
em, why changed the import order?
Why not `intval($result[0])`? I would prefer this!
When this goes into master - or sooner - include all changes to the public API in CHANGES.md.
What about tests for all the exceptions?
This file should be CI-agnostic too, right?
This is not strictly correct, although it was not before this PR, too. After a dot character, a new identifier should start, so we should check for `isIdent()` instead of `ch == '.' || isIdentPart(ch) || isNumber(ch)` after dot. If this is eventually getting into the core, I'll fix it.
Intention was good, execution a bit worse ;) @deads2k mind updating in a followup?
Maybe I missed this earlier, but just wanted to check that we're confident in removing this lock. Will the db provide sufficient locking itself?
No `.js` on the end of the file
need a follow up to figure out what we need to do to revert this... migrate shouldn't need registered types... it reads into unstructured and puts back
we used `searchable` or `paginated` in other places. therefore i would use something like `hasTabGap`/ `enableTabGap` to indicate that it is a boolean
Side note: We should make sure we explicitly say in the docs for all freectx functions that they should be written to accept NULL.
please add this to `equals` and `hashcode`
Could you please create an issue in youtrack.jetbrains.com and link here?
This array_reverse is unnecessary if you sort it later.
Is there is a default value, why not use a primitive value with a default of `false`? Then, you do not need these logics in a POJO get method.
you don't need this. You should import Client from mne.externals.FieldTrip
you have access to the root ctx from here (this.root) to avoid this second recursion
Strange. There is new line at the end of this file in my clone...
Do we need this? It occurs to me that it's already in the spec, so we can get at the bool there
Is this file here to make editable installs work (for python 2)? It is not included in the actual package (wheel/sdist), correct?
Will this have any impact on the serialization/deserialization of Dags in the DagManager mode?
Not accepted anymore
constant can be replaced with `sizeof`
> Make more operations async What is the benefit of this?
Queries / query = Returns. Please change it in all the place.
I think @rcebulko's intention is to not include build-system (BS) externs in any of these folder. cc @rcebulko
No need for else block, These are defaults.
struct field ApiKey should be APIKey
Was this intentional?
looks like my change was somehow bad, see travis-ci. who can explain why?
Renaming this variable `arch` and flipping the values/logic in the surrounding code would make this a bit less confusing. Double negatives FTL where avoidable
The crash is fixed, but it does not seem like setting the radius works anymore / it does not change. Do you mind testing using the eyetracking Builder demo? Maybe setting the base `visual.Circle` radius is no longer working?
this can go around line 20 below.
this call was accidentally lost during conversion from decorator to tracer
The purpose of this channel isn't obvious to me; why can't we use `testSyncCh`?
You have removed the echo. I suggest this: `echo " $name";`
I was trying to separate the `tree` logic, but the `new_checkpoint` state made it a bit hard. We could add this value to a column and later calculate the appropriate tree, but I don't think it's worth it considering this hacky alternate way as done here.
What is this being used for. gorm should not be anywhere in the code now
This wouldn't be a bad addition, but the model that required it no longer exists.
Just some renaming... `intoSourcName` is a really terrible name...
Note that we do not reset the nameframeUrl_ as part of unlayoutCallback. I think this is fine but wanted to point it out.
nit: there should be no newline here.
It is actually easier to identify jQuery and jqLite instances using `instanceof jqLite`.
Do we really need to call `cancel()`? When `cancel` is called, no one is blocking on it.
>containsFormattedMessage = false; [](start = 52, length = 33) nit: please make this one in its line.
Spelling mistake here. Also we should only use plural form `Statuses` if the enum fields can be combined (i.e. intended for use as bit flags that more than one bits may be set at the same time), otherwise, this should be `Status`. So the name should be `ResponseStatus`.
shouldn't you apply `preg_quote` to be safe ?
Why lower this?
processDefaultVolumeStore will never return error. Just saying...
Strange. There is new line at the end of this file in my clone...
Can we also assert that the env vars are **not** added to the application container?
struct field ApiKey should be APIKey
Prefer Date or Time over DateTime.
I think you want to start callbacks immediately, there's no requirement that anyone ever calls `loop_until_closed`
Style/EmptyMethod: Put empty method definitions on a single line.
you should should probably remove the declaration from `libzfs_impl.h` if you're removing all definitions
Same with this one; it'd be good to experiment with making this reusable. This one should be pretty easy.
Prepend your regexp with a `^` or even just use `not request.path.startswith(...)`
This has to be swapped around. `start_mediated_transfer_with_secret` is not the base case anymore, but the exception, now it should call `start_mediated_transfer_async` and not the other way around.
@chrisvest where these not used anymore ?
Why did you break this line?
will this be refactored to share code with SparkInterpreterLauncher.java?
Did you get rid of this line when you tried nesting all `pacpy` imports?
We had a chat with @JeremyKuhne and concluded that we shouldn't include `XxxA` messages unless they are used in the code. In general we should be using `XxxW` messages only.
>calendar [](start = 36, length = 8) calendar can be null here
this could be removed from the PR
For my own understanding, what are the cases where `data.ContainsOutputsStep(data.step.Op)` returns "true" but the stack is not actually done updating? I would have assume that we would not see the outputs until the entire stack has completed updating?
Why are you removing this? It's needed for the checks
Let's put a new const under `pkg/api/const.go`, e.g., `DefaultEnableAutomaticUpdates`. Set the value of that const to `true`. And then have this convenience method return that const. (instead of using the `true` bool literal here)
Returning error here is not correct. The `resolve()` is used as the main service function, so if it returns error the service stops and it causes a cascading failure. We don't want to fail everything just because a DNS resolution failed. I thinks a better approach is just logging the error and always `return nil`.
If `CreateServer` returns error, `s` should be nil.
nit: you can merge both lines above as `checkNotNull` will return the given argument
nit: Can we have two more tests 1. test the nested timer trigger event 2. test maxTimerLength with stopSpec that never stop
You should use `\DeviceCache::get($obj['device_id'])->groups` instead so it doesn't fetch the device from the database again.
Nit: template => templates (e.g. "... where template**s** are stored.")
I'm not sure if `ApplicationConfig` should be used in `config` files as well, but I assume it should be.
this means that blocks "older" than the current `state`s block number noop, right? would this here be the place to record a chain reorg?
you should except the exact error (`TypeError`)
We're using `root` twice here, and as I understand it, it doesn't have quite the same meaning both times. Could we find a different word for the second usage?
It looks like this row being empty is a symptom if a failed registry key lookup, we might be able to move this logic to line 33, I'm still investigating.
Did anyone already point out that Windows doesn't have `unistd.h`?
Do you have an example of a situation where this would be used?
Make `_members`' element nullable instead?
This seems like something that can be reused by multiple test suites. Would it make sense to refactor it into a helper function?
We need to make sure that regex is not greedy. Needs a test with more than one anchor tag. Maybe a mix of different tags. And an anchor tag within another tag.
I feel like we shouldn't add this in the specs, the services should require the files?
IMO you could re-throw the existing exception or add it as a nested one. E.g. <code>throw new IOException("could not load " + d, e)</code>
Does this need setting more than once? Can we make it readonly? Making this hard is important as defence in depth measure
FYI, some linters will complain about the imports' order change. Not sure if AKSe's does.
Have you tested this by running a job on Dataflow? This is a little scary because the latest version of apitools on github is 0.5.14. @craigcitro @charlesccychen @chamikaramj (FYI, in case anybody is aware of a known incompatibility.)
expand it ?
We could log VM's info (id, name...) here.
should we be defensive here and check to see if there are any items after the split?
Put one space between the method name and the first argument.
why the change? also, come tho think of it, the computation for RESOLUTIONS below can be simplified.
Should this do something? (Set focus to the widget hosting the jobs list?)
What happened to the forwarding entry?
Do we need to add anything to eventlog here to say alert is skipped?
Remove empty line.
Why lower this?
Wonder if this message might be confusing to people, that might think that their data is now tracked by git (yeah, we do actually encounter such cases from time to time :slightly_smiling_face: ). Maybe we could just not print anything here? Seems like an expected behavior, considering an explicit config option.
Could you also prefix with `wordproof` here?
I don't think we should put AD specific code into the `LDAPEntry` and `LDAPUser` objects. How about using the `AccountStatus` instead? That makes it independent from AD. We could extract the `AccountStatus` into a separate enum out of the `User` interface to make it a bit more generic. What do you think? I also think we should only have an `accountStatus()` method in `LDAPUser` instead of also putting it into the `LDAPEntry` object. The `LDAPEntry` object is supposed to be generic. We can move the `userAccountControl` parsing into the `createLDAPUser()` method in `UnboundLDAPConnector`.
I'm vaguely trying to pluralize group names... `system:cluster-readers`? Yes, yes, `system:authenticateds` is terrible
I figured an opt in was much safer than putting a before_action in app controller just in case we have lingering session data
This is the thing that would benefit from the ``_conan_collaborators`` mechanism
Use && instead of and.<br>Line is too long. [90/80]
I believe that this mutation can be also used for draft order, which will raise an incorrect webhook event
I had to open up the full file to see that this is the test case I was looking for (not a bad thing, just hard to figure out from just the diff).
Why lower this?
Guest VM's with public network access is possible by checking default egress rule. Without adding this new notion of a 'public access', networks can reuse the `Egress Default Policy`.
we use to call this `imageapi` (we do in many places)
`HIVE_SYNC_KERBEROS_PRINCIPAL` has null default value. This might throw HoodieException. Maybe, we can set EMPTY_STRING as default and validate in HiveSyncTool that this config is not null or empty when `HIVE_SYNC_USE_KERBEROS` is true.
I would remove the `if (Equals(sv1, sv2))` at the beginning, and replace lines 2616 on with `return x.CompareTo(y);`
v4 should be changed
This was very weird, it seems the `text/plain` was just being overwritten by json (later in declaration)
qq - is it different from the `credentialpath`?
Should we do similar concurrent control as `checkStorageQuota `?
`item `should be nullable here.
should this belong with the actual metadata column names? may be high time we pulled those into a `enum` ? (ordering/size done in a standard way)
@wanderingstan - this is the code that enables us to show the listing data as it was when the listing was created for "my purchases" and "my sales"
You can remove this now that you changed the code below to assign a new cartesian to `mid`.
For me, one of the problems with the current wording is this sentence: > `The results will be available at <see cref="HostBuilderContext.Configuration"/> for subsequent operations, as well as in <see cref="IHost.Services"/>.` It is a little unclear what "subsequent operations" means here. Does it mean for subsequent `ConfigureAppConfiguration` delegates? Or for operations after the whole AppConfiguration has been built?
Be careful! The new code checks exactly the opposite condition.
This is another change I made, to simplify things. Now the output controller creates a work queue in it's constructor and the same one is used by all output workers across time. This removes the need to drain the old work queue to a new one when outputs are reloaded and new output workers are created in the process.
`request.http_headers.set_default('content-type', 'application/xml; charset=utf-8')`?
It has parenthesis, so use the IN / NOT IN pattern as a base.
This is going to result in quadratic behavior when building up a dataset; probably not a big deal for listening sockets, but if someone reuses this for something else, it might have unexpected performance implications, maybe there should be a note in the header?
Another way is using `strval($postdata) === ''` but IMHO, it hurts the performance
Shouldn't this line be like `response = {};` ? ;)
But more specifically, why `10`? Also you replaced some numbers smaller than 10 with this.
Oh, this is good, I didn't knew you can add a type as third argument! Maybe we can still add this fix to the 2.1 branch!
nit of the tiniest nits. If possible, it would be nice to have the blank line above this still. But only adjust if you need other refinements for this PR.
This (and the return) should be `Cartesian3[]`
Did this need to be made public?
I am afraid this won't work on win, but we are not testing it there yet so no problem, we have to implement a os-agnostic mechanism to parse paths some day.
Do we need to talk with Observability or node ops about these changes?
Prefer single-quoted strings when you don't need string interpolation or special symbols.
I guess this is due to the lack of explicit `__all__` in `annotations.py`?
I think it would be interesting to use the same logic as the hostTags conditional here, allowing you to remove existing tags.
Did CppCheck blindly recommend to add an `&` here? There's little benefits since its a 16-byte value with a trivial copy-constructor - the compiler is free to optimize as necessary anyway.
Could you elaborate a little?
did you mean to import `errors` or `pkg/errors`?
Each param should be on a separate line (and several similar places below in the PR)
Prefer Date or Time over DateTime.
Proper docstring style is actually to have the close """ on the same line _iff_ it's a single line. So it was wrong, and it's still wrong. :-)
Why the prefix is just one letter?
This should stay in the schema, but print an error when configuration loads to tell people we no longer support dotkit. We can make it a breaking schema error in some future release.
How about putting this before the `new Date` and doing `map.yyyy += 1900`? Then the `return new Date(...)` can be left as-is and maybe the `date` => `previousDate` change isn't needed?
Do we still need to do this (replace space to dash) for unescaped filename?
Or can use a star import. No strong preference.
I would avoid environment dependent code in unit tests, it can interfere with another process or test. It's better to mock `canBind`, ie if you want to check the class doesn't provide occupied *1024* port, make the method stub of `canBind(1024)` return `false`.
Comparing the raw string from the class name is wrong and very fragile for future changes. Please change it to instance type check via isinstance(), and also just raise error rather than converting to numpy.
This might be a WIP artifact, but I think we should create new examples to showcase the unit option and leave these ones as-is. We can add more like the `custom-css-unit` example you've made if needed.
Minor thing: I'd suggest not using a wildcard import here.
Did anyone already point out that Windows doesn't have `unistd.h`?
What is this being used for. gorm should not be anywhere in the code now
Would it be possible to remove this function if it's already deprecated?
isNaN might not be the best choice here, but I think it's probably ok
I agree this new style is cleaner but my eyes aren't being able to see the NPE fix - is the map bring mutated between containsKey and get previously?
Sorry for the delay in review here. This isn't quite the right fix and likely introduces a different bug. For example, if you have an exponent of `21474836492` it will succesfully parse the first `9` digits giving `214748364`. Multiply by 10 gives `2147483640`, add `9` overflows to `-2147483647`. Then further multiplied by 10, gives exactly `10`, adding `2` gives `12`. Both of these last two digits are problematic because of this and so we need something that accounts for overflow here and surfaces it as invalid input/failure to parse.
I'd probably prefer to have `chainID` as the second parameter right after `db` but I think it's too much work to rearrange this now.
Why is this removed?
Can be const or not?
I don't really care about this but please try not to commit changes that do nothing.
Why did you do that? This is breaking a test now.
Do we want to put the class name?
Can we make the tests run faster? it seems unnecessary for them to take more than 20 seconds.
Can we rename to createReconTaskStatusTable for consistency?
So there's an extra 80-64=16 bytes even when the `MetaParamsInternalMetadata` isn't used?
I added this `TODO` specifically for our team. This is something I have found really effective when working on longer features, and in the past, I've linked to a GitHub issue directly. This makes it _super_ easy to make sure that, when you release a feature or major change, you remember to do certain things that you would have otherwise easily forgotten along the way. All you have to do is search for one string in the codebase
I *think* we have to manually close `ctx` in the success case if we want to avoid leaking this goro. Just checking if that happens? (I couldn't figure out where right away)
No need for `isNotEmpty`, just check the length.
Let's just put NumBlocksToSign NumBlocksSigned into validatorWrapper, which is in state. It will be needed for fast state sync.
any reason not to overload the LegacyNodeName - maybe note that this is property is only valid for NodeModel dummy nodes?
Interesting. So black formats lists different from tuples ;)
I am confused... Isn't the existing code doing exactly this already ?
handle the "not archive" in the caller, not here.
Line is too long. [82/80]
This should support binary files too (e.g. images, zips).
Why is this necessary?
What events were you seeing where it had `[]interface{}` rather than `[]string`? I assume this code would need to handle both data types. My guess is that `[]interface{}` is found in data parsed by Filebeat and that `[]string` is found in events that are natively generated in a Beat (such as a list of `tags`).
I may be deficient in my understanding of switch/case here, but does this mean that ONMOUSEUP will fall through to ONLOSECAPTURE whenever it's not BUTTON_MIDDLE ? Is that okay?
I think my only real question about this PR is if this should maybe be `watchedServerTypes` or something and take a list of server types to watch instead of just a boolean
There are more than one places that having this anonymous class impl. Shall we refactor them all if you would like to replace it with the real impl. ?
I did do a check on where we using this, but just want to highlight that I'm removing the ActiveJob Test helper.
Maybe use built in `log.Fatal` ?
Let's use sha256. It doesn't really matter, but we've been getting people lurking through our code and saying that the fact that dvc uses md5s doesn't help it to get accepted in the company for security reasons. So we might as well use sha256 to look better here :) Sure, we have a lot of other places where we need to get rid of md5, but it is a good start :slightly_smiling_face:
Docs say default is `false` but the constructor has it set to `True`
please explain ... ? this seems ... wrongish
you don't need this. You should import Client from mne.externals.FieldTrip
Final newline missing.
Nit, I also think "incorrect token" could have a better message than just `"[401] Unauthorized"`, which I think is what will happen here. In other words, `if resp.StatusCode == 401 && token != ""`.
why upgrade python?
Please remove trailing whitespaces in all the empty lines. Given the change you made, this PR should be a 1-line diff.
doesn't make sense to spend the effort to migrate the v1 migrations to gorm v2 (we'd also need a parallel set of test utilities like BootstrapThrowawayORM etc.), perhaps I just remove this file?
Where do 5, 6, and 8 come from?
Similarly not sure this is a net improvement.
@nvazquez does this require special handling in the vmware resource/- guru? I mean to make sure vmware get the right type of value.
can we simplify this test while keeping the tested behavior?
Space inside parentheses detected.
Is this actually used anywhere? I traced through the code visually and didn't see this particular options object including `stRotation`.
If this function can return `None`, its type should be `Optional[str]`
minor: imports in wrong order, should be mule, java, others
What is this being used for. gorm should not be anywhere in the code now
@liggitt amazingly it is possible that when doing a specific search for a specific DN in LDAP we can get nothing back and _not_ `NoSuchObject`
Why are you removing start from here?
nit: you can merge both lines above as `checkNotNull` will return the given argument
I think this one should be `if not message or message[-1] != '\n':`.
I know it just test code, but I would make this match what gets used in the example config (if you change it).
u.Email = strings.ToLower(u.Email) at line 878
What an awful name for a function in the standard library.
What is the difference between list and set here?
This getter/setter pair seems superfluous. You could just use `$this->config['prompt']` directly.
We know it's not an array from the typing.
Note that all the operators are assuming `number`/`number` comparisons. - We need to do type checking to make sure, for example, that `4 > 'cat'` is a syntax error. Please carefully think about our type system and make it reasonably strict, e.g., no unexpected implicit conversions like `true > color('red')` - We also need to implement operators for `Color` types, e.g., component-wise operators. If we don't want to do those functions to `Color` (totally cool with me to keep Cesium's API surface area small) then we can just add them a local functions in this file.
Why do we still need SocketsConnectionFactory at all?
If you're going to be casting text down to `str` from `unicode` in Python 2.7 then you should encode with an explicit encoding. There's also unnecessary spaces within the parentheses.
early `return` in an initializer is really confusing to me, WDYT of saving `current_user` as an instance variable and adding a validation check?
please indicate what to use instead
nit. Can the method name be just finalizeUpgrade (to go with pre and post)?
should not be a part of this pr
Would this be clearer if it was `directed`?
I think you could share the same static instance as it is stateless
@liggitt amazingly it is possible that when doing a specific search for a specific DN in LDAP we can get nothing back and _not_ `NoSuchObject`
Spelling mistake here. Also we should only use plural form `Statuses` if the enum fields can be combined (i.e. intended for use as bit flags that more than one bits may be set at the same time), otherwise, this should be `Status`. So the name should be `ResponseStatus`.
We should just add facades for everything :)
Have you tested this console command?
apparently `get_params` has **always** been returning the wrong set of params, making it unusable in several sklearn contexts.
I am guessing the path of this file (infra-proxy-service/server/v1/orgs.go) includes "v1" because that was copied from some other service (likely teams)? But the v1/v2 distinction is now removed from the code base as of last week. Please remove the "v1" so that everything under infra-proxy-service/server/v1 is now under infra-proxy-service/server/v1
For this sort of thing, we usually abstract out the relevant features of something like `libkb.Env` into an interface. Does that make sense here?
What if one just assigns the variable twice (without reading it), would it silence the error on first assignment? Not that it is too bad, but still may be surprising.
Line is too long. [96/80]
why doesn't this raise an `ArgumentError`?
`do not need to destroy the ARC buffer`
Given this is used to identify the graph driver that's associated with an image, "vSphere" is a better user facing term.
Just a typo FILSTRIP instead of FILMSTRIP.
Nit please sort using statements
Please fix it
This can be defined as test constant
This is way too boilerplatey and error prone to have to stick at the end of every integration test. I actually tried to make it so this was done automatically with a `[TearDown]` so I would prefer if you figured out why this isn't working instead.
do `this.cacheProvider = this.config.get('cacheProvider') || this.config.get('hibernateCache');` for backward compatibility in places where we fetch value form config
Since it's were I took this idea from, can this check be common code with bitmask?
You have several places where you use the null 'otherMetrics' argument instead of the two argument version of generateMockMetricResponse, why?
how did this get added in? very bad that we allowed this through :(
it's used in 2 or 3 other places, I thought, based on my search. I didn't look too closely though, so I am only sure that it's at least 1 other place.
So it looks like all the changes in this file are moving around the ctx parameter. Are these actual semantic changes or are they refactors?
No need to repeat host name used in prefetch
In some of your other pending changes you use `io.BytesIO`. Can we choose one style and be consistent?
Why `nil` here? (if there were a context instead, this feels like it would be a `context.TODO`).
Did you get rid of this line when you tried nesting all `pacpy` imports?
Don't we usually try to catch exceptions as `const` references?
The referer needs to be accessed via the request object (in the past the plain `referer` was the variable that no longer exists). I think this one is the reason a spec is failing.
Probably `attr_reader` would be enough here.
same as above we can from bc not add new typehints.
Seems also can return null
Note that this adds this directive even if it already exists.
put shared functions in `validation.go`?
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
I'd go with prepending `(inactive) ` rather than appending, thinking about it - `name` can be up to 255 long so it could be easy to overlook.
This is good for now, but just FYI: it'd be even enough to just check for element name - the most likely error is confusing element's for another. If this set goes out of control - we can simply move the assertion for "unknown action" into the form's action handler itself.
I think Thread.Mono.cs is more approprivate place for this helper method.
Using a private memeber of parser, is a smell. We might do it as an exceptional thing in our code, but not to third parties
Just remember that Go spec prefer the error strings starting with lower-case   (and above) LGTM.
[nit] Could be `func (*State) EnsureNoProjectsMissing(context.Context, []string) error {` but doesn't matter
So if the if () branch is not taken, we just reuse the valueof ptr from the previous iteration of the loop? That changes the semantics, as I see it.
Just follow how it is done for other DB types like MySQL, Postgres etc. No need to do a separate track for MSSQL
Class name should be `i-amphtml-form`
Need to update error message here to indicate that you can ${DRUID_JAVA_HOME} ${JAVA_HOME} or java installed on ${PATH}
why separate from bridge? Seems redundant?
jobOrchestrationTime -> jobOrchestratedTime.
What is the case where you can't neither follow nor unfollow a contact?
Nit: remove space before paren
Plz use `if (!empty($image_rid))` instead
I dont get this condition. Is there an error here..?
Your point about the constructors is correct, but there are other places like this that don't need this extra function wrapper.
How about using more narrow client? I'm shooting core (without looking at code), which should suffice here.
This and below can both be `RLock()`.
This class contains methods and properties used for migration of Dynamo workspaces.
Why is the nullablility flow changing this from private to internal?
can you add kwargs here?
If there's much additional code work in this PR, it should likely happen right here.
Needs a blank line above to separate from doc string.
With my changes, these started failing, as the test checks for non-equality, but I think it's wrong. Let me know though.
For my own education. What is this class?
why was the default user needed?
Please note that the contents of the `_shared` directory must be copied across all storage SDKs (queues/fileshare/datalake/etc). This includes the `_shared` directory in the test suite. If you feel this should not be in the other SDKs (i.e. that avro will not be a part of queue messages, or datalake etc), then please move this directory up a layer :)
This line should be removed. You are currently in the "Probe" class.
service -> flow?
If you want to remove the boolean you can actually do `resources = Array.wrap(resources)` If you pass in an array it will do nothing, if you pass in a single or set of objects it will wrap them in an array/
We need to enable this in the vlabs API type as well (including conversion to the base api version in both directions)
the `defer` should be defined outside of the loop, otherwise the function will be scheduled on each loop iteration
SetServerDefinitions shouldn't need to be exported. If there was a checked type cast to `*Stellar` in `RefreshServerConfig` that would be fine.
Can you move `"google.golang.org/grpc/status"` down with the rest of the 3rd party imports?
We typical try to keep the json and go property names aligned modulo Pascal vs camel casing. Should this just be `Headers`?
please change to `return number.intValue() != 0`: 0 return false, else return true.
I have not added a dedicated method for calling `delete_series` API here because it is not common usage. Adding a dedicated method would require changing the factory method for `Client` to accept the purger URL and in turn change all the usages to pass an empty string.
Seems like there could be a tiny race here if the queue becomes done after checking but before offering, right?
The WelcomePage was rewritten in React i.e. it was moved to the folder react/features so it looks to me like the source code bellow needs to be rewritten to take into account that now the React App is abstracting the relation between window.location and the React Component rendered at that window.location using Route (an abstraction similar to react-router's).
Doesn't it break a contract? Two objects with null IDs should be equal if ID is a part of equals and hashcode. With this implementation it is false.
couldn't you replace the entire limit impl with a simple `f(limit && (limit -= count) <= 0)` ` break;` ?
This violates the single responsibility principle. I would be better to do it outside this filter function.
This has got out of alphabetical order.
What happened to the forwarding entry?
is max item the only place where the double converter is used?
@jjaffeux, I see that this fixes the issue, but I don't quite understand why it's necessary. Why isn't the lazy loading working and could a similar thing happen outside of tests?
Do you want to also include 'yes' and 'no' as acceptable values?
Leave the ``env`` outside of this PR. This PR can implement the ``preprocessor_definitions`` without env
Need to update other call to `watchRepo(..)` on line 1483
ctx.NetContext instead of context.TODO
Doesn't `result` still need to be zero initialized or is this bypassed because `_blocks` is a fixed sized buffer?
not very sure for above two, but should correspond to ref taken in dsc_pool_open(), in that func it only take 1 extra ref (because there is one dc_pool_put at the end of dsc_pool_open). and seems different in "if (daos_handle_is_valid(*ph))" case. maybe better to confirm with @liw
Waiting for the next block might block quite some time, we should at least mention that in the docstring.
Generally doing this is not necessary. You can name the attribute `self.cache_key`, and users can access the attribute directly, unless there's a strong reason not to.
need to update types_test.go to include the new field, and open a doc and config change issue with details
nbsp should be replaced with a regular space
false positive, must be fixed
you don't need this. You should import Client from mne.externals.FieldTrip
nit: add explicit case for `RepoCreatingPublic`, and add a `default` case in case `setting.Repository.DefaultPrivate` is something unexpected (maybe we will add more cases in the future)?
I think the formula is correct. We take the mean for the 0th row in the first case and the 1st row in the second case.
What are these changes? Whitespace? Is this an artifact of the editor?
This is the bug fix, yea? Otherwise you'd specify the worker component and get no logs.
This is not allowed - pkg/monitor may not take dependencies on deep test packages in general.
Nit: Please sort this new import in the third-party imports section near the other services
This if statement is not necessary because no matter the outcome err will be returned
This was a leftover that haven't been used at all for a while.
remove this empty line
I don't think you need this unless you want users to use your network as `amp-embed`
Did you get rid of this line when you tried nesting all `pacpy` imports?
This usage string is wrong now isn't it since you can't do a repo-name without a `-i` before it right? I think rather than changing it to match the behavior it might make more sense to change the behavior. What if we made it so that positional arguments are interpreted as `include` commits and you only need a flag for exclusion? This is how a number of git commands work. Also I think `-x` for exclude might be more intuitive than `-e` what do you think?
`StatusPermanentRedirect` seems incorrect here
The player element now has a `getStories` method returning story objects, so I think we shouldn't use the anchors as the source for this.
Remove the trailing period
do we always append it to the end? If so, it might be safer to do `name.endswith()` and `name = name[:-8]`
Make `_members`' element nullable instead?
Let's leave `} else {` and `dev.assert()`. It's still better to assert this in dev since we expect either `promise` or `obj` or `build` to exist.
ListenPort should use `%d` not `%v`
Parameters aren't passed to `BaseModule` methods anymore.
this will hang if the server never started
Isn't this implied by the ordering of `ss` in `newPriorityQueue` can this change after the fact?
This information is not used in SonarQube environment ?
do we capitalize this in the protocol doc? Let's match (i.e. should it be Proxy Granting Ticket)
Please remove the stray comma here.
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
Are the MarshalJSON/UnmarshalJSON functions used by fleet?
Unrelated question but why are we trying to make it world writable? Shouldn't it be only writable by the current user? Am I missing something?
Not accepted anymore
Seems like a bad idea to remove this?
Two conflicting handling of "boolean" values in one line. Maybe decide for one here?
same here I guess (and so on below)
When making this setting optional remove it from here to check that it continues working as before.
`if (method != null && !method.isAccessible()) ` is more readable
I noticed that there are now functional adjustments about chains, are they all based on epoch Instead of a specific height value? This feels like it would be more convenient, an epoch I remember is 24 hours?
Drive by note: We'll probably be looking for including `_ec2` in the resource name.   Trying to get better about denoting the AWS service to prevent future collisions/confusion.
Is 90 the max name size?
emptyMap => ImmutableMap.of()
Why not put this method within PanacheEntityBase instead?
nit: you can merge both lines above as `checkNotNull` will return the given argument
Now you can remove this line to pass the tests.
This is unfortunately slow (e.g. 6 mus for a simple two-member struct type).
This change I wasn't sure about. On the one hand, it's a compatibility break. On the other hand, users were table to submit any arbitrary character in the 'name' field (with the sole exception of space) and it would be accepted without normalization.
Spelling nitpick: "alow" should be "allow"
This file should be CI-agnostic too, right?
Could you remove the remaining uses of `frame[key]` into `frame.types[key]`? I notice that you did convert *some* operations on frames into operations into the `.types` attribute -- why not all? Or are there too many?
It is incongruous to make this field static when all of its accessors are instance methods. Also why use AtomicReference here?
could you add some logic about "take next config as exploration step randomly."
And there also should be check for `EnableOpenIDSignIn`
I'm afraid it is inappropriate to add `symbol` to `warningEntry`. All fields are about when/where/what. They should be common and meaningful for every `WarningEntry`. So IMHO, firstly, it is hard to figure out the meaning of this field based on name `symbol` -- updated symbols or symbols referenced in this warning (it raise the other questions -- why not a list of symbols?). Secondly, most warning entries don't have this field, we can see in the following code, we need to check if `symbol != null`. So my idea is, if we really need this symbol filed, why not inherit from `WarningEntry`, for example, `SymbolResolutionWarning` so that it is category for warnings like symbol redefined, symbol not found and so on.
Did you delete this file too?
Is `LHSGrpahNodeUpdate` always is `!DirectDependencyExecution`? If it is, then we may remove `LHSGraphNodeUpdate`.
rename findMorePeers or updatePeers?
some assert would be nice
Can we reuse the `enum` below?
IMO, you just made this worse than it was ;-) but ok ..
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
nit: DER ? isn't encode bytes into PEM certificate sufficient ?
`extension` should only be required for compressed archive suffixes that Spack isn't familiar with (but that would be understood by the `tar` program). Did you find you needed it here?
Should this explain why we set it this way? I think anyone would probably switch it back if no explanation is given
Without being able to reproduce this, this is likely enough. Ideally, if we can run this code on an impacted site and confirm it isn't the `$plugins` that is a problematic. (I don't see how, but I don't trust myself).
Please open a follow up item to move this field to a bitfield, or do it now
Don't do this - keep the fields the same internally and externally. When we move to ingress this is going to have to merge in, and ingress has no concept of duplicate from.
I think the formula is correct. We take the mean for the 0th row in the first case and the 1st row in the second case.
@dbaluta I've added a new commit just for the SAI watermark.
Here again we're mixing up concepts - why do we need a group concept for this PR?
There is a safer `dma_trace_initialized()`
init before purge?
please add spaces before the new method declarations (see the original code in this class)
nit ../models/index should be sufficient
expandStringMap does the same as this i believe
Why not `require.NoError()` ?
If you have made equals final then you also need to make hashCode and compareTo final
These variables can be private.
Please remove files that are not related to the article
Could we have it outside of this class, like in `ComponentManager`? The reason is that this object should be a POJO imho.
Block has too many lines. [63/25]
Layout/MultilineMethodCallIndentation: Align .to with .create_or_update_from_csv_row on line 112.
Any reason we need the extra catch block?
I think this should be non-nullable
Why does this go from `STATUS_LITE` to `STATUS_UNREVIEWED`?
Would it be worth attempting to see if there is a "Name" field, and if so, use that instead of the email address for the name portion?
Weird... Was JsrtPch.cpp `#include`d somewhere at some point?
Should we also keep this for templates ?
Please use `github.com/ngaut/log`.
I would suggest to call it simply `conf` (or `config`)
Oh could we have 'r' added to usage as well? I spent forever wondering why `zdb -h` wasn't showing the new option :)
@annatisch quick guidelines question: If we're conforming to the "all objects must accept dict representation" guideline, should we express this at the type level even though it's very much "not the preferred flow"? I'm very torn here between being "completely honest" and "providing less confusing guidance and relying on mypy+dict coercing users to express intent" (in terms of muddying up all the parameter types with Union[dict, ...])
why there is no such parameter before?
I would remove the `if (Equals(sv1, sv2))` at the beginning, and replace lines 2616 on with `return x.CompareTo(y);`
Would not these be useful for an implementer of a new runner?
Is this needed?
For Go conventions this would be `HMACHeader`
Oh, a script we should migrate to go (not now :slightly_smiling_face:).
I am quite certain it is fine not to update this year... Maybe @techknowlogick knows better?
How about Peer ID checks here?
Two existing issues in this attribute. 1. It is odd that the ctor is below the properties. 2. We don't store the `Type` ctor arg in a property anywhere?
this is not needed if youre not formatting the data
typo: "in the in the" -> "in the".
what haopens if value is false?
I think this should be non-nullable
This is the first monitor that needs to be conditional. If you plan on running as a pod, we don't want to list / watch everything from inside the cluster (we're watching from outside). You probably need to have a monitor specifically for this, and you should not be running this from outside the cluster. A proxy connection through the cluster will be disrupted.
Doesn't this lead to an error if `len(opts.OrderBy) == 0` evaluates to true as `"id ASC".String()` does not exist?
Is this import still necessary? I don't see we using describe any more here.
Can't we use the names `start_event` and `stop_event` to be consistent with the protocol and the methods `stop` and `start`?
is configFile still being used? Ideally should be removed.
Does this work on both the old and the new binary?
This line of code forces fuse_all_reduce_ops = True, regardless of whether the user has previously set it or not.
This was unclear before. This is really a map of `scheme(str) -> []host(str)`
this status is wrong... should be something like 'DB migration ok, failed to set new version'
I removed this because it shouldn't be necessary to check here anymore, and it's probably not the right place to check it anyway
I think the N is the major word here and doesn't carry much meaning. How about first half and second half?
Can you use another variable name other than `$output` to avoid conflicts anywhere else. Maybe `$ibmi_output`.
Same as above, remove the type here to avoid BC breaks.
columnComparators.get() is returning a Comparator<Object>
This is good, but `cchName` below is also wrong. `size_t` should be `UIntPtr`. It is `uint` on x32 and `ulong` on x64.
Hrm should this have been removed?
Same as above, but with the additional step of making this lambda a function (you can't add type annotations to lambdas).
Nice catch, and we probably need to add pyflakes to our toolkit
c/p err (was placeholder for something now remove it!)
why is this `Value` change needed?
Why lower this?
It's just occurred to me that with `display_title` being a thing now, `full_title` would be better described as `long_display_title`. Would you have any issue with me renaming the `full_title` constants/variables/functions to use `long_display_title`?
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
this is returned to Firefox in the update response, right? If so, will it know what to do with a "permission-enabler" type of addon? (i.e. is returning "extension" more correct for Firefox?)
Do you need this?
Could this method still return the frame that was created? I note this as the method currently has all side effects. The initialization of `mainFrame` is not localized anymore and I think that will make it harder for a future maintainer. Also, with a return value, proper call ordering would be easier to understand. It's generally a bad sign when code can be re-ordered, still compile, and then be wrong.
I don't think it's good idea to make such intrusive dependency into `wallet2` module
It was singular in purpouse, let's undo. Single test environment consists of several docker containers. Let's undo. Also please capture rename refactorings in separate commits.
This check was to prevent manipulation when the Node's value becomes null for some reason. How are we ensuring that manipulators are not enabled when the preview value turns null and evaluation was not triggered to destroy the manipulator.
Line is too long. [97/80]
msg: 'Failed to normalize glob patterns: ' ?
Moving it to Cython means exposing most C structures to Cython and staring at tons of generated C code to see that it actually does the right thing (like in #891). I wouldn't do it bundled together with a functional change.
caused by goimports, can revert
Don't forget to change this to `volume` type (regularly spaced grid)
unrelated: I wonder if we should clean up usages of this API so we never call it with jQuery objects, seems like a superfluous test, just send it the right type of object.
I think `log_filename` is more accurate
It this deleted on purpose?
Could you make sure that the license header is at the very top of the file?
I assuming that HB should be HA: 1. Checking **HB** with KVMHAVMActivityChecker ... 2. Checking **HA** with ...
I _think_ this code is unnecessary...
c/p err (was placeholder for something now remove it!)
Why the *magic* time number here instead of using `GraceTimeOut` ?
Should we name those functions appropriately? Eg; StateWithoutLock()
You'll also need to add this to `predict_entailment` in the model, I think.
Can we make this `4.0`? We still support MongoDB 4.0 so we should use the oldest supported version, I think.
Is this deliberate?
No longer used?
mocks should never be `static`. For this 'single use' mock I'd just create it inline in `startRestServer`.
I think we can get rid of this nonsense.
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I feel this should be in Raw not Epochs. The keep_comp + dest_comp would then be parameters of Raw. I also feel we don't need 2 params keep_comp + dest_comp but only one. Something like: copensation = None -> don't touch (ie keep_comp) copensation = 3 -> use third order compensation (ie. dest_comp). @mshamalainen any opinion? BTI users any opinion? cc/ @dengemann
This part ` = response.block_weight = ` seems like a mistake (when copying a line?), although harmless as it's written two lines below.
How about we make `custom-validation-reporting` take multiple space-separated values, create a unified validator that takes the type of the validation(s) as a parameter and get rid of `InteractAndSubmitValidator`. I think the infrastructure is already there for this to happen and that way the syntax would be `custom-validation-reporting = 'as-you-go show-all-on-submit'`.
you shouldn't even need to add the extra arguments there
Standards: Can you please wrap operators with spaces and add a space before the brace?
gonna make sure if we saw it running or completed and the time
FYI, functions have a .length property which is why the jQuery implementation was explicitly making sure it wasn't a function. Should probably continue to handle that case so functions aren't treated as ArrayLike
Is there any requirement that the password is populated? If the `authType` is `BASIC` but the `authUser` is empty, basic auth won't be enabled but no error/warning will be communicated to the user.
There is double `;` on this line.
Could we make this `errors.Is(ctx.Err(), context.Canceled)`.
Is this file here to make editable installs work (for python 2)? It is not included in the actual package (wheel/sdist), correct?
I think grpc already has the duration metrics. Do we need to add the new?
Please remove this dummy test. Thanks!
Here we need to use a locally created suite because we need access to the latest Event published.
This function seems to be unnecessary.
Why switch to list multimap _everywhere_? If we want to _always_ allow duplicates, was this a bug previously? Why should a given element consumer (timer) appear multiple times for a given pcollection? I realize that most cases are just interface changes to clarify some contract, but what were we doing before?
Curious: Why is this file being special-cased? If it has a schema, I'd imagine it should be included via `jsonFilesWithSchemas`. And if not, we'd leave it out.
Naming things is hard, this is a good name, might `Current` be a better one? So `WithVersion.Current`?
Plugins shouldn't use `$CONFIG`.
This could also be an anonymous class or a class defined in the initializer.
Would you be so kind to change this to `const httpStatusOK = "200"`
mocks should never be `static`. For this 'single use' mock I'd just create it inline in `startRestServer`.
@mattpap AFIACT `--emit-error` is superfluous now but please let me know if I am mistaken
Not your fault (except for pointing it out :-), but it is really terrible that this takes either a syntax node or a SymbolNode. Those really aren't like each other. :-(
Should be `FIELD_CONTENT_VALUE` to be consistent with the actual name of the condition.
side-note, this dependency on `WeakAi` is something we really would like to get rid of: - allows for all of weak ai to be deleted - kinda poor design, the core game engine should not depend on AI code
why a pointer here?
nit: move to bottom :trollface: Also somebody should set `goimport` for David
Could we move this predicate to `src/server/pkg/ancestry/ancestry.go` for same reason we relocated the other one. It seems like there's a particular risk of this one changing since it enumerates the valid characters.
@wido You may want to put back this `else` statement. In Cosmic sso has been removed, and when I came across this left-over I removed it. However, I think it shouldn't removed from CloudStack to not break sso.
(style) 'nd' may be misspelled - perhaps 'and'?
or we can test with `Contains("deleted")` or alike
@dvoytenko is `viewport.getSize()` cached? i wasn't 100% sure, or does it depend on the viewport type implementation? i'm assuming its safe to read width since nothing should be mutating it anyways
Out of curiosity why is Ellipsoid the only primitive that checks for log depth itself?
why not typehint to `string`
Shall we use `logFile.getPath()` here?
Can you pass a message without this constructor?
I think the formula is correct. We take the mean for the 0th row in the first case and the 1st row in the second case.
Just making sure this doesn't get reintroduced in a future PR. This restriction has to stay in place. The thing we wanted to allow extra slashes in was docker repos, not imagestreams
I think this file got committed by accident.
no empty line, it is all stdlib here
Is the `application` controller injection used in `user-card`?
Not super familiar with context, but it doesn't seem this is used outsied the s2 package, will it be? Does it need to be exported?
where is `self.update_mask` placed in this version?
Curious why the cache clear here in addition to step changed? I think the `#start` might have been pretty close to being a no-op everywhere and possibly removed. Is this a safe-measure or necessary?
I suppose you can undo this once you've moved the test cases into the correct test.
i'm seeing `mono700` and `mono100` as menu backgrounds in figma, which should maintain the `backgroundAlt` value
Is this okay? I'm not sure if we treat `6.0` differently from `6`
`MalformedInputException` isn't actually used.
Is it possible to add the `WHERE` clause directly to the `sql` variable instead of having to specify it twice?
Also I just noticed looking at our `cmdutil` package that there's a way to read config files using it too. Not sure if that'll make things easier but it might.
nit: Is there any benefit to using a random index over a fixed one? When observing the test run from logs, we now need to search the messages to determine which OM was taken down on this run (also distinguish the deliberate takedown from a crash or JVM pause induced leader change), instead of having that info beforehand.
I would remove the `if (Equals(sv1, sv2))` at the beginning, and replace lines 2616 on with `return x.CompareTo(y);`
small typo: checkmember.py
Are the errgroup's gorountines also working with `c.ctx`?
Nit: since this field has a default value to fall back on we could also directly use `d.Get()` and set the attribute directly during input creation @L96
I vote to catch all exceptions types here, not just `TypeError`, so that we can try to be helpful if a module isn't found / an import is missing / etc.
Did you get rid of this line when you tried nesting all `pacpy` imports?
there should be `assertFalse`?
That was correct before, no? `Instance` is the type, so `Instance`s is many of them?
`ConfigureSendInfrastructure` later in this class makes this call again. Should it be updated to retrieve the one from the settings collection?
you are not using `filters` as plural in other places
do we always append it to the end? If so, it might be safer to do `name.endswith()` and `name = name[:-8]`
Is this import still necessary? I don't see we using describe any more here.
I think this was due to @cjb's lack of a git commit hook.
Do not insert spaces like this, looks really confusing.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Alternatively I could make the conversion directly before `self.__name` is passed to file system layer which has the potential benefit that `FileIO.name` would return the original pathlike object without conversion. Though I am not 100% sure what the right behaviour there should be.
Small quibble to have `ctx` on the next line down, and keep the rest of the params on lines less than 80 chars.
Note that all the operators are assuming `number`/`number` comparisons. - We need to do type checking to make sure, for example, that `4 > 'cat'` is a syntax error. Please carefully think about our type system and make it reasonably strict, e.g., no unexpected implicit conversions like `true > color('red')` - We also need to implement operators for `Color` types, e.g., component-wise operators. If we don't want to do those functions to `Color` (totally cool with me to keep Cesium's API surface area small) then we can just add them a local functions in this file.
Is this change intentional?
is configFile still being used? Ideally should be removed.
should we be defensive here and check to see if there are any items after the split?
The meaning we gave to this tag was "a test requiring Docker". Does it cause you any trouble keeping it?
??? Wouldn't the switch fall through without this? I.e. remove the case.
Ok, so the interface has not moved. Is that why it is OK to move the implementation to Core? Should the interface also move to Core in Dynamo 3.0?
This should be a ReadLock
to align with the new design, we should later aim to restrain its use. This can be useful for testing low-level file-manipulation logic. HoodieTestTable should leverage more src code path.
If you track it before `s.state.Position() != 0` then it's value doesn't match with `s.persistFailed` because only the replica at position 0 can fail (think about computing the % of failures). I would track this metric after the check `s.state.Position() != 0`.
Moving it to Cython means exposing most C structures to Cython and staring at tons of generated C code to see that it actually does the right thing (like in #891). I wouldn't do it bundled together with a functional change.
Err.. it depends on the data_size.. for the 64 bit 'case' down further you change the return_size.. This pattern applies to most other types dealing with multiple data_sizes.
couldn't we instead / or additionally look for `IngressClass` Object with the controller `traefik.io/ingress-controller` in the spec?
Redundant `return` detected.
NULL check not needed.
Should this _actually_ be `"apikey"`?
Is this still necessary with a file-level import (above)?
Using 'OnLog' here seems odd. Are you sure that's the right API?
GoogleTest is only available conditionally. We will have to discuss if we want to change that.
This file contains the largest number of changes by far and might be a candidate for extraction to a separate PR.
The result of this call is unused. I don't think it should be here.
the CAS protocol parameter and the value we put in the flow scope are two different thiings. This muddles the parameters.
Should be ObservedGeneration is the most recent generation observed for this **Seed**.?
Found typo I was left with.
@QilongTang sorry, I did not see that line 135 actually sets the state! I am not sure if this change is actually an optimization - it's likely that the Visibility does not actually trigger any updates unless it changes state. I am okay if you want to close this.
`timeFormat` --> `timeSecondsFormat` (?)
Is this class really needed?
starting here, a lot more blank lines are being introduced
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
Could you leave me a `TODO(rcebulko): Define Rect extern type` here?
this does make it so that all future authz informers will end up using JSON. just something to think about
import mess :-)
What's the purpose of this type?
revert this pls
Hmm I'd suggest logging some kind of error message if `ImageIO.read` returns `null`. Otherwise map makers might not realize that an invalid image was attempted to get loaded
Method `simulateBattles` has 5 arguments (exceeds 4 allowed). Consider refactoring.
Should it be `<=` here?
These are needed for migrating the actions to the event-feed-service.
Throughout the tests for comparing trees, `contents` was being encoded as byte strings in the expected output. I'm not sure why - the tests pass when unicode in Py2, and the bytes present an issue when using Py3.
spaces after colons
I'm wonder if we might get a bit more predictable performance by also bumping SetMaxIdleConns.
@deads2k how about initializing to Re-encrypt when there is a DestinationCACertificate?
we use to call this `imageapi` (we do in many places)
Why use a public constant here? Neither of those names is reused anywhere.
delete this file?
IMO Override extension point should be able to perform its own check
A more reasonable default timeout is 30s not infinite.
Declared but unused on Windows. Only referenced in Linux builds.
I suggest renaming this file (and the associated `gulp` task) to something like `process-github-issues`. By doing so, the purpose of this task will be obvious to those who are unfamiliar with our `gulp tasks`. So this file will be `build-system/tasks/process-github-issues.js`
Use && instead of and.
I thought we already had an analyzer for "yoda conditionals"
Can the same authorization token be used both here and where we create/populate a build group?
No need to literal cast.
Need to communicate to users that the agg function is "first"
This will return true for InvariantMode. I would expect it to return false. (It should not matter, but it is confusing to UseIcu to be true when we are not using ICU.)
Workspace is no longer exhibiting a crash during this test?
`patch` verbs typically apply to `#update` methods right? Would it horribly break devise if we tried to do that?
Why is this exported now?
Why do we remove the @Override for equals?
"command is command is run"? :)
minor nit, I don't think we need to change formatting here
Why lower this?
for microservices ? is this not required ?
Just for my understanding, why is an identifier required for the import?
Nit: Not directly related to this PR, but I think it makes sense to exit early once an undefined value is found.
actually, it probably makes sense to merge this whole file into `3p-frame-messaging.js` now
I'm wondering if formatInteger() is really useful ? Couldn't we replace it by formatLong ?
@bflad not sure if this will break anything - had to do it in order for import to work correctly though.
is the comma intended here?
Can you explain why this is conditional?
Do we ever create a `ByteString` without looking it up in a map of caches?
Question: This defaults the value to 0, but is this always what we want? I'm unsure if there's a concrete example, but as a quick analogy, this could move the "default backups" from `8` as the default, to `0`.
It looks like all the type arguments are internal, if they are we'd be safe passing them as their enum instead of an int. Less checking for the compiler. Definitely not essential and I could easily have missed something.
Line is too long. [110/80]<br>Prefer `map` over `collect`.<br>Space inside } missing.
Stray thought: strlen() has to traverse the string looking for a '\0' byte, which strcspn already did for us. We could make this test cheaper by writing it as: <code> if (string[strcspn(string, "metachars")] == '\0') /\* i.e. no metachars appear in string */ </code>
Do we really need to re-fetch the object then?
Did you get rid of this line when you tried nesting all `pacpy` imports?
revert this pls
this is wrong... it means if err is nil, we won't return the env
Import packages with wildcard is not recommended. Could you please check it?
The matches are not _returned_ by the `expression` argument. How about something like: > determining if values retrieved using `expression` should be...
don't make meta publicly available please
plz add whitespace in brackets (3 more below)
unsure this should be done in the constructor, wouldn't be safer to do it in a lifecycle method e.g. componentDidMount?
a unit test would be nice to have to make sure the behaviour won't change down the road
I think there is one other place we use the descriptor (for the return value in locals). Should that also be getInternalName() and/or use describeType?
I'm not familiar with the internal details of the engine framework but nevertheless this change looks conceptually wrong to me for two reasons: - A call into the engine (`ENGINE_get_DH()`) is made before calling `ENGINE_init()` - This check competes with the assignment and check of `ENGINE_get_DH()` in lines 72,73. If there is really a need to fallback to a default DH engine (which I can't decide from my current knowledge of the internals), then lines 68ff need to be refactored, too.
I assume you know these don't belong hardcoded here and need to be passed in to cmd_runsuite via Options
Won't this still leave it broken? If the context is cancelled, then this will stop extracting.
Metrics/CyclomaticComplexity: Cyclomatic complexity for switch_to_same is too high. [7/6]<br>Metrics/PerceivedComplexity: Perceived complexity for switch_to_same is too high. [8/7]
tiny nit: the logic is laid out a bit weirdly here; it'd make more sense to emphasize what's different by having the dataSource be created in the if block, but the DruidTable created outside of it.
Remove this route. There's already a default `index` route for collection that you should use if you really need to, but this is probably unused.
Indent `when` as deep as `case`.
I think the formula is correct. We take the mean for the 0th row in the first case and the 1st row in the second case.
Maybe we could change this to check for the message in the response body? This would e.g. protect us if someone removes rendering of `global_notice` from the layout. In other words, we should assert that the content is on the page, not just in the flash.
You don't need to include the parse methods in the has array, the parse methods are just helper methods, and they're nothing the user should care about
`tagName` may be undefined if it's not an `Element` (note that `node` is a `Node`).
Keep the `@param` tag?
Rather than delete, please move to the util file.
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
We have to be consistent with other places that we do checks to make the code safe for minification. I.E. if `strict-di` is on, then we should not allow this
This changes text from `Undo reschedule` to `Undo Reschedule` Might want a test here to ensure correctness
Guest VM's with public network access is possible by checking default egress rule. Without adding this new notion of a 'public access', networks can reuse the `Egress Default Policy`.
If we're going to be changing these, I think "The DOM element, or ID of a DOM element" is probably best. DOM is important to qualify. I was unsure about whether node vs. element but the W3 spec uses element as a more specific term.
Was this intentional?
Adding a new member to an interface (that we expect third parties to implement) is a breaking change, unfortunately
jobOrchestrationTime -> jobOrchestratedTime.
This file has already been tokenized
This is no longer required.
Extract to PersistentTokenRepository_couchbase.java.ejs
import * is not allowed in Beam. Please import classes individually (configure your IDE settings accordingly if you have to).
From what I see you don't need to have the complete interface imported here, because you are only usings `Events()`?
by default it logs to STDOUT, let me know if this should continue the default behavior
I renamed the controller and paths to follow the rails convention of having controllers with plural names
We should probably not call this twice. It's called anyway in the "init" fn.
it helps if the test class is `public`
Why was this necessary?
Moving it to Cython means exposing most C structures to Cython and staring at tons of generated C code to see that it actually does the right thing (like in #891). I wouldn't do it bundled together with a functional change.
Unsure if it would be better for us to skip this exists call for performance reasons, and just catch (and allow) any exception on `commit()` in `Stage.run()` when we want `allow_missing` behavior? (meaning we would fail in `cache.save` instead of here)
Won't this still leave it broken? If the context is cancelled, then this will stop extracting.
better to add container id too
Converted from deleted *.rec test.
do we need add ctx for them?
What's the reference to Test-Rule here? We shouldn't base conditions on what people might call alert rules.
i think we could even use `CollectionRepresentation` here, right?
Why are we calling BreakSolutionStepsLoop here?
Well, you're setting cron values. That is, you can define an array NN times, or you can adjust the very values and only set the array once.
Ah, this is legal? So this would appear in an importing package as `Parent` and not `Parent::Parent`?
this can go around line 20 below.
We need a test for the case where we use the headers for `jsonToObject` for a TestPerson.
Please, update years to 2019-2000 in line 2.
Can this be moved down to near where it's used? Also the name isn't very descriptive.
nit: you can merge both lines above as `checkNotNull` will return the given argument
normally when we talk about "squared difference" we are referring to the L2 metric in a vector space. Therefore, this function should compute conj(x-y)*(x-y). In other words, you need to modify the implementation as well by adding a conjugation to the first input for complex types.
@timrae I think this is the only potential change to existing behavior - do you have an opinion? The specific review note is: > > Confirm whether selecting the Text Input Field, rather than "Show Answer" on a note type with both {{hint:}} and {{type:}} is correct. > > Normally, a {{type:}} field does not have this focus initially. > > But, even with focus on the text input field, ENTER displays the new card.
Probably not worth the effort, but this file should probably be renamed to `tEpetra_LOF_FilteredGI`
typo: `lay` -> `determine`. Add the default value here.
if we are changing all of these to `0755` could you make a constant for that value.
Make `maybeResetAmpMedia_` async so the `swap..MediaIntoDom_` can wait for this.
`# #` -> `#`, and add a empty line above. This can be fixed in the NMT pr.
Style/ClassAndModuleChildren: Use nested module/class definitions instead of compact style.
Converted from deleted *.rec test.
Put `(ix, si)` to help yapf do the right thing.
NIT: Should call the new interface from the old one, for completeness. Fix if forced to repush. LGTM
Wrapping `cloneElement` to prevent passing the index, and array.
do we need add ctx for them?
please remove ` * @param object $fields SimpleXML object that contains the posting when it is valid` from the doxgen header
```suggestion _, ok := err.(*IncompleteDNSConfigError) return ok ``
Another area for further work here is these modes seem to be ignored on Windows.
I'd prefer it if this was a hard failure - otherwise we have the possibility of failing over onto the local filesystem in the case of an integration problem or malicious manipulation of the environment when we're in a finished VCH.
`tagName` may be undefined if it's not an `Element` (note that `node` is a `Node`).
I don't think we have LockError used anywhere anymore. You can probably get rid of it.
what haopens if value is false?
Throughout `stats.php`, we're assuming the output of will be an array of `stats_get_options` options. If someone installed Jetpack via CLI, I don't think this would ever fire to get the default options, so most of the code would at least throw notices about the undefined indexes until a cron run or someone visited wp-admin. Could spin out a "stats_default_options" that returns the default array, `if ( false === $options ) { return stats_default_options()}` and use that same function in `stats_upgrade_options` to keep things DRY. Thoughts?
Change your IDE to not use tabs and to remove unneeded whitespaces. Please remove this one, thanks.
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
Same note as above on the curly braces.
cc @jmhooper this spec checked that we were prompted for 2fa before deleting account, basically testing that the controller inherited from the Reauth controller. I figured that by prompting for the password we'd be OK without, but I think that controller also checks another factor. Do you think it's still OK to remove this?
Can you add a TODO here that this should be dependent on the `World`? We need to take that an as input argument.
Why is this necessary?
If `--build`, `--build=` or `--build=*` is passed, build ALL from sources.
Ouch, this looks wrong. This else has to be kept (indented by one space).
Thinking just shorten `Operating System` to `OS`.
if we dont need it, remove it
Can this be removed?
We dont need an extra gap at L9
Please don't communicate this via a signal. That introduces unnecessary overhead and makes the code more complex than needed. A simple `pyqtSlot` should do the job. That also prevents the need to create code that's not in the SliceInfoPlugin. For reference on how to use a pyqtSlot to create a dialogue you could look at the UraniumExampleExtensionPlugin or the Change Log.
This should be a full sentence.
The `include/libzutil.h` header contains some conditional `HAVE_LIBUDEV` blocks which should perhaps be restructured so the prototypes are always declared and function implemented, even if it may always return `ENODATA` or `B_FALSE`.
Same concerns about not composing lifecycle interfaces.
OT: I wonder if dataclasses would be useful for some of mypy's repetitive code. There's a backport on PyPI that works on older Python 3 versions.
how is this used in the API? I could imagine a name like srcStore or srcImage would be more appropriate.
nit: Is this removal intentional? It looks like unnecessary churn to me.
Are you sure about this one? We always name our returned arguments
Now that all handles have partitionPath, can this be moved to base class (HoodieWriteHandle ?)
Metrics/CyclomaticComplexity: Cyclomatic complexity for perform is too high. [10/6]<br>Metrics/MethodLength: Method has too many lines. [39/20]<br>Metrics/PerceivedComplexity: Perceived complexity for perform is too high. [11/7]
Why does Prettier not allow me to put everything on one line? It's annoying.
In other parts of the code a normal error is returned for this fail, but here a panic is generated. Is there a reason?
This shouldn't be needed IIUC, you could just pull `Config` out of CDI.current() instead of wrapping in this class
Line is too long. [100/80]
Generally, explicit imports are preferred over *
nope, don't add this line.
This is the thing that would benefit from the ``_conan_collaborators`` mechanism
same here just `<%_ if (relationshipValidate && relationshipValidateRules.indexOf('required') != -1) { %>` is sufficient
Confirmed: removing lines 123-126 yields correct results when output is and is not a tty
since we're here can we fix this typo: >If ~~we~~ the container
If we can't find a tag, should we `raise` or surface that error? Are we okay with just `return`ing out of here and not knowing that we tried to run the `BustCacheJob` on a tag that doesn't exist?
struct field ProcessId should be ProcessID
Revert this change
This basically kiils the heuristics and starts checking the whole file contents. I suppose we could extend the heuristics to "check first N bytes + check last N bytes" to cover your particular case, but there is no real need for it, as the main intention for this heuristics is providing md5 compatibility for git-tracked files between *nix and windows, where git uses CRLF by default even if you didn't have them before in your file. So we actually need to have a heuristic that is an exact match to the one that git uses. :slightly_smiling_face: That being said, we sure could look into optimizing this by not opening the file again or optimizing dos2unix() etc.
The change in this file was related to a change in a test which has since been reverted. Should this also be reverted? I don't see a need for it, but let me know if I'm missing something.
whoa was this a bug?
High level flow step 1: we start here and transform responses
Please put the opening brace at the end of the previous line, not on a line by itself.
Why make an empty case? Just reverse the condition and delete the else.
Any particular reason this should stay as an info level log versus something like `LOG(WARNING)`? I think I like the change to `VLOG(1)` also, but it seems to me more consistent with the flow of events if this was a `LOG(WARNING)` as above.
It's good practice to keep bug fixes minimized and on their own commit. Plays well with commit history/rollbacks, etc.. This one line IMO ideally would have been the only item in this PR. Note that above we are talking about assumptions of the structure, which in terms of PRs is unrelated to how we handle the case when the YAML is not valid
Prefer single-quoted strings when you don't need string interpolation or special symbols.
After creating a helper to mark the pipeline as stopped, we only used this helper (`updatePipelineState`) here to mark a pipeline as running, so I simplified the helper and named it as such.
FYI the canonical way to write this is `T[] copy = (T[])oldArray.Clone();`.
Instead of moving the `purchaseType` logic out of `#handlePurchase`, let's add a `data-purchase-type` attribute to this anchor.
Style/ClassAndModuleChildren: Use nested module/class definitions instead of compact style.
don't built this on ios, only osx
Can we make the context the first argument?
We could simply use dep.status() here and extract the message from it, without calling changed() first.
I think we should make this variable `volatile` to ensure cross-thread visibility.
Should we also check for loopback here? If we do not then cli may end up showing loopback for hostnames (which may clash) because status update will pick the hostnameoverride anyway whether the IPaddress is properly calculated or not. Not critical.
> AND `self`=0 AND NOT `blocked` AND NOT `pending` AND `hidden`=0", I see 2 different ways of handling "boolean" values (or flags).
These assertions should come from org.testng.AssertJUnit to avoid mixing up libraries... unless we've started porting over testsuites over to JUnit but I don't think that's the case yet?
`canonicalize_path` comes from `spack.util.path`, not `llnl.util.filesystem` doesn't it? There are more of this reference below.
You added new partial `views/repository_columns/_delete_column_modal.html.erb`, so you should remove the old one `app/views/repositories/_delete_column_modal.html.erb`.
We're not linking to `FrameState` because it's private now. @pjcozzi does that mean we should change these callbacks to not take a `FrameState` anymore? The intention was to allow the alpha, etc. to vary with time, camera location, etc. but I'm not aware of anyone using the feature.
Was there a specific reason not to use `esc_html` on the `$tab->get_label()` ? It seems these are translated strings that just contain a word in the implementations.
Can it ever be not "message"?
Should this be `len < 0` or just `len == -1`? I would argue 0 is a valid return value from `aes_wrap_cipher_internal`, as it means the input/output is empty.
The text of the error must be updated as well.
This is not required
Make it a prefix, not a suffix.
Please leave the method and mark as deprecated. It is possible other products are relying on this method as a library.
Why has this disappeared?
This change should not be here.
This isn't correct. This means the chain wasn't found, the original is probably better.
Passing in `mod_prefix + base` to `BuildSource` here might be incorrect when there's a period in the `base` name. It might make sense to pass in `None` (since that translates to `__main__`). Someone who knows build better would know for sure :-)
It would be more idiomatic here to use raw string literals (which are escaped with `` ` ``) or to put each string literal on its own line and concatenate them, but what you have is simpler. You might file a follow-up issue to track generating the more idiomatic code.
This makes sure we get the right color here. Not really specific to the issue but the old one wasn't quite right.
Not sure what the capitalization convention is for java, but I noticed we have `replicaTag` below but `DeploymentTag` here. Should it be `deploymentTag`?
don't add this, there is a standard ref tag automagically inserted based on filename `sphx_glr_auto_tutorials_plot_metadata_epochs.py`
`! empty($index)` should be better than `$index === NULL`, to filter out bogus keys such as '0'. It also might be a better idea to return FALSE or NULL for non-existing keys.
So builds made canceled a value in 'Status' instead of a separate annotation. Personally, I like having 'failed' mean failed no matter the reason, so I like this better, but wanted to make sure I am not mistaken that canceled deployments are still failed.
The crash is fixed, but it does not seem like setting the radius works anymore / it does not change. Do you mind testing using the eyetracking Builder demo? Maybe setting the base `visual.Circle` radius is no longer working?
need to change
Same thing here, should default to "None" instead of an empty string
Nit: this should go between cortex imports, and not be standalone.
I'm wondering if formatInteger() is really useful ? Couldn't we replace it by formatLong ?
Why adding this method here instead of in OperationContext?
Could we rename this as `_remainingRecursionDepth`?
Why change this? If I unlog a route using `./unlogger.py "<route name"`, without downloading first the colors are messed up.
makes sense to be non-static.
Does removing this cause any issues?
Do you have an example of a situation where this would be used?
hmm, seems cannot remove above 2 lines? see the usage in cli_obj.c, obj_req_fanout(), "tse_task_list_traverse(task_list, shard_task_abort, &rc);" when insert the task to the list - 2815 > > tse_task_addref(shard_task); 2816 > > tse_task_list_add(shard_task, task_list); So the above two lines are to revert L2815 ~ 2816
I'm guessing that the function snake case change is a lot more involved and is still WIP?
The copyright either contains a superfluous comma or aims to extend to the end of time.
Can we use null.v4 for new things>
is this effectively our version control for the shell version? in other words, am i right in assuming that, in order to change the shell, you'd need to go into the code and increment this?
Won't this still leave it broken? If the context is cancelled, then this will stop extracting.
just nothing to be tested?
nit for clarity: "and resume the animation or video"
Any reason you're using a different logging package here than we use in most other places in the repo? I'd prefer to keep things unified if possible.
Won't this still leave it broken? If the context is cancelled, then this will stop extracting.
this is correct, however we have a long standing name clash between the Kratos::Parameters and ConstitutiveLAw::Paramters. could u add "ConstitutiveLaw::" to prevent future problems?
Do we need this `if`?
TBH, I feel this change is more confusing. E.g. `comparator` is **not** used to _"further refine the search results"_. And _"should be used"_ sounds more like the user should do something (vs AngularJS using the function under the hood). And also `actual` is not necessarily a _"value from the array"_, but can be a property or sub-property of an item in the collection/array.
move number to a named constant
I like using `__FreeBSD__`, but a just as a note, I'd like recommendations on a standard osquery OS/DISTRO determination name scheme throughout python (gen___.py), bash (provision.sh), CMake, and C/C++. Right now you can use APPLE/LINUX/CENTOS/UBUNTU/FREEBSD in both CMake and C/C++. In C/C++ the output from lib.sh's OS and DISTRO are defined by CMake. We should set a DARWIN to be consistent on Apple/OSX.
@rafaelweingartner this may quickly fill up /var/log, otherwise LGTM.
In case you're curious: The netcoreapp build complained that _nestingStack might be null, when neither the net461 or netstandard2.0 versions did (the field is declared as `Stack<StackFrame>?`, so I don't understand the difference in opinion). The compound assert didn't make it happy, so it also got a ! suppression.
>matchLengthPtr [](start = 73, length = 14) ditto
this is all in the NodeConfig, can we just call this `NetworkConfig`?
You can optimize this by resolving with the promise: `message.responseResolver(responsePromise)`
Intention was good, execution a bit worse ;) @deads2k mind updating in a followup?
Actually, I'm not sure about this change now, `cursor` is accessed through a closure so I believe we wanted the original `++cursor;`. Perhaps `return cursor++;` is best.
Can we store _s into a local and then use that local for the rest of the method, as we do in earlier methods like Peek?
why move this?
nit: although we do the rename in a macro, could you change the statement at the end of this loop to FOREACH_BLOCK_ALL?
Are these changes correct? I don't see the difference between calling `reject` and returning it
Can you put this after `is_bzr_installed()` since the functions have the same structure?
I would remove the `if (Equals(sv1, sv2))` at the beginning, and replace lines 2616 on with `return x.CompareTo(y);`
why remove it?
nit of the tiniest nits. If possible, it would be nice to have the blank line above this still. But only adjust if you need other refinements for this PR.
Might be worth noting that this change only works because of the `encapsulated_logger` in `DaemonPantsRunner`, and therefore we don't have to gate logging setup anymore.
What exactly should this return at all? If you have `minOccurs` as 0 and `maxOccurs` as 1 it would already return true, although it is not really multiple.
I've just found that removing these methods is actually SPI-breaking :-/ It was a bad SPI arguably, but still. Something to bear in mind for the future. (And, well, I'll dig out the `name` out of the `image` :-) )
I don't think we need the locks at all, but if you keep them, how about keeping just one?
Should be strict.
@MGaetan89 this does the same thing
Is there a way to do this without UJS? We purposefully don't include it as we don't use it around the website, neither jQuery
did you mean package "errors" or package "github.com/pkg/errors" :)
are we pointing to user selected language?
I'm tempted to say that this should be `publicImageRepository` or `publicPullSpec` to set the longer term direction.
Please pass the kwargs to it
what does 'shared' mean then if there is "No need to writeback or invalidate it anymore or invoke comp_make_shared() either." Does this mean that 'shared' means uncached and this this patch introduces a performance hit until the addition of the coherent access?
Not related to your changes but if IIUC this will silently ignore mistyped or otherwise invalid arguments. @felixdoerre Wouldn't it be better to give the user a feedback in such a case?
`kubernetes` is the preferred alias
lots of changes on imports. Is that expected ?
Won't this still leave it broken? If the context is cancelled, then this will stop extracting.
The matches are not _returned_ by the `expression` argument. How about something like: > determining if values retrieved using `expression` should be...
Description is correct, but solution does not formally align with description. Just imagine 2^32+n long string on 64-bit system. Well, even on 32-bit it's formally incorrect, because conversion from unsigned to signed with most significant bit is not formally defined. Correct solution would be to declare size_t variable that would receive strlen return value, check that for boundary condition, and only then assign it to len.
Interesting - is this a subtly different empty tensor than before?
I see `_changeTokenRegistrations` is now being mutated without the lock. Is that going to be a problem?
do `this.cacheProvider = this.config.get('cacheProvider') || this.config.get('hibernateCache');` for backward compatibility in places where we fetch value form config
Need to become private type?
Was this intentional?
is configFile still being used? Ideally should be removed.
Can't use this here. Perhaps self or some other way of getting the promise from the closure?
>NativePal [](start = 28, length = 9) don't we call this Interop instead?
[nit] Could be `func (*State) EnsureNoProjectsMissing(context.Context, []string) error {` but doesn't matter
Nit: Please sort this new import in the third-party imports section near the other services
Why has this been changed?
In Ruby 2.3, you can do something like this, `UserEmail.find_by(email: Email.downcase(email))&.user`
Why do we only remove it for these three attributes? What about all the others?
Let's try to keep the imports alphabetically sorted
Is there a reason this is public?
`EthCompatibleChainID` or `EthTxChainID` is more clear of a name to me.
in general let's use symbols even though it doesn't matetr
What is left to do ? :angel: (should be written here, or the `TODO` should go away :stuck_out_tongue_closed_eyes: )
Might be more readable to give these methods nice names, like `caseInsensitive()` and `caseSensitive()`. Small nit though.
Proper docstring style is actually to have the close """ on the same line _iff_ it's a single line. So it was wrong, and it's still wrong. :-)
this is missing the license header
I expected to see a test for the new timestamp stats here. Is that possible?
hmm, Opera is Webkit, any particular reason this was added?
The setting should be cached since this is called once per frame.
the word `merge` doesn't apply here, since you only have one string to process
nit unnecessary add
`objects.stage()` could maybe just use the memfs staging ODB by default now, and make `odb` an optional kwarg for cases where we explicitly want to stage an object in some other ODB?
It is not a good idea to choose `None` as default and in the next line do `content_type.lower()`
Mastodon endpoints only support a JSON output. So wouldn't it be better having just a `jsonExit` function in the `response` class?
This method implementation is incorrect, it violates MVVM pattern in a way that your ViewModel access the "Dispatcher" object (which is specific to UI). I think this needs a little rewrite to follow the model of "OnRequestShowNodeHelp" in the same file. As a quick look through other parts of InfoBubbleViewModel, I noticed it has information about UI -- "FrameStrokeThickness" and "FrameStrokeColor", do we have a reason that these UI-specific information must be stored in ViewModel?
perhaps somewhere around these const definitions we might make a const for `"tcp"`
This is a breaking change for extensions using the flow pkg. Can you add a release note about it (including that they can use the `flow.NewImmediateProgressReporter` as a replacement)?
1 trailing blank lines detected.
I could also check _disposed.
Excel.cs is in this PR?
@liggitt amazingly it is possible that when doing a specific search for a specific DN in LDAP we can get nothing back and _not_ `NoSuchObject`
Unrelated from these changes, but shouldn't this counter incredemented only when a new file is created instead of each time a data chunk is transferred?
should we also check `index != -1`?
I think this was due to @cjb's lack of a git commit hook.
Any benefit to making this a flag vs just an env var? Seems an env var might offer more flexibility? Also - any reason to constrain the values vs just allow consuming code to set this to whatever they want?
Tabs instead of spaces please :)
What does this do? I removed it and everything works the same...
Can we leave the unsupported operation such as listContainer/listBlock as-is to get the proper error (unsupported) response to the caller instead of token validation error?
@danrot what do you think?
This is not allowed - pkg/monitor may not take dependencies on deep test packages in general.
Sorry I snuck this one in cause I will want it for dist sorting and it makes sense here too :)
It would be better to have two distinct validations here instead, `validates_presence_of` and `validates_uniqueness_of`. You also don't need to specify `presence: true` for the validates_presence_of validator
Could this method be promoted to the superclass and shared in both `MapCacheServer` and `SetCacheServer`?
Given that this is also used for non-client SCM and OM addresses, wouldn't something like `RANDOM_LOCAL_ADDRESS` be a better name?
not sure this is right - shouldn't c.{env,buildEnv,parms} be redefined as non-maps to test ordering?
end at 41, 6 is not aligned with if at 37, 21.
One note: the new engine does not expose a "BuildFileParser" interface, so I believe that usage of this class actually represents dead (or at least, alive-only-in-tests) code.
I am not opposed to this strategy, but it probably makes sense to have a test that confirms that `FakeAhoyTracker` and `Ahoy::Tracker` have the same interface. As is, I can imagine a scenario in which the ahoy lib requires new/different args for `initialize`, for example, but the specs still pass without a change. Am I making sense?
Maybe rename this folder and property to `completion_paths`?
But more specifically, why `10`? Also you replaced some numbers smaller than 10 with this.
This does not seem like it is worth a method?
Updating the mock. There are a few of these below. It would be nice if the mocks were generated with the protobuf files.
We're using `root` twice here, and as I understand it, it doesn't have quite the same meaning both times. Could we find a different word for the second usage?
This should be `From *kapi.ObjectReference` IMHO. When doing so you're gonna have to update conversion to actually create `From` object.
update install.sh to have this enabled by default for now, or at least provide a flag.
`is` operator should return `false` for `null`... it's strange that the null-forgiving operator is required here...
This all probably needs to be reordered. Probably should be 1) RX Checks 2) R_UDR 3) Page manager 4) buffer_pos logic
Do those inner classes need to be public? It's also something we can fix after the merge, unless there is a reason for that.
nit: awkward formatting
this should use a strict comparison to match coding standards
`const std::string& file`
This import needs to be separate from the standard library imports. We run rather strict linter settings for the project and this is triggering the CI failure.
Looks like we're just moving this import from one line to another and there are no other changes in this file. Can we undo this change to minimize noise in the diff?
At least one more here
Everything so far looks spot on but whats this one about? A string will be used to replace all needles, why make it an array with the same string twice?
Doc above needs to be updated. And what about `(float, float)`?
not sure why this was added?
Let's use relative import as the rest of the imports
Converted from deleted *.rec test.
@Override returning null usaully indicates an abstraction problem. It's not much of a surprise given headless vs headed was done in a massive hurry to get the bots up and running. In this case it seems like `getTerritoryEffectImageFactory` should only be a method on the `HeadedContext`, not the headless. If a caller is not aware of the difference, they can get a NPE. Seems like a caller of this code would need to know which instance type, so moving the method to the right instance type I suspect is appropriate and would avoid the error and abstraction problem.
for my education, have we stopped using the 3 letter code for errors? If yes, we might want to revisit all the drivers to provide more meaningful information that Sst or ssr for SSP start / resume
Can you move `"google.golang.org/grpc/status"` down with the rest of the 3rd party imports?
I'm not sure if the `||` outcome is truly never called or we just don't have appropriate test coverage, but it seems like this would result in an error if `title` is `nil`. So either `title` is never `nil` and we don't need the or statement, or we should `CGI. unescapeHTML` the whole thing.
use a boolean
After giving it another thought, I think we should remove the include `include-pid` and `exclude-pid` rules. I don't think they make sense in the context of globally specifying include/exclude rules. That's because PIDs are not predictable before a process starts and even more so across different hosts.
What about the ingress DNS?
minor: the ternary op `c ? x : y` is nice for avoiding the need to initialize empty. here it could even be tucked within the first arg expr to `String.format`.
Small typo: `64 character limit`
Please put this method just below `getAncestorGroups`.
I think it's not recommended to directly invoke `createElement` function.
Roles already have access to the mind they are assigned to.
we should not disable `loop` unless it was forced by autoplay in the first place. If author has `loop` specified, after autoplay ends, user should still manually loop.
This should probably have been plural. I didn't catch that in the previous PR.
For this repro, we want to make sure we're using system-assigned ID and not user-assigned ID
I think this was due to @cjb's lack of a git commit hook.
Are the `tracing_attributes` only supposed to be provided in `__init__`? (i.e. not on a per-request basis?)
I think this whole function could be reduced to `return s.next.Do(ctx, r)` - in which case, we should just inline it in `resultsCache.Do` and use the return to un-indent the following block.
just use `if` rather than `elseif` as the `if` returns.
Is there a reason for list over vector? You're always pushing to the back.
While not specified in the `RepositoryInterface`, the `ComposerRepository` implementation does accept a type argument. So I would exclude this change from the PR.
[nit] Should we call it `ListUsersWithFullState` for consistency with other function names?
are you sure mkstemp works on windows ?
is there a good reason not to put this in retriever.go? circular dependency issue?
We should look at the test cases in the submitted patch in the JIRA; there are quite a few and some might be useful.
not sure about the message here. also, should we ignore the key instead?
I think it would look cleaner without the `,` before the `<br />`, it doesn't need to be valid json.
Typo here, will fix
Is there some tests to verify that an enum is NOT static in some cases ?
Not sure how valid this is. Safer to create & register a real descriptor, but return `false` from `isEnabled()`.
Why was this changed? :)
If we expect it may ever be possible for this code to be accessed concurrently from multiple threads, s_consoleInitialized should be marked volatile.
should check x != NULL either?
Can we use the `isZero` helper here as well?
I wrote this test, so its more of self criticism: I think we should redesing this test when it comes to file_md5_counter calls: Insead of asserting count calls, I think we should assert that file_md5 was called for data, data_sub and the temporary file used to calculate dir md5. I think that would improve test readibility. I am not sure we wan't to do it in this task, as its critical, but I think we should make at least task for it.
I think this could be `Object.keys`?
does this need to be in the base? should it only be on nodes?
This is a duplicate error message from the same check above
`joins(:human)` Also, `id` is now ambiguous and should be `roles.id`
(style) line over 80 characters
Is there any chance that our proposed multi-account feature might need for us to be able to dynamically specify the `caller` in the actual method call?
Nil slices always have length `0` so no need to check both.
Moving it to Cython means exposing most C structures to Cython and staring at tons of generated C code to see that it actually does the right thing (like in #891). I wouldn't do it bundled together with a functional change.
Did you get rid of this line when you tried nesting all `pacpy` imports?
By the way fixed a bug which has been detected by tests after my change
Originally this wasn't a race because the manager was initialised deterministically - has this definitely changed?
And there also should be check for `EnableOpenIDSignIn`
These can be symbols right?
It's worth printing out the options themselves post configurator. Printing the configurator class might be worth while as well.
Can we not have the underscore anymore? I don't think it's in our coding convention.
I'll see if I can come up with something that works for FreeBSD.
Is 0 a valid containerID ?
We will need to port this to exchange.py and Exchange.php, cause base classes are not transpiled. Also, JFYI, In Py and PHP we use the snake_case notation.
@mjkkirschner It's the `System` type that fails in the custom node workspace. `Autodesk` namespace works fine. I am not sure whether this is the right fix. Otherwise, the fix is to use `ToString` and fix the tooltip to show `point` instead of `Autodesk.Geometry.point`.
Should be server?
Also adjust `StringBuilder` capacity accordingly? (same for `ByteBufHolder` case below) and kind of separate to this change but I wonder if it would be better to use `InternalThreadLocalMap#stringBuilder()` in these methods (maybe we don't care much about the allocations though anyhow in cases where this amount of logging is enabled)
After giving it another thought, I think we should remove the include `include-pid` and `exclude-pid` rules. I don't think they make sense in the context of globally specifying include/exclude rules. That's because PIDs are not predictable before a process starts and even more so across different hosts.
`canonicalize_path` comes from `spack.util.path`, not `llnl.util.filesystem` doesn't it? There are more of this reference below.
is this a temporary home?
Could we rollback this change too?
how to clear all labels?
Why the parameters are version, url and name? not interfaceName, group and version?
Seems we don't use this variable, Could you be so kind as to let me know its usage if I miss something.
Maybe rename `damage` to `appliedDamage`.
Mark this `@Nullable` (It needs to be null to support old versions).
Why keep the service, even as a private one? `String.prototype` methods should be enough.
Do we need more tests to test key format?
This can be simplified as well
Another idea is to have only one argument member that an interface, and can work for either JSONPayloads or HTTPArgs.
The setting should be cached since this is called once per frame.
is configFile still being used? Ideally should be removed.
Please put this method just below `getAncestorGroups`.
I think if we do v.equals(values[i]) we can eliminate the null check
This constant should be in `Annotation` since it has the new `getTargetIndex` method which can return this value.
Actually displaying the output of "help print_pl" here seems better, what do you think? Or at least point to "help print_pl".
won't fix. This needs to be resolved at the runtime level. Extensions should absolutelly not need to know about the providers.
Shall we change this line as well to consistently use the object API ?
isn't this a path and not a URL?
this is probably for the best. hoever, the idea of a urn containing a secret seems awful :)
This is the meat of the change.
interesting, might be better to put put `new_cert[0] == '\0';` at the start of the code, because this requires the whole certs be initialized. maybe.
Need a license header here.
@uranusjr Can you confirm whether it's okay for this to return a redacted URL?
@liggitt amazingly it is possible that when doing a specific search for a specific DN in LDAP we can get nothing back and _not_ `NoSuchObject`
Is there any specific reason that both this one and the `providesCapabilities` on `build` are needed?
looks like you're missing the `confmat` and `metrics` params here
So As I understand it - the reason we had to make this change is because - in case of openshift (where `StartInformers` is not nil), we do not want to close the `ctx.InformersStarted` channel immediately after calling `StartInformers` because we want control over that in openshift code. Do we want to backport this to upstream at all?
Generally I'm wrapping this directly into println
why not calling cancel in defer?
We already verify an object property update when updating a name. Maybe use a primitive `long` here?
Extra empty line detected at body beginning.
ListenPort should use `%d` not `%v`
Can you explain why this is conditional?
Did you get rid of this line when you tried nesting all `pacpy` imports?
Empty line, another one in`GobblinApplicationMaster.java`, line 116
Did you get rid of this line when you tried nesting all `pacpy` imports?
but the serialized result should be a string - it's okay to literally test for `'extension'` here (no need to do any lookup for the string constant for an extension)
I think you need to do something here to close the input stream. DataInput does not have a close so parseClassFile(DataInput) will not be able to close the input stream. Properly closing the input stream will be especially important for your new parseFile method so we don't lock files open on Windows.
This isn't properly indented, should be aligned with `pkt`
Maby sort by `user__email`, `app_name`?
Two conflicting handling of "boolean" values in one line. Maybe decide for one here?
we should replace `DEV` with `ApplicationConfig["COMMUNITY_NAME"]`
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
It looks like you deleted the `format` arg here, when you meant to delete the `ctx` arg.
This looks wrong!
Would RouteToSelf be more meaningful?
I think load from etcd is not necessary here.
What's the slight change in the pattern for?
@danrot @chirimoya what do you think about `sulu.var_dir`? since its no a symfony parameter?
I'd expect this to get a bit more specific description so that users actually know what it's good for a and how to use it. But the whole `Options` related docs are WASM addition so it's up them how much details they want to put in, cc @lewing.
Hmmm... Do we call this function with a NULL md, ever? Is it reasonable to expect it to be NULL? If not, then I don't see why we're testing it...
can we also call it `flag` ?
This is already included in the nar
test the rows don't get deleted
Why note rename even `out`?
Can this be removed?
If I understood the code correctly an email message can optionally only belong to a feedback message
em, why changed the import order?
We should add this enum to `SALEOR_ERROR_CODE_ENUMS` in `saleor.graphql.core.utils`.
I assuming that HB should be HA: 1. Checking **HB** with KVMHAVMActivityChecker ... 2. Checking **HA** with ...
The deletion of the associated `UserProfile` is taken care of via the `on_delete=models.CASCADE`.
Why the change to mypyc needed here?
Is this TODO supposed to be done in other PR?
why not this in a else part of the if clause ?
Not actually related to this change, but can you order the properties in Required -> Optional -> Computed order? I'm a big fan of that to make it easy to immediately see which fields are settable.
Did CppCheck blindly recommend to add an `&` here? There's little benefits since its a 16-byte value with a trivial copy-constructor - the compiler is free to optimize as necessary anyway.
No need for a \n here - we can clean that up at another point.
Two questions here: 1. If it is not allowed to add an anonymous role to a user, does that mean there will be no anonymous user? I.e. that in the code where we need to check for anonymous, we are going to just load the anonymous role instead of getting the roles from a user object? 2. Shouldn't we introduce a more specific exception for that? Could imagine that the calling code might try to recover from that specific error. Would think about something like a `AssignAnonymousRoleException`
Can call this field `maxSizeBytes`
nit : should we have an error.go file which defines all the errors in one place
If you track it before `s.state.Position() != 0` then it's value doesn't match with `s.persistFailed` because only the replica at position 0 can fail (think about computing the % of failures). I would track this metric after the check `s.state.Position() != 0`.
It this deleted on purpose?
I think the indentation is wrong here
nit for clarity: "and resume the animation or video"
wouldn't this be set already above seems redundant and by making it boolean such defaulting will be unnecessary anyway
nitpick: if error is a string, this will be true even for empty strings (I know, Ruby is a PITA on these things :D)
I think you also need to do the same changes in `Ref` project
don't you mean to use `call` instead of `bind` here ?
`tagName` may be undefined if it's not an `Element` (note that `node` is a `Node`).
native return types are not an option. Native scalar typehints are not either.
This is the thing that would benefit from the ``_conan_collaborators`` mechanism
Line is too long. [154/80]
I tried to remove as many magic `28`s, `500`s, and `240`s in the Go code and replace them with constants for maintainability.
Can you add Gitea copyright to header of this file?
Could it be a wrong string representation of int? In this case `std::stoi` throws an exception which we should handle here.
Can we omit "file_access_mode" here? The idea is to only define a default setting once in the code.
always enable double buffer. The `async load` is very confusing. It just enable double buffer in DataProvider. Maybe we should change it later.
Can I ask the reason to support `<amp-embed>`. This change migrate the `<amp-ad>` to using `<amp-embed>` instead. Thanks.
Is it a reasonable timeout? Just had a worker on aws with machdeploy with 2 replicas that took ~8m to be deleted.
This check was to prevent manipulation when the Node's value becomes null for some reason. How are we ensuring that manipulators are not enabled when the preview value turns null and evaluation was not triggered to destroy the manipulator.
we should combine - cancelTouchEvents_() here .
This is not allowed - pkg/monitor may not take dependencies on deep test packages in general.
AFAIK we're chunking here for performance and memory limitation reasons. But then, when expanding, we might end up with some objects that have just 1 term relationship, but others with hundreds. This might result in us hitting memory limits when we expand object IDs to multiple term relationships, because we don't know how much relationships each of the objects has. How would we prevent from that?
This file should be CI-agnostic too, right?
I think we should get rid of all the `ExactSpelling = true` instance where it isn't needed.
How come the HTTPS listener was removed from here?
can we call it agentVersion or something not reminding setter fn
Just making sure this doesn't get reintroduced in a future PR. This restriction has to stay in place. The thing we wanted to allow extra slashes in was docker repos, not imagestreams
You may want to use a Yoda condition here.
isBlocking() or shouldBlock()
Hmm that's the second time I did that....
Pet peeve: can we change this to "information"? We can spare the horizontal real estate.
Please put this method just below `getAncestorGroups`.
should `private_only` be passed down to the `super(...).contribute_to_class(...)` ?
Is there any risk here of mutually recursive dependencies? We could consider splitting this method into its own lil' module
As far as I know behaviour is the British way to write it.
Added this 2nd agent pool to prove that the `GetAgentPoolZones` go template func will always return a yaml array string representation of the *1st* pool that has a zones configuration. I think the way that csi disk drivers is configured already suggests such mixed-zoned cluster configurations are going to encounter edge case failures, but choosing the first pool is what we've done historically, so this follows that pattern.
I think this class is exposed publicly right? The new parameter will need to go at the end of the method signature - otherwise it will be a breaking change for anyone who specified arguments positionally.
We gotta cherry-pick this specific change, though.
I would suggest to call it simply `conf` (or `config`)
is really a characteristic with a specific key not the same as another characteristic with the same key but a different id?
I'm still hesitant to re-enable it, it passes locally but apparently sometimes it will fail on CI. I'm looking into it.
Why is this guaranteed not to be null? I think we are lying about it here.
Note that this is inside the existing `#ifdef __FreeBSD__` block
Any reason we need the extra catch block?
@marcelmoosbrugger could it be that this constraint and validator is never used?
Please put this method just below `getAncestorGroups`.
That's a POSIX header file -- do you actually need POSIX, non-C++ functions?
Did you get rid of this line when you tried nesting all `pacpy` imports?
Do we need this line?
What is the intent of this change? I forgot what `Substring(1)` was removing.
need to update types_test.go to include the new field, and open a doc and config change issue with details
maybe we should push all the args stuff to separate method for unit testing etc
nuke this function
hmm, seems cannot remove above 2 lines? see the usage in cli_obj.c, obj_req_fanout(), "tse_task_list_traverse(task_list, shard_task_abort, &rc);" when insert the task to the list - 2815 > > tse_task_addref(shard_task); 2816 > > tse_task_list_add(shard_task, task_list); So the above two lines are to revert L2815 ~ 2816
Did you get rid of this line when you tried nesting all `pacpy` imports?
should the test name change given the semantics are inverted now? might be good to rename in the same `shouldXXX` form
This import should just be `"context"`.
I don't think you need the `= null` part. It is redundant.
The lint step was breaking because this file wasn't gofmt'd
Converted from deleted *.rec test.
This was really difficult to debug. This is more readable as well.
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
typo: `lay` -> `determine`. Add the default value here.
Seems like here we should use `throw new MessageHandlingException(new ErrorMessage(e), null, e)` However, what is the reason of `ErrorMessage`, if we don't have `failedMessage` context?..
can probably be removed :p
>// this sort of addressing mode magic only applies to x86 platforms [](start = 8, length = 67) ARM has some similar instruction form as `ADD r4, r4, r4, LSL #4`, could we also peep that? #WontFix
this is no longer valid as the algorithm has changed
why doesn't this raise an `ArgumentError`?
`crypto` module isn't imported.
Oh! That's cool catch! I guess we need to revise all the tests in project for similar vulnerability   I wonder how did you come here? What helped you to figure out the culprit? Thanks
Can you elaborate as to why you removed the case-insensitive flag?
Call `this.getScrollTop()` to get the cached value.
I think this was due to @cjb's lack of a git commit hook.
@honeybadgerdontcare This change should be transparent since we always apply it at runtime (line 337), but probably should update the cache transform regardless.
Use `wrapper` instead of `wrapLeft`.
Align the parameters of a method call if they span more than one line.
Did you get rid of this line when you tried nesting all `pacpy` imports?
:astonished. How does that work at all. I didn't know that Java allows this syntax :smile:
Should this not be part of the existing classifications controller, perhaps renamed to classify?
`Ints#saturatedCast()` will always be less than or equal to `Integer.MAX_VALUE`.
We probably should not do this here. If the user configured `ssl.verification_mode: strict` this means they already have all necessary certificates in place and we should should not touch their configuration.
`math` before `os`
Why are you removing status update?
I suggest changing this to take *args and pass them on to logger.info.
remove this file from PR?
@cra0zy we should try and figure out why :)
same as above we can from bc not add new typehints.
Is this file needed at all? If so (as a simple example) it should probably go in the examples/ dir, under a new examples/javascript/ subdir.
So this is an `async` function that returns a `Promise`? Making its return type `Promise<Promise<string>>`?
Just an interesting observation but we were calling `cannotSee[username]` in line 55 when `cannotSee` is an Array. I think we fixed that line now that this is an object now.
Please send this line top on the Gogs
Do we have tests for this?
Is there any chance that our proposed multi-account feature might need for us to be able to dynamically specify the `caller` in the actual method call?
I'm confused why "deactivate" was replaced with "activate" here: we are in the `env_deactivate` function.
how about logging the user here instead?
can't figure out why '|| false' is needed here.
the methods here are either not implement (throw) or implemented.
should this be min_bid?
For this function and the one for SimpleDeploymentAppDef, I think you could just a local variable to be the DefaultOS if the string is empty, and then take the value if it is not. That way you don't have to modify all of the other tests to pass this in.
same question, this is forced as mandatory even on the multi pass closure builds?
do we need add ctx for them?
No longer used
The text of the error must be updated as well.
maybe we should push all the args stuff to separate method for unit testing etc
Should be ObservedGeneration is the most recent generation observed for this **Seed**.?
This if statement is not necessary because no matter the outcome err will be returned
This timestamp looks unusual. Why would we be forcing a `CreationTimestamp` on an object? Doesn't that happen server-side in `FillObjectMetaSystemFields`?
This is kind of a weird pattern, but this does look like it will fix the bug. Just curious why UnmarshalJSON on an existing object? Why not just have this return a new LinkID?
@andizer For the description you have created `sanitize_desc`. Why wouldn't you do the same for the title?
Do we ever create a `ByteString` without looking it up in a map of caches?
Is it possible for this to be an enum type, e.g. `ResourceStatusDelete`, `ResourceStatusReplace`? It is super-lame that we need to duplicate enums found in the engine layer in `apitypes`, but it's the only way that the service can assert the meaning of various `Status` values.
I think you'd want validations for all the non-null attributes as defined in schema.rb Same for other model classes.
This has got out of alphabetical order.
Where does .IsDisposed come from here?
I don't see an edit in here to add `__str__` for python requirements objects. Perhaps you already checked and they are fine?
godoc needs to be updated on this function now.
This also doesn't feel like it should be tied to having proton trace its frames to me, I'd just make this a regular trace logger.
where '_none_' is assigned to `name` and in which case?
nit: type annotations aren't aligned anymore
You can use `is_named_instance` here.
I am not really sure what this one is doing here. I feel it does nothing. I know that All is used in libpod API, but compat has no such thing. As in my opinion, it is a dead code, I decided to remove it. Please let me know what you think.
... and line 267
@valadas can we create a follow-up issue to track this //TODO. If there is already one created can you link it in this PR
Using first time, IndexPartition with TLS. Hope this is correct? @philbucher
If there's much additional code work in this PR, it should likely happen right here.
Can we do away with this variable and just detect the presence of certain DOM elements in JS instead?
why there is no such parameter before?
Why was this change made?
`[]` here is a placeholder for forthcoming `ng-disabled` improvements. This PR is purposefully limited.
why upgrade python?
Should we have this method return a boolean that is `true` if a write occurred immediately? Would that help?
Did you get rid of this line when you tried nesting all `pacpy` imports?
This'll be expensive, how about a boolean parameter to do this?
The location URL was introduced there to be able to report errors to the external API. Now, with sessions, I guess it's possible we don't need it in the store? Or, alternatively, we could store the config in a `config` attribute to make it easy to add metadata around it.
If we aren't going to propagate the error up, can we log it?
do you need this? I think it's provided by default by urfavce/cli.
Here (and elsewhere), "inestable" should probably be "not robust" (assuming that's the intended meaning).
isn't this just equivalent to: `WHERE filename = ?1 AND film_id = ?2` Or I'm confused this morning ?
We probably still want copyright notices on these new files.
@mjkkirschner @aparajit-pratap @pinzart @sm6srw What are your thoughts on this? I feel we are no longer strict on CoGS format so this could be fine? Or we can maybe add the nesting info to view layer but that may cause deserialization problem? I am not sure.
Should be in set below
I feel it's a bit ambiguous to say pass the output to by_page(). we can tell them if they set messages_per_page to iterate by page, they need to call by_page() on the AsyncItemPaged, so that they can get a page iterator with which they can call next() to get the next page.
Just to confirm from what I have understand when migrating if the user exist OriginalAuthorID is not and set and issue.PosterID is not the doer (like it is by default) but found user ?
Wouldn't that create issues with plugins outputting the log in form on the frontend, on any page?
why is this required?
The pending_cnt may be wrong now. Let's image if pending_cnt is 2, and the state is PENDING. schedule_task() will be called. In _schedule_task(), the pending_cnt will be added again. But in this case, the cnt should not be added, right?
How about using more narrow client? I'm shooting core (without looking at code), which should suffice here.
How about fixing `utils.StringIO` instead?
Pretty crude, not sure if that will cut it, maybe I should add the return here, I think create returns the read function so maybe `return resourceAwsElasticacheClusterCreate(d, meta)`
This falls apart when we're using IAM v2 endpoints with authz-service running on v1. This is what our inspec tests have been doing for a while now.
This file should be CI-agnostic too, right?
not needed ws
this is not needed. this test should actually capture the bug
This seems unrelated to the current commit.
These are needed for migrating the actions to the event-feed-service.
newline, `.. versionadded:: 0.16` (same with new return value below)
Very good point about `getsize`. Indeed, `hash_info` is part of the object itself and identifies itself fully, so `getsize` is likely not needed anymore. But the same could be asked about `Tree.size` too, since its hash_info also has `size`. So looks like we could use it there as well. WDYT?
I wish there is BoolPtr() helper ;-)
nit: "stack '%v' has never been updated" feels a bit nicer.
Not sure this is the most user friendly message.
should the version match beam version? We do not have other sub-components with their own versions.
I think this isn't actually being used and can just be removed.
Can we move this whole block of EH handling code to a ProcessExceptionHandling() functions? I'd like to remove code from OptInstr() to attempt to maintain readability.
Throughout `stats.php`, we're assuming the output of will be an array of `stats_get_options` options. If someone installed Jetpack via CLI, I don't think this would ever fire to get the default options, so most of the code would at least throw notices about the undefined indexes until a cron run or someone visited wp-admin. Could spin out a "stats_default_options" that returns the default array, `if ( false === $options ) { return stats_default_options()}` and use that same function in `stats_upgrade_options` to keep things DRY. Thoughts?
missing Upgrade451to460 class, I'll add that.
Hmm, this seems super specific. Won't there be other things that need customizing on that page as well, like product name and other links? Plumbing all of that through config seems like the hard way to do that
Should it be suffixed with Async?
Might be nice to move this inline SQL into a function, like `Jetpack::get_user_count()`
please refer com.cloud.utils.StringUtils, and add a proxy method there if you need one.
the interleave logic here is odd. If (x == null || y) if (x != null) Do something I think there's a simplifying transform that makes it easier to read. Follow on PR
Can then move declaration of `authorities` below this test.
Is this being used for some kind of implicit conversion? If so... conversion from a floating point to integer types? That's a bit lossy! Is this SQL compliant? (Or is this just existing code refactored?)
what is the default value from libp2p?
Can this be updated to use the image format string so that we don't have to patch OCP?
I'm not thought too much about this, as its been a while since I've been in this code... but are _you_ happy with being passed `line` and not `parsed.line()`, i.e. do you understand the difference? (I certainly can't remember of the top of my head! )
Is this constant available in the S3 gem? If the threshold in the gem changes, this constant will no longer be accurate.
`s/retryManifest/retryBlobStore/` and the rest of the sentence
I think this one should be `if not message or message[-1] != '\n':`.
Call `this.getScrollTop()` to get the cached value.
Not directly related to the current PR, but IMO this whole hand check shouldn't be here, You should be able to take half of a stack sitting on a desk by alt clicking it. And if the check stays, then it should be moved to the get-verbs logic, because currently it shows up in the verb menu even though it fails to do anything when the stack is not in your hands.
This line will get added automatically by the build system, no need to add it manually here. JFYI for the future. )
Add this new tag to docs/liquid-templates
Make these a single `vec2` uniform. Setting individual uniforms - especially for this particle shader - is one of our bottlenecks.
this should be a `StringSet`
I think it'd be shorter and more DRY to have one line above here `if ($match[1] === 'zend-opcache') { $match[1] = 'zend opcache'; }`, then the whole extension_loaded line doesn't need duplicating.
since we're here can we fix this typo: >If ~~we~~ the container
Note that all the operators are assuming `number`/`number` comparisons. - We need to do type checking to make sure, for example, that `4 > 'cat'` is a syntax error. Please carefully think about our type system and make it reasonably strict, e.g., no unexpected implicit conversions like `true > color('red')` - We also need to implement operators for `Color` types, e.g., component-wise operators. If we don't want to do those functions to `Color` (totally cool with me to keep Cesium's API surface area small) then we can just add them a local functions in this file.
I think this was due to @cjb's lack of a git commit hook.
why that change?
please revert these changes. If you need the changes, then the contents should be copied to your keymap, instead.
Do you need the static_cast here?
You already did `this.userMode.userError = opt_userError || false`, no need to add the `|| false` here
I'm not sure if there's an official guideline. However, @adferrand imported them one by one (one for each line).
Note that this now means that quarkusDev will fail in gradle if the tests don't compile. In maven I can easily just ignore the failures, but I am not sure how to do that in Gradle.
@FireWolf2007 sorry. I missed this. The imports should be under `<%_ if (searchEngine === 'elasticsearch') { _%>` otherwise it will become unused imports when ES is not used. It will affect sonar rating
If a policy wasn't found, we got this garbled pq error. This just gives a future test-breaker an easier glimpse at the problem.
Did you get rid of this line when you tried nesting all `pacpy` imports?
I think this is not a right place for this check. It should be rather processed before (or in) ``clean_up_bases_and_infer_type_variables``, this is why you see problems with ``Generic`` in #3366.
Where is EthTx is used by jsonapi?
Converted from deleted *.rec test.
should this be time.Time instead of string type?
import sort order (isort will complain)
This condition will never be true, so it is removed!
Nitpick: Space padding.   `/** @const */`
How about use atomic? Is it only protect `regionLoaded`?
This should be `change: 'change'` since we follow the naming pattern like `change | close | open | moveUp | moveDown | etc.` in other components
How about using more narrow client? I'm shooting core (without looking at code), which should suffice here.
If we aren't going to propagate the error up, can we log it?
can you use custom errors package and do a `errors.TypeNetwork` type with `errors.M(errors.MetaKeyURI, "URI")`?
This has got out of alphabetical order.
Why lower this?
Just for testing? This is a very confusing method name, by the way :)
What's the point of the trailing pipe?
minor: imports in wrong order, should be mule, java, others
Just want to make sure that I understand how Cassandra does initial split. Lets say that we are going to split A into A_1 and A_2, so we expect that : size of (A) == size of (A_1) == size of(A_2) because they share the same spec. Is that correct?
Unless canopy isn't valid then I'd have thought this needs to stay?
This is defaultable when we only have one container. I don't see that happening and it should be mentioned in the godoc.
This needs to be changed by ops first before we can merge this. We already ran into problems of `-dev` got broken. cc @bqbn on this.
Shouldn't this be `dbuf_find_dirty_lte` like the existing code to handle gaps in the txg sequence.
Any reason to change logout from `POST` to `GET`? I dont think its aligned with HTTP standard.
Seems like your formatter isn't configured correctly.
Was this committed accidentally? Seems this change has nothing todo with this PR?
You shouldn't need to import this, it should already be present
I think ti would be safer to move this inside the `removeEmptyOption()` function, s we don't have to manually call it every time. For example, there is currently a call for `removeEmptyOption()` inside `selectCtrl.readValue()`. Do we need to also remove the `selected` attribute? Probably not, but who knows :stuck_out_tongue:
This should be done as part of a specialization for remove token.
Why lower this?
All those attributes are written in `setUp`, so reseting them to `null` in a tear down does not make any sense IMO.
Nit: Calling this e.g. "returnErr" would minimize changes and also make it clearer.
can you nuke this?
Is this TODO supposed to be done in other PR?
I would return 0 here, because the code that implements this method already checks if the value it falsy. This way you have one return type for this method. Another thing you can consider is throwing an exception and catch this (but that might be a little bit overkill)
Style nit: The latter part could be written a bit more compactly as `isinstance(s.values[0], (NameExpr, MemberExpr))`.
also task inputs and parameters!
Not sure what is proper casing according to code-style but `CassandraPageSing` uses `generateUUID`. Can you please unify?
<!--new_thread; commit:a68ceca8046b6d42f941aa4016a528ec2ee3808a; resolved:0--> Please take `time_domain` as first (required) argument.
could potentially do a MiniCache or a Rails cache or something that expires so this does not grow unbounded
Should use `JulianDate.equals`.
you are always opening a session event if not required
this needs a test case! "Company" will not work for sure, this is case sensitive
Should this be translated?
Wouldn't we need this `instance` to also be updated, if `result !== instance` ? (Could this by why you defined `instantiate` as a variable, but then forgot to update it's `instance` property ?)
Isn't this implied by the ordering of `ss` in `newPriorityQueue` can this change after the fact?
Probably should just be "SUBJECTS" with kind and name but we can do that later. Open a follow up issue.
@daltonbohning I don't think the dst_filename and filename are cleaned up here if it returns in this case?
you can use stringutils here
end at 47, 4 is not aligned with if at 43, 22.
The `include/libzutil.h` header contains some conditional `HAVE_LIBUDEV` blocks which should perhaps be restructured so the prototypes are always declared and function implemented, even if it may always return `ENODATA` or `B_FALSE`.
nbsp should be replaced with a regular space
There needs to be an empty line before this one, to visually split it from the `if ... elseif`. Everything else looks fine. :+1:
I opened the file locally and it has a lot of issues raised by eslint, maybe it should be removed from this PR altogether?
I'd prefer calling the `getByURL()` method before this method and pass the result (`$apcontact`) as second parameter to this method ( `createFromContact`). So we differentiate between business logic and plain container classes.
It's hard for me to know the core difference between `check_and_enqueue_assets` and `enqueue_assets`. What checks are those? In what cases we do/don't need them?
I guess we should change the other getters to be consistent, the "Is<variable>Enabled" format is actually pretty bad - maybe
Judging from the samples in the apm spec, I think "db" should also be included in this case. It's not listed in the pseudocode but there is an example JSON with a "db" example. It'd be good to clarify what to do in that open PR.
move number to a named constant
Maybe this should be called `blockPutFlushLock`.
@iemejia Don't you remember why it was named differently? There is also `getEndpoint()/setEndpoint()` that were `getAwsServiceEndpoint()/setAwsServiceEndpoint()` before?
Better not expose it via configs if possible. Rather use a debug selector to enable the debug reader only if the selector or `*` is being used. Then we don't need to handle this similar to 'plugins' in other places.
Catching and swallowing in a test util... are we sure this is the right approach?
Please add `// @flow` to this file too. Unfortunately it will point out a few things that need to be taken care of.
Intention was good, execution a bit worse ;) @deads2k mind updating in a followup?
can't hurt to `require.NoError` these
This is fairly dangerous given the unfortunate amount of overloading we do of the "pulp" module. Perhaps something in pulp.common would be better.
I think load from etcd is not necessary here.
This is not the sturdiest of all specs, but testing for HTML validation is a bit tricky, and if this fails we know something changed, which will help find any bugs.
something is wrong with indenting here and below
Type check complaints about > Item "List[Tensor]" of "Union[Tensor, List[Tensor]]" has no attribute "size" Since list of tensors should have been stacked together on line 57, I think this is a fair assertion.
you can delete this entire function: def _Name
Shouldn't constraints be limited to binaries? It's only binaries that you generally want to pin with a lock file. Fo example, if we allow a library to pick constraints, what do we do with the dist it exports if it does export a dist?
Is there any better way to do this than introducing another global?
I admit don't fully understand if and how symbols like `:idv_form` are resolved, but the IDV term feels a bit out of place here. Is it something where it doesn't really matter for how it's used here? Can it be omitted?
This doc doesn't really explain why someone would want to use `requestVertexNormals` or not. Instead of describing the implementation, why not describe the effect (i.e. allows terrain normals to be used for lighting purposes). Do we have anywhere in the doc or an example that would help someone figure out how to find and enable this option? It might make sense to add an example that uses Natural Earth and turns on this options (explaining why).
import all the required classes in an explicit way.
What about whitespace? E.g. `Accept-Encoding: gzip, deflate, br`? A test would be nice.
Is there any way this could break an existing cluster?
Should this be destroyed in the Scene's `destroy` function?
If this function can return `None`, its type should be `Optional[str]`
Just use normal string concats or at least size the StringBuilder correctly ?
No asterisk imports at all, please.
Is this intended to convert all hashes to `unicode` type in python 2.7? It may not actually affect anything, but I'm always wary of `isinstance(..., bytes)` after some issues with 2/3 compat in flux.
One more thing, it's customary to statically import functions such as `toList/toSet` from `Collectors`, since this will make the code more readable.
Without removing this the `tunnel` linting will fail.
under what circumstance can this be triggered?
Since you're touching that old code, could you add in a space before `isset` to respect WP coding standards, as well as curly braces?
do we always append it to the end? If so, it might be safer to do `name.endswith()` and `name = name[:-8]`
docstring is not uptodate
are we sure there is n't an existing method for this? Also should n't we rethrow the IOException, rather than assuming its false. What if there is a network error, that made `exists()` fail. but the table actually existed
It seems to me this is the only change needed to fix the bug, and the change to ``get_doc_components_from_url`` is unneeded. Or, this change is unneeded if you change ``get_doc_components_from_url``... In either case, this breaks a test, as reported by TravisCI.
it's not classic WS, that's why you don't declare them via a marker interface? Couldn't we still use a common `WsAuthenticationAction` marker interface?
We have `**options` in ``AzureMonitorTraceExporter` but `**kwargs` in `BaseExporter`?
The current logic is fine, but typically it's more robust if you give a name to the returned `error` and then define a `defer` which increase the failed metric if the returned `error != nil`
I'd rather have these both as `EnableFoo` since it makes more sense when reading
Why did you choose to make this change as well as the change on line 38?
Would be appropriate to mention the JS string can be made with `CoffeeScript` class from etc.
I'm not sure if this is necessary. I don't think the grouping object needs to differentiate between students and test_students here.
Why you have removed that? The use case is that you might talk directly to the `gardener-apiserver` without going through the `kube-aggregator`
"attempts are exhausted" "would be called (ifprovided) with the error information. The failed internal partition consumer will be closed..." "and a new internal partition consumer will be created...."
this function was removed in #932 from media object
Why does it hold this lock the whole function call?
Note: `hook_mod` was dead code here, it wasn't being used
:+1: Just noting that we're switching from a 24-hour time format to one based on the locale here. It looks like the time is only used for display in the UI. (In addition to `ChatMessagePanel`, this text makes its way all the way up to `LobbyGamePanel#getChatLogOfHeadlessHostBot()` via `IModeratorController#getChatLogHeadlessHostBot()` et al.) I see no code that attempts to parse this text.
Why? I don't think it's a good idea to display warnings every time we run the test suite. You could put it in `numba/tests/__init__.py` if you fear people importing this module by mistake...
why do we need this? if an unknown property is checked it will return undefined anyway.
Why lower this?
Throughout Cesium, we call this `height`. We should do the same here unless we have a compelling reason.
do we need this in e2e tests? They usually don't test some internal states\props of components. e2e cares only about result from user perspective as much as possible
Wondering if we should have an util for that as we have the exact same dark magic code in 2 places? Not a blocker, just a though.
can you keep alphabetical order here? weird that checkstyle is passing nonetheless...
why do you need the None here
do `this.cacheProvider = this.config.get('cacheProvider') || this.config.get('hibernateCache');` for backward compatibility in places where we fetch value form config
change "if(" to "if (" according to coding style
Line is too long. [87/80]
I don't like this, but the openshift-logging roles in openshift-ansible take about 8 minutes to run on a pretty fast workstation so we blow past the original 5 minute setting. Is it possible to set a timeout just for openshift-logging? Alternatively I guess we could just ensure the job exists and move on, which would happen rather quickly. Look forward to input on a better alternative.
**info** is better, in my opinion.
If you close the parent service client, you wont need to close the table client as well.
I suppose this could be a warning in the ValidateMasterConfig if it may cause problems
This string.Replace this is replacing is vectorized; this is not. Might that matter?
Is this definitely the right place for it? Presumably you tested it? Ideally it would run before doing anything at all, even config validation.
change to `organization-example.json` is missing
Final newline missing.
Probably update the spec above to mention that a new object will be returned ?
maybe pass in an empty array if values is not defined to be consistent? `values || []`
This should have a readonly property getter. Up to you, but this and the other "length" properties for rendering debugging output could be prefixed like `_debugCommandsLength`
If hasSentComplete, isn't complete always true?
This method doesn't seem to use the task parameter. Do we need to pass it anymore, or is there some design reason to include it, or is it an artifact from the past?
think should be an array now or?
Dispatching messages - should it be async and awaited?
`checkKey` would be rename to `containsKey`
c/p err (was placeholder for something now remove it!)
of `result` is association with model named `result` you don't need `{ ... }`
I do not know if this is the best place to define this interface. Maybe `pkg/oauth/server/osinserver/interfaces.go`?
Given the changes we are introducing, I would rename this method to `root_target_name`
This is unnecessary. If the image-viewer is laid out, we will have already captured its dimensions and do not need to do so again. If the image-viewer has not been laid out, the resumeCallback doesn't need to do anything.
Isn't this implied by the ordering of `ss` in `newPriorityQueue` can this change after the fact?
How about using more narrow client? I'm shooting core (without looking at code), which should suffice here.
Would it make sense to put the certificate in `GenericLoopbackOptions` and make use if it in other loopback servers?
Why is the monitoring URL in the spec? Should be in the global config right? There is only ever one config at a time.
I think this was due to @cjb's lack of a git commit hook.
For external consumption?
I think this can be initialized in the constructor. Up to you.
Can you add docs for this new parameter?
You've lost the "replace" error handler here, so this has introduced the possibility of Unicode errors...
Do we have a tests that covers cases like `filter(limit(scan)` and `limit(filter(scan))`. In other words I think we should consider banning filter pushdown if there is already limit applied as I guess it is buggy today.
Look up `Framework.getService(ProbeManager.class)` only once at method start.
import mess :-)
why do we need this? if an unknown property is checked it will return undefined anyway.
why you dropped this?
Would be better to qualify it as PurgerCycleCompleted, to identify which cycle the event is referring to.
no need to explicitly write to DB here. You can just put the commigSigbitmap inside the Block object and the insertChain() will commit the the sig as long as it's present inside the block.
Did you delete this file too?
I like using `__FreeBSD__`, but a just as a note, I'd like recommendations on a standard osquery OS/DISTRO determination name scheme throughout python (gen___.py), bash (provision.sh), CMake, and C/C++. Right now you can use APPLE/LINUX/CENTOS/UBUNTU/FREEBSD in both CMake and C/C++. In C/C++ the output from lib.sh's OS and DISTRO are defined by CMake. We should set a DARWIN to be consistent on Apple/OSX.
Okay at first I was doing to say that you should rename this method. But then I did a search and found that this method isn't being called (except in tests), so I think you can just delete it entirely.
"reflect" should go up to the top with the golang stdlib packages.
Does gjson.Parse(..) work for this? My understanding was empty strings were always mapped internally to '{}' as empty strings are not valid JSON, so it may be breaking assumptions elsewhere.
What about tests for all the exceptions?
correct me if I am wrong. we may not have a separate delete block for hfile, since everything is a key, value in bytes. So, we might have to fetch all values and resolve to the latest one to find if the value represents delete or active.
Why do not define it in `waiting_operator.go`? I guess it is specific to waiting operators.
It seems the only purpose of this line was `name = name.replace(' ', '-')`? I think that's better done in the normalization function (`text_to_slug`) that does everything else.
Is there a reason this field was added to the status? If it's a case that we need to know this value regardless of the current user's permissions, we typically promote it to the corresponding `Entity` class. So, in this case, the field would land in the `PortEntity` class. For instance, the `ConnectionEntity` which holds only certain details regarding the source and destination.
We probably want to do as much canonicalization as possible to phone numbers to avoid unnecessary weird conflicts. Not sure where or if this is already done. Wouldn't want different impteams with "1083475713" and "108 347 5713" and "108-347-5713".
I think the preprocessor should still explicitly use a `Charset`. A better solution would be to select an appropriate field from `StandardCharsets` based on the OS/platform.
both line are superfluous at this point.
What about tests for all the exceptions?
Generalising it because SSH could use the same optimization a bit later.
Maybe we should make this a regular or debug level message and return?
for my education, have we stopped using the 3 letter code for errors? If yes, we might want to revisit all the drivers to provide more meaningful information that Sst or ssr for SSP start / resume
`tagName` may be undefined if it's not an `Element` (note that `node` is a `Node`).
Why does this need `unsafe`? None of the changes here look like they would require it.
Did we determine that this was a value-add over just using `Rebasepath`? I still think they're the same behavior.
Shall be 2.0.0
nit: the cast to `v1.Service` above will prevent check of `obj == DeletedFinalStateUnknown` right? So you can just use meta.MetaNamespaceKeyFunc
Is 0 a valid containerID ?
Reduce use of literal "(unassigned)" to just one instance in teams-service, just like in other services.
Was this intentional?
I think we only needs a lock about the `NamedLoggers` I don't think `l.Log(skip+1, level, format, v...)` needs a lock.
This import looks wrong. I guess sdk also has a copy of weaklockfree
Call `done()` and `return`
We probably should not do this here. If the user configured `ssl.verification_mode: strict` this means they already have all necessary certificates in place and we should should not touch their configuration.
It guarantees to return non empty value
`.public_send` is safer than `.send`
Why are we calling BreakSolutionStepsLoop here?
Do we currently have a use case for anything other than `Headers<CharSequence, CharSequence>`? If not, perhaps we should drop one or both parameters altogether?
This is an access collection ID, so `$ac_id` would probably be best
The common style is to throw Exception ...
This method is in `Model\Contact`.
Two conflicting handling of "boolean" values in one line. Maybe decide for one here?
Let's do this in a follow up PR, but I think it might be a better abstraction to have a class `ProjectionSchema` and have a node return that instead of having two methods (one for schema and one for selects) because these two concepts really are coupled pretty tightly.
I feel like this function could be structured better. Also, this deserves a unit test.
Are we doing this now? Or is this just my `clang-format` freakin out?
Given that this setting is only used for cookies sent to browser, changing it in the code will not change validity of cookie already stored in the browser.
Do you need this file?
Look who's adding a 'k' constant
I think this could be shortened to `const credentials = bookendEl.getAttribute(BOOKEND_CREDENTIALS_ATTRIBUTE_NAME);` as it will be null if nonexistent. You may have to change the type below.
4 spaces here (I know, I know, it's weird)
Does removing this cause any issues?
Just a question -- does "phaser" refer to some construction/method I'm not familiar with? I haven't heard the term before.
Changes to the schema file? We may want to drop these.
As the postprocessing is gone, we might need another name?
You cannot rely on an origin package inside of the kubernetes repo
~~We don't get an E_STRICT error here, from not matching ElggEntity?~~
"result" -> "actual" (or "url") to match previous tests.
Between this and what @robhudson just landed, I declare the Age of Peppering the Codebase With "noqa" has begun. Long live NOQA! (I don't have any better ideas. I'm just kvetching.)
IMHO, these methods need unit tests to ensure maintainability and that people don't inadvertently change the logic to be incorrect.
I consider that, should move `RatisPipelineProvider.getPriorityList()`, `HIGH_PRIORITY`, `LOW_PRIORITY` here, and replace priorityList in Ctor param as suggestedLeader. We can minimize the existence of `priorityList`, and the calculation logic of priority in `RatisPipelineProvider` is a little bit weird.
Just for my understanding, why is an identifier required for the import?
hm i'm not sure i like this what if revenue history was more detailed
Shouldn't this method use the new `callWidgetFunction`?
Let's not add a failed state again. It's a lot easier to work with a single exit point. A session terminates, and in the ancilliary data we'll put the error, if any
check tagRouterRule not null.
that doesn't look correct - previous version captured authors other than EFF. Why not "Certbot Project"? Frankly speaking, it was Let's Encrypt project who authored it so far ;)
These are not really mutually exclusive, but our current schema for dvc.yaml doesn't support it. Plus our old dvcfiles were fine with it, so maybe worth just allowing it. Will revisit this line in this PR.
I would remove the `if (Equals(sv1, sv2))` at the beginning, and replace lines 2616 on with `return x.CompareTo(y);`
We could make this `org.apache.hadoop.fs.Path`
Should have a description as well ... "When the input path is invalid"
`__del__` is extremely uncommon I think a note here about why this is where it is would help anyone else looking at this code
Prefer if we imported this.
This schema matches every value, like `['required' => []]` did, but doesn't throw a warning because no type was specified
Seems like a bad idea to remove this?
I think we usually don't do `import static` like this, but if checkstyle was ok with it, then you can keep it.
Should it be `$connection` here?
It may also be beneficial here for users if we additionally rename buffer to source to further make it obvious it's RO data. Most of the other function updated here already have the name change afaict.
Was this for debugging?
Should you maybe call `String(val)` instead to be certain of type?
Would like to do a full test here but I have no idea how to properly initialize the `setting` module for the test. If I used `models.PrepareTestEnv(t)` it just segfaults during the test.
A little late now, I guess, but do you think it's worth making a convenience wrapper for this pattern? Not sure how representative our tests are of usage of our API
Changes on this file if done will be done in #9432.
The linter doesn't like this (neither do I). I'd suggest assigning the second parameter to `zip` before the call and do `zip(some_names, expected_names)` or similar.
Can we make the context the first argument?
When MPI is enabled, should this not be MPI_Abort() instead of std::terminate()?
But more specifically, why `10`? Also you replaced some numbers smaller than 10 with this.
I think this file got committed by accident.
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
There's a conflict between this line and #23559. Your PR won the race by a few seconds, so I've sent out a fix in #23584
Did you get rid of this line when you tried nesting all `pacpy` imports?
will this be used by anything other than the web console?
Is this change intentional?
I somehow doubt that this is correct.
this change is not compatible with php 5.6. not sure if it is possible to configure `php-cs-fixer` to be compatible with older php versions
Can you check if you can properly serialize/deserialize this object. AFAIK, Optional is not serializable
softmax_with_cross_entropyapifluidpython paddle.nn.functional.loss.pycore.ops.softmax_with_cross_entropyappend op
What is this supposed to exclude?
Not super excited about how the future gets set on the task, but don't have any better ideas at the moment. Feels like it give access to details that shouldn't be reachable.
Why is this necessary? I don't see any usages of url.js functions in amp-viewer-assistance.js.
This class should wrap the generated client's aenter/exit, not the aenter/exit of a protected attribute.
why not just hardcode the entry point address and do byte.compare?
This is going to result in quadratic behavior when building up a dataset; probably not a big deal for listening sockets, but if someone reuses this for something else, it might have unexpected performance implications, maybe there should be a note in the header?
We can get rid of `NewInt32` here, and not use a pointer.
`from builtins import object` means that this will implement `__nonzero__` for us if Py2
I'm vaguely trying to pluralize group names... `system:cluster-readers`? Yes, yes, `system:authenticateds` is terrible
There must be a fun story behind this one :) Would love to hear it if you have some time. Good change though.
Is it possible to return 0 with this lock held at line 412?
@vsoch I think the test was asserting the output of a wrong implementation. `install_root` is not in the schema so I would expect it to be an 'object' by default, not an 'array'.
Extra empty line detected at class body beginning.
Out of curiosity, why do we pass a `() => callbackFn()` instead of just `callbackFn` in this file?
Add to the docstring.
You should fix your editor settings regarding auto-formatting, `make fmt/verify` shows formatting changes.
Would it make sense to put the certificate in `GenericLoopbackOptions` and make use if it in other loopback servers?
This shouldn't be necessary since we're returning a Promise in the test.
Is this okay? I'm not sure if we treat `6.0` differently from `6`
c/p err (was placeholder for something now remove it!)
You could just write ValidateFirewall if you need additional check here. Otherwise, just public firewall method. Then you could call the method anytime you want, and then get out issues listed in Validator.
In the description you stated: _"I noticed that the test failed with timeout after ~1s."_ Should we instead increase the timeout for that specific test and move to outerloop instead?
Nit: no need for init in webapp directory (especially as you have modified the test already).
Don't we want to block updating EgressIPs when EgressCIDRs field is present in ValidateEgressNetworkPolicyUpdate()?
Is this causing a test to fail? I feel like it shouldn't be needed, but I could be wrong.
You probably want to change CRYPTO_THREAD_unlock() too, and check for EPERM there
this does not have the return anymore at this end of this `if ($this->needsRestart($args[0])) {`, so it is changing the code
Why the *magic* time number here instead of using `GraceTimeOut` ?
we might want to find another name here. `rotation` suggests that the input is capable of rotating the file by itself.
The window of opportunity for getting to this point is incredibly small, has this been measured to be faster?
Remove the extra leading whitespace.
Adding a bit of explanation of the behavior of `path` in another sentence below this one would be good: strawman: "If path is set, it is prefixed on the paths contained within the Snapshot".
A FormField.value can return a Dict[str, FormField] or a List[FormField] as well (e.g. the "Items" field in Invoices). I think we'll need some logic here to check for that and make sure those FormFields are getting converted to dicts.
I would use a static class property instead
Shouldn't this also be accompanied by `get_pruned_tx` like the other instances?
Nit: remove newline?
Extract the return value of `getQuery()`
Maybe we should change `invoke[Async]()` to receive the origin as a parameter instead?
probably should rename this file secret_store_none.go or something
Please use `if ctx.Data["IsApiToken"] {`.
shouldn't be completed with TimeoutException?
I'm getting a warning "Static method 'restore_notification' should not be called dynamically".
panicd because h conflicts with help
Converted from deleted *.rec test.
please revert these changes. If you need the changes, then the contents should be copied to your keymap, instead.
IMHO, a more logical return from `measureResources_` would be reverse. E.g. "is this a displayed element after measurement"
this imports logrus twice
no empty line, it is all stdlib here
Strange. There is new line at the end of this file in my clone...
putting phpdoc without putting types means this phpdoc is invalid.
FYI the canonical way to write this is `T[] copy = (T[])oldArray.Clone();`.
You choose the inheritance way, I expected some composition in which you would have a new `CrypticTicketRegistry` in front of a regular registry: `new CrypticTicketRegistry(ticketRegistry);` This way, you would not have changed the existing ticket registries, wouldn't you? Easier and more backward compatible.
Yeah, but then I couldn't declare the variable as `CompletionService`...
Aside: A very useful value object, but we could move the geometry calcs into it. E.g. add it to core as Elgg_Size_Rectangle and add method `->fitInto(Elgg_Size_Rectangle $boundingBox)`. This would proportionally reduce the current values and spit out a new size object.
Should we make queryset with prefetched needed data from products list?
The new name may now conflict with an existing name. That's why we use a character that's not valid as an identifier. Since we also generate names that aren't valid in C elsewhere, it would be better to have a centralized facility for dealing with problematic names within mypyc. If you want to pursue this, I can give some pointers.
Converted from deleted *.rec test.
Here we were checking `(_iriParsing && InFact(Flags.HasUnicode))`. `_iriParsing` will always return true if `_syntax` is null. If `HasUnicode` is set, we return `_string`. If it is not we fetch `OriginalString`, which is `_iriParsing && InFact(Flags.HasUnicode) ? _originalUnicodeString : _string`. Again, `_iriParsing` is true and we already checked that `HasUnicode` isn't set, so we always return `_string`. => We always return `_string`.
Class that is not an actual test should not start with `Test`
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
This component is also erroneously using `IsUpdated`, which could potentially cause it to initiate multiple rapid and potentially unnecessary updates.
Standards: Can you please add brackets to this conditional statement?
space after Throwable
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Ah, this one is missing
Please put it back :)
Could you please create SimpleLongAggregatorFactory to align with double and float? Maybe as a separate PR, which is merged quickly before this PR.
Why does this need to include Integer now?
This seems like a weird change. Why are we now accepting arguments that we'll ignore?
Did you get rid of this line when you tried nesting all `pacpy` imports?
Nit: I would prefer to pass nil as registerer, if we're not testing metrics.
Suggestion for better naming would be appreciated.
I believe one of the reasons for not having this constr was to avoid people creating new objects and reusing this class in the selectors, by caching an instance and calling setValue() every time getObject is called from selector. Can we do the same and use setValue instead of adding new constr ?
What is left to do ? :angel: (should be written here, or the `TODO` should go away :stuck_out_tongue_closed_eyes: )
This will be printed in the task log if it's string. Please use `PasswordProvider` to make it configurable.
nit: DER ? isn't encode bytes into PEM certificate sufficient ?
if possible, better to set attributes on the SpanBuilder above
Do you need this file?
Since v0.17.0 variant can be conditional, so there's no need for a conflict.
Is 0 a valid containerID ?
I think this could be `User.find_by(confirmation_token: session[:user_confirmation_token])` instead of `.take` since there should only be one?
Any particular reason to change `w+` to `w`?
Are we ever hitting this line?
I don't know Python very well ... what does the `*` before `self.credential_scopes` do?
this is incorrect. The semantic of this method is to indicate if the operation is non blocking and therefore executes asynchronously. Adding the `@Execution(BLOCKING)` annotation does not change that. The only effect of that is sending the initial portion of the operation in the `IO` pool instead of `CPU_LIGHT`. The operation doesn't become blocking because of that. The only way a non blocking operation becomes blocking is if using a connection that is participating in an active transaction
The `IsBackgroundPreview` property is used to control the visibility of `Pan`, `Rotate` and `Switch to Node View` menu items described in `Watch3DView.xaml` above.
Is it not used anywhere?
:confused: What's the benefit in this case of using a single-entry map instead of a simple int?
I don't know if it matters or not but the copy description is a bit different given the function. should we have search/replace? we can also leave it as is
If we aren't going to propagate the error up, can we log it?
Naming-wise, it's very confusing that in one place `_freeStreamSlots` is declared as an `int` and in another `_freeStreamSlots` is declared as a `SemaphoreSlim`.
Use `{@link PointShading}`
What? Afaik there is no `input[type=textarea]`, only the textarea element. We want to use textInputType for textarea elements, so...
Should not be part of the pull-req
The original author's intent seemed to be to not display any kind of error here in the `Adding mapping from <fromHost>:<fromPort> To <toHost>:<toPort>` string and let it fail a few lines later where the user will see an appropriate error message. Please advise if this should be changed to output something like `<FAILED TO OBTAIN EXTERNAL IP ADDRESS>` instead of nothing.
Could we track pageviews with a before_action instead to catch them all and avoid a specific test for each page?
NULL check not needed.
Assuming this is unintentional?
Why had you added "created" here?
I think this needs an assert
what is this other string used for? anything?
Is there any better way to do this than introducing another global?
only called from one spot, can you move to point of use?
Let's move this to the `Interfaces` directory and update the namespace to reflect the move.
Can anyone tell me why this is necessary now? It's _fine_ but I don't know why.
Doc above needs to be updated. And what about `(float, float)`?
Might be good to create a "isContainerReady()" type of function at some point so if we need to adjust down the line we can just change the one function. Might be a little more readable too. Not a stopper for this PR, just a suggestion.
Use `wrapper` instead of `wrapLeft`.
This is solely a refactor.
You can remove this import now.
Can you add a similar note here to what you have in the masked language model?
Is this necessary to create the dir in the validation phase?
Use 2 spaces for indentation in a hash, relative to the start of the line where the left curly brace is.
rm empty line
Should it be changed to paused?
Do you expect other settings than timeouts inside of the `LifeCycle` struct? If not do we want to rename it to `LifeCycleTimeouts` for consistency reasons?
As you don't use receiver, you can use only a func instead of a method
I'm not sure if this can happen in Bokeh at this point, but `obj` is an `ndarray` so `obj.tolist()` can give nested lists and this won't work.
I'm surprised this was needed - ``filterEditorSafety`` is supposed to remove it, which I think it is whole purpose of this test.
Why the *magic* time number here instead of using `GraceTimeOut` ?
How about using more narrow client? I'm shooting core (without looking at code), which should suffice here.
just mentioning again, this won't work for tls-enabled docker daemons :)
whats with the `//Reflect<Storage>.GetEnumValues();` ?
I can't tell if we are using this outside of specs, but if we're using it prod, I'd put this in a file called `zxcvbn/tester.rb` in one of the directories in `app/` to match Rails autoloader expectations
Why a string and not a float ?
Rename `toTable()` method to `to()`? Seems more consistent with other ios, eg. BigQueryIO and you already specify `String table` argument and the docs tells what's the subject of this operation so it's all clear. :)
Weird... Was JsrtPch.cpp `#include`d somewhere at some point?
I have troubles with my editor and code formatter right now. I don't further know if this is the good or the bad format
`PlayingStates` sounds far more descriptive than `string`, @alanorozco does this look correct?
Was this intentional? I think they were supposed to be set to zero, however this is also test code that we don't execute currently so I'm not sure.
You can use `bias_attr` instead of `with_bias`. i.e. `bias_attr=False`
why not just a MiddlewareRef ?
I can't seem to find where the modal window happens in the UI. Where is it ?
nit for clarity: "and resume the animation or video"
Looks like this isn't needed.
this is used in case one wants to write the h5 files to a folder => check the `file_utilities` to see how it works
Leftover junk on this line.
@ke-yu @sharadkjaiswal is this a BC break?
I don't see that this `excludedAssemblies` variable is used anywhere.
Going to leave it there for now, I'll slowly chip out other deprecated stuff and aim to upgrade to 6.0 defaults in the future
c/p err (was placeholder for something now remove it!)
Probably only '<' is needed here
The result is `<autogen-<...@...>>` which does not look correct.
This change (along with the one made by @laf ) fixes the buggy behavior of special characters in service entries creating exponential numbers of '\'. But it also means that this function does nothing (except copy the variables... ) maybe we could use this to prevent posting array variables and let the mysql wrapper (dbFacile) handle any escaping?
Not protected by PENDANTIC and I cannot find an equivalent change in master
just nothing to be tested?
Moving it to Cython means exposing most C structures to Cython and staring at tons of generated C code to see that it actually does the right thing (like in #891). I wouldn't do it bundled together with a functional change.
Wouldn't this make the `DefaultStreamCreated` marker obsolete?
This is a separate bug that prevented event type filtering from the UI.
no need to `downcase.strip` here?
Would keep the trait and fallback to it if the `accessControlQueryEnhancer` is not set.
This seems to defeat the purpose of the method since it now always returns `s`.
What's the objective of making this a `char`? I think it was kind of advantageous to pass a string as it will use all of those tokens as delimiters. Maybe we could introduce another overloaded function that's specific for splits with 1 delimiter? I don't think it matters much, as this function seems to not be used much in the code base.
I've just found that removing these methods is actually SPI-breaking :-/ It was a bad SPI arguably, but still. Something to bear in mind for the future. (And, well, I'll dig out the `name` out of the `image` :-) )
isn't this superfluous?
The `spec/asar-integrity-test-app/` should be put in `spec/fixtures/`.
Can this be throws IOException?
I think this was due to @cjb's lack of a git commit hook.
just nothing to be tested?
Need to disable it as it could cause OOM in CI due to docker container memory limitation
slightly more explicit to say `Negative mode (mode='neg')` does not ...` because it tells the user the other thing they could change
you are not using `filters` as plural in other places
This is wrong since it always changes the reason string even when the supplied version is less than the old version! The reason should only be changed if the supplied version is greater than the old version.
this already exists at `com.mulesoft.service.oauth.internal.platform.OCSSettings#sanitizeUrl`. Move to a shared Utils class that both classes can reuse
should this be multiple abilities?
On a previous PR, it was mentioned that it was odd that `.estlintrc.js` imported a function into configuration. This is similar, but I think fundamentally different: - This imports a configuration constant, so it makes sense as configuration. - eslint plugins (at least on VSCode) will reload the configuration automatically, but not the rule implementation. By moving the terms into `.eslintrc.js`, files will be linted again when you, say, update an `allowlist`. Otherwise, you'd have to reload the entire editor.
Block has too many lines. [207/25]
For external consumption?
Might be getting to the point where a typedef would be more convenient?
Use `Logger.log(FINE, String, Object[])` overload if the parameters are cheap to compute, to save the overhead of appending all the strings when not logging `FINE`. If the parameters are expensive to compute, wrap it in a `if (LOGGER.isLoggable(FINE))` block.
Where possible, we try to avoid code specific to individual features or modules out of the root class in Jetpack Boost. IMHO, we should have the `Speed_Score` class (instantiated inside `class Admin`) react to the `jetpack_boost_clear_cache` hook so the Jetpack Boost entry-level object can be kept as simple as possible. I'm aware that is inconsistent with the Viewport and Critical CSS stuff that's crept into the root level object, but I view those as mess we should clean up. :)
rubocop got mad at this lack of newline
Remove the TODO?
we don't use wildcard imports. Please review contribution guies
Suppressing all throwables is generally a bad practice, but we do not have much choice since some Jenkins extension types implement Throwable directly
where did this come from?
Could use `self.func_map.get(target, target)` here for a minor simplification.
We know what data was changed and we could give a more user-friendly feedback. What do you think about something like: "Account successfully updated"?
What is the purpose of this test? The code here will allow Java 10 to return 9 and Java 9 to return 10 and still have the test pass which clearly isn't the intention.
Align the elements of a hash literal if they span more than one line.<br>Space inside } missing.
This has got out of alphabetical order.
rename pressure to backpressure or backpressurePolicy
nitpicking: I think the phrases should be english phrases, like "DeleteWebhook deletes a web hook" (note the ending `s` for third person subject being the function)
how about just a to_s on these and drop the line above?
if only used in test, move to test.
Please put this method just below `getAncestorGroups`.
Do we need more tests to test key format?
Having to constantly keep track of two arrays is not my favorite pattern, it might be nicer to have a small struct with key and buf in it. WDYT?
This test needs to be fixed instead of ignored.
@eduser25 this should also be `errors.New()`
I guess all the setters here work this way, seems like bad practice; we should change it throughout.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Minor thing: I'd suggest not using a wildcard import here.
Store source.values[i] in local variable so we can re-use it if not null and not need again to lookup the array.
The change is unacceptable because it's not switching between equivalents! If I had to guess, I'd think that you're using a node version which does not support object destructuring. If you'd like to support such environments, you'd have to change `{ path }` to `request` and then inside the function you'd do `const path = request.path;` But (1) you really shouldn't be using a node version which doesn't support object destructuring and (2) you haven't provided any reasoning so I don't see the point in the backwards compatibility.
Ditto. We shouldn't have media on `tabIndex` to keep it more compatible with Web concepts.
Could use `self.func_map.get(target, target)` here for a minor simplification.
missing trailing comma
we might want to find another name here. `rotation` suggests that the input is capable of rotating the file by itself.
Do we have a tests that covers cases like `filter(limit(scan)` and `limit(filter(scan))`. In other words I think we should consider banning filter pushdown if there is already limit applied as I guess it is buggy today.
(style) do not initialise statics to false
As I understand we can't use the result of ATOMIC_TYPE_TO_PRIMITIVE[schema_pb2.BYTES] because it would result in `x = bytes('abc')` which would raise an error?
Can we format this block properly?
Shall we rename this method to something like `transitMutate`? Don't forget to update the doc.
**Consider making these events more granular - i.e. `NodeAdded`, `NodeRemoved`, `NodesCleared.`** Then the associated event types are simply `Action<WorkspaceModel, Node>` and `Action<WorkspaceModel, Node>` and `Action<WorkspaceModel>` respectively. Although it looks like duplicate code, it is cleaner and more to the point. This will only add a very small amount of code to this PR and will be consistent with `ConnectorAdded` and `ConnectorRemoved`. Furthermore, this is the pattern I'd like to follow as we remove `ObservableCollection` from Model classes. We've been trying to avoid non-type-safe `EventHandler` objects. There's a bunch of code taking this approach for no reason other than mimicry. Why include an `object` representing the sender when we have generics? It throws away type safety because it's idiomatic for 15 year old .NET code. :(
Did you get rid of this line when you tried nesting all `pacpy` imports?
What about the ingress DNS?
You can probably simplify this syntax by making a GraderPermissionPolicy class and defining a policy for each configuration option.
I'll hold off on reviewing the PR until the errors and existing questions are addressed. Additionally, please make sure you update the ref/System.Net.Primitives.cs file... that will be the first thing we look at.
Just curious, was there a case when it actually was a `String`? Which option was that?
There are one to many closing brackets here
C trick : a #include <header.h> is about including a system (or compiler) header first if it exist, them after any project file which filename matches. So this project header file should be included like the others : `#include "ca_logic.h" `
Shouldn't this be `wait=True` since it's not an early exit?
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Do you see any value in moving `value.length() > 1` to be the first check?
Just noticed this statement does a bit of silly calculation. Should juest be `sfreq = 1. / bti_info['sample_period']`
Do we want this flag to be this specific? Why not just have a boolean that enables/disable collision detection completely?
You need to add setting the `Timestamp` to the `DecodeSpan` method, as for v2 the spans are not sent within `transactions` any more. There was an agreement that if the Timestamp is not set it should be set to the time "that the HTTP request from the agent was first received. "
When does `nil` need to be passed in here? In addition, `0` can also mean that store does not exist.
Would it make sense to put the certificate in `GenericLoopbackOptions` and make use if it in other loopback servers?
Why does Prettier not allow me to put everything on one line? It's annoying.
removing the throw of exception would not break the caller expectation ? as they will not be getting any signal about failure?
why change the type of the exception?
spurious change, revert?
Throw out unused `valid` like this: `_, val = self.dollarSyntax()` to keep LGTM happy.
All these test names where confusing since we are testing the rpc function `GetServicweGroups` not the `ServiceGroupsHealthCounts`.
maybe use an id instead of basing your query on css which is prone to change in the future.
Does this do unexpected things if you redirect `stdout` to a file? Like `mame -oslog -verbose | tee output.log` which I imagine we'd want to have in some ASCII superset encoding.
Maybe it's just me, but I don't find the name of this method very intent-revealing.
I'm not sure if that's the right package to use
@choumx I understand why we have quotes around `'a4aProfilingRate'`, but not why we have quotes for `'isTrafficEligible'`. The letter should be referenced against `ExperimentInfo` typedef, right? /cc @erwinmombay
Did you mean to leave this in?
I'd prefer an environment variable over a test argument. An environment variable makes it easier for an end user to never accidentally pass an argument.
Without quotes, it removes the `;` from lists... which can be very confusing when you are focused on an issue related to a list of paths
i removed colorFlag because it just didn't seem to be serving any real purpose. It was an intermediary indirection that we then needed to translate again into the 'Colorization' type.
typo: wil -> will ?
Seems like a bad idea to remove this?
Seems like a bad idea to remove this?
So it looks like all the changes in this file are moving around the ctx parameter. Are these actual semantic changes or are they refactors?
Are there situations where these two checks would give different results? I can't think of any at the moment, but here we open for potentially different answers depending on `self._fast_package_checker`. What would be the difference between this and memoizing?
I get why you did it this way, but I'm pretty sure it's not the best use of interfaces to have implementing classes return themselves as instance, especially because this makes it obvious that the logic is not seperated from the UI class whatsoever.
This is begging to be a switch (config->agent_type) !
Do we need to do this if tag is None?
should all of these headers be moved into `static.go`?
Invert the condition
Did you get rid of this line when you tried nesting all `pacpy` imports?
Do you have an example of a situation where this would be used?
Missed this one
Do we need this controller at all anymore, or is it used for 'deleting' existing service workers?
It is incongruous to make this field static when all of its accessors are instance methods. Also why use AtomicReference here?
Maybe call this something more descriptive? I think `Light` could mean a lot of things.
I wonder if it makes sense to also catch ``Exception`` here, perhaps printing a warning since it's an "unexpected" error, and then still setting keyring to ``None``. That way something like say a ``SyntaxError`` in keyring doesn't kill pip entirely?
### Echo State Networks
Hm, you can add a line. But the copyright to the old stuff cannot be removed, FMPOV.
Shouldn't we be using `isArray()` instead ?
Hi @GrahamCampbell why did you change null to lax here? It changes the behavior but Symfony 5 does not need this. (We totally can pass null to Cookie).
I think both `PackageManagerSearchElement` and `CategorySearchElement` do not require input/output parameters. Is there a reason we need them here?
This is not allowed - pkg/monitor may not take dependencies on deep test packages in general.
Can we move this to a constant and refer from this file and gen_protos ?
import needed as well
I wonder if it would make sense to add an explicit `.addNullValue()` method instead
What if `new` is `nil`?
This is serving to 0.0.0.0, correct? Does it want to be limited?
can you handle the -int64 case also explicitly?
nbsp should be replaced with a regular space
Nitpicking, but would it be better to indicate what the validation is about? E.g. `ValidateSagaAndOutboxPersistenceIsSame` or something among the lines? That way I don't have to dive into the implementation to understand what the method is supposed to do.
thanks for this change... had this locally but never pushed
nit: although we do the rename in a macro, could you change the statement at the end of this loop to FOREACH_BLOCK_ALL?
Why not simply use recalculateUserAccess() in both cases here?
Why do we only remove it for these three attributes? What about all the others?
I believe one of the reasons for not having this constr was to avoid people creating new objects and reusing this class in the selectors, by caching an instance and calling setValue() every time getObject is called from selector. Can we do the same and use setValue instead of adding new constr ?
Does `@Service` have to be changed to `@DubboService`?
Don't use a global for this please, `add_kubernetes_metadata` could be defined in several parts of the config (or in some dynamic config), and only the first appearance would be initialized.
Not accepted anymore
Can this be implemented? If not, we use a `<% pending do %> ... <% end %>` helper in the views to hide content temporarily.
Let's try to keep the imports alphabetically sorted
IMHO you can just make this file totally empty
This is defaultable when we only have one container. I don't see that happening and it should be mentioned in the godoc.
do not update copyright year
Isn't this going to serialize both source and dest files together? Isn't that bad?
nit: the cast to `v1.Service` above will prevent check of `obj == DeletedFinalStateUnknown` right? So you can just use meta.MetaNamespaceKeyFunc
What about turning this into a `Optional<TemplateType>` and use `.orElse(DEFAULT_INDEX_TEMPLATE_TYPE)` outside of the DTO? This way we still know in the future if the index type is the default or chosen by the user (and being the same as the default) and can work with that information, e.g. in migrations. Also, we can change the default index template type without having to write a migration (which would not know if an index set uses the default because it was configured or because it fell back to it).
The coding style requires sorting by alphabetical order.
(we don't need this as `app/lib` is preloaded, tested without it and it works)
I don't think we should put AD specific code into the `LDAPEntry` and `LDAPUser` objects. How about using the `AccountStatus` instead? That makes it independent from AD. We could extract the `AccountStatus` into a separate enum out of the `User` interface to make it a bit more generic. What do you think? I also think we should only have an `accountStatus()` method in `LDAPUser` instead of also putting it into the `LDAPEntry` object. The `LDAPEntry` object is supposed to be generic. We can move the `userAccountControl` parsing into the `createLDAPUser()` method in `UnboundLDAPConnector`.
Here and throughout, you can just use `t` instead of storing it locally. `t` is updated only after successfully parsing something.
Hmm I'm not sure if this line is required here. Since the bug is due to using a variable that is named the same as a column in the table, perhaps the variable should be renamed? Maybe `approver`?
Should we stick to this default value? /cc @normanmaurer @tea-dragon
Maybe `--force` should be renamed, given that it does not actually force the removal in the "last device" case?
Need to add an entry to `versionMapping`, right?
Wouldn't `static const char f[] = "0123456789ABCDEF";` be better? It avoids a pointer.
is there any way we can test this?
starting here, a lot more blank lines are being introduced
Metrics/LineLength: Line is too long. [86/80]
Maybe pass verbose=True here? or even options.verbose?
Grammatical error: "cause origin variable be modified" to "cause origin variable to be modified"
Is this function belong to region?
Shouldn't this also take into account the `first_samp` param?
Since this is called asynchronously, we can't really delete the old/original `MailchimpBot` in this PR because when we deploy this there could be workers in the queue still referencing it. I'll create a separate PR after this one is deployed to remove it.
This would override a user-defined 'message_id' attribute. Better to make message_id a member of PubsubMessage.
this is semantically different from what was happening before.
Is this causing a test to fail? I feel like it shouldn't be needed, but I could be wrong.
Is there a better way to do this?   I was thinking that we make copies of the edges to put in the dictionary but now I can forsee how these edges will be hard to reason with (e.g. multiple copies of the "same" edge used as keys) Maybe the values should be lists of States
shouldn't we use the locationUrl from state? I don't think that window is available in native
Same for this one - does this bank of DIP switches have locations?
do we retry again somewhere when BytecodeGen failed in the first time?
lite isn't really used in the app, just killed it
I am not sure if this is a tool. It is located on the tools page, but it is an indexing thing...
This file has the main addition for this PR.
nit, This should return a const ref since the shared lock will expire when it goes out of scope. The caller will still have a reference to the Config-internal data structure. ((Looking at some of the other accessor functions, they need const references too :crying_cat_face:.)) //cc @jedi22
Maybe this function should be part of this `HostDiscovery`
Is the listener always ready once this returns?
should we be defensive here and check to see if there are any items after the split?
Why was this change made?
Why the change from `s_crt` to `crt`?
Not used anywhere - remove?
you prefer to put 0 rather than omitting to write the tag?
does it make sense to return a Task if we only use Task.FromResult?
nbsp should be replaced with a regular space
Can we make this `4.0`? We still support MongoDB 4.0 so we should use the oldest supported version, I think.
should we do this in connected callback where we know the element is attached?
Did you change all the places where we call this method using the 2nd arg?
you have access to the root ctx from here (this.root) to avoid this second recursion
Please use `Interop.WindowMessages.WM_PAINT`
I don't see this actually used outside of `beforeEach`, maybe inline as `installViewerServiceForDoc(ampdocService.getAmpDoc());`
For this sort of thing, we usually abstract out the relevant features of something like `libkb.Env` into an interface. Does that make sense here?
Did you get rid of this line when you tried nesting all `pacpy` imports?
should this be cgroupManager and not storageOptions?
This should be split across multiple lines.
Did you mean to leave this in?
Same URL for both stage and prod?
Why lower this?
Extra empty line detected at body beginning.
Why? The previous implementation (delegating to `getAlternativePriority`) seems still valid.
Minor naming recommendation, but following Java Bean conventions, what do you think about renaming this field to `nullable`? The accessor method would keep the existing name of `isNullable`.
no well format
I've been curious about this recording quirk, because I've seen it in Key Vault too. Is this how we should redact the occasional resource name that makes it into recordings, at least for now?
Since you're touching that old code, could you add in a space before `isset` to respect WP coding standards, as well as curly braces?
for linux, it was discussed (cc @heronhaye ?) we might want to be able to snooze indefinitely
Did you mean to leave this in?
is this class actually used? I thought this was not being used yet until txPool integration happens.
Would it make sense to put the certificate in `GenericLoopbackOptions` and make use if it in other loopback servers?
Would we ever want to consider using `!` for target specs as well?
I hope this is a good place to add it.
Need help for this
@michaelkleber are you checking the CID string length in ads tag?
I'd say the variable name is not very intuitive, given the use-case.
Can you also add the check for upload_date & certificate_chain?
Probably a mistake before, but worth checking ... Could this have been intentionally hidden ?...
Don't you actually want this? The person didn't specify 12pm.
typo: `lay` -> `determine`. Add the default value here.
I'm still hesitant to re-enable it, it passes locally but apparently sometimes it will fail on CI. I'm looking into it.
Why do you need this in the `ContactController`? It should only return a single type of entities anyway, shouldn't it?
Super nit: in order to avoid code duplication, might be worth putting this code in a util function that takes a user as arg and returns the unlock date.
I think this was due to @cjb's lack of a git commit hook.
nit: this is a bit hard to understand. How about 'only predefined policies are supported'?
New field requires a migration to add this into the DB.
I think you can just make this a local variable with this refactor.
Standards: Can you please wrap operators with spaces and add a space before the brace?
Seems like a neat trick. @harry-cpp ?
why is there no consistency between what is public/protected?
Nitpick, but you don't actually need this line, because `begin` doesn't open a new scope.
All these test names where confusing since we are testing the rpc function `GetServicweGroups` not the `ServiceGroupsHealthCounts`.
unnecessary whitespace change
Use next to skip iteration.
All these test names where confusing since we are testing the rpc function `GetServicweGroups` not the `ServiceGroupsHealthCounts`.
Looking forward, from the AST perspective (not the tokenized perspective), perhaps `ExpressionNodeType.TERNARY` is better named `ExpressionNodeType.CONDITIONAL`.
Does `importlib.import_module()` not work?
wondering why `Array.apply` is necessary here.
We should prefer `{@code ...}` over `<code>...</code>`.
Please indicate that this is a transient property that is not a part of DimensionSpec identity.
I'm not sure it makes sense to use the min value for the type. For one thing, that tensor might get cast to float16 later, and for another, it might be weird to have a value there that goes to `-inf` at the drop of a hat.
We dont need an extra gap at L9
can you add kwargs here?
The `json` tag should probably be `urn` - camelCase is standard for JS/JSON - and is what we do for everything else here.
Where is this used?
Not sure what is proper casing according to code-style but `CassandraPageSing` uses `generateUUID`. Can you please unify?
can we revert unintended changes please
this assignment is dead now
That does nothing. Is this intended ?
really no better way can be found??
Preferred "promotion to SC" form is `SC (1.0)`.
Those modification are not anymore relevant to your fix.
You don't need the conditional, jist short circuiting is enough
so previously, pip has never exercised the multi-file support of ConfigParser. not sure how the layering works with that? are you comfortable with that?
We should not call this for single-tenant/subnet plugin as it depends on NetNamespaces. I think, we should move this to node.policy.StartEgressIP?
What guarantees prefix is non-null here?
this should be a `StringSet`
`volumeSsQuota` and `volumeNsQuota` ditto, consider a better naming, it will be easier to for others to use and maintain.
what haopens if value is false?
Need to do a similar adjustment in `dvc/command/cache.py`.
This had been non-fatal since #302, but I don't see any discussion there about why it was non-fatal then.
Don't see this used anywhere in the PR. Can we get rid of it?
Why lower this?
this should be a `StringSet`
Why? The type annotation is already there in the function signature.
Could be formatted a little bit better?
++ to remove that.
remove the `user` here: `e.G().Env...`
It might be a little bit `c/c++`-ish but shall we merge these two into a single method like `getLogAppendTime` and when the version of Kafka doesn't support LogAppendTime, returning minus value or `0`?
better just initialize `filesToDelete` to an empty list.
Love the addition of the docstring. Nit: Is it more accurate and concise to say ``Update the provider index with additional virtual specs`` given the inclusion of the `Args` description?
What if we make this `ner_tokens`? That seems like a better name.
We should include a label here and probably for other fields as well. Please note that `name` incorrectly claims to be a `Product field`.
Why lower this?
Why are we sure that it is non-nullable?
Should this only be applicable for DEV?
It this deleted on purpose?
should this be `"about #{community_name} listings"` ?
just nothing to be tested?
@ramramps, This won't just affect sliders. It will affect a lot of nodes. Is there a way to do this without modifying `BasicInteractive`?
Why was this change made?
expandStringMap does the same as this i believe
`s/EKLib#ShouldRun/checkLoginAndPuk/`. Also this is going to say "failed" even when there was no error. Maybe tweak the wording?
Why don't `2013-2014` ?
nit, This should return a const ref since the shared lock will expire when it goes out of scope. The caller will still have a reference to the Config-internal data structure. ((Looking at some of the other accessor functions, they need const references too :crying_cat_face:.)) //cc @jedi22
I think there might have been a reason why 'none' got special treatment.
this is to preserve the record of this script and prevent its execution from having any affect. Do we have an "attic" or "archive" for scripts we don't ever want to run again? Is there a danger in just removing the script class completely?
Moving it to Cython means exposing most C structures to Cython and staring at tons of generated C code to see that it actually does the right thing (like in #891). I wouldn't do it bundled together with a functional change.
Should this be done when we preload/prerender the page, when distance is set to `<= 2`, instead of doing it when navigating to the page?
Maybe move this to line 56 so that the config can override other properties like `acks` if needed in the future
What is wrong with using keybase1.SimpleFSInterface? Why do we need a new type?
What do you think about adding an exception to `SegmentPublishResult` on failure, so that callers can figure out why it failed?
closed in doDelete?
Maybe call this something more descriptive? I think `Light` could mean a lot of things.
I believe it should be replaced with `produceCalled = false`. Could you modify your pull request? Thanks for noticing!
so if the selected srv is not raft replica srv, here just return DER_NOTREPLICA to client? or should it remove the tgt rank from svc list and rechoose?
Get rid of this iteration.
Nit: extra new line
c/p err (was placeholder for something now remove it!)
just use `org.ray.runtime.generated.Common.Language`?
nit: I think that you can just do SSL_get_SSL_CTX instead of passing the CTX?
Can't the `HasNodalSolutionStepVariable` from the `ModelPart` be used to remove this?
Trailing whitespace detected.
This should be `change: 'change'` since we follow the naming pattern like `change | close | open | moveUp | moveDown | etc.` in other components
We can remove this.
Can we use Ordering with nullsFirst or nullsLast here?
Why did we start creating this map here instead of inside DagManagerThread?
is this related to the ztest fix? Or is this just making it run faster by not damaging when it would cause more than 2^12 tries?
But more specifically, why `10`? Also you replaced some numbers smaller than 10 with this.
Out of curiosity, why do we need to encode the json string here as a URL?
Better to just check that the channel != null and not closing or closed Otherwise if the agent is taken offline due to the returned metric it cannot come back on-line
Revert this change
@bflad not sure if this will break anything - had to do it in order for import to work correctly though.
Perhaps can be deleted entirely?
Note that this line will never be reached, since `WP_CLI::error()` will stop the script.
So passing `undefined` causes this function to have no affect? Shouldn't we at least default to true or throw on undefined?
struct field ApiKey should be APIKey
wasn't the issue that we're getting a non-zero value when we expect zero? how does this help that?
This must be renamed as soon as LibraryUI introduces class with identical name `SearchCategory`.
Probably `attr_reader` would be enough here.
Proper docstring style is actually to have the close """ on the same line _iff_ it's a single line. So it was wrong, and it's still wrong. :-)
please also add it for the $desciption parameter in `__construct()`
This function name is out of date now.
Bad empty line.
what do you think about this? Is it worth checking?
@akoeplinger, does mono still need these? If yes, anything under src/libraries/System.Private.Corelib should be reverted.
It seems properties is only used in main(), so you can make it a local variable inside main(). And jobProperties can be private static.
These are not really mutually exclusive, but our current schema for dvc.yaml doesn't support it. Plus our old dvcfiles were fine with it, so maybe worth just allowing it. Will revisit this line in this PR.
What is this being used for. gorm should not be anywhere in the code now
Can this column be empty? Do we need a `null: false` check here? Also we should probably add an index on this column as well.
c/p err (was placeholder for something now remove it!)
I'd have preferred to keep this here since this is very much related to the k8s.Controller implementation. What is the reason to remove this?
may be just `LOG` instead of `HOODIE_LOG` ?
you might want to add this concurrently, I don't know how big the production table is but still...
Do we need to introduce a config? Can we always look for writer schema first and then default to file schema if it doesn't exist?
There are lints that catch this sort of thing. Does the `if` statement confuse them, or have we not turned them on yet?
If `--build`, `--build=` or `--build=*` is passed, build ALL from sources.
It might be nice to localise this? (and therefore, allow admins to customize it via the translation editing UI)
space after Throwable
There should be another `*1024` in here.
Line is too long. [96/80]
Ok, so the interface has not moved. Is that why it is OK to move the implementation to Core? Should the interface also move to Core in Dynamo 3.0?
Suggest allocating this only when the feature gets actually used.
Should not be part of the pull-req
Do you need this file?
What this regexp is meant to do?
Without this options hash and the other related, reverted code, only a particular tag's posts will populate the sidebar tags on the homepage, regardless of the "pinned" tag.
This will generate an extra empty line, could you remove it?
Just a general question: seems this method is the same as in `CreateSourceAsProperties` ? Wondering if both should share code? Not sure why both are different?
In the context of previous side note. I have some ~wage~ vague memory that it, header ordering rule, was indirectly discussed at some point. It was formulated as "cryptlib.h over everything else", and we do see instance of it here. Do note that cryptlib.h did include e_os.h till now...
Would not these be useful for an implementer of a new runner?
should be handled.
Any particular reason you choose Integer instead of string? honestly, i would like to give my bots "names" ... not numbers ... but maybe i care too much for them ...
It seems that at adding the `ValueError` description you also removed the last 2 lines of the `RaidenRecoverableError` explanation. Can you add them back?
This doesn't looks correct.
wouldn't it be better to give it a default value of `''` ?
Is it weird that `RevokedAt` could be non-nil but `RevokedAtSigChainLocation` could be nil? Or vice versa? We could consider making them two fields on a struct, behind a single pointer? But this is super nitpicky, so only if you feel like you want to do it.
Wtf why did we lower it
Won't this still leave it broken? If the context is cancelled, then this will stop extracting.
Please use the `(...)` syntax, it is used more often inside Minetest.
If you invert the conditions (`('' === $requestContent = $request->getContent()) && $request->isMethod(Request::METHOD_PUT)`), you don't need the trick with `??` anymore because the variable will always be defined. WDYT?
Have you tested this by running a job on Dataflow? This is a little scary because the latest version of apitools on github is 0.5.14. @craigcitro @charlesccychen @chamikaramj (FYI, in case anybody is aware of a known incompatibility.)
is configFile still being used? Ideally should be removed.
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
Why lower this?
[nit] Could be `func (*State) EnsureNoProjectsMissing(context.Context, []string) error {` but doesn't matter
Let's try to keep the imports alphabetically sorted
Should we name those functions appropriately? Eg; StateWithoutLock()
Absolute imports, please
Why is this change needed? The only caller of this method passes in `t.Name` where `t` is of type `Target`, and the `Name` property returns a non-nullable `string`.
I think this check might be redundant: - It is not possible to get cppstd defined if it doesn't come from the profile - The profile was checked before being applied to conanfiles If the problem is per-package settings, I think I'd try to implement that in the same place as the global cppstd is checked, to keep that logic together.
If this isn't working with hashes there's a more serious regression issue somewhere in the codebase, I'm worried this is a bandaid on a missing limb.
Please note that the contents of the `_shared` directory must be copied across all storage SDKs (queues/fileshare/datalake/etc). This includes the `_shared` directory in the test suite. If you feel this should not be in the other SDKs (i.e. that avro will not be a part of queue messages, or datalake etc), then please move this directory up a layer :)
This makes an assumption that platform can tolerate unaligned references to memory. Even though most popular one does, it's not safe assumption to make. Because OpenSSL is multi-platform.
revert this there should not be any logic here
No need to change this version will be read from git tag on this branch
now that we have 3 args, thoughts on moving to named args for clarity?
switch this to external function
how is `RestClientException` map to `kerberos`?
What does this message actually mean? I.e. is it useful in debugging? Can it be made clearer?
Line is too long. [112/80]
Does this need to throw still?
Intention was good, execution a bit worse ;) @deads2k mind updating in a followup?
Do we need `self.result` any more? Can we just return the `DataflowPipelineResult` object?
Does this need to be updated too?
IMO, we should also have tests for defining `values` without given `value` in the `values` input field.
/cc @camelburrito to confirm elastic scroll leak is a webkit issue not a Safari-only iOS issue (That's what I have been assuming)
Please add @Nullable in the parameter of setSrcHash()
nit: move down
Can this be updated to use the image format string so that we don't have to patch OCP?
This is not allowed - pkg/monitor may not take dependencies on deep test packages in general.
(no change requested) it is strange that one has `ALL` and other has `OWNERSHIP`. Should I file an issue for that?
We always need to append `_reported_`.
This is very unnecessary. See a couple lines below.
would the exception stack be useful? just to LOGGER.warn( .... , e);?
I think our style discourage importing `*`
Don't think this is needed - if `v` were indeed `nil` we'd get a SIGSEGV in the caller.
This line seems unnecessary, as any newly created file should be owner-writable.
Not sure if we have a test for this, but could we make sure that we're testing that `secretValue`, if a pure `dict`, remains a pure `dict`? (i.e., I don't want my secret dictionary to get autoconverted to a Box object)
shared_requirements.txt should also be updated
`this.baseName = this.baseName || 'jhipster-jdl'` Also, not sure about the default value
This is a good example of why aliasing is helpful, because multiple imports packages could be named `v1` and changing the import alias later on is a bit annoying.
ah, that does help. thanks. i had actually misread it originally and thought it was saying: for refresh, do not print, and that's what really threw me off.
Don't do this - keep the fields the same internally and externally. When we move to ingress this is going to have to merge in, and ingress has no concept of duplicate from.
use a constant from the http service
Unit tests now rely on `DynamoShapeManager.Preloader` for its geometry preloading activities.
I am not sure about this condition. Alternatives: 1. `any(is_subtype())` 2. `any(is_same_type())` ?
This seems to defeat the purpose of the method since it now always returns `s`.
I would guess that the new default behavior should be to produce the grain that makes use of this pr. I.e. that default should not be `0.0`.
Should this only be applicable for DEV?
nit: an update on the description would be nice
Hey @RoyalTS ! Good catch -> I think the appropriate fix here is to pre-define the `line` variable in line 95, prior to the iteration. The reason this is failing tests is because the `lines` list is _only_ appended to whenever `return_all` is `True`.
I think removing this regresses functionality of the Python SDK relative to Java. We currently ensure that any log message includes the current step in its context to simplify querying, etc. Is there a plan to re-enable this functionality?
We should still include an error log here, as we have for the other outputs. Otherwise it's most likely to get unnoticed.
Seems like a bad idea to remove this?
Shouldn't this be `Laravel\OutOfBoundsException`
The lint step was breaking because this file wasn't gofmt'd
if this enough? Or should the tags be in a part of the firmware file that can be stripped out to compare files?
Hmmm... you're not consistent. In `test/integration/imageimporter_test.go` you do this inside `testImageStreamImportWithPath` helper method, but here you moved those to actual test methods. In general I'm fine with this approach, but make it consistent everywhere.
These two routes should also be wrapped in an `if Rails.env.development?` statement.
[nit] I think renaming it to `storeStates` could help clarifying what it's used for.
nit: we are doing this in a few place. (amp-sidebar,amp-selector), let's do a `isRTL(win)` in `dom.js`?
style-wise, is it more common to assign to `@email` and remove the explicit `render` call since it will be called implicitly?
In case you're curious: The netcoreapp build complained that _nestingStack might be null, when neither the net461 or netstandard2.0 versions did (the field is declared as `Stack<StackFrame>?`, so I don't understand the difference in opinion). The compound assert didn't make it happy, so it also got a ! suppression.
This is the first monitor that needs to be conditional. If you plan on running as a pod, we don't want to list / watch everything from inside the cluster (we're watching from outside). You probably need to have a monitor specifically for this, and you should not be running this from outside the cluster. A proxy connection through the cluster will be disrupted.
nit : should we have an error.go file which defines all the errors in one place
other path without the helper :(
This should be done as part of a specialization for remove token.
Re-using statuses mmm... Cute, and I appreciate that it helps us avoid death by a thousand constants, but I feel like this will be more confusing than helping. Not strongly opposed to it though
`canonicalize_path` comes from `spack.util.path`, not `llnl.util.filesystem` doesn't it? There are more of this reference below.
It's okay to proceed here with an empty `token`, if `getIMDSToken` was not successful?
This is empty
@earth001 Does this method name still make sense, given the assert that you have?
nice, did not know binascii had its own python3 exceptions.
Preferred "promotion to SC" form is `SC (1.0)`.
I try to avoid holding a monitor while calling user code, because the user code can block (or even cause a deadlock). In this case it may be required, but if there's anything I've learned from working on ISPN-8554, we should at least use `lockInterruptibly()` ;)
did you mean to import `errors` or `pkg/errors`?
This whole idea makes sense to me from a theoretical point, I haven't tested it in practice, and I actually don't know how. It would be great if you could provide some tips for that. Also, we were checking `self::php_bug_66229_check` here, I can see it's not used anywhere else, why don't we remove it as well?
is this the only algorithm and do we always want to apply it?
I renamed this method since service objects generally expose only one public method, conventionally called `call` or `perform`. Having the `_banish` suffix seemed a bit redundant.
let's remove this newline again ;)
Can we schema definition of each dict here so cerberus validates it?
I like this - this should be aligned everywhere i think
What does ErrNotAContainer mean? Is the ID present in c/storage, but not as a container? That points to a potential bug to me - why is that exact 256-bit random ID still in use?
pkg_id, prev= package.split("#") if "#" in package else (package, None) Call it prev , it is the convention like rrev
CXS => Receipts; MKP => MerkleProof (Don't use abbreviation for naming)
I'm thinking maybe we just don't define `__str__` for the time being. Formatting with an instance will default to using `__repr__` in the meantime anyway.
why do we need both `guiLog` and `desktopLog`?
do we need derived actions? can't we just do @game.add_x_action(action) def add_x_action(action) raise if @loading
Change this to `2015-2021` after moving the benchmark code back in here.
does this mean the 8th page can be an ad?
why not using a native typehint here ?
`io.Copy()` could be added to the project `.errcheck-exclude` file.
(Not if I already mention this) we should call invalidate_checkout_prices first. Then we should call checkout_updated. Price expiration should be updated in checkout's payload. Also, make sure that we really need an additional `save()` action only for price_expiration. Maybe we can call .save only once for price_expiration and mutation changes.
think it would be a bit easier to understand to pass the domain event and dispatch it here instead of passing a callable?
this name is not very descriptive. Put a better one or revert to the prior one
@fqueiruga is this intentionally removed?
It's not necessary to check whether `input` is str because it has been checked in line 572. `if numpy.isscalar(input) and not isinstance(input, str)` -> `if numpy.isscalar(input)`.
I think this was due to @cjb's lack of a git commit hook.
Good catch, `parse_url()` without 2nd parameter does return the full array. OT: Maybe we should remove `@`? I find it not good muting PHP functions. Instead maybe switch to a proper class (composer again) which allows validation?
processDefaultVolumeStore will never return error. Just saying...
Do you need this file?
Also do the same for FileSink?
**This is inserted here only to allow people to play with the feature.** Running a health check for all the repositories will also rebuild the commit graph files (http://gitea/admin?op=9). It is entirely possible to generate the commit graph file using the command line `git commit-graph write` tool instead. The bloom filter experiment is enabled by changing `BuildCommitGraph(false)` to `BuildCommitGraph(true)` in the above code. It will significantly increase the size of the commit graph files and the time to build it, but in many cases it will also significantly speed up hhistory queries on large repositories (unless I broke it :D).
If you move this logic to `onResponse` in `HttpClientDecorator`, it should remove the duplication across all the instrumentation.
Your version of mockery is outdated
This should be `class TestCase extends \Illuminate\Foundation\Testing\TestCase` with a backslash Same with `$app->make(\Illuminate\Contracts\Console\Kernel::class)->bootstrap();`
This class has a logic to write the userMaps to disk and recover from the disk. Looks like, we need same logic for cachedConfigs too.
this is a bugfix? But it will break scripts, no?
Could omit classname here since you have static * import
I wonder if the constructor is the correct place to be doing this and not say componentDidMount. Are there any potential timing issues that could occur so a re-render might get missed? I think somewhere in the react docs it had suggested to make (maybe) these types of api calls in componentDidMount to ensure a re-render is triggered. So not to say it's "wrong" but it's not something I've seen normally.
I believe that the following two import are also not needed? `import torch.nn.functional as F` `from torchvision.ops import misc as misc_nn_ops`
`apiutil` and `etcdutil` seemed to not be nice
It should be version 0 only. For items created in personal desk it starts with version 0. @petrjasek correct me if am wrong.
Why not RequestAcceptGraceTimeout ?
Rename `default_address` to `billing_address` as it's no longer a mere default.
The formatting of this looks wrong. Shouldn't there be spaces around the `-` signs?
does that mean we don't actually throw the error anymore?
Is this import still necessary? I don't see we using describe any more here.
`final` should be capitalized
Is 0 a valid containerID ?
Sorry! Not sure how I missed this
If the recording feature includes the transcription toggle, should transcription components be included in recording?
is max item the only place where the double converter is used?
Shouldn't this much logic be in a model/service object?
`public` for consistency?
I should have added this a long time ago, definitely could have used it a few times in compound assertions.
This is the only change to the application code, the rest is tests.
Can use literal string
This array_reverse is unnecessary if you sort it later.
Please forgive me if I'm too dense, but... is RLock() even needed here? I mean, g.shutdown is a stable struct now (it will not be replaced by another channel for the duration of the manager), and a channel is inherently safe to read in multithreading...
We haven't decided whether to make the class itself public. For the initial release let's follow Azure/azure-sdk-for-net#11045 by keeping the class internal but adding it to `DefaultAzureCredential`.
I would avoid environment dependent code in unit tests, it can interfere with another process or test. It's better to mock `canBind`, ie if you want to check the class doesn't provide occupied *1024* port, make the method stub of `canBind(1024)` return `false`.
it seems that the worker network can be configured in the `packet.networks` section, so let's put it to the shoot example
I somehow doubt that this is correct.
As we focus this mode for users having no knowledge of SQ server I would rephrase this log to something like: "Local analysis". WDYT @bellingard ?
Here the answer is "yes", but I found a related bug, see #15796.
is configFile still being used? Ideally should be removed.
Considering the fluent APIs have one general pattern: method `withXXX` returns `HoodieWriteableTestTable ` itself. However, this method and above break this rule. WDYT about renaming them to `getFileIdWithInserts` or `returnFileIdWithInserts`?
What's the reason super.shutdown is not called, is this intentional ?
I've just found that removing these methods is actually SPI-breaking :-/ It was a bad SPI arguably, but still. Something to bear in mind for the future. (And, well, I'll dig out the `name` out of the `image` :-) )
Nit: Seems like this newline is intentional?
When we get to adding the ideal experience for #2421 (prompting for the owner), I think we'll need to modify this to allow passing the owner to `DoesProjectExist` since this is always only checking if the project exists in the user's account.
bad import order
msg: 'Failed to normalize glob patterns: ' ?
Is this really needed?
Will this break similarly when the restoration flow failed after this `DestroySourceBackupEntry` function had been executed successfully before? Subsequent executions of the restoration flow will try to delete the `SourceBackupEntry` again and fail since it's already gone, or?
Why does it hold this lock the whole function call?
But more specifically, why `10`? Also you replaced some numbers smaller than 10 with this.
You shouldn't need to import this, it should already be present
Maybe `zegative` means `zero or negative` :stuck_out_tongue:
Maybe this method should just throw an UnsupportedOperationException(), instead of returning a wrong result.
At first it suggested changing `reject(&:nil?)` to `compact`. I replaced it with `filter_map` at first, then changed it back to `compact` because I was paranoid that I might accidentally change some behavior. Running Rubocop again it then suggested changing `map` + `compact` to `filter_map` so let's go with that.
Please use relative imports as we use them everywhere
This doesn't compile
Please remove files that are not related to the article
Will there be any exceptions encountered here where we would want to route to RETRY instead?
nit: move to bottom :trollface: Also somebody should set `goimport` for David
why that change?
Can this be removed?
`mixed` should be before the variable name, not after
I think package aliases in go are meant to be all lowercase.. maybe `kbmni`?
Lets make this on by default and use this env var to opt-out if there is ever a problem with the new formatting. It should be as simple as changing the condition to `!= "0"`.
Should we really disable it by default?
This diff doesn't seem related to this change?
Are we no worried about loosing type information here? If we're going with a List, then this should just be the interface `List.class`, rather than the impl `ArrayList.class`, giving us freedom to use other list impls if we so choose. (Same for HashMap.class below)
Could you explain why you made this change?
- please avoid double (triple actually) levels of indentation - reading the code, the extra `hasLowerBitrate` check doesn't add anything and just runs more code. The same checks are done in `sortSources_()` - for clarity, please add a named constant for the result `sortSources_()`
Is this the actual fix?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
What's the reasoning behind the hashCode change?
"views" -> "view", there can be only one.
remove unused imports
Preferred "promotion to SC" form is `SC (1.0)`.
Line is too long. [87/80]
I think the only change in this file should be adding the logging here on the condition that retErr != nil. I don't think we should proceed if we are failing to renew. The callback should handle retries internally.
extra space before `break`
Hey @douglas-johnson seems like the linter has a gripe about the unused `$amp_analytics` assignment. Could you change that to: `new Jetpack_Google_AMP_Analytics();`
We no longer use Contract.* in the libraries or coreclr's corelib, so I replaced all usage in mono's corelib as well. Contract.Requires/Assert => Debug.Assert, deleted EndContractBlock, etc.
I'm tempted to say that this should be `publicImageRepository` or `publicPullSpec` to set the longer term direction.
nit: you can merge both lines above as `checkNotNull` will return the given argument
Maybe use the `MetricContext.register` method instead.
If we don't support it, this should also report an error message. (In error recovery mode, returning the upper bound sounds fine.)
not going to optimize this right now, will leave for a future downtime as it requires a bit of shuffling that's not worth it right now. We can address this when we optimize `Feeds::AssembleArticleMarkdown`
Please note that the contents of the `_shared` directory must be copied across all storage SDKs (queues/fileshare/datalake/etc). This includes the `_shared` directory in the test suite. If you feel this should not be in the other SDKs (i.e. that avro will not be a part of queue messages, or datalake etc), then please move this directory up a layer :)
need to update types_test.go to include the new field, and open a doc and config change issue with details
we should also inject `ConnectorSecurityContext` so it could be used instead of `null`. It could be artificial but user should the one passed by us when checking the access.
Could we remove `Gitea` from the name?
This was a security bug that skipped the latter parts of a compound assertion if `NeedProofSet` was set to False.
the `defer` should be defined outside of the loop, otherwise the function will be scheduled on each loop iteration
What exactly does this test? the two arguments of Assert.Equal are exactly the same, how it may fail?
again where is the assumption that --too is specifying a DockerImage reference coming from?
how is this used in the API? I could imagine a name like srcStore or srcImage would be more appropriate.
nit: blank line in imports is not inline with our code style
Won't this still leave it broken? If the context is cancelled, then this will stop extracting.
Missing space around string interpolation detected.
Why lower this?
TBH, I feel this change is more confusing. E.g. `comparator` is **not** used to _"further refine the search results"_. And _"should be used"_ sounds more like the user should do something (vs AngularJS using the function under the hood). And also `actual` is not necessarily a _"value from the array"_, but can be a property or sub-property of an item in the collection/array.
Won't this still leave it broken? If the context is cancelled, then this will stop extracting.
This will swallow interrupted exceptions, is it needed to catch all exceptions here? Also, is there a reason the ProvisionException wouldn't be able to just take a "caused by"?
by default it logs to STDOUT, let me know if this should continue the default behavior
by default it logs to STDOUT, let me know if this should continue the default behavior
This can now be removed.
We should continue testing the admission response.
You can just `return AnyType()` here instead. `UnionType.make_simplified_union` returns `AnyType` if any of the types passed to it are `AnyType` (as it should).
If I read this correctly we max out at a retry of 1sec (150ms \* 8) - I'd let this grow to at least 3sec given potential completion times in busy environments.
Do we still need to do this (replace space to dash) for unescaped filename?
Is valid to have null type?
Can you also revert this change? We're looking for the exit in line 131 provided by the underlying runner. I think that's causing the precommit test errors.
we should combine the import logic into line 12-15
this is the opposite of our `js: true` -- don't some of our user flow tests use JS?
Is this causing a test to fail? I feel like it shouldn't be needed, but I could be wrong.
Can we reuse the `enum` below?
Is there any risk here of mutually recursive dependencies? We could consider splitting this method into its own lil' module
not related to your change, but why are the policy types for Traffic/Route in endpoint package? Seems a bit odd.
It's not immediately clear to me that this will call `_default_summary_view()`, but I assume that it does.
Rename `default_address` to `billing_address` as it's no longer a mere default.
Sorry I know this is a hassle   but can you please rename all these to: * function names: `resourceAwsBudgetsBudget` * resource itself: `aws_budgets_budget` This is so we can: * Easily keep the service resources grouped together (e.g. `aws_budgets_notification`, `aws_budgets_subscriber`) * Prevent confusion with any other AWS service that may refer to a "budget"
Shall we use `logFile.getPath()` here?
So we're defaulting to a recursive list file? Does that behavior match what we had before?
nit: Remove one (or both) blank line(s).
Move this down to the grouping of github.com/elastic imports.
This property is not assigned correctly and never used, so I removed it.
I would prefer to have this warning disabled on a case by case basis and not in the whole file. This is how we use it everywhere else in the code. This can find bugs.
@deads2k that surprises me, I thought the handler order is FIFO, but from what I've tested it's LIFO.
For this sort of thing, we usually abstract out the relevant features of something like `libkb.Env` into an interface. Does that make sense here?
we shouldn't handle two types here. why not just pass in a list?
this imports logrus twice
caused by goimports, can revert
If registry for same user is added twice (because user is removed from `r.userManagers` and later added again), it will break all reported counters, as they will suddenly drop in value. :-(
I'm not sure that we should refactor this file in this PR?
maybe add a `ast.exp` to show the bits have been inverted?
It would be more idiomatic here to use raw string literals (which are escaped with `` ` ``) or to put each string literal on its own line and concatenate them, but what you have is simpler. You might file a follow-up issue to track generating the more idiomatic code.
by default it logs to STDOUT, let me know if this should continue the default behavior
Do you have an example of a situation where this would be used?
nit: would prefer to avoid the double-negatives and use `ready` instead
Please add a license header.
i started implementing this but the CLI only has the repo name so I left as is
Why is this needed? I don't see any nullability attribute being used in this file.
same thing about imports
this we're calling two methods, we should probably use parenthesis at least in the inner one: `title sanitize(@organization.name)` it's easier to read IMO
Call `this.getScrollTop()` to get the cached value.
These are not part of testing the sp versions.
Do you have a reason for different argument names: `action` vs `situation`? I find it a bit confusing.
replaced with `email_link` because this is a HTML template
Any reason you're using a different logging package here than we use in most other places in the repo? I'd prefer to keep things unified if possible.
`FAIL: Found 1 non-whitelisted pylint errors: tensorflow/python/keras/engine/training_v2.py:260: [C0301(line-too-long), ] Line too long (86/80)` can you please check this lint error
@carlossanlop we can't use cref's here since the source generator doesn't reference STJ. Would it perhaps make sense to use xref's though?
This method won't support this new facility... are we planning to remove it? Or is the idea that this is a v1 only method, effectively?
This change the response format breaking backward compat.But since the json format wasn't adding anything and should be more inline we the existing swagger definition I don't think this is blocking.
I renamed this method since service objects generally expose only one public method, conventionally called `call` or `perform`. Having the `_banish` suffix seemed a bit redundant.
This should move to the gobblin import group below.
You forgot to implement `List()` in `BlobStorage`.
Looks like there is a bug here in the existing code. `EXT_RETURN_SENT` should only be returned if the extension has actually been added. In the case of `OPENSSL_NO_TLS1_3` it isn't sent so we should return `EXT_RETURN_NOT_SENT`.
Style/EmptyMethod: Put empty method definitions on a single line.
The pending_cnt may be wrong now. Let's image if pending_cnt is 2, and the state is PENDING. schedule_task() will be called. In _schedule_task(), the pending_cnt will be added again. But in this case, the cnt should not be added, right?
Let's stick with 500k for now. 50k doesn't leave much room for execution and updating.
callout: I think this should be `self.headers` instead of `aiohttp_response.headers`, bc we made `self.headers` case insensitive
Is this the right fix? If I actually do sign in via another window and change my auth status, will this get triggered? Seems like it should be "don't unpause if we're still waiting for consent.". Should we have multiple states like "paused due to consent", "paused due to access", etc, then a single PAUSED_STATE that is true if any of the others are true?
This permission is used 183 times in tests so you can't really remove it without changing them all (look for `Admin:Tools`) (we should probably have some validation to stop missing permissions being assigned in `grant_permission`... but we don't)
i'm not clear on how sourceuri vs sourceref is used, can you add some more doc here?
Sure, but $urlwithroot should be defined :-)
The lint step was breaking because this file wasn't gofmt'd
This function seems to be unnecessary.
shouldn't you apply `preg_quote` to be safe ?
Consider to use ConfigUtils.getConfig(config, COPY_SCHEMA_CHECK_ENABLED, DEFAULT_COPY_SCHEMA_CHECK_ENABLED)
space after Throwable
This was the reference that needed to be removed after deleting `fetcher.go`
I'll hold off on reviewing the PR until the errors and existing questions are addressed. Additionally, please make sure you update the ref/System.Net.Primitives.cs file... that will be the first thing we look at.
Would recommend putting this into an @OnStopped method instead of @OnUnscheduled. As-is, we could get into a race condition where line 225 calls statementCache.get(), which returns null. Then the @OnUnscheduled method clears the cache, and then line 228 adds the value to the cache. Then, the next time this processor is run, the cache is already populated. Given that we are calling `clear()` here I'm assuming we expect it clear when the processor starts.
Doc above needs to be updated. And what about `(float, float)`?
what does 'shared' mean then if there is "No need to writeback or invalidate it anymore or invoke comp_make_shared() either." Does this mean that 'shared' means uncached and this this patch introduces a performance hit until the addition of the coherent access?
Spotless expects static imports on top.
I'll revert this
Is it possible to get a List that isn't an ArrayList here?
yeah, original was way too fancy :)
This pipeline doesn't use side inputs.
We now unset the parent category too if it is empty
After creating a helper to mark the pipeline as stopped, we only used this helper (`updatePipelineState`) here to mark a pipeline as running, so I simplified the helper and named it as such.
The fact that people screwed up (missed) this reassignment was the motivation to move to a pattern that was less error prone. I'd be happy with introducing a mockBuildGeneratorDefault() function and a mockBuildGeneratorCustom(func1,func2,func3,func4,etc) signature, but I do prefer the model where you create the generator with your customized functions over creating a generator and then doing the right dance to replace the functions.
I realize the rest of pip doesn't follow the convention, but should we start following PEP 257?
We're moving away from the idea of "put all the mocks in one folder" and instead we're trying to keep mocks scoped by domain. Can you move these to `core/services/keystore/mocks/` :pray:.
@barnabycourt, it looks like this was the only place in the code base that PLP1004 was used. Is it ok to remove that code?
before this change, this was a bit strange: a relative path was transformed to a homedir-relative url. (this is only corresponding with default ssh behaviour, where you start in the homedir, but with forced commands, you can cd somewhere else first and then there is no correspondance any more) as we support generic relative urls now, we transform it into such a url.
Returning the same copy of attributeMap may lead to programatic mistake as many different java file may modify it, we may not have the track of who is modifying what what modifying. Should we not have a put and get method of attribute map it self in this class. What do you say?
What is this % for?
Is this relying on the fact that `os.path.join` returns the second argument if it is absolute?
Usually it is not a good practice to use thread.sleep in the unit test if not necessary. (and 60 seconds is really long if you considering the number of unit tests we have). why is this needed ? is there any other way to achieve the same? There's a test utilities called `AssertWithBackoff` you might want to look into, if satisfying certain condition is what you want after the sleep.
will this be used by anything other than the web console?
100% agree this is the way to go passing a type and id rather than an ActiveRecord object!
This is wrong. The logic inside the loop can modify `$this->rules`, sohte count can change
The main fix here: pass the pulp authenticator to the reply consumer so it will validate incoming asynchronous replies from the agent.
This import is no longer needed
Let's not add a failed state again. It's a lot easier to work with a single exit point. A session terminates, and in the ancilliary data we'll put the error, if any
@Xyfi Initializing `$this->social_is_enabled` here instead of in the constructor will break the `if ( $this->social_is_enabled ) {` check in `save_postdata()` as that function will be called via AJAX and the class will not have been constructed by then and the `$this->social_is_enabled` will equal to `null`. With the live version, `$this->social_is_enabled` equals to `true|false` in that check.
I noticed this matcher was missing on one of my own PRs and I forgot how to add negated matchers so I just wrote `.not_to include` and forgot to look into it :joy:
Since this filter is stateless, couldn't we cache it in a `static final`?
Why is this change necessary? I am not seeing it ever being set to a nullable string.
nit: I guess we will want to keep this method until we merge `ExprType` and `ValueType`. Myabe `getExprType()` better to be more clear?
this can go around line 20 below.
nit: cut the 'y' in 'implicity'
why not typehint to `string`
Let's explicitly initialize this to zero for readability here and in `edonr_test.c`. `int aok = 0;`
missing Upgrade451to460 class, I'll add that.
How about getting rid of the `Type` enum completely and using a static `String` field on each alert condition?
As discussed offline, 2 bytes is too short for job id. @edoakes will increase this length. So we can still keep the value as an integer.
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
should there not be a `/` after `${OUTPUT_DIR}` here?
nit: we use `keystore` thrughout the code, plus the type is also named `Keystore`. Let's not rename the variable to `keyStore`.
Nit: it makes sense for caller to pass buffer for ingesters, because `Get` returns it back. Hosts/zones buffers are only optimizations, and using a ring-specific pool (shared with subrings) may be a good alternative, without a need to change `Get` call.
Slightly orthogonal but I am not sure what the purpose of this enum is. If anything, it should be more of a registry where different writers can register they formats.
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
Yes, you can change mode on reflink without affecting the source. This is because reflinks have their own inodes, so from fs perspective they are separate files that have their own perms.
It seems to be a good time the remove XceiverServerSpi interface. Originally we had two separated implementation to connect to the datanode. Today we have only one. One interface is used between the client and the datanode, and the other one between datanode and ratis (datanode). As this example shows, the two interface shouldn't be the same.
Please add gitea copyright header
This line can go now right?
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
This will return null if type == production, is that intended? console.log('value: ' + ({'production': 0}['production'] || null)); value: null
Whilst we're changing this it might be sensible to escape these parts.
Do we know if we have data in AKS RP with this value? Will a "false" value in DB cause deserialization error to *bool?
This appears to have been added by mistake in a previous PR
Use the new Ruby 1.9 hash syntax.
why is DynamicCertificates a pointer if it is linked to tightly to SecureServingInfo?
Updating the mock. There are a few of these below. It would be nice if the mocks were generated with the protobuf files.
Can we make this `4.0`? We still support MongoDB 4.0 so we should use the oldest supported version, I think.
rename to LoadUserByUID? but doesn't this add more to GlobalContext? Also, would prefer if the GlobalContext methods were in libkb/globals.go otherwise hard to find.
But more specifically, why `10`? Also you replaced some numbers smaller than 10 with this.
Why are we doing this if we have TLSv1.3?
Simply check types will not solve the problem.
this could be removed from the PR
shouldn't this take some action if there is an error?
nit: Is this removal intentional? It looks like unnecessary churn to me.
this should probably be `.to be(true)`
Let's split the charset and collation parts into their own test and leave `_basic` as a single-step test; that way, we can keep the testing for `Update` out of `_basic`.
'rc': this.refreshCount_ || null
Perhaps we need a helper function that goes from (x, y, z) to (0, x, y) so we don't hard-code this everywhere.
I noticed this matcher was missing on one of my own PRs and I forgot how to add negated matchers so I just wrote `.not_to include` and forgot to look into it :joy:
I don't think you need the `= null` part. It is redundant.
Can you add docs for this new parameter?
how this don't bother our formatter
this is semantically different from what was happening before.
why boost this? what was gated by this?
also need to move this line?
Why was this changed?
Why was this change made?
please use our own (cloudstack) Stringutils as proxy, even when calling the apache.commons
A little late now, I guess, but do you think it's worth making a convenience wrapper for this pattern? Not sure how representative our tests are of usage of our API
do we always append it to the end? If so, it might be safer to do `name.endswith()` and `name = name[:-8]`
`canonicalize_path` comes from `spack.util.path`, not `llnl.util.filesystem` doesn't it? There are more of this reference below.
Why not put this method within PanacheEntityBase instead?
Why lower this?
TODO: This test should be moved to `esclientleg`.
This doesn't seem like the right place for this constants. Suggestions are welcomed.
This should be visible based on permission
This may bite us, can you at least log an error here?
Do we need this controller at all anymore, or is it used for 'deleting' existing service workers?
Moving it to Cython means exposing most C structures to Cython and staring at tons of generated C code to see that it actually does the right thing (like in #891). I wouldn't do it bundled together with a functional change.
nitpick: I think "or not" is unnecessary
You added new partial `views/repository_columns/_delete_column_modal.html.erb`, so you should remove the old one `app/views/repositories/_delete_column_modal.html.erb`.
IMO this sort of constant is not particularly helpful. Was `goconst` complaining?
Remove the cast
This should stay in the schema, but print an error when configuration loads to tell people we no longer support dotkit. We can make it a breaking schema error in some future release.
Did you get rid of this line when you tried nesting all `pacpy` imports?
Seems not in good order. We recommend to put it with other 3rd part packages.
Should this and the TODO below be cleaned up in this PR?
Should the default be set on the database level? Maybe it would be best to do when creating the Job Runs.
you don't need this. You should import Client from mne.externals.FieldTrip
I may move these renamed classes and the corresponding rules to `util_rules/dists.py` in a followup.
This should probably be cerr
Depending on the outcome above, this line might need to be refactored.
Why is this needed on `invokeOptions`?
This class may deserve a better name given the fact that it is not only concerning for recordCount anymore.
While you're here, change the cast to be (size_t).
Can this either always or never come with a leading `#`?
Final newline missing.
This is a backwards breaking change b/c of the ordering of the params in the rest spec. I will update the rest spec and regenerate
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
how would you feel about renaming this to something like NewTeamAccessRequestsCount since almost all of the other things are actually what they hold
I don't see this used anywhere. Am I missing something?
A `null` `Runnable` here performs a specific operation that may not be intended. Since this is a public API, I'd suggest adding a `checkNotNull` precondition on `runnable` because that's most likely a programmer error. (You can add one for `name`, too, if you want, but the `Thread` constructor will already enforce that.)
This needs to be `< sampleRatio`. E.g., if sample rate is 90%, only in 10% of the cases a uniform random between [0, 1] will be higher than 0.9. Also, since we're sampling pages, we shouldn't sample splits (in MemorySplitManager). Otherwise, we'll end up with rate^2 sampling rate (50% of splits, 50% of pages per split ~ 25% of rows overall)
`IssuerOverride` tells pachd to try and reach Dex at a different hostname than is specified in `Issuer`. This is necessary if DNS resolves differently within the cluster and outside of it. For example, when we're running in minikube Dex is reachable at `localhost:30658` from the host machine, but at `localhost:658` from within the pachd pod. `Issuer` should be configured so it's accurate from the host machine's perspective, so the OAuth redirect links resolve properly in the user's browser.
`timeFormat` --> `timeSecondsFormat` (?)
I think load from etcd is not necessary here.
@vsoch I think the test was asserting the output of a wrong implementation. `install_root` is not in the schema so I would expect it to be an 'object' by default, not an 'array'.
Why lower this?
I think it's not recommended to directly invoke `createElement` function.
Let's not add a blank link here, to be consistent with the surrounding code
Please fix the format of the imports. There's an empty line missing before `com.google.common.base.Charsets`, and another one before `gobblin.configuration...`
[nit] It's nice if the imports are sorted; first stdlib, then third-party deps, then internal deps. `goimports -local github.com/chef/automate` supports that.
shouldn't this call the new get_curr routine you just added?
This log message should at least be a warning. It might make sense to even fail the command if the config file already exists, since it doesn't make sense for the user to run `migrations new` in this case, especially when we introduce a new param to specify the server URL as part of the command. (cc @colinhicks for a minor product question, in case he has input)
this will further be simplified after allowing inserts to log files
can you use custom errors package and do a `errors.TypeNetwork` type with `errors.M(errors.MetaKeyURI, "URI")`?
`extension` should only be required for compressed archive suffixes that Spack isn't familiar with (but that would be understood by the `tar` program). Did you find you needed it here?
Seems we are merging splited `SelectedRows` using `concat_op` and it's not supported?
Looks like we were loading sidekiq in development via `require 'sidekiq/web'` so now that this is deferred, we need to require `sidekiq/api` here.
Check if we are still using all of these variables, and let's drop the ones we don't.
is it worth `HttpClientSpanNameExtractor` and `HttpServerSpanNameExtractor`?
don't need to wrap safeFormat
I don't think you need the `= null` part. It is redundant.
I've been wondering about naming this.. We currently have different flags for user accounts: - `isReadOnly` for internal system users that shouldn't be deleted or modified - `isExternal` for users that shouldn't be managed from within graylog (except for our cloud okta use case) Would it make sense to add a third flag (e.g. `isManaged`) or should we simply mark okta users as not `external`? It's probably not a big deal, just a thought..
Can the same authorization token be used both here and where we create/populate a build group?
It's up to you whether you want to write the tests first or write the tests after you've written the code, but we'll definitely need to see working acceptance tests in order to merge the resource.
This will return true for InvariantMode. I would expect it to return false. (It should not matter, but it is confusing to UseIcu to be true when we are not using ICU.)
This should be mapped on a level up. Current fix only handles list type options but, for example, misses provided profile type options. Look into `getSharedProps` called from the `/menu.js`.
Is there a way to do this without UJS? We purposefully don't include it as we don't use it around the website, neither jQuery
do `this.cacheProvider = this.config.get('cacheProvider') || this.config.get('hibernateCache');` for backward compatibility in places where we fetch value form config
Wouldn't this make it slower by always loading the attributes?
our goimports are going to fight over this...mine will move it back to where it was.
The wrap function seems unnecessary?
This should probably be using the k8s yaml utility, not ghodss directly
Unwanted blank line.
I don't think you need the `= null` part. It is redundant.
@andrewkroh Will the events have `ecs.version=1.1.0` based on this? Or is there another constant to be changed somewhere?
`self.info` is a dict. Is this a problem?
Technically, we don't _really_ need this service since it just busts the path itself. I thought it would be nice to leave as a dedicated service though because it makes it much easier to handle Podcast specific caches in the future.
We should keep the old name here and rename the new config `_invite` or something.
Do we really need a new attribute for that? Can't we use an attribute?
Why fall back to UTF-8 here but not above?
Can you please rewrite `x()` to `!empty()`?
Converted from deleted *.rec test.
I think package aliases in go are meant to be all lowercase.. maybe `kbmni`?
This fixes all sorts of background tasks to run as `SYSTEM`, the way you probably thought they already were, but apparently were not. In particular, `TryRepeatedly`, used to restore the state of a running Pipeline build after restart.
this removes the auth information that will later be used in the command :-1:
Is this just for consistency?
as this is part of the initializer, shouldn't it be in `lib/sidekiq` with the other custom middleware?
Should we enable this by default? Are you using this change in production already?
Also here, this shouldn't end up producing an error.
Is this file needed at all? If so (as a simple example) it should probably go in the examples/ dir, under a new examples/javascript/ subdir.
Since we are renaming this, I 'd just like to suggest 1 quick test of reading a old commit metadata that contains the filed `fullPath` using this new code and making sure nothing crashes.. It should n't given `ignoreUnknown = true` , but something to test out. cc @prazanna
We still need the `null` check here, `null` won't be defaulted and `typeof null === 'object'`
Maybe get rid of this `NormalizeLabelValues(eventLabels.Clone())`, and do the transformation from `json.Number` in the switch? That will cut out some more allocations.
`time.Nanosecond` is `1` so it's enough to do `/ int64(time.Millisecond)`.
I wonder if we should no-op when the passed search object is the same as the one returned from `search()`, since it would be pointless work
index is uint16_t, and the value is being expanded. I _think_ this is ok, after reading up on usual arithmetic conversions, but I'm not positive. Please double check that the cast is ok on the final arithmetic result, and that it shouldn't be done directly on index _before_ the arithmetic operations.
Wrong capitalization for the `if`.
We can guess this from the code, but why do we need to make it visible at this point?
A minor thing: What should we do in the `dvc.lock` file? Should we keep them in a single format (like either a list or a multiline?)? Just that when the user changes the multiline string to a list or vice versa, it should not affect the lock file. It might be too much to support that way, but just saying that in principle, it'd be better to have a single format in the lock file, but I think it happens rarely in practice and the list and the multiline string might never be equivalent when user refactors them.
The argument `cancelSet` is not used, but more importantly, I do not think it is required, please have it removed.
why not just hardcode the entry point address and do byte.compare?
What is left to do ? :angel: (should be written here, or the `TODO` should go away :stuck_out_tongue_closed_eyes: )
Can you please add whitespace between the cast and the var?
Need help for this
Would it make sense to put the certificate in `GenericLoopbackOptions` and make use if it in other loopback servers?
can we check for errors here, if file exists but you're revoked access to it (too many fd, process reading/writing to it already whatever...) this will fail and we wont know
Why are you removing start from here?
Don't you wanna persist these?
Adding this kind of method on public and important API like that is an architecture change that should be discussed first. Please open a discussion on Slack in `#team-platform` about this, because I'm really not sure it's the best way to move forward.
Same here, looks like a private default ctor is forcing this. Can it be removed?
If the application want to restart the TX based on some conditional operation result, how to process? have to re-open the transaction? That seems inconvenient.
Isn't this implied by the ordering of `ss` in `newPriorityQueue` can this change after the fact?
for this, if the container is joining a pod and `usePodCgroup` is specified, would that override this here or cause a conflict?
Nitpick: Do you mind making a similar change in `isListenerNotFound` at the bottom of this file, so we can get rid of the `awserr` package import?
So, the default is `True` and later you change this with `prop._serialized = False`, so maybe this argument is unnecessary? If it's left, then specific property classes should be allowed to get this argument as well, so you would have to change a lot of constructors (won't be pretty).
Can you use gobblin.util.ExecutorsUtils.newThreadFactory(Optional<Logger>, Optional<String>) so that we can name the thread for debugging purposes and we log uncaught exceptions?
Unit tests now rely on `DynamoShapeManager.Preloader` for its geometry preloading activities.
This one should go in `/api/internal`
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
a unit test would be nice to have to make sure the behaviour won't change down the road
So this lets us run two postgreses. Do you think we will need to add additional parameters to make the enterprise server's postgres more lightweight?
`ImmutableMap.of(k, v)` would be cleaner than the static block
I think this was due to @cjb's lack of a git commit hook.
Just making sure this doesn't get reintroduced in a future PR. This restriction has to stay in place. The thing we wanted to allow extra slashes in was docker repos, not imagestreams
Both of these functions should be deleted, since they aren't being used.
what does 'kind' stand for? Which values can it have?
util method for rehuse
our goimports are going to fight over this...mine will move it back to where it was.
no need to, it's calloced.
Shouldn't be each one on a new line?
I would go further and put an assertion in the MockHttpExpectation function that throws an explicit error if the url is undefined. Then you don't need this line here at all because by the time you get here you are guaranteed that the URL is not undefined. And also the user gets a clear error message if they failed to provide a URL.
Can we move this call to be next to `checkSupportedExtensions` in `update`?
Is this intended to be a permanent change? Or just for debugging? Makes sense to me, though.
Almost perfect, except the correct print is the one with the two halves switched around (I want to see higher order bits first). Thanks.
Grate! I think we don't need an `if (file != null)` any more after this.
I think this is no longer required.
c/p err (was placeholder for something now remove it!)
Not crazy about adding Now() and After() to GlobalContext. Can't you use the clock interface you added below? LoginProvision could have a clock field that it would pass along to newTimedGenericKey...
You can't have this dependency. kube depending on origin will make a cycle we can't reasonably resolve during a rebase.
let's simplify this to `hash(self.param_id)`.
Why the parameters are version, url and name? not interfaceName, group and version?
part of the `kubernetes` package just for consistency, an alternative is to move it to package `cmd`
This is way too boilerplatey and error prone to have to stick at the end of every integration test. I actually tried to make it so this was done automatically with a `[TearDown]` so I would prefer if you figured out why this isn't working instead.
Change it to `c.Assert(camelCaseToSnakeCase(input.name), Equals, input.newName)`. Obtained value should be in front of expected value. Although it is not introduced by you, thanks for helping to fix it.
No need to change this version will be read from git tag on this branch
Hello @dufoli , won't this cause a problem if the `!` character isn't part of the `String` `i`, in which case `lastIndexOf` will return -1?
Nit, should this be lower case like our other error messages?
I believe this is not needed anymore?
you can switch to `internal_mods_path(state: :tag_moderator)`
The WelcomePage was rewritten in React i.e. it was moved to the folder react/features so it looks to me like the source code bellow needs to be rewritten to take into account that now the React App is abstracting the relation between window.location and the React Component rendered at that window.location using Route (an abstraction similar to react-router's).
But here I suspect we want to keep a version of this with `UninhabitedType`. After all consider what happens when `t` is `UninhabitedType` instead.
Does removing this cause any issues?
This fix is just to get the DynamoView to load in the designer.
This override can be removed entirely?
this is probably what broke MEL. This needs to be rolled back
would be nice to dispatch this event in the `ContactManager::setMainAccount` method too
Strange. There is new line at the end of this file in my clone...
Does home_bundle take care of undoing what useradd did, or working round it, when we were unable to pass -M ?
This method here provides the `Cleanup` required to clean-up `LibraryServices` the same way `DSLibraryTest` class does.
Throughout `stats.php`, we're assuming the output of will be an array of `stats_get_options` options. If someone installed Jetpack via CLI, I don't think this would ever fire to get the default options, so most of the code would at least throw notices about the undefined indexes until a cron run or someone visited wp-admin. Could spin out a "stats_default_options" that returns the default array, `if ( false === $options ) { return stats_default_options()}` and use that same function in `stats_upgrade_options` to keep things DRY. Thoughts?
>containsFormattedMessage = false; [](start = 52, length = 33) nit: please make this one in its line.
Rename `default_address` to `billing_address` as it's no longer a mere default.
More can be tested here? The script and div are both probably amend to aaic t least some b`startwith` testing, or the div could be parsed entirely with beautiful soup and have its structure and expected attributes verified
Do we still need to do this (replace space to dash) for unescaped filename?
can you instead add this to line 126 in the array?
IMO, the latter three values should be combined into a class (e.g. `ModelInputTransforms`) and passed around as an object of that class. It would be clearer than adding 3 positional arguments to every model constructor.
Added this method to get Sample directory.
this is not a string but a `Position` (`Sulu\Bundle\ContactBundle\Entity\Position`) entity
Extra empty line detected at body beginning.
why remove this line?
Not necessarily for this PR, but it would be nice if the behavior of `GetPerUserKeyring` was "if the user hasn't been loaded in a while, go ahead and check their server version, and do a full load if anything's changed." Arguably almost anything that access the current user should do this, at some shared low level?
Is it standard SQL ? Compatible with Postgresql ?
nit : should we have an error.go file which defines all the errors in one place
Copy/paste (should be `DRACULA`)
while you are modifying this line, please add a blank after declaration
I've just found that removing these methods is actually SPI-breaking :-/ It was a bad SPI arguably, but still. Something to bear in mind for the future. (And, well, I'll dig out the `name` out of the `image` :-) )
don't do this, the log configuration may be changed in runtime and this would cause changes there no not be taken
If we're getting into microoptimisations, we shouldn't be allocating the HashSet at all Fine though
`dedup` is configured by the server capabilities, that means SHA-1 will be included even when a server is not prepared to used it. Do you know if it could affect conan_server or Bintray?
The `data.Length == 0` check above is enough to fix the failing test. However, if there is ever any content that does cause `X509Certificate2.ctor` to not throw, and also have an invalid handle, we should protect against those scenarios, too.
Remove empty line?
That's a POSIX header file -- do you actually need POSIX, non-C++ functions?
Might as well make this `new PagingSpec(null, 3, true)`.
Could it be a wrong string representation of int? In this case `std::stoi` throws an exception which we should handle here.
in the loop above, you are not checking the `entry.getValue().isNull()`
minor: feels odd to call this a get when we don't return anything
<- of course, I wonder why it was otherwise?
The deletion of the associated `UserProfile` is taken care of via the `on_delete=models.CASCADE`.
This is to protect from broken .equals() implementations which don't check for a null param ?
This is another change I made, to simplify things. Now the output controller creates a work queue in it's constructor and the same one is used by all output workers across time. This removes the need to drain the old work queue to a new one when outputs are reloaded and new output workers are created in the process.
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
https is required
Is this causing a test to fail? I feel like it shouldn't be needed, but I could be wrong.
// Pass in the raw unchanged name // Add ".md" suffix if not there. where is the check if it end with .md ?
Had this change been tested on all "native" controls?
Let me know what you think about this variable, if it should be renamed or implemeted differently
In what circumstance is this needed? I think you can just do `{"type": "model_type"}` rather than passing `model_type` as a string.
nit: although we do the rename in a macro, could you change the statement at the end of this loop to FOREACH_BLOCK_ALL?
NIT: `string? namespaceURI`?
Why do you default to this? I recommend a default of 0.
This can be defined as test constant
is a public setter useful? Maybe if this bound?
@drcrallen this change made the overlord `/druid/indexer/v1/workers` API no longer return a `runningTasks` key for each worker, which may confuse some folks' rolling update scripts and definitely makes the web UI less useful. how do you feel about having the OverlordResource specifically call `getZkWorkers` if the runner is an RTR? or would it make more sense to add a list of running tasks to the Worker object?
Did you get rid of this line when you tried nesting all `pacpy` imports?
It's a bit of a hack, but fine, I expected eventually regretting that this field is public   After all, we've already got a "re-architect `authz-service`" card in the backlog.
`canonicalize_path` comes from `spack.util.path`, not `llnl.util.filesystem` doesn't it? There are more of this reference below.
@vsoch I think the test was asserting the output of a wrong implementation. `install_root` is not in the schema so I would expect it to be an 'object' by default, not an 'array'.
You added new partial `views/repository_columns/_delete_column_modal.html.erb`, so you should remove the old one `app/views/repositories/_delete_column_modal.html.erb`.
what broke here? is `len(dir_name.split(':')) > 1` when `'.' in dir_name`?
Can we call this `YesPanic` to match with `YesError`?
You may want to fix usage of rawtypes in ParquetTester as well
Why is this change needed?
Don't think this is needed - if `v` were indeed `nil` we'd get a SIGSEGV in the caller.
did you mean to import `errors` or `pkg/errors`?
I've just found that removing these methods is actually SPI-breaking :-/ It was a bad SPI arguably, but still. Something to bear in mind for the future. (And, well, I'll dig out the `name` out of the `image` :-) )
this makes me sad... we *just* got to the point where openshift/kuberenetes could be built/run
Why is this needed? I don't see any nullability attribute being used in this file.
Was that checked in by accident?
do I even want to know?
Should this be (c) 2019 here, and elsewhere in the patch, or is this a port of an existing patch written last year?
is there a reason to ignore those two? looking into the samples I think they're runnable
Is this property set to `true` anywhere?
Please drop this git alias everywhere, not needed anymore.
This is the only change to the application code, the rest is tests.
does this ever need to reset to zero?
What about tests for all the exceptions?
Is there no replacement?
The username schema is not particularly creative, I just wanted something that's fast and unique. If you'd prefer something else I'm open to all ideas.
Could use `self.func_map.get(target, target)` here for a minor simplification.
Dispatching messages - should it be async and awaited?
Why is this feature removed?
I might be missing something here but why don't we need this function call. After the custom node package is loaded successfully, this function resolves the nodes and triggers the execution. Is this part done somewhere else?
We can't do this - breaking change for anyone that has subclassed and implemented `destroy()`. I suggest we use `// NOSONAR TODO: remove throws in 5.2`, which removing it from our subclasses.
I would put that right below `APP_USAGE` for some reason. Static themes are not yet supported on android?
this is missing the license header
After all we went through before, this really should be "weaveworks/loki".
by default it logs to STDOUT, let me know if this should continue the default behavior
Line is too long. [87/80]
remove the line if it is not used anymore, or add annotation to annotate why it should keep.
I don't think you need to introduce the temporary `node` here.
Probably want a non zero hex value for tests here.
Nit: this should go between cortex imports, and not be standalone.
Hmmm... I'd rather see that the original two lines were moved above `if (env->version == 2)`...
Personally I found passing in this listener, which is not supposed to be changed in production, is a bit odd -- maybe for testing purposes we can expose a setter to pass in a mock after the queryMetadata is created? Anyways, if this is the pattern we've followed for testing for a while feel free to ignore it.
not me, but goimports + vscode I've seen this before at other projects and is not usually a blocker, but can remove it if that's a concern of some sorts.
add a TODO to move this validation to the validations, when the expressionManager is available there.
Is it always guaranteed to be single quotes around `utf8` ? (asking because I don't actually know)
Does removing this cause any issues?
I *think* it's okay (a no-op) to keep the check for `ps.EncryptionSalt != ""` above this case - but the overall structure of this code is a little hard to follow. There are really three cases here - is it possible to structure this to make the checks for each case clearer? For example - is the line above this (`return newPassphraseSecretsManager`) even reachable currently?
do you want to use loss or something like `opt.get('valid_metric', opt.get('accuracy'))`?
The name sidecar doesn't seem super descriptive to me, could we just call it `pachd` throughout? That seems more descriptive to me.
This needs to be fixed (can be followup), this might risk infecting other tests. We should have scheme just for the test, as discussed some time ago.
[nit] Could be `func (*State) EnsureNoProjectsMissing(context.Context, []string) error {` but doesn't matter
We should probably not call this twice. It's called anyway in the "init" fn.
I would remove the `if (Equals(sv1, sv2))` at the beginning, and replace lines 2616 on with `return x.CompareTo(y);`
How about check if the directory is empty instead?
`value` is typed as an object, not a string. does flow not display an error?
I always wondered if a `post_save` might be cleaner as we already get the information if we are creating or updating and Django can determine that on it's own :thinking:
What about reusing `InvalideIdentifierException` (backport it from master)?
I think this one should be `if not message or message[-1] != '\n':`.
should be handled.
we'll need to backfill cost for old rows, should that be a separate migration?
could you restore this line.
remove the empty line
Why this is gone?
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
Let's not hardcode the architecture...really unfortunate quay.io still doesn't support manifest lists. Why is this test using Fedora at all versus one of the OpenShift images?
nit: blank line in imports is not inline with our code style
Nice. I think this should be moved to its own PR, with a note in the developers changelog.
I think above code is better and more tiny and compact.
This seems wrong to me. Why not just mark the keys as locked keys collection before attempting to lock them, so that the unlockAll(context.getLockedKeys(), context.getLockOwner()) call releases everything?
Is this condition too strong?
We don't compare for reference equality, so just the `#else` will work here too.
Please put it back :)
Call `this.getScrollTop()` to get the cached value.
Do we really need this? Checkout is creating in API and forms. We should just confirm that `email` is always fulfilled. We could explicitly save it `checkout.save()`.
you shouldn't even need to add the extra arguments there
why that change?
As we focus this mode for users having no knowledge of SQ server I would rephrase this log to something like: "Local analysis". WDYT @bellingard ?
Do we need the `api` package? Why `o.i.multimap` is not sufficient? Also since this is in commons, it should rather be `org.infinispan.commons.multimap[.api]`. I've seen some problems if multiple modules contain the same package.
This is the third loop I've seen for walking through RTPS Submessages in this PR alone. Does it make sense to try to make a generic function / object to capture this logic in a generic way?
missing Upgrade451to460 class, I'll add that.
should we be defensive here and check to see if there are any items after the split?
Why is this needed? Are you exposing internals from `DynamoCoreWpf` in `Watch3DNodeModelsWpf`?
Please sort these
A `null` `Runnable` here performs a specific operation that may not be intended. Since this is a public API, I'd suggest adding a `checkNotNull` precondition on `runnable` because that's most likely a programmer error. (You can add one for `name`, too, if you want, but the `Thread` constructor will already enforce that.)
If `TypedParameter` no longer requires `pathManager` (see below), then do we need this in `FunctionDescriptor` class? I know we have a public property `FunctionDescriptor.PathManager`, not sure if that's used anywhere. But please have a look, thanks! :)
Think we're not supposed to have this per #921 (though we can delete at the same time so no worries)
Not accepted anymore
Could remove the need for the loop being that a `map[string]string` should be able to be converted to a `common.MapStr` `common.MapStr(tags.(map[string]interface{}))`
Don't we want to initialize it to a negative value like `-1`? Also, have you considered dropping the `Cache` suffix, i.e. `_sizeCache` --> `_size` and the same for GC info?
What about making this a `raise AssertionError(str(error))` instead of the fake assert.
We can consider doing the same replacement in the default `getWords` functionality. Moreover, I see that in `scoring/assessments/readability/TextPresenceAssessment.js` we similarly strip the HTML tags and the table of contents, so that one could be replaced as well.
When this goes into master - or sooner - include all changes to the public API in CHANGES.md.
This is super confusing. The function raises, but is also declared to return an exception, and its callers raise whatever it returns, but those raise statements are never raised because the called function raises. Wouldn't it be simpler to make this function _actually_ return the exception and have the call sites _actually_ raise the exception it returns?
Can you either clarify the TODOs and remove them or add a bit more detail, your github handle and/or a link to a follow up task?
import * is not allowed in Beam. Please import classes individually (configure your IDE settings accordingly if you have to).
create an issue and add a TODO to review this situation with other components (try and scatter-gather pop into my mind right now.)
`import sys` the next line
Did you get rid of this line when you tried nesting all `pacpy` imports?
align `{:year_range ...` with `f.calendar...`.
nit: maybe store `componentBuilderInstanceFor(component.type)` as a const? so that this doesn't need to be executed twice
Does setting the string here add any use? It is a little cleaner to leave it uninitialized and set the whole format in `@Before`.
nit: cut the 'y' in 'implicity'
Needs a JSON tag with `omitempty`
I think the formula is correct. We take the mean for the 0th row in the first case and the 1st row in the second case.
Can we rename this back to `expire`? It looks like the same name is being used below.
This can probably be removed now
Is there a reason this is public?
As just discussed, the `apm-server` is using `observer` instead of `agent`, so the `observer` also needs to be added here. Moving away from `beat` to `agent` causes some issues in APM as an `agent` means something different there. Therfore, hardcoding to use `beatName` as `agent.name` and same for version information is more a quickfix than a nice solution from my perspective. I think we should come up with a more reliable solution for this in the long run, e.g. the possibility to define something like a `beatId` globally, which is set to `agent` by default, but can be overwritten from every beat.
Just one clarification. Did we drop our rule to not have trailing comes in arrays?
We should probably not call this twice. It's called anyway in the "init" fn.
`td.m_spent` is equivalent to `is_spent(td, false)`. Some instances of `td.m_spent` are replaced like this while others are left unchanged, which feels confusing/arbitrary to me. What's the point of these changes?
This is a useful generic addition to the framework, but I think you forgot to use it in the controllers.
does it need ranges just like `shuffle_ragion` and `shuffle_leader`?
Unit tests now rely on `DynamoShapeManager.Preloader` for its geometry preloading activities.
This is not strictly correct, although it was not before this PR, too. After a dot character, a new identifier should start, so we should check for `isIdent()` instead of `ch == '.' || isIdentPart(ch) || isNumber(ch)` after dot. If this is eventually getting into the core, I'll fix it.
nit: do you think it is worth having the code analysis run on tests? Could condition it with `Condition="'$(IsTestProject)' != 'true'"` or something
Please annotate `@Nullable`.
The fact that we're accessing the method from a static method somewhere else is another indication why it shouldn't live in the `Manager`.
is it necessary as we won't update the user ID ?
Why isn't this just `'error'`?
@aloubyansky as we discussed
AFAIK '_MSC_VER' defined means '__clang__' is not defined. What option we are trying to rule out here?
Could you remove the remaining uses of `frame[key]` into `frame.types[key]`? I notice that you did convert *some* operations on frames into operations into the `.types` attribute -- why not all? Or are there too many?
The `if` should not be needed, `classList.add` de-dups automatically.
Seems not in good order. We recommend to put it with other 3rd part packages.
nit: although we do the rename in a macro, could you change the statement at the end of this loop to FOREACH_BLOCK_ALL?
Love the addition of the docstring. Nit: Is it more accurate and concise to say ``Update the provider index with additional virtual specs`` given the inclusion of the `Args` description?
Why switch to list multimap _everywhere_? If we want to _always_ allow duplicates, was this a bug previously? Why should a given element consumer (timer) appear multiple times for a given pcollection? I realize that most cases are just interface changes to clarify some contract, but what were we doing before?
What if the user already specified the port in the `endpoint`?
Please add license header like other files.
No `.js` on the end of the file
what is this really? how can there be an write that is unknown?
If my understanding is correct, this seems to deviate from the normal usage of the coders. We usually use coders so that at runtime we can convert any record returned by source into bytes and vice versa. The coder provide here might not properly do that for non-byte types and this parameter might be confusing for users. I think we should introduce an AvroCoder that can serialize any record produced by AvroSource based on its schema similar to Java SDK implementation, instead of asking users to provide a coder here. We did not need this for source since we could simply serialize using PickleCoder. We need this for a proper AvroSink.
Rather than glob a specific `zIndex` property onto here, and since `PrimitiveCollection` is a primitive, and primitives normally have ids, why no add an `id` property as the `zIndex`. This way there's no reason to have a special case here and the `PrimitiveCollection` is owned by the OrderedGroundPrimitiveCollection anyway, so it's not weird to use `id` as the z-index. (we do similar things elsewhere.)
Interesting. So black formats lists different from tuples ;)
just mentioning again, this won't work for tls-enabled docker daemons :)
In case you're curious: The netcoreapp build complained that _nestingStack might be null, when neither the net461 or netstandard2.0 versions did (the field is declared as `Stack<StackFrame>?`, so I don't understand the difference in opinion). The compound assert didn't make it happy, so it also got a ! suppression.
dots between words .. but I see you tried to follow naming convention of other config keys. may be we can break convention to do the right thing?
there might be some tests which are sensitive to size of records.. Please make sure all the tests pass..
Won't this still leave it broken? If the context is cancelled, then this will stop extracting.
there might be some tests which are sensitive to size of records.. Please make sure all the tests pass..
Why does this need to be a separate method?
The translation of units are saved into language file with syntax 'unitXXX' with XXX is unit code. If you removed this, the units will not more be translated.
I didn't verify that every function that needs this now has this. But I guess your test change does cover this, after all.
what is this other string used for? anything?
@carlossanlop we can't use cref's here since the source generator doesn't reference STJ. Would it perhaps make sense to use xref's though?
spurious change, revert?
Might want to add this `if` inside `create_from_user` and plan ahead for the `suspended` role that's coming down the pipeline in #12270
Is this part of this PR?
shouldn't above also be excluded for `oauth2` authentication type as it's managed by OIDC provider and should come as part of `roles` attribute
IIRC the idea originally behind not including user was the size of the objects (many columns in this table). Just reminding myself of tradeoffs we're making, not questioning your choice :)
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
Was it intentional to use the testcontainers shaded guava here?
Old schema versions in general, or do we track this only for now in order to upgrade from an earlier experimental version?
Why is this exported now?
Maybe `DeleteMemberDCLocationInfo` is a better name?
Why move this out of the loop? An early return is preferrable for performance.
I don't think the sorting is still needed if `name` is omitted (or rather no longer present).
The name "bookkeeping" feels a bit unusual here for a public facing thing. Should it be `PULUMI_HOME_DIR`? or `PULUMI_HOME`?
Would keep the trait and fallback to it if the `accessControlQueryEnhancer` is not set.
What does this message actually mean? I.e. is it useful in debugging? Can it be made clearer?
Did you mean to include these changes here? They look like they belong to some earlier PR.
you should call `getPluginFile(info)` only once (rather than here and at line 328). Use a variable
Need to remove unused imports. Will fix during merge.
Won't this still leave it broken? If the context is cancelled, then this will stop extracting.
We should prefer `{@code ...}` over `<code>...</code>`.
Could you move this to a new resolver test created specifically for this corner case?
Nit: `builtInOrMacro`. It'll avoid `!` in the conditional below which is a tad more readable.
When I've tried in the AWS Console, it doesn't accept `~` or `.`
Is this instance attribute still useful?
is there a reason why we were calling `deliver` instead of `deliver_now` being this already an async job? We call `deliver_now` in other similar jobs
Making this bit nonnull makes sense to me because there seems to be no way to obtain that parameter if this is null. Although i don't know how pipeline can enforce this
can we call it agentVersion or something not reminding setter fn
No need to check for null before calling delete onnit
I thought we already had an analyzer for "yoda conditionals"
Can you remind me in which case we need this?
Do you want to add a similar assert below for `LookupJoinableFactory`?
Can you explain why this is conditional?
We wouldn't want to read the environment variable and parse it every time a color was changed. It'd be better to cache it in a static.
We should probably not call this twice. It's called anyway in the "init" fn.
You don't need the conditional, jist short circuiting is enough
I think for `particle` itself, we should just stick with `start` and `end`?
Here is where I think we need to simplify things. The filter name doesn't have to depend on the `$name` because it's universal for every constant name. Let's call it something like `jetpack_constant_default_value`. This way we can assign the Utils method to that filter at load time and just forget about it. What do you think? Also, this filter needs a docblock, please.
LocationBundle doesn't use any of this stuff but it is all required by the Admin afaict
Lack a testcase where the symbol in the extend clause is not known (just use a dummy name)
Is this causing a test to fail? I feel like it shouldn't be needed, but I could be wrong.
Missed to remove this? This is also causing build failures (segfault in linux).
Don't we want to initialize it to a negative value like `-1`? Also, have you considered dropping the `Cache` suffix, i.e. `_sizeCache` --> `_size` and the same for GC info?
May I set all endpoints's log to be info.
I think load from etcd is not necessary here.
This diff doesn't seem related to this change?
We should probably not call this twice. It's called anyway in the "init" fn.
Can we put this magic string in some const private field? Looks like it appears 10 times in this file and 7 times in ToolStripDropDownDesigner
you have a NONE enum set!
This seems a little unnatural to me IMHO. `DateTime.of` that actually does string formatting is a bit surprising. I propose changing the method name to something more descriptive to what the method is doing, or just use `StringUtils.format` in the callers.
shouldn't you apply `preg_quote` to be safe ?
We don't think this check is necessary, since `id` is a required argument for all `fetchOrder` implementations. In other words, this check is redundant. Do you agree?
Curiosity question, why did you decide to deviate from the use of `MIN` (and `MAX` later on)? `arc_meta_limit = MIN(arc_meta_limit, arc_c_max);` would be functionally equivalent and would be consistent with the code around it.
this block of logic shall be in `else` block, and you would want to set sso.user_found to all of them even it redirects to Discourse login page. (hence a client side plugin have the knowledge to do stuffs) `sso.no_user_found_return_sso_url.present?` can cover test for nil and empty.
Please internationalize this and the other strings you used.
Nit: Please sort this new import in the third-party imports section near the other services
I suggest using `MIN(item.id) AS item_id` in the `SELECT` and `ORDER BY item_id`.
This'll be expensive, how about a boolean parameter to do this?
The `include/libzutil.h` header contains some conditional `HAVE_LIBUDEV` blocks which should perhaps be restructured so the prototypes are always declared and function implemented, even if it may always return `ENODATA` or `B_FALSE`.
I suggest making this new property private. Private things are easier to maintain as they are not covered by any backward compatibility concern and so can change anytime we need it (while protected stuff are harder to change outside of major versions)
we shouldn't have a new `err` variable in this case but return the error since we are force writing the index
I'll hold off on reviewing the PR until the errors and existing questions are addressed. Additionally, please make sure you update the ref/System.Net.Primitives.cs file... that will be the first thing we look at.
This run() method is probably not necessary.
this is the same as the method on the user, do you think it's worth some sort of `TotpHelpers` static method? Sometimes DRY is too much for just two things, but there are enough parts (like the `.to_s.rjust`) that seem like things we'd want to only write once
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Ok, so the interface has not moved. Is that why it is OK to move the implementation to Core? Should the interface also move to Core in Dynamo 3.0?
These two files need to be named `mk1.[ch]`, and the folder name needs to be lowercase.
can we simplify this test while keeping the tested behavior?
should we use logp.Error instead?
I'd probably prefer to have `chainID` as the second parameter right after `db` but I think it's too much work to rearrange this now.
is it even possible that session can be nil?
Can't we annotate `TOptions` as `[DAM(Properties)]` and then suppress these warnings? I believe that DataAnnotations validation only validates the top-level properties of the class. However, thinking more about this, if `TOptions` is a base type, and the `options` instance is a derived type, DataAnnotations validation will get the actual derived type's properties. So maybe doing that still wouldn't make this trim-safe.
Has this change been merged into driod 12.0?
@calebcordry Can you review this change since you originally added this code?
Why would we keep both `Unknown` and `Unstructured`? Seems like `Unstructured` is a more convenient form that is equivalent in power.
This is starting the network?
This is in the wrong module, since it does not have anything to do with numeric values or properties. This could be in `bokeh/core/property/primitive.py` Or perhaps `regex.py` could be re-named to `string.py` and then both this and regex could go in the `string.py`module. I like this idea, tho we would need to leave a deprecated `regex.py` as well, to maintain back compat.
NULL check not needed.
since the `invitation_slug` is in the path that we are going to use as an invite we dont need to store it in the database. When the link is clicked we can take the `invitation_slug` param, check if it is in Redis and if it is, complete the invite and if it is not, then we know it was expired.
Ok, so the interface has not moved. Is that why it is OK to move the implementation to Core? Should the interface also move to Core in Dynamo 3.0?
It this deleted on purpose?
Do we really have a case that requites this to be synchronized? I can see having it volatile so other threads will for sure see the correct time, but I would think if a test has to protect from this being called concurrently that there is something probably wrong.
How about getting rid of the `Type` enum completely and using a static `String` field on each alert condition?
space after Throwable
side-note, this dependency on `WeakAi` is something we really would like to get rid of: - allows for all of weak ai to be deleted - kinda poor design, the core game engine should not depend on AI code
Given that this block is executed only for `children` fields, is not possible to simplify and remove all the various checks instead of adding an additional condition that seems to be always true?
Maybe a common helper for the 4 checks of this nature we do?
You made me add the header copy , now taking it out lol
Use from ...platform import test, then use test.mock, which is an import that's py2/3 safe.
Is that intended that this is a separate constant with the one in HadoopTuningConfig?
@davidjumani can we have `since` key here
is this line to be removed before submitting?
util functions in `io.py` also need same operations?
I would not change it to the ascii return
Is this the right fix? If I actually do sign in via another window and change my auth status, will this get triggered? Seems like it should be "don't unpause if we're still waiting for consent.". Should we have multiple states like "paused due to consent", "paused due to access", etc, then a single PAUSED_STATE that is true if any of the others are true?
wrapping func once again is a little annoying. Why not have `type connectCallback func(*Client) error` and reuse type all over the place with `var noneCallback connectCallback = func(*Client) error { return nil}`. Set `noneCallback` on `&Client` and if parameter `!= nil` assign it.
Best practice is to use `unique_ptr` for objects that need to be managed by pointer, yet have local scope.
This is an access collection ID, so `$ac_id` would probably be best
this `TIMER_TOMBOFTHESEVEN` is still used in the project? If not you can remove it
Nit: Since this is a field, it should have `s_` prefix according to the coding conventions.
Any need to make it atomic?
Sort imports :wink:
Any particular reason why this is setting the pin as input, rather than `writePin(___, 1)`?
could you please fix the indentation?
aside: weird that these are uppercase
- Remove @staticmethod - Dont use argument - Use ``self._default_mode``
Don't do this - keep the fields the same internally and externally. When we move to ingress this is going to have to merge in, and ingress has no concept of duplicate from.
Is this a linefeed change here? I think this whole file is DOS \r\n formatted, but your patch only has \UNIX n. For now, could you make sure you match the linefeeds of the rest of the file (yes, I hate DOS linefeeds, too, but we need to be consistent in any particular file).
lets test that the event is triggered in the controllers as well :)
This (the `@`) seems like a bad practice and hard to debug, it's trivial enough to fix a permission error for a sysadmin
only necessary because I don't know how to set `CompModSwitches` via configuration settings
Could be method ref `String::valueOf`
From what I see you don't need to have the complete interface imported here, because you are only usings `Events()`?
Guessing we are swallowing this error by purpose
@cra0zy do we need this anymore? since the call is removed from `MonoGame.Framework/SDL/SDLGamePlatform.cs`. Is it used elsewhere?
[standards] Please add braces to this instance and retroactively to the three previous ones
Perhaps a stupid question, but have you considered IsPendingTermination()?
I know this is the same as the existing code, but this seems like an easy change to string.IsNullOrEmpty(name) to replace the null and Length == 0 checks. :)
"views" -> "view", there can be only one.
not sure if this counts as a clever hack... I hope everyone (who has `*:*`) is aware that if they toggle the switch then it will force every developer to re-agree to the agreement.
What is going on here? Why did we remove this translation?
space missing `if (`
I *think* all of our uses of `*json.RawMessage` should be `json.RawMessage`. Applies throughout this PR.
nit: move down
Do we need a default for this?
Why are we changing this behavior?
For this sort of thing, we usually abstract out the relevant features of something like `libkb.Env` into an interface. Does that make sense here?
Dont want to deviate this PR in to some other direction, but are we okay with this naming or change it to something like `RunOnce` mode?
Didn't the previous check assert that Error is nil, and now it verifies that it is no error? The equivalent would be `assert.NoError(err)`?
It is incongruous to make this field static when all of its accessors are instance methods. Also why use AtomicReference here?
Thanks for the cleanup here. This part could probably go into a separate PR to keep the changes in this one to a minimum.
`console.warn('Invalid transaction hash', id)` rather than two separate warnings?
c/p err (was placeholder for something now remove it!)
All these test names where confusing since we are testing the rpc function `GetServicweGroups` not the `ServiceGroupsHealthCounts`.
Note: I'm finding it easier to type `go test -run TestGeneratePackage/output-funcs` by folder name, not description.
This should support binary files too (e.g. images, zips).
wildcards not allowed
Do we really still need to call `abort()`?
I would go with `The name of the file in which logs will be written.`
This could just be `c, err := newFSClient(rootDir)`.
~There used to be a problem with Postgres where adding a column with a default would lock the table until it completed, so adding columns and setting defaults had to be two separate operations to avoid downtime.~ _EDIT: Nevermind, this table has a tiny number of rows. I got it confused with the `badge_achievements` table. Even if it did lock the table this would likely be for a small number of milliseconds.  _
Need this to pass the Deadline is set check
how is this used in the API? I could imagine a name like srcStore or srcImage would be more appropriate.
Why the special case for windows?
This will throw an NPE if `convertedSchema` is absent.
Why are these lines changed in this PR? Doesn't seem related to this task.
I have troubles with my editor and code formatter right now. I don't further know if this is the good or the bad format
This is just a small change that @Benglin missed in his work over the weekend.
`?:` is a 5.3+ operator.
`assert.EqualValues(t, tc.expectedCfg(tc.queueURL, tc.s3Bucket, tc.nonAWSS3Bucket), c)`, isn't it?
`canonicalize_path` comes from `spack.util.path`, not `llnl.util.filesystem` doesn't it? There are more of this reference below.
Why does this change help? Is it because the `type` attribute of an `Instance` might refer to `FakeInfo` during deserialization?
I'd like to avoid the proliferation of such ifdefs. We've generally tried to do this with partial files, e.g. this would call a method `ThrowInvalidUril` which would be defined appropriately in the relevant build. Alternatively, I'd be fine if we just changed the shared error message to be `The 'blah' scheme is not supported.` rather than having two different messages that list what is supported.
Did you get rid of this line when you tried nesting all `pacpy` imports?
Why do we need this function? Is it possible to have a timestamp out of window bounds?
Hmm that's the second time I did that....
Thanks for tracking this down! I wonder what changed in 0.17 to reveal this. Maybe the parquet writer (which we use to generate test data) wasn't eliding the null buffer before?
yay for passing ctx through!!!!
why interface and not just "getGenerics"? some reason this won't work con `class`?
I don't think it is strictly necessary to load classes from the JDK ( the boot and platform loaders ), but will do no harm. It is probably best to follow a simple idiom - preload all classes referred to from within JNI_OnLoad <period> - rather than a more complex rule.
This isn't used (or tested) anywhere yet as per the PR summary
Should this be `LoadJSON`? The sourcemaps are not uploaded as `ndjson` but as `json`.
Seems a little inconsistent. Some places, you're introducing new vars for readability, but then you remove them in other places.
I think this should return an error (or panic).
missing Upgrade451to460 class, I'll add that.
Nit, we typically lead with the scope keyword, in this case: "public" , rather than final. This way everything reads as: `public static final`, or `public static`, or `public final`, or `public`
Is there a finite list of acceptable content types, or is the value arbitrary? If there is a list, we can make an enumeration for it.
the schedule should add store_id param???
Why lower this?
Are these guaranteed to be the same on all systems? Would it make sense to only set this if `/usr/include` is the same as `/include`?
Why bookkeepingdir here but homedir elsewhere?
Nit: Remove this extra line.
We shouldn't remove ObsoleteAttribute
this is the line that was missing. Since the inst.info['projs'] is hacked just above then the `_projector` attribute was not up to date.
Gone, were the geometry specific codes...
Hmm that's the second time I did that....
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
I ran the unit test and found it crash here due to `matched_indices` being empty. I think for every call to `memwipe` against a dynamically allocated buffer, its size needs to be checked.
Did you get rid of this line when you tried nesting all `pacpy` imports?
Can you move this to the top? I think of it as a global variable declaration even if it's not really.
Question: Is there an assumption that a nil field will never have defaults populated to it?
Please note this change in behavior. What prompted this here is that on circular redirect, apache-httpasyncclient calls `Instrumenter.end()` with both a 302 response object AND and exception. And our http client tests think that circular redirects should result in `StatusCode.ERROR`.
This is the thing that would benefit from the ``_conan_collaborators`` mechanism
Paragraph tag should be closed here
Could you explain the idea of accessor?
Is this not required? Adding `RestrictedDict` throws an error, not adding it doesn't.
same here, maybe use `All()`?
These should only allow the legal values of `user`, `group`, and `world`, then you don't have to do all that error checking and `ConfigFileError`s will be raised automatically.
Make a deep-copy. Similar, below.
This doesn't have any direct relation to Resources, so maybe there is a better location for it?
Is adding ExecutionException necessary? The idea is to make the execution exceptions accessible through the errorCause in JobExecutionResult.
Should not be here.
Sorry, but would it make sense now to "remember to bump the version at the top of the top-level README.md"? </snark>
Place the . on the next line, together with the method name.
The callback is necessary here so that a new context scoped to the renewer can be passed through?
This `resetCachesWithoutShutdown` deadlock is no longer an issue?
We _expect_ to get handshake failures here, so consider logging this at Debug or Info level.
Why the __VA_ARGS__ and not just args since it's always one parameter. I didn't know the compiler would let you do this. Interestingly, if the argument were an integer, it would not let you cast it to a constant but generates an error. I think it might be a little clearer to do something like do { \ struct test_case_args __args = args; \ csum_for_arrays_test_suite(state, &__args); \ } while (0) Same effect but a little more explicit.
~~Could `AccessControllerParams` be used instead of the context?~~ Let's find out in the follow-up.
I think it would be preferable to have the list handling in `hdf5_format.py` above rather than here. `deserialize` is meant to handle single objects. The code duplication is minimal (one line).
Can you use a different name here to not depend on the new KAPI package?
+1. Should we enable this by default?
Since we're expecting this to succeed now, we should probably check that the latest pipeline info is the right version and has the right input.
I think we missed an opportunity here... `client.Pool` should not depend on ring. It only needs a function to get a list of all clients. (New PR)
Why did this get removed?
some part of this block is wrong - the if condition isn't sufficient to avoid losing data, but it didn't seem clear to me that we should squash the entire commitset, potentially deleting unrelated data, just because a user (accidentally?) opened a commit on the cron repo. This could use broader discussion, as maybe `squash` should have more safeguards even after we fix the data loss bug.
moved this check to the team handler code.
line 37's 'import string' is duplicated with lin 25's 'import string'
revert this change
Is it not used anywhere?
It's fine that we don't compare state unlike before, since `useState` should already prevent useless re-renders.
This comparison is a bit confusing. I know doing it this way there is one parameter less but I think the old code reads better IMO
??? This is in `#else` to `#if __ARM_MAX_ARCH__<7`...
I think it would look cleaner without the `,` before the `<br />`, it doesn't need to be valid json.
Will this cause any problems with line 100 where it is getting the time difference in minutes? Should that be changed to seconds? The HOUR_IN_MINUTES constant returns 60, and the HOUR_IN_SECONDS constant returns 3600.
I like where this is going, but even cleaner would be @staticmethod, which doesn't need the unused cls variable.
why you dropped this?
Same nit here about import grouping (which looks like was already not quite right). If you don't fix the imports that were already grouped incorrectly, you should at least stick a newline before this new import.
Is 0 a valid containerID ?
nit: you can merge both lines above as `checkNotNull` will return the given argument
You've lost the "replace" error handler here, so this has introduced the possibility of Unicode errors...
The state is going to be stored in the regsitry file. Do we really need the ID here? Does the ID change?
Change seems unneeded. And actually the unchecked can be removed as well.
`->assertCount(2, (array) $response->versions)`
Could you remove these "Deleting key..." prints as well? The key's already deleted...
I think this is the right change for now, but generally I think we should get rid of these intermediary test running helper classes that provide side effects. I envision the future of Pulp to inherit directly from unittest.TestCase directly.
Parameters aren't passed to `BaseModule` methods anymore.
Nice. Another potential mitigation we might want to implement (via setting) is to check file ownership. That is, the owner of the symlink must be the owner of the original file, such that user X can not create symlinks for files owned by user Y.
this should probably be `.to be(true)`
NULL check not needed.
Should this stay? This affects adding emails instead of phone numbers.
As this is a builder, we should just make a deep-copy (not use `Collections.unmodifiableList()`)
Are these changes correct? I don't see the difference between calling `reject` and returning it
Why is this exported?
What about tests for all the exceptions?
this will hang if the server never started
Started on this upgrade, probably wasn't worth it in the end
we are introducing some whitespaces here
Space inside { missing.<br>Space inside } missing.
(nit) I'd revert this, if you need to reset CI. No need to change unrelated files and mess up source history.
if we're just removing this then do we even need the function?
This can still be `net.get`
We were never hitting this code path in v2. We only ever had `self._build_graph` defined in v1 code, and not in the Pantsd code. So, I think this is safe to delete.
Probably want a non zero hex value for tests here.
Is the `['type' => 'media']` part really necessary? I don't think so...
There are lints that catch this sort of thing. Does the `if` statement confuse them, or have we not turned them on yet?
The sbang logic should go after the prefix logic in the ordered dict, otherwise we will cause issues by replacing the first part of the prefix (the subset that is the sbang prefix) before going to replace the prefix, and the prefixes won't match when we handle the full prefix.
Any reason you don't like just returning this line? Saves some vertical space.
If the last thing we did was include multiple fields, does this apply to all of the included fields or just the most recently included? If the latter, that seems potentially misleading. Should we instead have the `withNamespace` modify the namespace of the stuff we're about to add?
Lets pass only the new [conf], not the old one.
remove the empty line
Not too much of a fan of the config name, but well :-)
@syed should we fix `forward_vr` as well toward the same behaviour?
Late to the game. Is there a reason why `github.com/cri-o/ocicni/pkg/ocicni` is not part of `github.com/containers` (or ideally a package of libpod)? Would be nice for CI and for consolidating packages.
I would prefer we do this as a Separate PR if we want to disable this.
Adding this special case looks wrong. I think instead `type_is_iterable()` should be fixed (plus any potential fallout).
Final not necessary here (as a local); only necessary for accessing from inner classes.
The error should be `FUNCTION_NOT_AGGREGATE` instead of `NOT_SUPPORTED`
i'm not clear on how sourceuri vs sourceref is used, can you add some more doc here?
How does this behave on a non local file system?
Does it make sense to keep this if statement inside of the for still to have it break ASAP?
Python code in utilities.py was actually treating null/None and [] differently. This is correct.
That was kinda useful to me, but maybe it could be a `.debug()`?
@soenkeliebau - I overlooked this the first time I reviewed because the GitHub diff view had it collapsed. I believe we need to modify the check on the next line that will allow Tika content type detection when the type from the DownableContent is null or if the value starts with ignore case "application/octet-stream". This is a simple change I can make after applying your commit so I don't think we need to go through the process of re-submitting the PR, I just wanted to make sure you agree and we're on the same page.
Missing `<p>` / partial => partially.
can you nuke this?
Please put `entry.getKey()` in a local variable.
These are in the wrong location We like thr golang default imports to be at top of import and github imports at bottom with a blank line separating them.
We could add assert here.
The intention here was to delete all the associations manually and avoid triggering a lot of callbacks while `destroy`ing the user which could make the destroying take much longer (and it would be nice to avoid relying on the callbacks magic here overall). Is there value here in destroying instead of deleting?
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
As this is a builder, we should just make a deep-copy (not use `Collections.unmodifiableList()`)
Maybe indicate that it is modula decim, or min = 0, max = decim -1
Remove the copyright update - it's not being updated otherwise.
Is there any explanation in the ES changelog why this is needed?
missing Upgrade451to460 class, I'll add that.
Tell the users if not set, the default is zero.
Hey @4bhishek10 , given that the default behavior of Azure Storage is to not overwrite, I think we want the default to not, but be configurable by users. Could you try making the function accept this argument and then passing it to this call? And then add the relevant docstring? Also for any given task, we try to make the init and run methods match so `overwrite` would need to be added to the init method also.
I would prefer a `WeakHashMap` here, which manages itself and you don't have to create weak references.
The impl looks to be evaluating pattern against the part of the key after "uri" (and possibly one more "/"), not the entire key. imo what the impl is doing is reasonable (and in line with the other finders) so would just change this doc to something like, `pattern` is evaluated against the portion of the key following `uri`. If that portion of the key begins with a "/" character, it will be stripped before applying the `pattern`. Only one slash will be stripped in this manner.
More can be tested here? The script and div are both probably amend to aaic t least some b`startwith` testing, or the div could be parsed entirely with beautiful soup and have its structure and expected attributes verified
Is it OK to send day number to cassandra, or should we rather send a string in yyyy-mm-dd format?
Should this stay as the same type and move to the same namespace `Microsoft.CodeAnalysis.Shared.Extensions`?
I would suggest to finish these lines. Using ... is not good coding practice (I know the function name is already very elaborative, but would better to explain it in human language).
this is no longer used?
nit, wrap with `aws.StringValue()`
This is a bit disturbing, no compilation here yet?
Why did this change position?
why is this? If I remember correctly this has always been like this. Wouldn't this affect unrelated functionality?
remove this empty line
Just to point it out: this is a breaking change, as the return type of the method is changed.
Perhaps "must be run interactively ..."?
Don't we want to initialize it to a negative value like `-1`? Also, have you considered dropping the `Cache` suffix, i.e. `_sizeCache` --> `_size` and the same for GC info?
Why remove the general exception from `except` here?
What's the functional difference between `local_user()` and `App->getUserId()`?
I think checking double-tap by measuring interval between 2 onTouchStart being very small would be much safer for this, as onTouchEnd can be triggered following a long touch and not a tap, which might have a different meaning/handling. Even more, for accuracy we can use both onTouchStart measurement being in quick succession, and the onTouchEnd also coming almost immediately after the second onTouchStart. Basically with the current approach we might have a long touch followed by a quick tap considered as double tap. WDYT?
We could log VM's info (id, name...) here.
This should be `change: 'change'` since we follow the naming pattern like `change | close | open | moveUp | moveDown | etc.` in other components
Teuchos already has a whole bunch of `toString` overloads, doesn't it? How come Utils has its own `toString` functions?
No `.js` on the end of the file
This should be `javax.validation.constraints.NotNull` instead.
why do we need to assert here? Should this be nullable with `[DisallowNull]`?
Please remove the stray comma here.
WOW - I didn't realize we used so many constructors! Maybe one day, I'll get around to using mockito to make this refactoring less painful in the future.
I would just not negate the condition.
You should not add an extra line here
we should combine - cancelTouchEvents_() here .
nit: looks like this cleanup ended up in wrong commit.
Is this racy at all? can I loose leadership between `isLeader` and here, then exception out and never unregister my listener?
why not `-1L` ?
delete this file?
how is this used in the API? I could imagine a name like srcStore or srcImage would be more appropriate.
Is this because `VoidCoderTest` does not exist? (tiny style nit: prefer `assertThat` and `equalTo` like you use elsewhere)
Does `RPATH` break if it's not enabled here?
No need to literal cast.
why'd you do this??
This returns DWORD. Should PNERR be uint?
Why do we need to set an environment variable here? The option system in pip was built so it can accept env vars and pass them as part of the optparse options to the functions that need it, not the other way around.
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
Is this TODO supposed to be done in other PR?
Since you figured out the issue, it seems like we should be storing methods from the interfaces and not from the proxy class which is losing that typing information when its constructed.
you have access to the root ctx from here (this.root) to avoid this second recursion
This change is actually useless.
is `email` already downcased here? I wonder if it should be `single_sign_on_record&.external_email&.downcase == email.downcase`
pull out as plain var, no need to make each time.
Is 0 a valid containerID ?
I think you have to fix the indentation for this line.
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
I think it should use json_tricks here. It might contains numpy value or infinity.
nitpick: we can use `org.infinispan.commons.tx.Util.transactionStatusToString()` to get the status as string. if status != -1 :)
Another case with `this.win_`.
this imports logrus twice
I think you could share the same static instance as it is stateless
Actually, we can technically remove this, since we're only running mypy under python3, where it's built in. And we don't need the import to actually be there otherwise, even in dev. Taking it out, lmk if you want it back in.
What's the objective of making this a `char`? I think it was kind of advantageous to pass a string as it will use all of those tokens as delimiters. Maybe we could introduce another overloaded function that's specific for splits with 1 delimiter? I don't think it matters much, as this function seems to not be used much in the code base.
This change is good but unrelated? But I mean, it doesn't add much noise so it's fine. :P
This should be `change: 'change'` since we follow the naming pattern like `change | close | open | moveUp | moveDown | etc.` in other components
`empty()` isn't faster than `=== NULL`, this isn't related to `get_config()` anyway ... please revert it. :)
Not sure that this needs to be a Singleton (is there state we need to share across invocations?).
do we need this in e2e tests? They usually don't test some internal states\props of components. e2e cares only about result from user perspective as much as possible
Are you sure about this ? I think we added a prefix to handle some conflicts, maybe when generating entities... What if I generate an entity named `Account` ?
I think the indentation is wrong here
this is not correct. current mode == normal and IsBackup, it can't be in view change mode. Actually, it shouldn't be in view changing mode at all. The logic is reversed.
should this be triggered everytime a Podcast is saved? if I open the admin for a published podcast, don't touch anything, save the page, this will fetch the episodes, maybe we should only fetch them if the published attribute goes from false to true? I'm not sure, maybe it's better to always fetch them
This DLL is compiled against netstandard2.0 and netfx, which don't contain `string.Contains(char)`. This will lead to compilation failures.
Maybe emit and obviously incorrect string if err != nil? (also above)
This could also be an anonymous class or a class defined in the initializer.
I would at least add a todo here. Or does the old UI also use the `NavigationRegistry`? If no we could really ignore the `Navigation` class and return only an array of `NavigationItem`s here and in `Admin::getNavigationV2`?
I assume we can't use `#testing` here because this directory isn't part of the runtime, and isn't babel-transformed, minified, etc. Instead of disabling the lint rule like this, I think we should introduce an entry in `build-system/.eslintrc` that completely disables `module-resolver/use-alias` for all of `build-system/`. /cc @rcebulko to keep me honest here.
In such large PRs I generally try and avoid renamings.
This check looks fine here but, are you sure nobody will attempt to call `t.removeRepository(sess,...)` at some point? I think this check should be there rather than here (or here too if you want to shortcut by optimization).
User agent configuration is in `originalConn.Config`.
@ustcweizhou whenever host / storage pool is not specified in the cmd, instead of directly picking a suitable dest host to migrate to, I think it is better to confirm it (from the user) through a API cmd param (something like _chooseHost_ / _selectHost_). If user is not OK to auto select host, then throw appropriate message.
c/p err (was placeholder for something now remove it!)
~~~You need to do `go fmt ./...` or `make fmt` to fix code format issue.~~~ You allready done it.
If this isn't working with hashes there's a more serious regression issue somewhere in the codebase, I'm worried this is a bandaid on a missing limb.
That doesn't really sound right. Perhaps we could do this in `__getitem__` where we handle the `dtype[:]` syntax, but I don't think we should let pass internal bugs where we give the wrong dtype when constructing an Array type instance.
Without quotes, it removes the `;` from lists... which can be very confusing when you are focused on an issue related to a list of paths
I just moved it up since it's somewhat customary to have class methods before any of the instance related things.
The type here was previously changed from `Cpa16U` to `Cpa32U` in commit 7a25f0891eef4adbe00dd03e26b6128dc99e170d due to an overflow issue.
just for my own knowledge, how is this any more reliable than a super random sentinel+prefix?
Ok, so the interface has not moved. Is that why it is OK to move the implementation to Core? Should the interface also move to Core in Dynamo 3.0?
`ignore: true` I think additional bonus points!
Actually I think we can use this `repr` regardless of `self.message`.
nit: s/EnableCsiProxy/EnableCSIProxy and s/enableCsiProxy/enableCSIProxy I know
Can we name this `__dynamonodename__` instead? That way it is consistent with the other variables we are adding.
Not accepted anymore
@annatisch quick guidelines question: If we're conforming to the "all objects must accept dict representation" guideline, should we express this at the type level even though it's very much "not the preferred flow"? I'm very torn here between being "completely honest" and "providing less confusing guidance and relying on mypy+dict coercing users to express intent" (in terms of muddying up all the parameter types with Union[dict, ...])
Plugin name shouldn't be in data/input?
unicode.IsLetter() might be a little clearer.
a safer looping   shall we remove `el.tagName != 'BODY'` as well to reduce confusion?
Strange. There is new line at the end of this file in my clone...
Should this be turned into valid JSON?
Shall we define it at consensus if the only use is in consensus module?
Reordering product images seems independent from variants, why do we disallow it here?
Rather than delete, please move to the util file.
Same nit here about import grouping (which looks like was already not quite right). If you don't fix the imports that were already grouped incorrectly, you should at least stick a newline before this new import.
In some cases you substitute `import logging as log` with `import loggging`, but here and in some other cases you still import it as log.
c/p err (was placeholder for something now remove it!)
@QilongTang @ramramps this should help us log any failures to the console when the browser tries to start, should be useful.
This should be a single line string.
I do think this works as written, but what would you think of creating a LinkedList.AddLast() API and invoking that here rather than storing extra state in the LinkedList? To me that would be a little bit simpler and has some minor performance benefits: 4-8 bytes less memory used in the LinkedList object and avoids adding a new conditional branch in the code path for tags, events, and baggage.
At some point we should consider to introduce structs for Secret or HMAC :) nit: `HMACX`, not `HmacX` (common go naming convention)
Why change of logger now means the loss of formatted/and id'd log
Should be `!= 0` ?
We might not need this test at all because the previous one already tested the `buildCallback`
maybe use io.ReadCloser checking reader at construction time implements Close, otherwise wrap via iotuil .
Can we use `getPredicate` here?
Can you explain why we don't want to carry this over to `vlabs` (and by extension, to persist it into the `apimodel.json`)?
this situation should be `overload`
shouldn't you apply `preg_quote` to be safe ?
I think this would be more appropriate, then. @driesvints
why do we need both `guiLog` and `desktopLog`?
What's the reason for this? the only point `_markets` is used is to debug-log the whole markets-dict as list... ? also it's not refreshed, so you wouldn't see new/disabled markets
Seems like a bad idea to remove this?
What does this message actually mean? I.e. is it useful in debugging? Can it be made clearer?
Suggestion for better naming would be appreciated.
shouldn't you apply `preg_quote` to be safe ?
This doesn't need to be a class level attribute and can be moved inside the `install` method, unless I'm missing something.
we don't really need this function, `to.Bool` does the nil check for you. You can replace every use of `IsAuditDEnabled()` by `to.Bool(m.AuditDEnabled)`
It would be better to move these lines into `org.apache.hudi.xxx` segments?
`timeFormat` --> `timeSecondsFormat` (?)
Can you convert this setting to a property to return the value from LoadedPackageParams.
Layout/EmptyLineAfterGuardClause: Add empty line after guard clause.
I've just found that removing these methods is actually SPI-breaking :-/ It was a bad SPI arguably, but still. Something to bear in mind for the future. (And, well, I'll dig out the `name` out of the `image` :-) )
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Is this change still necessary?
Nit: extra space at the end
import sort order (isort will complain)
test the rows don't get deleted
Why has this changed? Seems unrelated.
Should this only be applicable for DEV?
This looks pretty odd to me, I think I'm missing something in the design. Why do we have the implementation of the type parameter on a generic interface, and have the sliders extend their data type (IntegerSlider : DSCoreNodesUI.Integer) rather than have the sliders extent a 'slider class' and parameterise the result?
propagate `@Nullable` to other uses? E.g., the constructor and the getter?
To be homogeneous with `domain`, we need to keep `Network`.
if we're just removing this then do we even need the function?
I couldn't decide whether or not to construct this object in the caller. Happy to hear your thoughts.
We should not call this for single-tenant/subnet plugin as it depends on NetNamespaces. I think, we should move this to node.policy.StartEgressIP?
We need to enable this in the vlabs API type as well (including conversion to the base api version in both directions)
If my understanding is correct, this seems to deviate from the normal usage of the coders. We usually use coders so that at runtime we can convert any record returned by source into bytes and vice versa. The coder provide here might not properly do that for non-byte types and this parameter might be confusing for users. I think we should introduce an AvroCoder that can serialize any record produced by AvroSource based on its schema similar to Java SDK implementation, instead of asking users to provide a coder here. We did not need this for source since we could simply serialize using PickleCoder. We need this for a proper AvroSink.
Please help revert this file since there's no real change.
Is 0 a valid containerID ?
This is the `proxy` use. Hopefully fixes the random segfault issue.
just use `if` rather than `elseif` as the `if` returns.
this is probably what broke MEL. This needs to be rolled back
This line can be reverted, right?
I missed this one. I need to change to `self._value.lower()`
Probably should crash if bad format string
why is DynamicCertificates a pointer if it is linked to tightly to SecureServingInfo?
why is hostPort a String?
Why are we sure that it is non-nullable?
Would not these be useful for an implementer of a new runner?
@tlauda is there any bug associated with this? Would be interesting to see when this does actually is a problem.
As this is a builder, we should just make a deep-copy (not use `Collections.unmodifiableList()`)
@vsoch I think the test was asserting the output of a wrong implementation. `install_root` is not in the schema so I would expect it to be an 'object' by default, not an 'array'.
This Fedora-specific command is just a symlink: /usr/bin/qemu-kvm -> qemu-system-x86_64 Better to use the real command (like on darwin), and then add -enable-kvm (or: -accel kvm)
Your PR description suggests there's a race condition? If that's the case, then couldn't the SetException a few lines down fail if the task is completed between here and there?
No strong opinion, but consider just `--exp` instead of both. `-e` might come in handy later for the environment or something.
Suggestion: Is there a end-to-end test (or test for `fix-all`) this could be set to `Published: false` in?
Why lower this?
Extra empty line detected at body beginning.
I'm leery of changing this
Note that this line will never be reached, since `WP_CLI::error()` will stop the script.
I don't think you need to introduce the temporary `node` here.
FYI, some linters will complain about the imports' order change. Not sure if AKSe's does.
By application state you mean the `channel_state` (open/closed/settled) of `NettingChannelState`?
There are lints that catch this sort of thing. Does the `if` statement confuse them, or have we not turned them on yet?
should this be `"about #{community_name} listings"` ?
Are there better designs that we can consider here?
NIT: Could the variable be named stream? So it's obvious what we're working with.
`_state` cannot be `null` so the `!` here is not necessary. But the other checks were necessary (the ? in `Handle?.Dispose();` and `if (_state.StateGCHandle.IsAllocated)` bellow since the ctors might throw an exception and since the class has a finalizer it'll be queued for finalization. Thus, invoking `Dispose` with partially initialized object from a GC thread. I encountered this problem few times while working on S.N.Quic and all those `?` and checks in all the `Dispose` methods are the result of it.
The earlier commit that changed this line was wrong.
Why keep the service, even as a private one? `String.prototype` methods should be enough.
You need to g_strdup() all values added in the list.
Without removing this the `tunnel` linting will fail.
This has got out of alphabetical order.
did you mean to import `errors` or `pkg/errors`?
> you don't need a double negation before a boolean value... indeed, let me change.
some logging - we could get rid of this.
throwing this error seems correct. I'm confused by the issue the users opened, need to get some clarification on what they are expecting and why.
@daltonbohning if no memory was allocated for next_dpath, should this instead be freeing the dst_filename?
wouldn't this be set already above seems redundant and by making it boolean such defaulting will be unnecessary anyway
I decided to pull "Current Roles" out into its own partial to make it more extensible and with the addition of the removal button to roles, it no longer makes sense to show "Current Roles" on the `/admin/users/:id` page.
`import sys` the next line
I tried to remove as many magic `28`s, `500`s, and `240`s in the Go code and replace them with constants for maintainability.
Isn't this implied by the ordering of `ss` in `newPriorityQueue` can this change after the fact?
If a cancel request and a request come in around the same time, what happens if the cancel is processed first?
I opened the file locally and it has a lot of issues raised by eslint, maybe it should be removed from this PR altogether?
why do the tests now need this?
is max item the only place where the double converter is used?
Don't think this is needed - if `v` were indeed `nil` we'd get a SIGSEGV in the caller.
if I right understand, try-except here need for compatibility with python 2.7, but our target is python3.5 and higher, probably we can use only first statement.
This is unnecessary. An `EVP_PKEY` is an `EVP_PKEY` is an `EVP_PKEY`. It's *contents* determines if it only contains a public key or if it also contains the private bits, and `EVP_PKEY_print_private` is perfectly capable of displaying the key correctly depending on its content.
doesn't `m_client->moddingLoaded()` imply the script env to be available?
Why are we spacing out the imports here?
Should this be optional and defaulted?
Is this actually used anywhere? I traced through the code visually and didn't see this particular options object including `stRotation`.
any thought on this? as opposed to maybe `<=` (to indicate we're sucking it in)? (yes, this is bikeshedding to the nth degree).
Is this include needed?
Seems like your formatter isn't configured correctly.
Suggestion for better naming would be appreciated.
Isn't this required for the Authenticator class in line 101? I don't think this file needs to be changed since it is autogenerated by the maven wrapper plugin
why here instead of in the VM extension?
This check looks fine here but, are you sure nobody will attempt to call `t.removeRepository(sess,...)` at some point? I think this check should be there rather than here (or here too if you want to shortcut by optimization).
Won't this disable all tests of the nested classes? Was this intended?
When we don't have a parent (because it was deleted?) then we shouldn't display the post at all.
I think we were intentionally keeping this out of the registrar so it didn't confuse users.
This one is never evaluated, but it seems correct to change it to `true`.
add a new attribute `{ name: 'Farsi', value: 'fa', rtl: true },` and use that in `isRTLSupportNecessary` instead of hardcoding the values
To be consistent with rest of code, triggers name must depends on status and use already existing value. For exemple: ORDER_SUPPLIER_CANCEL ORDER_SUPPLIER_REFUSE ORDER_SUPPLIER_APPROVE ORDER_SUPPLIER_CLASSIFY_BILLED
3 seconds might be too generous, based on checking NewRelic, this was bigger than the average for all our requests (except when we were in an outage state a few weeks ago)
can we simplify this test while keeping the tested behavior?
this logic changes if I'm reading it correctly. Previously if k1 and k2 were the same object, this would not fail. But now it will fail.
Revert these changes. In general put 1 blank line between `describe` blocks.
how this don't bother our formatter
If you remove `visit_mypy_file` from the class (I think that it's unused), this will be completely reasonable, since this will be reference to something outside the AST node we are transforming.
With my changes, these started failing, as the test checks for non-equality, but I think it's wrong. Let me know though.
Keep this import. It is still used below in this file.
`v3s16 blockpos = floatToInt(pos, BS);`
If you have made equals final then you also need to make hashCode and compareTo final
almost a clean pick, I had to remove tests for `ApplyPatchType` because they don't apply here
Standards: Please add a space after commas.
Its better to add debug for CONTAINER_NOT_OPEN as well.
Lets change the test name too, the assert contradicts it currently which is confusing.
Hrm should this have been removed?
Should we name those functions appropriately? Eg; StateWithoutLock()
maybe pass in an empty array if values is not defined to be consistent? `values || []`
Without quotes, it removes the `;` from lists... which can be very confusing when you are focused on an issue related to a list of paths
Why do you need this import here?
rename the callback
Ah, I recommend adding a new flag for this `FLAGS_schedule_lognames`.
This service supports updating tags via the `TagResource` and `UntagResource` API calls, which means it can be added to `aws/internal/keyvaluetags/generators/updatetags/main.go` as well for completeness. Will add its service entry and generate the new update function on merge.
But more specifically, why `10`? Also you replaced some numbers smaller than 10 with this.
Honestly I feel you won't need two files. But that's totally up to you : )
Is this import still necessary? I don't see we using describe any more here.
We _expect_ to get handshake failures here, so consider logging this at Debug or Info level.
What's the warning here? Integer overflow? It's probably not very useful to fix this here because a schematic that overflows the size calculation will cause bugs in other places anyway.
Lets pass only the new [conf], not the old one.
Instead of registering in `JerseyService`, we can also use register it from the `ViewsBindings` module by using the `jerseyExceptionMapperBinder`. This keeps all views-related registrations close to each other.
How do we track TBD? Would an additional TODO help or do we just scrub TBDs along with TODOs?
nit: you can change the `const theme = this.element.getAttribute('theme');` in line 76 to use optional chaining `const theme = this.element.getAttribute('theme')?.toLowerCase();` and get rid of all the `toLowerCase()` calls below.
May not be needed since it's done above in line 373
this flag isn't actually necessary. If key != NULL, it is allocated and D_FREE sets it back to NULL
Why is this needed? I don't see any nullability attribute being used in this file.
Please don't add to IEffectBlocker, just use the events.
The valid commands are hard coded in the error message. Prone to error if a new command is added. Better to do something like: private static List<String> validCommands = Arrays.asList(new String[] {COMMAND_LS, COMMAND_RM, COMMAND_GET, COMMAND_MGET}) Assert.isTrue(validCommands.contains(this.command),"command must be one of " + StringUtils.ArrayToCommaDelimitedString(validCommands).
It seems that this line is not useful.
Weird... Was JsrtPch.cpp `#include`d somewhere at some point?
Why did we need to reorder this?
not sure this is right. `table.get()` will throw without the check on the next line that `table.isAccessible()`. What is the intended change?
Why not make this `AutomaticManualMerge`
Why fall back to UTF-8 here but not above?
Layout/TrailingBlankLines: Final newline missing.
I think my only real question about this PR is if this should maybe be `watchedServerTypes` or something and take a list of server types to watch instead of just a boolean
Does this mean we can only cache 100 keys? That may be a bit little, but probably it is best left to the user. How about making the default 0 and have that turn the cross bundle caching off?
this needs to be `common.DefaultEnableCSIProxyWindows` (assuming `common` is a reference to the api/common package)
Weird we used `set` here when we used `OrderedSet` right above. Looks like a good change.
This import should be combined with the `log` pkg above.
error var sigMultilineTimeout should have name of the form errFoo
could you help understand why we stop catching `UnknownTableTypeException`?
num = -1 when parm is not provided (so for backward compatibility). This means navigation will be broken for all use of this method. For new usage, it is never -1.
Isn't this implied by the ordering of `ss` in `newPriorityQueue` can this change after the fact?
Please remove files that are not related to the article
Line is too long. [96/80]
nit: you can merge both lines above as `checkNotNull` will return the given argument
Please use { } we don't use this kind of syntax elsewhere in the codebase
GoogleTest is only available conditionally. We will have to discuss if we want to change that.
Why make this change? Oh, so that you use the option shorthand? Check all the other files in this class, those might need updating too. I'm not certain we want to make this change because it's not that much extra typing to do `--repl-shell` than `--shell` and it's not very clear (to me) what the difference between args vs. global args are. I had to look at the implementation to figure it out that they're all args, only separated by the `goal_cls.name`.
Can we make this `4.0`? We still support MongoDB 4.0 so we should use the oldest supported version, I think.
assert isinstancedata_loaderPython GeneratorPaddle.io.DataLoader?
Did you get rid of this line when you tried nesting all `pacpy` imports?
@mheon i have to ask ... worst case, what are the performance implications here?
I think we should expose this as a pod / container name rather than an ip and bool. It's a little more friendly that way. The container name can default to `user` so you don't need to type anything in the more common case.
On user-facing APIs where the value can be used either as channels or components, we name them channels.
is it worth `HttpClientSpanNameExtractor` and `HttpServerSpanNameExtractor`?
So it seems like some of the changes here are meant to address `defaultValue` handling in the case of `JsonIgnoreAttribute`? Is this the expected behavior when `Y` doesn't have `JsonIgnore` and we deserialize `{ "X" : 1 }`? It's clearly something we should be fixing but I think it's required to fix the bug reported in #59936. I would recommend splitting this PR into one that applies a minimal fix for #599396 for GA backporting and a separate one that addresses default value handling in 7.
should this be here?
Judge the situation where `len` is all 0, then we can still use `reflect.DeepEqual` directly?
These imports should be before beats imports.
Seems we are merging splited `SelectedRows` using `concat_op` and it's not supported?
no need empty line here
I prefer not using defer in if closure.
again where is the assumption that --too is specifying a DockerImage reference coming from?
Code standards: Please wrap operators with spaces.
This is a test for the constraint that was removed above.
This also references a vapp... but I have not changed that since it was not in scope of this ticket.
looks like my change was somehow bad, see travis-ci. who can explain why?
What is that FIXME and why we are not fixing it?
what is this sessionID used for?
It is incongruous to make this field static when all of its accessors are instance methods. Also why use AtomicReference here?
I thought only `error.message` will survive, should we still use `error.embed`?
on my view better to add key `dataset_meta` and put in this field, in your solution, possible intersection and overriding original meta keys on datasets meta values
For this sort of thing, we usually abstract out the relevant features of something like `libkb.Env` into an interface. Does that make sense here?
the former is an acceptable exception to the code style IMO (if you add a space after `else if`)
I always wondered if a `post_save` might be cleaner as we already get the information if we are creating or updating and Django can determine that on it's own :thinking:
This method does not return an AppCreator instance
Same nit here about import grouping (which looks like was already not quite right). If you don't fix the imports that were already grouped incorrectly, you should at least stick a newline before this new import.
can we add an explainer here how an item can have no sort time (since data-sort-time is mandatory in spec)
When using `utility.Add` this should actually not be necessary, as the `Add` method only adds key-value pairs if the value is not null or an empty object.
This should probably have INFO level total work time logging and per processor DEBUG level work time logging.
Space between () and {
Is 0 a valid containerID ?
Be careful, this is a conflict, remove it
Many of the presenters subclass this one, and will inherit this behavior pretty easily.
i don't think you need to set self.model here, since the call to build_model is like `self.model = self.build_model(...)`, so this could just be `return PolyEncoderModule(self.opt, self.dict, self.NULL_IDX)`
In other controllers the `setGroups` got its own line outside the `setContext` call :-) Seems to apply to all of these occurences in this controller
Which other url input do we have in the meta keys?
@mtaylor this was a bug, right?
Do we need to do additional validation? Like what if the key of the message has a different field name? What if this key refers to a field in the value? Will that work?
why are all of these changes? i think it's probably too much change and we should rethink it
Just for debugging... Will probably get removed when this is working...
`collect` returns data in as a mapping: `revision` -> `path relative to root` -> `data` - so any time one would try to run `dvc plots diff/show` from other cwd that repo root, the data would not be found.
This line has to be called after `this.recheckVisibilityState_()` call, otherwise it will misreport. Probably just better to call `recheckVisibilityState_()` as soon as `viewerVisibilityState_` and `docState_` are initialized?
The returned type is unexported, how can outer package use it?
can't do this since it can set a `true` back to `false`
As this is a builder, we should just make a deep-copy (not use `Collections.unmodifiableList()`)
Now you can remove this line to pass the tests.
This is probably a Go Imports quirk or something? `fmt` is already named `fmt`.
This first `if` seems redundant? It shouldn't have any effect on the binder (since it can't guarantee that either of those is not None) and if both types are None the next `if` definitely won't trigger, so the final `return True` will be executed.
Although this works, I'd have hoped we can continue to send this notification to whoever that is listening. The fact is that the `WorkspaceModel` is saved, and whoever listens to it needs to know. A slightly better way to do that of course is to introduce a `WorkspaceSavedEventArgs` that carries both `WorkspaceModel` and `isBackup` data, and then the listener can decide what to do with it (e.g. whether or not we are saving the file for backup, etc.)
Please use a `PathFilter` instead of the timeGranularity.
Shouldn't this line be like `response = {};` ? ;)
Allows `configuration` to be set to default on use in case `init` is not called.
any reason `pro_user` isn't just `pro` (or `admin` isn't `admin_user`)? the inconsistency is setting my OCD off :)
Wow, how did these test work?
For consistency, we should go with `OnOutput` and `OnError` (preferred) or `OnStandardOutput` and `OnStandardError`. Also, we should not use abbreviations in .NET.
spurious change, revert?
Didn't you want to remove this interface?
Why does Prettier not allow me to put everything on one line? It's annoying.
I really really dislike this.
What does this failure look like? Will it prevent the KSQL server from starting? What's the error message?
it seemed to need less code to account empty buckets rather than tombstones, so i did that.
shouldn't the left value by .of(..) instead of ofNullable(..)?
I'm +1 on making this also visible in the config file but with a warning, that people that change it must understand what they are doing.
Metrics/MethodLength: Method has too many lines. [55/20]<br>Metrics/PerceivedComplexity: Perceived complexity for enqueue_test_run is too high. [8/7]
Does it still make sense to call this file `by_id.go` & this type `ByID` if they are no longer by ID? If they are by *user ID* then probably best to rename accordingly.
Is there is a default value, why not use a primitive value with a default of `false`? Then, you do not need these logics in a POJO get method.
Please revert this.
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
any reason not to overload the LegacyNodeName - maybe note that this is property is only valid for NodeModel dummy nodes?
I know there's more work to do to propagate changes to the ConfigMap to the controller Pod, but at this point should this endpoint always match `kubectl get` (after a polling cycle at least)? I'm not seeing the endpoint return the same config as `kubectl get`.
When do we need to use it, maybe we don't need this variable?
[nit] Could be `func (*State) EnsureNoProjectsMissing(context.Context, []string) error {` but doesn't matter
Do we know what effect (if any) this change will have on azure-native and aws-native?
Probably want a non zero hex value for tests here.
Could you make this change for `Optional.empty` and `String.format` as well? It looks like the `BadImport` check doesn't catch these, but they're in the same spirit.
@ewinslow should we do something like this for core `_graphics`?
Why is DBM removed here? It is used in this file.
Nit: remove upper case
if there is no fractional size, then we should have the minimum number of trailing zeros, this is it should equal `0`
oye... public breaking change. can you keep the old enum, obsolete it, and add the new ones at the end without changing the order?
nit, This should return a const ref since the shared lock will expire when it goes out of scope. The caller will still have a reference to the Config-internal data structure. ((Looking at some of the other accessor functions, they need const references too :crying_cat_face:.)) //cc @jedi22
this is a bugfix? But it will break scripts, no?
There used to be a freeform `message` param in the old templates, I decided to remove it as part of the cleanup
I had to re-word this error has it was providing information about the FS - I don't think it could have been an attack vector but better safe than sorry.
When would trace be undefined?
Standards: Can you please wrap operators with spaces and add a space before the brace?
Please send this line top on the Gogs
The `map[string]interface{}` "isn't great" IMHO, because we lose any type information. But we do this already in some of the engine event types for the same reason. And there isn't really a better alternative, so definitely   . JFYI, in another situation where we pass unknown data between the API and client, we send it as `json.RawMessage`. (See `apitype.VersionedCheckpoint` and callers.) But personally the `map[string]interface{}` is much more convenient and possibly more reliable.
Unnecessary - you're re-assigning this variable on the very next line.
missing license header
is configFile still being used? Ideally should be removed.
could you help understand why we stop catching `UnknownTableTypeException`?
This is in the wrong module, since it does not have anything to do with numeric values or properties. This could be in `bokeh/core/property/primitive.py` Or perhaps `regex.py` could be re-named to `string.py` and then both this and regex could go in the `string.py`module. I like this idea, tho we would need to leave a deprecated `regex.py` as well, to maintain back compat.
this can go around line 20 below.
Extra empty line detected at body beginning.
It this deleted on purpose?
you don't need this. You should import Client from mne.externals.FieldTrip
why move lock.lock() outside?
Instead of assuming JSON is a subset of YAML for this to work (works most of the time, but there are corner cases), can you use a content-type head to detect YAML? And have JSON be the default.
I would avoid environment dependent code in unit tests, it can interfere with another process or test. It's better to mock `canBind`, ie if you want to check the class doesn't provide occupied *1024* port, make the method stub of `canBind(1024)` return `false`.
Change your IDE to not use tabs and to remove unneeded whitespaces. Please remove this one, thanks.
Note that this line will never be reached, since `WP_CLI::error()` will stop the script.
What about tests for all the exceptions?
This won't work properly if the variable is casted to a `Callable`.
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
I'm pretty sure we have very similar code in Filebeat for stripping new lines in the new line reader.
This initializes the DOMAIN_SIZE in the ProcessInfo Could you try `self.optimization_mdpa.ProcessInfo.Has(DOMAIN_SIZE)`?
Can we add the unit like other config options?
Ok, so the interface has not moved. Is that why it is OK to move the implementation to Core? Should the interface also move to Core in Dynamo 3.0?
Sorry I know this is a hassle   but can you please rename all these to: * function names: `resourceAwsBudgetsBudget` * resource itself: `aws_budgets_budget` This is so we can: * Easily keep the service resources grouped together (e.g. `aws_budgets_notification`, `aws_budgets_subscriber`) * Prevent confusion with any other AWS service that may refer to a "budget"
move these to a SecurityOption struct.
The issue maybe coming from the fact that Portage's variant is called flecsisp and Wonton's flecsi
@pkriens I don't think you mean to leave this println in the final code.
Or can use a star import. No strong preference.
It would be better to stop processing straight away if `shouldDisplayCounts` is false - it means that children also have no counts. Maybe alias the name to `canCalculateCounts` for better semantic meaning here
move to the bottom of import section.
The name `key-ranges` is too similar to the `key-range`, what about using `key-range-list` instead?
That's a POSIX header file -- do you actually need POSIX, non-C++ functions?
This change was originally done on an intermediate commit where I was producing a random image and had to fix the seed. Though I switched to non-random to reduce the size, I think it's a good idea to move this method from `test_models.py` to `commont_utils.py`, so I kept the change in this PR.
This is not correct. That particular extension is only configured to meet.jit.si deployment and the value `kglhbbefdnlheedjiejgomgmfplipfeb ` is not hardcoded anywhere in the code.
if (logger.isDebugEnabled()) { logitwithdebug } else { logsamethingwithwarning } ?
Switching to use the generated Mock structure.
Any reason we need the extra catch block?
How do you decide whether the tags should be emptied or if the update doesn't contain the tags at all? Example: When you only update the "body", this part of the code mustn't be executed.
Was this an oversight from previous changes? Can't see any relation to this issue.
do we have reverences in example.ini or ohter docs left?
Very good point about `getsize`. Indeed, `hash_info` is part of the object itself and identifies itself fully, so `getsize` is likely not needed anymore. But the same could be asked about `Tree.size` too, since its hash_info also has `size`. So looks like we could use it there as well. WDYT?
Why lower this?
Are you sure about this ? I think we added a prefix to handle some conflicts, maybe when generating entities... What if I generate an entity named `Account` ?
should this be a singular name, `OnboardingController` ? It's declared as a `resource`, not `resources` in the routes file
Small quibble to have `ctx` on the next line down, and keep the rest of the params on lines less than 80 chars.
What if project path isn't writeable (as it should be)? Wouldn't `sys_get_temp_dir()` be better?
Can we combine both of these if-expressions together, just for clarity? ``` // If the project names match, we can elide them. if c.b.currentProject != nil && c.project == string(c.b.currentProject.Name) { if c.owner == curUser { return string(c.name) // Elide owner too, if it is the current user. } return fmt.Sprintf("%s/%s", c.owner, c.name) }
have you checked what is happening here?
nit: don't need a blank line after the `#ifndef` (in two places in this MR)
Ugh? Doesn't this have a unique node type?
@danielbachhuber Is this looks good ? :)
The topology id is actually updated when rebalance starts and when rebalance ends. There can be more than one node joining/leaving before rebalance ends, and most of the time there is no joiner/leaver between rebalance start and rebalance end.
Also here we should do something safer to avoid panics if `v` is not a string.
You should add `OrderSettingsError` to `SALEOR_ERROR_CODE_ENUMS` in `saleor/saleor/graphql/core/utils/error_codes.py`
It this deleted on purpose?
does that mean we don't actually throw the error anymore?
how about just `MODE`?
The flip side is that `param` now *must* be a properly terminated OSSL_PARAM array. Because `test_param_int()` makes a singular OSSL_PARAM, this call barfs all over Travis for the moment...
Already line 79
any reason not to overload the LegacyNodeName - maybe note that this is property is only valid for NodeModel dummy nodes?
The DANE case can be more strict than non-DANE when the matched TLSA record is PKIX-TA(0) or PKIX-EE(1) so such a check would need to also happen in that case (and not with DANE-TA(2)/DANE-EE(3)). BUT: I think this PR is not warranted. Test coverage should ensure that build chains correctly, and I don't see much point in doing duplicate work at runtime.
can you at least keep a logger.debug(ex.getMessage(), ex) here? This way if a developer ever needs to debug on why.. it would give the developer more information?
Looks like an implementation artifact. Isn't it?
This change is required because the `ParameterRequestProcessor` is called before the `WebsiteRequestProcessor`, and the values from the first one should not be overridden. However, I am not quite sure yet if this change is also ok with the `CustomUrlRequestProcessor`. But it looks that way, since the other `RequestProcessor` seems to find the same `PortalInformation`. @wachterjohannes Can you confirm?
Should this be destroyed in the Scene's `destroy` function?
This and all following, related changes (lines `135`, `145`, and `158`) are merely nitpicks that add a closing quote to match the text on the actual modal.
emptyMap => ImmutableMap.of()
Was this just for testing or something?
Is this okay? I'm not sure if we treat `6.0` differently from `6`
`tagName` may be undefined if it's not an `Element` (note that `node` is a `Node`).
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
@cra0zy do we need this anymore? since the call is removed from `MonoGame.Framework/SDL/SDLGamePlatform.cs`. Is it used elsewhere?
I think load from etcd is not necessary here.
I suggest using `MIN(item.id) AS item_id` in the `SELECT` and `ORDER BY item_id`.
WOW - I didn't realize we used so many constructors! Maybe one day, I'll get around to using mockito to make this refactoring less painful in the future.
Why is that needed? That should actually never be the case.
This property is never referenced, therefore, removed.
The godoc here will need updated too.
Specifically, these changes necessitate the changing of the other keymaps, as this module is hard coded to expect the specific layer values. There are other ways to fix this, I'm sure, but this was the simplest option.
can't we add this validation in the proto? Or I guess that would break the v1 API
Supports numbers up to <10 billion: `1234567890.1234` so every human can install the plugin on their personal instance and this will still be fine
Do we view these anywhere in the app? I tried searching for views but couldn't find any. Will not having a user break any assumptions we might have made?
missing Upgrade451to460 class, I'll add that.
should we call this `StringToBoolean` ?
Maybe: _Error occurred_ --> _Original error_ or _Parse error_
This is changing the API, we shouldn't do it in this PR if we can avoid it.
the interleave logic here is odd. If (x == null || y) if (x != null) Do something I think there's a simplifying transform that makes it easier to read. Follow on PR
why are we removing this?
why `TxLookupKey` is not sufficient? Do you expect normal tx hash and staking tx hash to collide? If so, different prefix is required, otherwise not. Also, note that going forward when we unify normal and staking transactions, all these additional code specific to staking tx will be deleted anyways.
I've just found that removing these methods is actually SPI-breaking :-/ It was a bad SPI arguably, but still. Something to bear in mind for the future. (And, well, I'll dig out the `name` out of the `image` :-) )
Maybe connector should be `Closeable`?
Changing this may break backward compatibility in the Datanode since the value of this constant is written down to and read from the Version file. We can either leave it as it is, or make sure that the writers always use "layoutVersion", and the readers fall back to "layOutVersion" if the default is not present.
this is so we still output all the objects in output mode, but also return an error code? won't writing the error to cmd.Out() mess up using the objects?
can we set the tombstone state directly? Seem it is dangerous.
Not accepted anymore
Does this need to be filtered? It's not clear that it does. The local variable is "address_specs", but I think that's only because everything was renamed to address_specs recently.
should there not be a `/` after `${OUTPUT_DIR}` here?
I suggest using `MIN(item.id) AS item_id` in the `SELECT` and `ORDER BY item_id`.
So why does this property still exist? I don't think we're setting it correctly anymore right? here's 2 options: 1. obsolete it and have it return true if State == state.Loaded 2. remove it and cherry pick the removal to 2.3 before we release it.
Yeah I'd rather this not be made part of WindowRoot. Should make a new control after window root and use that instead.
move bracket to new line
Remove the copyright update - it's not being updated otherwise.
should drop the `_digest` from the key since this is no longer a digest.
`def cleanup()` might be a more evocative name that more clearly demonstrates where this belongs in the workunit callback lifecycle.
Wouldn't we achieve the same with passing `user` to `defaults` in the original implementation?
Can this just be removed? Or are we still testing?
instead of calling this method 3 times, shouldn't it be refactored so that all the annotations and types are passed together and the list of fields is iterated only once?
For this sort of thing, we usually abstract out the relevant features of something like `libkb.Env` into an interface. Does that make sense here?
I don't think this note is necessary when we use port 0. Using a non-"grpc" protocol is too advanced for this guide. I would remove this note.
Old schema versions in general, or do we track this only for now in order to upgrade from an earlier experimental version?
The limiter is fine, but this needs to be much more discriminating. Blob HEAD and GET shouldn't be under the same rate limit. This is too broad to solve the existing problem without adding a new one. This needs to only apply to blob upload.
Unit tests now rely on `DynamoShapeManager.Preloader` for its geometry preloading activities.
Delete this file?
Style/SymbolArray: Use %i or %I for an array of symbols.
nit: this is for line 130 above. I'm wondering if we should not provide two overloaded `getExpressionSqlType` and just enforce all callers to explicitly create `emptyMap` if necessary, to avoid potential bugs like this?
This is unrelated to table from where `aria-describedby` refers. Maybe move title `metrics.jvm.gc.title` from `metrics.component.html` to this component and refer to that header?
Scratch my initial review. I propose: `/^(?:([^\s]*)(\([^)]*\))|[^]+)$/`, with your beautiful `[^]`.
+1 to getting rid of the PID.
This only works for errors from GRPC layer. I don't think etcd or consul use GRPC. Update: etcd v3 does!
Nothing above actually checks and returns early if the new config is the same as the old config, so this could send unnecessary notifications. I don't care much either way, so if that matters for the GUI we should maybe add a check like that above.
Put `fill_value` at the end
what does this accomplish? isn't the iframe's default minHeight 0 already like other elements?
This is to protect from broken .equals() implementations which don't check for a null param ?
okay i dont know how this works tbh. but does this still have an effect if we return null here?
remove this empty line
how would you feel about renaming this to something like NewTeamAccessRequestsCount since almost all of the other things are actually what they hold
Please remove files that are not related to the article
Since this is a TRON only extension, the opcode should not be 0xf6. Which is very likely to be occupied by a future version of EVM. Use the slot after the 0xd0-0xd4 range. TRON's "inventions" are already there.
Could we use `UPSERT` or does not fit into GORM's model?
Moving it to Cython means exposing most C structures to Cython and staring at tons of generated C code to see that it actually does the right thing (like in #891). I wouldn't do it bundled together with a functional change.
We were getting some values that actually equalled zero, which threw a warning. This prevents that from happening hopefully by setting a hopefully reasonable minimum, but please double-check my logic @agramfort
This conflicts with L171 (resetting the index then trying to read the index value).
What do you think about sanitizing that key with `sanitize_key()` for now? We could do that in `build_connect_url` as the parameter is added to the final URL.
This component is also erroneously using `IsUpdated`, which could potentially cause it to initiate multiple rapid and potentially unnecessary updates.
this type is wrong, i'm switching it to number it will init to -1
I would prefer we do this as a Separate PR if we want to disable this.
did you mean package "errors" or package "github.com/pkg/errors" :)
What does this failure look like? Will it prevent the KSQL server from starting? What's the error message?
NULL check not needed.
this is semantically different from what was happening before.
Confirmed: removing lines 123-126 yields correct results when output is and is not a tty
maybe move this into `testhelpers` like `Intp`?
rename pressure to backpressure or backpressurePolicy
Same request here as for `config.update_config`.
nit: move to bottom :trollface: Also somebody should set `goimport` for David
I think this two lines is unnecessary but xorm should work.
Are `SessionTimeout` & `ReaperExpiration` from another PR?
As this is a builder, we should just make a deep-copy (not use `Collections.unmodifiableList()`)
Space inside } missing.
Probably want a non zero hex value for tests here.
"The The" to "The"
Nit: remove upper case
Is this still needed?
Shouldn't this be inside the if-clause?
Should be able to compose the origin here, but it'll require updating `#composeOrigin_` a bit to grab the subdomain.
It is incongruous to make this field static when all of its accessors are instance methods. Also why use AtomicReference here?
I agree this new style is cleaner but my eyes aren't being able to see the NPE fix - is the map bring mutated between containsKey and get previously?
The callback is necessary here so that a new context scoped to the renewer can be passed through?
I'm not sure this is a good idea. Assuming you've always used the BUF_MEM_grow_clean() function (and no other bugs writing too much), that data should be all 0s. But BUF_MEM_new() doesn't do this for instance. I don't think you can rely on it already being 0 while the function promises to turn it into 0. The same goes for the other change in this function, you try to optimize it by starting at the previous max instead of the previous length. In short I think this whole function should be left as it was.
Is 0 a valid containerID ?
Let's not add a blank link here, to be consistent with the surrounding code
Please throw a NotFoundException and move this to `rawContent` instead.
Shouldn't the `filterFn` work with `client.Object` now?
Can we move this whole block of EH handling code to a ProcessExceptionHandling() functions? I'd like to remove code from OptInstr() to attempt to maintain readability.
we don't usually import the whole `mne` module in our testing files, we just import the functions we need (see lines 19-27)
I opened the file locally and it has a lot of issues raised by eslint, maybe it should be removed from this PR altogether?
This file should be CI-agnostic too, right?
Is that syntax supported in all the browsers we support?
Rename `toTable()` method to `to()`? Seems more consistent with other ios, eg. BigQueryIO and you already specify `String table` argument and the docs tells what's the subject of this operation so it's all clear. :)
technically this should be `time` instead of `number`
We don't want any of the pods to be crashlooping anywhere throughout the two minutes, but we also don't want the pods to be pending for the whole time. By checking the `lastPending` you may lose the information about any infra pod crashlooping if it was replaces later by a healthy/semi-healthy pod. I think you may need to climb `ownerReferences` to check whether by any chance the pending pods you found somewhere through the loop (and which were pending only because they did not start yet, not because they crashed) aren't pods that had already been replaced any current pods which are running just fine.
session_owner is bool
what if act is 'basestring' in py2? Would this line be silently skipped?
Needed? If not remove.
What is a proxy node? This needs /// and possibly a new name dependent on what the intention is here. I think this may actually be a dummy/placeholder?
Please don't catch `Exception` but `RuntimeException` or even a more specific one if there's a relevant one you know may happen. Also pass the exception `e` as second argument to `log.error` to get a stack trace.
Maybe we should just include `architecture` in `__all__` in `lib/spack/spack/__init__.py`.
@bparees just to make it clear, are we removing this in favor of checking which one and only one of the three other fields is non-nil?
why you dropped this?
Two existing issues in this attribute. 1. It is odd that the ctor is below the properties. 2. We don't store the `Type` ctor arg in a property anywhere?
I renamed the controller and paths to follow the rails convention of having controllers with plural names
this is a `float64` and not an `int` by default
you don't need this. You should import Client from mne.externals.FieldTrip
Could you move this to a new resolver test created specifically for this corner case?
typo: `lay` -> `determine`. Add the default value here.
I guess this is some sort of a typo. This IF doesn't make sense anymore.
Perhaps this should be const? In any case please add a blank line between the declarations and the rest of the code.
Probably want != here. Downgrading is usually not fun with caches from the future.
This can still be `net.get`
Please suggest alternatives to the variable names I've used. In Figma the term "Medium" corresponds with what I've called "default" here. According to Josh there may be other levels of density for the calendar, so I chose not to use a boolean for this prop.
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
For future, `corev1` is the prefferred alias for this api.
This should be left as "enabling"
The coding style requires sorting by alphabetical order.
Minor, but we usually only declare one variable per line.
Why did you remove this optimization? Did it never get used?
What about a timestamp here (confirmed_at)? You can check using a getter, and you get to know the consent date
This probably should be moved out of the `if (!$config)` block? Otherwise if a config is passed in it won't configure the IO.. this risks configuring it twice I suppose, but that's better than none.
This should probably be re-worded.
value is an optional, why are you accessing it here?
Why is `validate=False` within `add_edge`? ~After reading the rest, I assume this is to allow for diamond patterns in the conditionals?~ (diamond pattern isn't a cycle)
the if can move to before the switch.
Do you need this file?
I preferred changing the order here (to also match the order in its sister JmxOperationParameter) rather than fixing the call site.
But more specifically, why `10`? Also you replaced some numbers smaller than 10 with this.
I really see it differently. I like to assign variables on the same level if possible.
why ethcore/types? can it be merged into our own harmony/core/types?
Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body beginning.
nitpicking: I think the phrases should be english phrases, like "DeleteWebhook deletes a web hook" (note the ending `s` for third person subject being the function)
Can't define DIRECTX in a source file. These are declared in the project properties. This is causing non-DirectX platforms to fail to build. Also, why does it need "using System.IO"?
I'm generally less of a fan of "version" fields, and more of a fan of feature flags, mainly because feature fields are more self-explanatory.
Do we have any callers type asserting for os.ErrNotExist?
Do nothing? or throw exception as per other examples?
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
should have a default filename. If the file exists, we should always use this file. If the file doesn't exist, we can ignore it.
rubocop got mad at this lack of newline
whitespace between `enum` and `LogLevel`.
Is there a race condition problem with this?
I think it should be ok to reuse `isCiBuild` even though it's less precise.
this can go around line 20 below.
Don't use the variable name 'sandbox', use something like fastFetchSandbox or renderingSandbox, sandbox is already used as part of the testing framework. Fix here and below.
What is the purpose to make it a configuration item ? I think if we can make it default to the number of CPU cores? Or can we re-use `numBootstrapThreads` because it is defined as: > How many segments to load concurrently during historical startup.
`trialPrepareCommand` -> `trialPythonPath` `trial_prepare_command` -> `trial_python_path` also in other files, like `experiment_config.rst`.
The `include/libzutil.h` header contains some conditional `HAVE_LIBUDEV` blocks which should perhaps be restructured so the prototypes are always declared and function implemented, even if it may always return `ENODATA` or `B_FALSE`.
I think this was due to @cjb's lack of a git commit hook.
Line is too long. [91/90]
can you name this less generally... like MD_FILE_EXTENSION? or VALID_DOC_FILEEXTENSION
We weren't using this constructor arg so I removed it.
`printf` is sloooow - can we switch back to appending?
Should this be `origin-bridge/src/models`?
You don't need the conditional, jist short circuiting is enough
Metrics/BlockLength: Block has too many lines. [246/25]
Why is this needed?
why do you need a "sorted" here? I am worried that that'll add significant runtime -- because it's pretty common to use this dataset for say 1 million files...
Is there possible to add this option to ScatterRegion instead of creating a new method?
This RE is not good. It will allow "[includedirs_My_Other^Lib]" too. `:-^.` is any character between ^ and . ascii codes. The right ER could be: `re.compile(r"^\[([a-zA-Z0-9_:-\\.]+)\]([^\[]+)", re.MULTILINE)`
It would be wierd to ignore the name set in FilteredAggregator when user explicitly sets it. IMO, the default should be - If user has set a name for FilteredAggregatorFactory - use that, otherwise use the name of the delegate. For backwards compatible case user would not have specified name at filtered aggregator level and will get the old behavior of getting delegate name.
nbsp should be replaced with a regular space
I'm not sure if I trust that all the fields in the `record` are 100% accurate here. And I don't think there is any situation where I would.
this looks unused to me?
Please leave the method and mark as deprecated. It is possible other products are relying on this method as a library.
Wouldn't `static const char f[] = "0123456789ABCDEF";` be better? It avoids a pointer.
You can remove this import now.
Late to the game. Is there a reason why `github.com/cri-o/ocicni/pkg/ocicni` is not part of `github.com/containers` (or ideally a package of libpod)? Would be nice for CI and for consolidating packages.
this is no longer valid as the algorithm has changed
Do we know for sure that `setReportError()` will be called by this point?
Should this and the TODO below be cleaned up in this PR?
I don't think this is going to grow enough to merit its own package.
Could the meta table be empty? If so, maybe omitempty would be good here
It's slightly better to explicitly check that `a.type_annotation is not None` than just to check the truthiness here.
nit: s/EnableCsiProxy/EnableCSIProxy and s/enableCsiProxy/enableCSIProxy I know
Should we maybe switch the two conditions around so we exit as early as possible (no current user or they are not an admin) before doing the array inclusion check? It's not particularly important in this case as the latter check is cheap, but maybe a good habit to get into.
confirmed these `views.main.header` keys exist, and match the intent, the original core keys are removed above.
Let's move this factory in the TCP package so we can reuse the same factory definition for both TCP input and syslog.
should not be a part of this pr
you should call `getPluginFile(info)` only once (rather than here and at line 328). Use a variable
Won't this still leave it broken? If the context is cancelled, then this will stop extracting.
This change erroneously reverts #2702
Should this be `BABYSTEP_OFFSET` here?
Why not replace above two lines with: `throw new RuntimException("Failed to setup the mapper task", ioe);`
Won't we get an ArgumentException as well if the handle wasn't opened for overlapped I/O? We're assuming that's the case then?
I always assumed that CDI would handle synchronization for this :)
Could the meta table be empty? If so, maybe omitempty would be good here
just curious that above should be same as (1ULL << 30).
I am afraid these are the actual default values and they can easily changed without doing the same in the API. I would propose to always use the one from the API as all of them are now defaulted.
This is to protect from broken .equals() implementations which don't check for a null param ?
>// this sort of addressing mode magic only applies to x86 platforms [](start = 8, length = 67) ARM has some similar instruction form as `ADD r4, r4, r4, LSL #4`, could we also peep that? #WontFix
remark: it's surprising to add `issueOrganizationUuid` as the signature of this high level Action. Should it be part of `DefaultIssue` for example?
These structs are duplicates, and the naming schemes are different :/ Is there somewhere `monero::MultisigState` can be placed to so that `wallet2` can re-use it? The problem seems to be that `src/wallet` and `src/wallet/api` aren't supposed to include header files from each other _in the header_ (only in the source of `src/wallet/api`).
I think you'd want validations for all the non-null attributes as defined in schema.rb Same for other model classes.
This will likely cause a panic as usually the response from the SDK when there is an error is `(nil, error)`.
Would it make sense to put the certificate in `GenericLoopbackOptions` and make use if it in other loopback servers?
Please note that the user may have selected to print the step count instead of the time (so use the `label` variable instead)
c/p err (was placeholder for something now remove it!)
Should be unnecessary; Constant is already available in OAuthConstants?
we don't need extra lower() for `anpa_category['qcode']` as it's already lower in case.
it looks like in the schema the service_provider is stored as a string. where is this `sp` coming from?
I agree this new style is cleaner but my eyes aren't being able to see the NPE fix - is the map bring mutated between containsKey and get previously?
sorry but SAO has nothing to do with Player list. it's not responsibility of an AO property to update player list
This is still a valid use-case right? It would be the case described in EIP where a Message arrives after its aggregate has been closed out. For such cases, our discard-channel provides value (that message can be sent to a dead-letter channel, etc).
Are we ensuring the current user is able to post in that category somewhere down the line?
Layout/AlignHash: Align the elements of a hash literal if they span more than one line.
This one is never evaluated, but it seems correct to change it to `true`.
I'd just make this one a `private const int Count = 2`. It's never going to change and there's no reason to force more work for the JIT.
This is one of the memory locations that's leaked, so whilst this change is correct it's also causing Jenkins to report one error fixed and one error added, so it would be better to do this on a PR where the leak is fixed or there will be noise on PRs.
Please remove the trailing whitespace from these two lines.
Do we want to have a default in case this isn't set? Ah looks like nil is fine. Disregard.
Should we update vendor for this repo?
TOP!! We may want to double check if it's fine for this page to be public. +1 for me
You cannot rely on an origin package inside of the kubernetes repo
The inverse mapping is done every time `InverseMapper` is called, which happens for every sample event. Please make the mapping static instead.
I have no problem with the namespace, but is it neccessary? Will there be other types of `GdprDeleteRequest` and we want to avoid a name clash?
license header to be removed
this break will not exit the loop anymore. It is now scoped by 'select'. Better use `return`
What do you think @devigned? Should we create a `pkg/armhelpers/v2/interfaces.go` to create the additive method changes here? Making these changes in place will indeed break contracts of pre-existing `AKSEngineClient` type usages.
Maybe we can switch to a Yoda condition here?
Why do you need this for? There aren't supposed to be dynamic properties in entities.
Hard to believe Python can do the same thing with so many different ways...
I'm afraid that `matplotlib` needs to be initialized before importing `matplotlib.pyplot`, otherwise it won't be used.
@jim-minter please confirm this is the bit you wanted removed.
This is in general an anti-pattern, you shouldn't pass to a self.method a self.variable
Let's not add a blank link here, to be consistent with the surrounding code
minor point: probably don't need to put it in a variable that is used just once on the next line
This function shouldn't be necessary.
Did you mean to delete this?
Proper docstring style is actually to have the close """ on the same line _iff_ it's a single line. So it was wrong, and it's still wrong. :-)
Just follow how it is done for other DB types like MySQL, Postgres etc. No need to do a separate track for MSSQL
Nit: plz make this method name consistent with the other `initialize` ones
This was messing with the global log level.
can you either use jasmine's mocking library or create a $locale mock for this test instead of trying to reset the value at the end of the test? reason: if the expectations fail the state won't be restored and that will make all the subsequent tests fail and it will be hard to find the cause.
I would keep this outside the `try` block. We really want the `try` to just be about failure to init, while this could be a failure of the `get_config` value being set. `int(get_config(...))` where `get_config` gives a bad value will probably have an informative enough error on its own.
It seemed helpful before to keep the relation between the original file name and this temp file if something goes wrong, but in reality the data is already in cache at this point so it would be helpful to just provide intructions/mechanism to recover it. Aaand we delete this temp file anyway down below :slightly_smiling_face:
Why make an empty case? Just reverse the condition and delete the else.
Is this TODO supposed to be done in other PR?
I thought about adding it to details and making this its own `Check` but it didn't fit the pattern
AFAIK build items should be immutable. What's the reason to make these fields mutable?
Nit: Possible to use a more descriptive name for each member? `r` => `resource`
Just for my understanding is there is a reasoning behind `1-0-1` here ?
Nit: Please sort this new import in the third-party imports section near the other services
if you use a collections.defaultdict then you don't need to check for existence in the loop - just do node_reference_count[stripped_name] += 1
Not used anywhere - remove?
You can remove this import now.
Won't this still leave it broken? If the context is cancelled, then this will stop extracting.
Any reason we can't build these in parallel via a `Promise.join` instead of then?
why are we changing this one?
Use empty lines between method definitions.
_collect calls clean_ret in the failure case, so I think we can't do the free here. Could either add a free_ret wrapper that calls clean_ret and then does the free, or do a cleanup function in the Go code that adds the free.
I feel like this function could be structured better. Also, this deserves a unit test.
Did you get rid of this line when you tried nesting all `pacpy` imports?
current batch -> current step,
This guard makes sense but also seems unnecessary -- is it to avoid the bad UX of supplying a specific state for a constant and not having the system respect it? (Even though that would be very unusual)
change lgtm, I think we should probably make it a type and when we cast it it should fail? wdyt?
Can't do this... SharpDX is only for DirectX platforms.
return null? Don't understand why we are returning topic name.
Was not used anymore?
Worth putting this in a method to avoid duplicating it a few lines down?
I am not happy to see such large chunk of logic within Switch/case clause, can it be extracted out?
I think this should be moved to the `Registration` class above.
Same here, lets use the bulk index worker. I would do batches of 200 for users.
Since you're writing out an empty string for this field in `writeExternal()` (presumably to preserve lobby compatibility), do you also need to read (and discard) a string here for the same reason? Otherwise the stream may become unsynchronized if multiple `GameDescription` instances have been serialized.
why not 1150, which is the first one of 5.6 series ?
I have a minor preference for `_get_flow_from_bitbucket_cloud` / `_get_flow_from_bitbucket_server` to make it clear we are not referring to Prefect Server/Cloud
a -> an
nit: I think we can remove these lines.
what if we block on Read? Consider closing the file and do check on r.done being closed in EOF checks
Why return null if "return;" has exactly the same effect and is shorter?
Will this regress if we update babel in the future?
NB: This must remain since it is used in a condition point.
remove the empty line
Why did you keep `!TEST_size_t_eq(sizeof(int), 4)`? This line is meant to replace it, and it really makes no sense at all to keep both...
What is going on here? Do we actually need an `inject` call at all?
How about removing this sentence entirely? Users can register arbitrary protocols by dynamically linking them into the tensorflow binary, so there could be more acceptable values.
Since lightbox gallery was the only user of this function (`installAutoLoadExtensions`), I went ahead and deleted it. Is there good reason to keep it alive? cc @rsimha-amp
Did you delete this file too?
Is this file needed at all? If so (as a simple example) it should probably go in the examples/ dir, under a new examples/javascript/ subdir.
This change the response format breaking backward compat.But since the json format wasn't adding anything and should be more inline we the existing swagger definition I don't think this is blocking.
Is this blank line intentional?
This field should be added to the `v1alpha1` version as well
Use the Helix constructor that takes in HelixManager.
What happens if someone materialized a function from a string?
why are these removed?
what if we move this check in the policy or wrap them both in a helper?
why omitempty? this shouldn't be optional should it?
moved to a unix build file because `Mkfifo` doesn't exist on windows
IMO this was also a bug, because an empty db was unnecessarily created.
Layout/LineLength: Line is too long. [128/120]
Please suggest alternatives to the variable names I've used. In Figma the term "Medium" corresponds with what I've called "default" here. According to Josh there may be other levels of density for the calendar, so I chose not to use a boolean for this prop.
This file has nothing to do with your PR.
Style/EmptyMethod: Put empty method definitions on a single line.
wha if `autoplayLoops_` is set to `0`? this logic would treat it as infinite loop. We probably want to either disallow it or treat `autoplay=0` same as `no autoplay`
Ideally use `parseUrl` from url.js and compare the protocol to http or https.
`canonicalize_path` comes from `spack.util.path`, not `llnl.util.filesystem` doesn't it? There are more of this reference below.
The variable $interface seems to be never defined
Is this constant used anywhere?
You should do `if user_data is not None` since that's when the environment variable has been set (even though the feature won't be that much useful in this case).
This line can be reverted, right?
Because some systems/os are not able to manage negative numbers for return on command line, the rule is that for cron method, 0 means ok, other means ko. To != 0 looks good to me.
Call `this.getScrollTop()` to get the cached value.
This gets the right answer, but not really for the right reason. It would be nicer to use ParseCIDR() on "224.0.0.0/3" to get an IPNet directly. (And I assume you've tested that this route is actually needed? The default route isn't good enough?)
The inverse mapping is done every time `InverseMapper` is called, which happens for every sample event. Please make the mapping static instead.
This line will get added automatically by the build system, no need to add it manually here. JFYI for the future. )
this does make it so that all future authz informers will end up using JSON. just something to think about
This is minor, but is there a reason for naming this method `getUseLogicalTypes()` as opposed to the more conventional `isUseLogicalTypes()` for `boolean` properties?
Kinda weird to have the docstring inverted from the name of the method (check disconnects, check if connected)
You'll have to add `pretty-text` to `discourse-common` dependencies. edit: the other way around
`! empty($index)` should be better than `$index === NULL`, to filter out bogus keys such as '0'. It also might be a better idea to return FALSE or NULL for non-existing keys.
This class does not contain tests, and thus does not need to be annotated with `@Nested`.
something is wrong with indenting here and below
The count is not needed as the foreach wont loop over an empty array?
Can we make this `4.0`? We still support MongoDB 4.0 so we should use the oldest supported version, I think.
It may be that I don't understand conditions but can/should a later condition invalidate an earlier one?
It seems like this should be grouped with the other standard library imports.
I'm tempted to say that this should be `publicImageRepository` or `publicPullSpec` to set the longer term direction.
Why not put this method within PanacheEntityBase instead?
how to clear all labels?
Please add gitea copyright header
could be an `elif`
factory or faker for valid email addresses?
I think the code should fail if this statement is true.
erblint in action here.
Good catch, `parse_url()` without 2nd parameter does return the full array. OT: Maybe we should remove `@`? I find it not good muting PHP functions. Instead maybe switch to a proper class (composer again) which allows validation?
Can you move `"google.golang.org/grpc/status"` down with the rest of the 3rd party imports?
Can I ask the reason to support `<amp-embed>`. This change migrate the `<amp-ad>` to using `<amp-embed>` instead. Thanks.
It is currently possible for this value to be null but maybe it shouldn't be? I think it would make sense to throw an error on line 81 to prevent that situation but I would rather keep functional changes out of this PR.
Probably need to suppress the unchecked cast warning on this line.
Can you elaborate on the thinking behind this change? The class is a Periodical that runs every second. But I don't see how there would be concurrent access to the bytes fields from multiple threads. :thinking:
Why lowered that distance? Is it related to this commit at all?
Please remove unrelated change.
Is this intended `@Nullable` on the input argument? There are checks for things that call this for `nullToEmpty`, which are probably not needed.
Final newline missing.
maybe rename the attribute to `open-button` for consistency? (or `open-banner`)? It's a breaking change anyway, we might as well change the attribute too.
Why make this change? Oh, so that you use the option shorthand? Check all the other files in this class, those might need updating too. I'm not certain we want to make this change because it's not that much extra typing to do `--repl-shell` than `--shell` and it's not very clear (to me) what the difference between args vs. global args are. I had to look at the implementation to figure it out that they're all args, only separated by the `goal_cls.name`.
Can we name the following as `LibraryItemsResponse`? We are not quite dealing with `NodeModel` here so everything related to getting the library items should be renamed to use the term `library item` to avoid confusion. For example, `GetAllNodeModelsWithCategories` should be renamed to `GetLibraryItemsWithCategory`.
We can also instantiate the `chronoUnit` first based on the `type` precision.
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
if level is None:
I think checking double-tap by measuring interval between 2 onTouchStart being very small would be much safer for this, as onTouchEnd can be triggered following a long touch and not a tap, which might have a different meaning/handling. Even more, for accuracy we can use both onTouchStart measurement being in quick succession, and the onTouchEnd also coming almost immediately after the second onTouchStart. Basically with the current approach we might have a long touch followed by a quick tap considered as double tap. WDYT?
nts: this is so that metadata table itself can take multiple writers committing at the same time.
@MathieuAA is this public API or internal API?
A log here would help.
Nice! (assuming these got fixed upstream, for my own understanding?)
you have access to the root ctx from here (this.root) to avoid this second recursion
Converted from deleted *.rec test.
This error will be overwritten below, is that intended? It won't cause an exit out of this `mainInner`, which is unlike all of the other settings of `err`
Remove empty line?
we null check often enough that maybe it should be a condition in the work item
We could import `org.apache.commons.lang3.StringUtils` here and use `StringUtils.isAnyEmpty(username, password)`.
Group this with the other stdlib imports.
This change and the other like it above just keep consistency for the three `query()` methods.
Not following why this needed to be changed. If this did fix the oled, this should also be implemented in the arm version of i2c_master.
should we keep this until Azure Stack is added?
Prefer C++11 style `using new_name_type = OldName;`
remove this line
I don't think this is clear enough. My head actually hurts a bit reading it. I will also see if I can come up with a better wording.
"**the** number of days"?
This has got out of alphabetical order.
perhaps SKIP_OWNERSHIP_CHECK is a better name, more in-line with the other flags?
Indention not aligned here either.
Please revert unrelated changes so that a diff is minimal before submitting a PR. (Makes reviews easier, reduces changes of merge conflicts, avoids noise in `git blame`, etc.)
I think I would add a `Stop()` method to the `Middleware` return rather than exposing the implementation.
@barnabycourt, it looks like this was the only place in the code base that PLP1004 was used. Is it ok to remove that code?
It took me a while to get the `tar.gz` vs `tgz` difference. If they continue like this in future releases, we might think of an `url_for_version` method.
should we use `isUserErrorEmbed(error.message)` here? Same reason to why we don't have `error.isUserError`.
Let's just use self._required_flags = [], no need to store it in the dict I think? Also it might be fine to make this a 'set' rather than a list, so you don't have to check for duplicates.
Probably `attr_reader` would be enough here.
This code-block should not have existed in 7.x. Maybe some older backport that didn't go well. Removing this block fixes: - reduce chance for leaking resources due to an existing context being overwritten - remove duplicate log message.
Why not just use `__toString` ?
Could you also test the instance is `ACTIVE` in the ring?
We need to remove this once we are finished testing
Space inside } missing.
This is the same than above (and similar to the one below except for the !== ) so I think it's unnecessary to repeat all the code.
Add `Optional.` to help description, see `-ni` key as example.
@bflad not sure if this will break anything - had to do it in order for import to work correctly though.
Guessing you didn't mean to change this?
What about the ingress DNS?
If my understanding is correct, this seems to deviate from the normal usage of the coders. We usually use coders so that at runtime we can convert any record returned by source into bytes and vice versa. The coder provide here might not properly do that for non-byte types and this parameter might be confusing for users. I think we should introduce an AvroCoder that can serialize any record produced by AvroSource based on its schema similar to Java SDK implementation, instead of asking users to provide a coder here. We did not need this for source since we could simply serialize using PickleCoder. We need this for a proper AvroSink.
I just noticed, but this block should be done outside of make async (do that as a follow on pull please).
OT: I wonder if dataclasses would be useful for some of mypy's repetitive code. There's a backport on PyPI that works on older Python 3 versions.
Wouldn't it be better to be consistent with Kafka?
Maybe better error and raise, very weird that you provide a --profile that will be simply ignored
Same as before, make this an explicit message like `Could not format extension bundle`.
>bailoutReasonCounts [](start = 10, length = 19) Initialize rejitReasonCounts and rejitReasonCountsCap to nullptr as well
This is not allowed - pkg/monitor may not take dependencies on deep test packages in general.
rubocop got mad at this lack of newline
`if (method != null && !method.isAccessible()) ` is more readable
Why were these conditional? Did they used to throw Skip exceptions and now they don't?
According to flake this import is not used
Let's pass the version as an argument to `PackageUploadBuilder`. `static` shared state makes it very hard to decouple components for testing.
Remove empty line?
TODO: change the other diagnostics to be consistent with this naming scheme
Does it work on windows? Or this is how awscli does it too?
should this be: "can not pause pods containing rootless containers with cgroup V1" ? s/containing rootless/on rootless/
`req.Data` should be in the validation rules as required filed since we need to send back the `id`.
We follow the convention that all method names whether private, internal or public follow `CamelCase` so change this to `OnSettingsSubmenuOpened`
Are there configure args tied specifically associated with this variant?
I like this - this should be aligned everywhere i think
Can we pass location here instead of a table reference (so that we don't have to update this function when we support queries) ?
If we aren't going to propagate the error up, can we log it?
Add a line break after this.
Ah I just noticed that I named these variables with a capital first letter -- do I need to rename these to `hostCertFile` and `hostKeyFile` to be idiomatic?
does that mean we don't actually throw the error anymore?
We also need to test that this is actually iOS.
Sort imports :wink:
can we add some basic java docs like the one at the top of the class
This is good, but `cchName` below is also wrong. `size_t` should be `UIntPtr`. It is `uint` on x32 and `ulong` on x64.
Is there any explanation in the ES changelog why this is needed?
`engine:tests` wasn't being run with MyPy
[nit] Could be `func (*State) EnsureNoProjectsMissing(context.Context, []string) error {` but doesn't matter
Minor CheckStyle violation (unused import), I will remove before merging your PR. For the future, you can run "mvn clean install -Pcontrib-check" from the nifi-nar-bundles/nifi-hive-bundle to catch these errors (and any compilation or unit test errors).
Is this something we should just be removing? This seems like a good thing to have, and if it isn't hooked up at the moment, should we fix it?
Can you use gobblin.util.ExecutorsUtils.newThreadFactory(Optional<Logger>, Optional<String>) so that we can name the thread for debugging purposes and we log uncaught exceptions?
What, does this handle it for FbDialogTeacher or ParlaiDialogTeacher? This is obviously correct, but I don't know who is using this...
IMHO, these methods need unit tests to ensure maintainability and that people don't inadvertently change the logic to be incorrect.
I don't think this is valid, afaik there's no guarantee that a GCHandle's id will not be re-used
Any reason you're using a different logging package here than we use in most other places in the repo? I'd prefer to keep things unified if possible.
is configFile still being used? Ideally should be removed.
seems there a lot of line endings changes that make tracking the real changes more difficult. Any idea whats going on there?
Probably also want to add this to `Function`.
Sorry, but would it make sense now to "remember to bump the version at the top of the top-level README.md"? </snark>
GameRunner has a lot of static 'stuff', you'll see a pattern of this moving out of GameRunner.
Could alternately have used `o2.compareTo(o1)`.
just nothing to be tested?
handle the null sanely
what is the goal of defining unused arguments ?
Why does Prettier not allow me to put everything on one line? It's annoying.
And also comma here.
Can we use null.v4 for new things>
May be possible to remove when changing the approach to provide the Service to the MuleContext
Not super excited about how the future gets set on the task, but don't have any better ideas at the moment. Feels like it give access to details that shouldn't be reachable.
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
minor nit : would be nice If we can extract it as a constant somewhere, DEFAULT_ROLLUP, will be helpful if we plan to change the default in future.
the `defer` should be defined outside of the loop, otherwise the function will be scheduled on each loop iteration
Looks like these lines have to be removed as well
the schedule should add store_id param???
Let's try to keep the imports alphabetically sorted
Standards: Please add a space after commas.
does this mean the 8th page can be an ad?
Sorry to be picky but, could we also remove the corresponding import of the Parser class? Thanks @dpiparo
This is empty
this is not the node with minimal x...
is configFile still being used? Ideally should be removed.
The context of this file is empty. Can it be deleted directly?
is this change intended?
Is this a bugfix?
@trachelr should use `warnings.warn` instead of `raise DeprecationWarning`, the `raise` will actually halt execution
@tnozicka this was closed and fixed hopefully
[standards] Please add braces to this instance and retroactively to the three previous ones
Do we intentionally not want to redirect SdOut as well?
the script is not minified. is this intended?
Given that, might it make sense to warn or fail here instead?
It's not immediately clear to me that this will call `_default_summary_view()`, but I assume that it does.
These two files need to be named `mk1.[ch]`, and the folder name needs to be lowercase.
Please mention this default path change to commit body. Ideally, it would be better to separate a commit.
This one should be `url.PathEscape` - although we don't allow `/` in names at present we might in future
Should this register for the SIGINT and SIGQUIT signals directly as well, and not go through the extra console layer on .NET 6?
I don't understand where `s->s3->tmp.new_cipher` would change between the start of this function and here, can you tell me?
extra space before `break`
I think since the tree comes with a default reference, this isn't needed?
maybe this was to comply with findbugs
`PrivateModule` vs `public` flag seems inconsistent. I would not use "private"/"public" terminology at all, just "internal" or "not internal": `InternalModule` option, `m.internal`, `IsInternalModule` method. WDYT? It's a nit pick, and we can do this in separate PR if you prefer.
Why are we calling BreakSolutionStepsLoop here?
This class does not contain tests, and thus does not need to be annotated with `@Nested`. It also can remain `static` because it's a child of the top-level class.
The same situation as above, IMO `product_variant_deleted` shouldn't be called for `VariantImageUnassign` mutation. Rather, `product_variant_updated`.
This is defaultable when we only have one container. I don't see that happening and it should be mentioned in the godoc.
`real_s3` is not used anywhere, and `s3` uses docker thes days, so this corresponds to the approach with other clouds.
It's a small file, but why do we need three identical copies? We have other files that are used in corelib and other libraries.
Check my math on this, but shouldn't this be `>=` and the same below.
failed to list directory?
Just curious, was there a case when it actually was a `String`? Which option was that?
> * If the user presses 'Back' once on the DeckPicker, a Toast should be displayed stating Press back again to close > * There is no functional difference between how "back" works now, and how pressing it a second time (after this change) will work There wasn't anything about a time
@liggitt amazingly it is possible that when doing a specific search for a specific DN in LDAP we can get nothing back and _not_ `NoSuchObject`
specfied => specified
I would prefer we do this as a Separate PR if we want to disable this.
What meaning would `sufficient = null` have in this case? There's also not a single check for `Rule#isSufficient() == null`.
@TalLinzen what is the motivation for `check_version`? I guess to be able to mute certain messages... My problem with this is that we add another parameter but that this won't change a lot since it still defaults to true ... I'm therefore -0.5 for this parameter. You can simply manually edit the version.txt file.
(style) space required before the open parenthesis '('
You should use `\DeviceCache::get($obj['device_id'])->groups` instead so it doesn't fetch the device from the database again.
What's the idea behind keeping the "or project" piece?
should probably put after `copy` even though it's about to be removed (could in 0.12 break someone's code)
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
[nit] Could be `func (*State) EnsureNoProjectsMissing(context.Context, []string) error {` but doesn't matter
Are we passing in the encoding somewhere else? If not we shouldn't be skipping this.
Does this need setting more than once? Can we make it readonly? Making this hard is important as defence in depth measure
I think the outermost parentheses are unnecessary..would be good to confirm via REPL.
Hmm... I don't like this. A lot of people will build this without gcc. You should use `spack_cc` instead.
why did you remove this?
Why is the monitoring URL in the spec? Should be in the global config right? There is only ever one config at a time.
Ok, so the interface has not moved. Is that why it is OK to move the implementation to Core? Should the interface also move to Core in Dynamo 3.0?
_then_ --> _than_
I would not add `fetchBorrowRatesPerSymbol` to the set of unified methods if it is not unified across the other exchanges yet.
keep all imports vmware/vic related in one block.
Need a way to override this, say with env var, for performance testing like in #1970.
Ah, I recommend adding a new flag for this `FLAGS_schedule_lognames`.
Indent ) the same as the start of the line where ( is.
nit: we need to do this regardless, so `version = self.get_object()` could be outside of the `if` and used below for `AddonBrowseVersionSerializer` too.
Looking forward, from the AST perspective (not the tokenized perspective), perhaps `ExpressionNodeType.TERNARY` is better named `ExpressionNodeType.CONDITIONAL`.
Should this only be applicable for DEV?
Optional: Might be best to have a test base class
Unused block argument - user. You can omit the argument if you don't care about it.
So, right now it will work only because amp-ad is builtin, right?
can you nuke this?
This file has nothing to do with your PR.
For the first commit, the prevCommmit value is actually "null" which is the reason why this check is here. Can you inspect and see if stat.getPrevCommit() returns null in some cases ? Then, the above condition will not be satisfied.
Sort imports :wink:
Note that this line will never be reached, since `WP_CLI::error()` will stop the script.
Side note: We should make sure we explicitly say in the docs for all freectx functions that they should be written to accept NULL.
That is not correct, when the linesizes of input and output are not the same.
Did you get rid of this line when you tried nesting all `pacpy` imports?
maybe we want to name this field `stream`?
This was a previous bug, wasn't it?
Me thinks you need a return statement here.
If a model is ignored here, should `_running_models` have this model?
I don't like this sentence. (I am not even sure what it means.)
should the version match beam version? We do not have other sub-components with their own versions.
`options.tileMatrixLabels` should be `[options.tileMatrixLabels]`, the brackets indicate that it is an optional parameter.
This is a pretty strange thing to end up writing :). Is this because the List class only contains List Utils, but we want it appear as List in the UI?
nit: `Extra options to send to the process`
NB: I (IntelliJ) noticed this was unused, so killed while in the neighborhood.
Now that we aren't just adding delivery constraints to the bag for each call, we could remove this check. That means the last one called would be the one that gets used.
This should be removed.
This shouldn't change any logic at all.
Since this is part of the API we should try not to expose methods that are required to work with transports.
W1638 range built-in referenced when not iterating
the backslash should not be there. This is forcing only "new" torrents
After this change, the function name is no longer consistent with the functionality. I didn't check why this change is needed but previously the check if the node was a robot was done outside this function. So we should be consistent and keep the function as it was before, or change the name of the function and adapt the previous calls of this function.
We went through the trouble of parsing these in `cmd/podman/`. Should we pass them through as an array of `struct`s here? Then we don't have to duplicate parsing in `libpod`.
Didn't we say we only use aliases if really necessary? /cc @chirimoya
Can you move `"google.golang.org/grpc/status"` down with the rest of the 3rd party imports?
I know these were already here, but these should probably use `Uint8Array.BYTES_PER_ELEMENT`, etc. instead
Should be below the none beats imports.
Why the leading x on the tested strings ? I'm aware of a reason for doing that when the string isn't quoted (it's a bad reason, because the variable dereference should be quoted in any case, which fixes the same problem better) but I see no reason to do it when the strings are quoted. It looks like superstition, to me.
please use braces - this code is very old, that is why it does not follow the code guide.
I think this should override getMergingFactory, as the merging depends on fnCombine as well as the name.
I think the server starts in the "serving" state, so it might not be necessary to resume here.
For this repro, we want to make sure we're using system-assigned ID and not user-assigned ID
Why ? Because as you know, if the message contains '%' something without arguments, the WS will badly fail.... If you want to keep it like this, you should forbid having no args => but It makes no sense in my opinion.
Any particular reason for increasing this number?
Do we need to check IsBodyAndParamScopeMerged here? Can that be false if HasNonSimpleParameterList is also false? Is this just for ForceSplitScope?
This is the third loop I've seen for walking through RTPS Submessages in this PR alone. Does it make sense to try to make a generic function / object to capture this logic in a generic way?
I think this was due to @cjb's lack of a git commit hook.
I know this class implements Serializable, but it did work for me removing this param.
For external consumption?
Not sure exactly what this is doing but caching the tile instead of raw image might not be good.
You should turn these layer defines into an enum so you don't have to keep renumbering them :)
Why do we need `!` here and below? We already asserted that `key != null` and if it is, we throw above (line 165).
You should use the `redact_password_from_url()` function which has this purpose.
The gitrepo should be close on the middleware to open it.
May not be needed now, but this should also check `t != nil && t.Spec != nil` to avoid a nil pointer dereference. And a nit: since `len()` evaluates to 0 for nil slices, the explicit nil check is redundant.
Drive by note: We'll probably be looking for including `_ec2` in the resource name.   Trying to get better about denoting the AWS service to prevent future collisions/confusion.
This should be a ReadLock
given the repeating pattern, shall we do a for-loop? you will need to introduce a `camelCaseToDash` function in `string.js`.
I don't see where is the quantization?
Silly question: don't we still want a `finish()` here?
I would put that right below `APP_USAGE` for some reason. Static themes are not yet supported on android?
@aghassemi Added this as positionObserver should unobserve and stop calling `getBoundingClientRect` after an element is cleaned up.
Why we do the extra param but not stop video sharing if the type is video?
Should set this to a reasonable default in newContainer
Timezone is app specific and rarely different per environment `local`, `production` or `staging`. I don't find this helpful.
Do these match the errors we get from docker?
Would be better to qualify it as PurgerCycleCompleted, to identify which cycle the event is referring to.
Is this okay? I'm not sure if we treat `6.0` differently from `6`
Why we need a second repo but not use ctx.Repo.Repository?
@aparajit-pratap I guess I am not too familiar with `FunctionType` enum, do we need to consider other options here?
You can remove `BetweenPredicate` from here.
This property is not assigned correctly and never used, so I removed it.
The seed conditions should be added/managed by the `ManagedSeed` controller now, as the responsibility has shifted.
I'm not sure how to test this change. Where is this screen visible or is it dead code?
x__ looks a bit strange. How about just do beam.Map(lambda y: y[0]))
Could it cause issues for downstream deps?
I think we might be able to safely leave this as a `set()` and save the import: `sorted` takes care of the ordering for us.
While you're at it, why not remove space prior `&sin`?
I think it would be better to have this as a set to avoid duplicates. So it would be exactly the same as above type `RouteWeightedClusters`. Lets just rename `RouteWeightedClusters` to `RouteWeightedServices` rather than creating a new one.
Does this need to be a property? Could it just be something computed once?
@dvoytenko is this the right thing to do here? Or using `addGlobalMethodHandler` a better option?
Python SDK is not compatible with python < 2.7. It seems like this check was coincidentally ensuring that. I agree with your change, since we need to produce a better error message. Could you also check that `minor` version is at least 7.
c/p err (was placeholder for something now remove it!)
It is incongruous to make this field static when all of its accessors are instance methods. Also why use AtomicReference here?
Why adding this method here instead of in OperationContext?
Even though `should` reads better here, I think we should probably be consisent and use the new style `expect` everywhere, no?
should we be defensive here and check to see if there are any items after the split?
`dvc.utils` imports a lot of things. Making it lazy here as `dvc.exceptions` is imported in almost all of the commands that will affect everything (even `dvc -v`)
Nit: The parameter `t` can be `final`.
How would `QueryPlus.run` be implemented without being able to use this method?
Moving it to Cython means exposing most C structures to Cython and staring at tons of generated C code to see that it actually does the right thing (like in #891). I wouldn't do it bundled together with a functional change.
Could be formatted a little bit better?
but you can have ports be held by other processes within the system? Can we try and obtain free ports like we do with HDFSTestService?
I am having hard time understanding that. What are connectorProperties and what are unprocessedCatalogProperties.
template~~d~~ And I would list the usual use-cases instead (e.g. in an ngInclude or in a directive's templateUrl)
Hmm nice catch. But then I guess the docstring needs to be updated as it says that it returns None. Or even better ust use type annotations instead of having types in the docstring.
but `stopping_rounds` is set to 3 by defaut in AutoML?
Please use `if ctx.Data["IsApiToken"] {`.
can you add f to float values please ?
interesting, might be better to put put `new_cert[0] == '\0';` at the start of the code, because this requires the whole certs be initialized. maybe.
hybrid flow doesn't have a user in session it gets user off a token
I don't care about the warning, 'OK' is just better here
Not super familiar with context, but it doesn't seem this is used outsied the s2 package, will it be? Does it need to be exported?
There are probably too many spaces here.
Duplicated test? What is this testing?
This contains the main change for this PR. Instead of just checking if the node exists with the allowed projects, we are now pulling the projects that are tagged on the associated node.
Should we make this a generic `callable`?
Not following why this needed to be changed. If this did fix the oled, this should also be implemented in the arm version of i2c_master.
why the assignment of 0? the value of `i`, or 1 character beyond the end of the string seems to make sense for describing a line break
@timrae I think this is the only potential change to existing behavior - do you have an opinion? The specific review note is: > > Confirm whether selecting the Text Input Field, rather than "Show Answer" on a note type with both {{hint:}} and {{type:}} is correct. > > Normally, a {{type:}} field does not have this focus initially. > > But, even with focus on the text input field, ENTER displays the new card.
remove the bracket?
This gets the right answer, but not really for the right reason. It would be nicer to use ParseCIDR() on "224.0.0.0/3" to get an IPNet directly. (And I assume you've tested that this route is actually needed? The default route isn't good enough?)
If ignore_duplicates=True, should we ensure that the protos are the same?
Could you share some context around this: * Why is targets not a valid name? What does it conflict with? * Is targets2 the most descriptive name we can come up with?
We can use `HDFS_ENVIRONMENT` from `HiveTestUtils` here.
This function shouldn't be necessary.
This class is marked `Public` and `Stable`, I guess we should keep this method for compatibility.
there's always going to be SQL here, it only works for SQL databases
Would it be worth wrapping these params in a struct? This list is getting unwieldy.
Can we get a test case for no width specified? I don't understand why we divide it by 2.
Kept `SYSTEM` around for now, so that using a later CLI with old server doesn't result in a deserialization error. Not strictly necessary, but simple to do.
don't love this, but works right now and behavior probably should end up going in `AppConfigReader` rather than here or in `IdentityConfig`
Unrelated - these tests had been broken on the integration branch.
Lets change the test name too, the assert contradicts it currently which is confusing.
By application state you mean the `channel_state` (open/closed/settled) of `NettingChannelState`?
You should check `str.empty()` rather than looking for NUL in first element, and use `str.back()` or `*str.rbegin()` rather than checking element `length() - 1`.
I think it would be good to issue a warning here, since this is not a standard-case The checks introduced by @armingeiser a while ago also go into that direction
shouldn't this take some action if there is an error?
Does removing this cause any issues?
are `spec.Name()` and `volumeSource.Name` both guaranteed to be non-empty? are both already validated to not contain things like "../../../"?
chunks() give user an iterator which allows user to iterate the whole content in chunks. (Your English is better you can rephrase it!!)
You should just be able to do `&"string"` right?
Can we get a test case for no width specified? I don't understand why we divide it by 2.
It'd be great to pick one or two examples and validate that the assembly the JIT generates after this change is at least as good. It should be, if not better, but we should double-check, as some of these are likely hot-paths.
I wish we didn't have to have this in two places. Although I guess the default maxRowsInMemory is _also_ in two places.
is the case where webHook.SecretReference is non-nil and webHook.SecretReference.Name is an empty string possible / allowed? If not, TC also needed.
To avoid needing to store this, you can check that `isinstance(self.conv_proj, nn.Conv2d)`.
This string.Replace this is replacing is vectorized; this is not. Might that matter?
this is wrong... it means if err is nil, we won't return the env
where we declare this can_read_protocol_in_repository?
Lint is angry about this unused import but this otherwise LGTM! Thanks for getting this PR ready.
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
this imports logrus twice
Rename `toTable()` method to `to()`? Seems more consistent with other ios, eg. BigQueryIO and you already specify `String table` argument and the docs tells what's the subject of this operation so it's all clear. :)
No objections, but why the name change?
love this lil patch, I'd been super frustrated by the `example.com` stuff before
This (`=`) is really undesirable (and unnecessary). This restricts our ability to release a libfabric update in the future without having to go through a whole release process (i.e. package rebuild, QA, SDL, etc.) cycle for daos. If we leave this as `>` and find a need in the future for a new libfabric, we can release just the new libfabric (after internal verification with the already released version of daos) and not have to go through the whole release process for a new daos that does nothing new except change it's libfabric requirement.
is this safe?
I don't think any of the HMAC types can ever have a null key. I assume that they're declared nullable because of their base class; but we can probably just restrict these. (At least the concrete types, HMACMD5, HMACSHA1, HMACSHA256, HMACSHA384, HMACSHA512)
Should it be suffixed with Async?
Why don't we just cast to array so we support both?
Nit: since this field has a default value to fall back on we could also directly use `d.Get()` and set the attribute directly during input creation @L96
Using * in to select is forbidden. Can you name each field ?
@liggitt amazingly it is possible that when doing a specific search for a specific DN in LDAP we can get nothing back and _not_ `NoSuchObject`
There are two other occurrences in the file, can you fix those as well?
Please put this method just below `getAncestorGroups`.
Without removing this the `tunnel` linting will fail.
I wonder if the constructor is the correct place to be doing this and not say componentDidMount. Are there any potential timing issues that could occur so a re-render might get missed? I think somewhere in the react docs it had suggested to make (maybe) these types of api calls in componentDidMount to ensure a re-render is triggered. So not to say it's "wrong" but it's not something I've seen normally.
I would add these on top of the file for better readability :)
Does this do unexpected things if you redirect `stdout` to a file? Like `mame -oslog -verbose | tee output.log` which I imagine we'd want to have in some ASCII superset encoding.
@reddyashish could you simply revert this file if it isn't involved in this PR.
why there is no such parameter before?
Please ./gradlew spotlessApply
inconsistent internal naming, the var below is 'rocketHelper' meanwhile this one has 'm_' Please remove the 'm_'
we could warn and reset to the default restart policy here, not sure if this makes sense
This is the thing that would benefit from the ``_conan_collaborators`` mechanism
yay for passing ctx through!!!!
it would be nice to put debugs on the entry and exit of this function.
where is this libraryNameUtf8 used?
Maybe I missed it, but does the watcher use the case? If so, does this Stop here block until the watcher is done before we continue closing the cache? Instead of channels consider to use context.Context for cancellation. Grouping tasks and waiting for completion can be done e.g. via `unison.TaskGroup`.
Added consistent logging so we can tell what is going on with this multi-service operation. It is infrequent enough and complex enough that `info` level is warranted.
Spelling mistake here. Also we should only use plural form `Statuses` if the enum fields can be combined (i.e. intended for use as bit flags that more than one bits may be set at the same time), otherwise, this should be `Status`. So the name should be `ResponseStatus`.
Why change the coding: & copyright notice?
Sharing common args between `stage:add` and `run`.
@vsoch I think the test was asserting the output of a wrong implementation. `install_root` is not in the schema so I would expect it to be an 'object' by default, not an 'array'.
This error will be overwritten below, is that intended? It won't cause an exit out of this `mainInner`, which is unlike all of the other settings of `err`
Is there a reason behind this change?
What happens if protocol doesn't have any steps?
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
Why add `DONE`? What is the behavior of `SUCCEED` or `FAILED`?
Line is too long. [87/80]
Here again we're mixing up concepts - why do we need a group concept for this PR?
tuner or tuning? This function is also used by the Advisor.
Did we determine that this was a value-add over just using `Rebasepath`? I still think they're the same behavior.
if !0 else 0??? I do not see reason to this if statement
use `org.mule.runtime.module.extension.internal.util.MetadataTypeUtils#getId` instead
I think the indentation is wrong here
Nit: this should go between cortex imports, and not be standalone.
We need to update line 473 of class-themes.php to pass $send_full_theme_data as true. Otherwise when switch_theme is triggered only name/version/uri/slug will be synced. When we want to have all the data stay aligned.
Let's use `*big.Int` which is the canonical type for epoch and block numbers.
(style) line over 80 characters
os.PathSeparator is already a const. Probably there is no point redefining here, unless you think it makes things more clear. I'd assume people reading this will be glad to find old good `os.PathSeparator` vs our own const
Line is too long. [96/80]
Could we avoid a pointer here? 0 is the same as `nil` for this I believe.
Nit: plz make this method name consistent with the other `initialize` ones
I believe the line above should be `sourceDir` instead of `dir` as well? (named ret vals are causing confusion here - are they needed?)
Probably we should use `get_requester_from_context` in almost all places where `user = info.context.user` appear in code. All query and mutation should work for user and service account with proper permissions.
What if instead of... `#if AGENT` we use `#if NETMF`? Are there features for AGENT that don't work on other NETMF devices? I guess i'm saying could this be a more generalized NETMF port?
Call `this.getScrollTop()` to get the cached value.
This feels a bit weird, it looks like the config is global. What happens if there are two calls to this configure, with a latter one having only a partial config? For nesting, that can make sense, but what if there are two parallel configs (say two top-level, or two siblings of the top-level), then one would carry over part of the other's config. Not sure if this is really the case or how it is used, but this pattern looks very suspicious.
Our toasts are usually resource strings as well - and perhaps you could say "Check AnkiDroid FAQ" - as we can update it and we already have an entry there with 2 different answers - both of which seem to work for different people
can you call this `NetContext`; and rename the function to `GetNextContext`?
It would be better to move these lines into `org.apache.hudi.xxx` segments?
This unnecessarily clutters the API when we can use `self.fields()["name"]` instead. It also stops us accidentally using this in allennlp internals where we assume that an `Instance` has a particular key or something.
Teuchos already has a whole bunch of `toString` overloads, doesn't it? How come Utils has its own `toString` functions?
same as above we can from bc not add new typehints.
What is this % for?
You forgot to implement `List()` in `BlobStorage`.
This is the meat of the change.
Suggestion for better naming would be appreciated.
please use braces - this code is very old, that is why it does not follow the code guide.
If hasSentComplete, isn't complete always true?
Line is too long. [87/80]
Can you make this a separate sentence, so that it's clearer to the user that it's a separate statement from the previous?
I don't think we should include this in the user web hook yet as this is doesn't really provide any benefit for the webhook.
did we change this behavior intentionally? If so, seems potentially unrelated to moving SP info from the session into the DB
Why separate these lines?
OK, now I'm confused. Lint wanted tt changed to test in the other code, but test to tt here?
need check err then discard and close the body.
There doesn't seem to be any benefit doing it here. You can just post this event once in LocalJobLauncher after all tasks finished.
Won't this still leave it broken? If the context is cancelled, then this will stop extracting.
`organization` for en-US guess this is a candidate for using i18n later
thi empty line should be preserved
Or can use a star import. No strong preference.
Could you describe the other options as well?
Nit: extra newline
Please add a new blank line at the end of this file.
Can you just return `-1` or throw here if we get passed a null.
better safe than sorry :D
sorry I missed previous discussions and refactor. Was report.Error logging this message before?
I think in the first stage, we don't need to change the output of API?
Is this file here to make editable installs work (for python 2)? It is not included in the actual package (wheel/sdist), correct?
As you don't use receiver, you can use only a func instead of a method
What's the reasoning behind the hashCode change?
nit: it looks like Dict and Any can just be imported if type checking
do you want to add the curly brackets here and further down along the lines as well? Just as the file is open already.
In general I like this change, very Pythonic. However, it might not exactly equivalent to the old code - could it happen that the `user_type` key exists but is set to `None`? If yes, then the user would not be set to `'administrator'` anymore as it was in the old version.
do I even want to know?
Should we keep `uint` around as well? Seems like we might want at least one unsigned type.
maybe we should push all the args stuff to separate method for unit testing etc
Should not be here.
extra space for some reason. will remove
are those two imports used?
please change the sentence "It is not necessary." into "It is not required." The same below.
Please add `import paddle.fluid as fluid`
this should probably be `.to be(true)`
I am not sure what this does, is this the module entry point case? > TODO: investigate the odd case of a module that is both a root module/main entry point AND is dynamically imported - not sure if error handling works correctly for this - also need a test for that case. I have looked through the rest of the PR and everything makes sense, this is the only question I really have.
line: 177 `public Cookie cookie()` can also be package private right?
@deads2k with @liggitt's help we discovered we need to add this to get defaulting of the NodeConfig. He suggested I let you know as we should probably unify this and BuildSerializeableNodeConfig
Could use a reference to `hudson.Extension` which basically serves as a replacement to registering extensions.
Please add all available NodeOperationalState values in the description to asssit user's better choice.
revert. (I'm calling this out because the new indentation is clearly worse than the previous indentation.)
Why is this necessary?
Just replaced corner case value `scale=1.1` when `a=90`
Is this file needed at all? If so (as a simple example) it should probably go in the examples/ dir, under a new examples/javascript/ subdir.
`options.tileMatrixLabels` should be `[options.tileMatrixLabels]`, the brackets indicate that it is an optional parameter.
@carlossanlop we can't use cref's here since the source generator doesn't reference STJ. Would it perhaps make sense to use xref's though?
Should we return `emptyList()` instead?
Since the concurrent modification is reported during iteration, I think the problem is with `omKeyInfoList`, not `list`.
Please group with stdlib imports.
This should make sure `storage` is always local, as other options don't exist before this v96.go is executed.
why is this necessary? When you connect() you shoudl already have dispatch(), otherwise you can just compose a new mapDispatchToProps
@lilleyse this will need a lot more unit tests.
This will never be true because the option name is "`ULTRA_LCD`." That's been replaced in code with `HAS_SPI_LCD`. But note, this whole block of code (all lines from 67 to 1284) is already wrapped in `HAS_SPI_LCD`. So  I think the right condition here is probably `HAS_LCD_MENU`.
Use empty lines between method definitions.
Line is too long. [96/80]
This is a prime candidate for context-based handling, that is, "someone stopped us, so you stop too."
this change can be removed so that the file won't have a diff at all
We have a TimeZoneInfo.cs file. This `private static readonly TimeZoneInfo s_utcTimeZone = CreateUtcTimeZone();` is now declared in both TimeZoneInfo.Unix.cs and TimeZoneInfo.Win32.cs. Can this not be deduplicated into the shared TimeZoneInfo.cs file?
NIT: `string? namespaceURI`?
Could you please add a space after `//`
Can you explain the reason for adding the `class`?
Is the change from `>=` to `>` intentional?
nit: you can merge both lines above as `checkNotNull` will return the given argument
Almost certainly not going to end up being this, as we use different structs elsewhere. I would recommend `[]ocicni.PortMapping` as used in libpod
Not used anywhere - remove?
What's the reasoning behind the hashCode change?
this solves the "consumer shows isTopic" bug
Probably `attr_reader` would be enough here.
It should be okay to not to have cloud credentials for many commands. The credentials are needed to cloud commands only: data-sync, etc...
We've used `time.Duration` elsewhere (even in `BuildStatus`), why use an int here?
Out of interest, why is this being added?
Can't this just be `options = clone(options, true);` now?
i think we could even use `CollectionRepresentation` here, right?
Just mention it, why not try to keep the same style of the loop like `for j := range learners`, then use `learners[j]` later instead.
why not typehint to `string`
Oops, the intention was `term = clean_tag(term)` so that `TAGS_FILTER_REGEXP` is applied before putting using it in the query.
I have tried rewriting this a handful of times now and have spent a lot of time attempting to move this redirect into `#confirm_destroy` and _out_ of this `before_action` and have been unsuccessful in my attempts. I am open to suggestions if anyone has ideas for how to get this to work within `#confirm_destroy` rather than in the `before_action`, `set_or_sign_in_user`, otherwise, I'll leave it as is.
Please consider creating a new file `pkg/httpserver/debugger.go` and moving all debug related functionality from this file into `debugger.go`.
Remove this, since it has its own set of overrides below.
Nit: The rest of these appear to be alphabetised. Might want to keep the pattern up.
I only see this name change, but where do we use this value?
You can remove this import now.
does that mean we don't actually throw the error anymore?
Sorry to be picky but, could we also remove the corresponding import of the Parser class? Thanks @dpiparo
`return` is removed? returned value is never used?
This is probably a Go Imports quirk or something? `fmt` is already named `fmt`.
Ditto for field names.
should this belong with the actual metadata column names? may be high time we pulled those into a `enum` ? (ordering/size done in a standard way)
I think it should be ok to reuse `isCiBuild` even though it's less precise.
should we change line 1064 like: LOG.error("Exception while validating write.", ex);
The one variation we discussed on the the issue is whether to measure the target or if instead we should just look at the event's `clientX/Y`. Otherwise, another nuance here is that `target` is not necessarily an `a` tag, but could be a child inside `<a>`, e.g. a `span` inside `<a><span></span></a>`.
There are two other occurrences in the file, can you fix those as well?
Now a `utils` function has to deal with data side-effects :( But it's fine because it was already dirty in how it would edit the user modal if the `stripe_customer_id` had to be set.
The config option is "disabled bool" instead of "enabled bool" so that the default will be "enabled" (because the zero value of a bool is false).
the word `merge` doesn't apply here, since you only have one string to process
I would go with a direct return here
replaced with `email_link` because this is a HTML template
Would `s32 xx` solve the warning too?
Why are we sourcing this from the server, instead of the host? This doesn't make sense, IMO
move to the bottom of import section.
Better move this to DbProperties class
Can you move this up with OS?
This file should be CI-agnostic too, right?
Something about the order of operations here feels slightly off to me. I think it's that the `context.caches` check is happening before the passed `state` is checked. By the time we reach this pipeline step, we already know the task is `Pending` and ready to run -- but it seems to me if it were explicitly provided with a `Cached` state, that should take precedence over the context cache. Too complex?
why did you remove this?
will this break outside of notebook?
Updated the variable name because it is not only for A1 migrations.
I don't think this is valid, afaik there's no guarantee that a GCHandle's id will not be re-used
What is this % for?
By only looking at the service name wouldn't that mean that health changes in 1 node in a bigger pool would not trigger a message. Or maybe I'm confused what ServiceName is here.
Style/EmptyMethod: Put empty method definitions on a single line.
These should all be `|undefined`
will downstreams using just the acceptance testing framework without the att sources have to do this as well?
Style Guide says it prefers AND over && generally. While that guide misses out the fact that && and AND are different, and || and OR are different, we should follow the guide.
Do we ever call DeleteBridge with false?
Is it a breaking change? If yes then it would make sense to add a note about that into `CHANGES`
The meaning of `DEFAULT_CONFIG` seems to be "if a parameter isn't overriden in `config`, use the value specified in `DEFAULT_CONFIG` instead" Where `DEFAULT_CONFIG` isn't just what we specified as a class attribute, because it's been updated in `SetUpClass()`. So semantically, `DEFAULT_CONFIG` is very different from the entries in the `CONFIGS` list. It might be worth renaming `DEFAULT_CONFIG` to something more accurate?
Total nit - and no change needed - but I was surprised this wasn't inverted (`if err == ErrPlugins` {`).
These 2 constants should be in `UniqueIdHelper`
we need to do this after the `user().assert(isArray(items)` below
Similar idea, we could define a new method, same name but different types of arguments, for sliding window support.
I'd have done these changes differently, but I guess this is OK too and much less work. Since axTLS is going away anyway, fine by me. The "proper" way to do this, I believe, would be to change `WiFiClientSecure.h` to `using BearSSL`, then no changes to headers in any other files. There would be changes to all object instantiations from `WiFiClientSecure` to `axTLS::WiFiClientSecure` in the examples, and then removal of the `BearSSL::` prefix everywhere.
Line is too long. [87/80]
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
How do you decide whether the tags should be emptied or if the update doesn't contain the tags at all? Example: When you only update the "body", this part of the code mustn't be executed.
v4 should be changed
end at 47, 4 is not aligned with if at 43, 22.
Is it not used anywhere?
might make sense to just mark it as non-nullable and `= null!` to suppress warnings
Layout/BlockAlignment: end at 139, 6 is not aligned with data.each do |row| at 137, 5.
did you mean to import `errors` or `pkg/errors`?
Nit : Capitalize the start of the error message
why setting DONT_BUNDLE? this will bypass the bundler making no point to introduce a new bundler.
I think the N is the major word here and doesn't carry much meaning. How about first half and second half?
`end` at 24, 45 is not aligned with `format.xml{render xml: test_results.to_xml(only: fields, root:` at 23, 8<br>Align the elements of a hash literal if they span more than one line.
Isn't there a better exception to catch?
I think a test here will help prevent this from regressing in the future.
From reading the manpage, you also should check _POSIX_TIMERS (and _POSIX_MONOTONIC_CLOCK)
Sorry to be picky but, could we also remove the corresponding import of the Parser class? Thanks @dpiparo
nit: I think it may be easier to read to use `in.skipBytes(payloadLength);`
Not sure where and how the toString() method is used. Can you confirm this doesn't have any negative impacts or compatibility issues?
just duplicated code, dragged from the search library node is placed not exactly in the center because of that
I love the new positioning here. However, it looks like the localization for this one was missed - please add it.
Awesome, looking great. Just one more tweak: Str::contains() accepts an array of needles, so we don't need a loop.
Did you get rid of this line when you tried nesting all `pacpy` imports?
would it be possible to do this fewer than 100 times and still have an effective test? I imagine 100x is kinda slow but maybe I am wrong
IMO, `line_len` name suggests the length of a line. Maybe `lines_count` would be suitable?
What if someone sets ConnectionTimeout > Timeout or Timeout > Period? Should we allow that or is it an invalid config?
Can you add docs for this new parameter?
Why not move the rebuild_wait() after reint_server()? Do we need to wait rebuild for reintegration case?
So why does this property still exist? I don't think we're setting it correctly anymore right? here's 2 options: 1. obsolete it and have it return true if State == state.Loaded 2. remove it and cherry pick the removal to 2.3 before we release it.
This code smells like a race condition to me. If a preemption occurs right after `_sslContext` is unlocked and before `_sslContext` is disposed, and another thread disposes of `_sslContext` and sets it to `null`, whenever the thread that disposed of the buffers comes along again, it'll call `Dispose()` on a null reference. Another thing that I'm worried here is that if one thread locks `_sslContext`, disposes the buffers, unlocks `_sslContext`, disposes of `_sslContext`, while another thread was waiting for the `_sslContext` lock to be available again, this might cause issues. (I'm not intimately familiar with how lifetimes work in .NET.)
I noticed that there are now functional adjustments about chains, are they all based on epoch Instead of a specific height value? This feels like it would be more convenient, an epoch I remember is 24 hours?
Why add dirname? It does't work without change?
Currently users will no see Warnf messages by default. But this should only happen when running podman in container correct?
At least one more here
user-site should definitely not be considered local in a no-site-packages virtualenv, but it seems that with this code it would.
If we don't support it, this should also report an error message. (In error recovery mode, returning the upper bound sounds fine.)
Should there be a call to `set_repo_permissions` here too?
import * is not allowed in Beam. Please import classes individually (configure your IDE settings accordingly if you have to).
Agree with @Suor . Let's remove this, and use `get([info])` when we need it.
This isn't used yet. Once a search like `FeedContent` (uses multiple models) is finished, it'll leverage this by adding `db_count` to `Search::FeedContent` with logic to return the appropriate count.
I think you will also have to inject this into the ruler and the distributor. The ruler runs a separate ring for rule evals and the distributor runs a separate ring for HA. Or are we going to assume people will set those rings up on separate ports/kv stores?
<!--new_thread; commit:832655fe9210190bb88183127c4aece1a5e7549e; resolved:0--> What is the interaction between `input_*args` in the constructor and the `additional_*args` arguments here?
do we need to return the whole stack as the result? that seems a bit much to the user. how about just the message as before and log the exception?
Call `this.getScrollTop()` to get the cached value.
guess that was a unintended change
I don't like this change either :smiley:
Teuchos already has a whole bunch of `toString` overloads, doesn't it? How come Utils has its own `toString` functions?
May be possible to remove when changing the approach to provide the Service to the MuleContext
Do you have an example of a situation where this would be used?
Let's try to keep the imports alphabetically sorted
You're worried about the index values that have been written up to this point? I think it's ok. Since they're attached to a lease, and a lease has a max TTL, they'll get GC'd eventually.
Space inside { missing.<br>Space inside } missing.
I don't think this is valid, afaik there's no guarantee that a GCHandle's id will not be re-used
Probably a mistake before, but worth checking ... Could this have been intentionally hidden ?...
Do we need any new tests to cover corner cases or new code paths?
why did this change?
You shouldn't need this file. You're registering the oid already in discovery.
I would avoid environment dependent code in unit tests, it can interfere with another process or test. It's better to mock `canBind`, ie if you want to check the class doesn't provide occupied *1024* port, make the method stub of `canBind(1024)` return `false`.
Not sure I follow how this helps since it gets set to true the same time we set connections[id] ?
Const already available under CasProtocolConstants
I assume we can't use `#testing` here because this directory isn't part of the runtime, and isn't babel-transformed, minified, etc. Instead of disabling the lint rule like this, I think we should introduce an entry in `build-system/.eslintrc` that completely disables `module-resolver/use-alias` for all of `build-system/`. /cc @rcebulko to keep me honest here.
nit: you can merge both lines above as `checkNotNull` will return the given argument
TODO @chaosma - explain rationale
Shouldn't this also be `LocalizedAuthorBehavior`?
hmm, so this would happen if the action already has eval_labels? this is confusing to me because the above `if` statement checks if there are `labels` in the action. in which case would we have both `labels` and `eval_labels`?
I think we should be doing only 1 sql query when `normalize_emails` is enabled
Question about this initialization: - If you pass `NoResult` or don't pass an argument, this state has `NoResult` - If you pass `None`, this state has a `Result` of None - If you pass any value, this state has a `Result` of that value - I think but am not sure that if you pass a `Result`, this state gets a `Result` whose value is the passed `Result`. I think maybe if you pass a `Result` object directly, it should get assigned to `_result` directly?
I was going to suggest `char.IsAscii(char)` but it's private for some reason (don't know why, seems like a reasonable API). There is `Rune.IsAscii(keyChar)` but I think that's less readable
Let's put all this in a function in `_setup_helpers.py`, e.g. `fixup_for_rtd()`
I am not sure if this is a tool. It is located on the tools page, but it is an indexing thing...
This class is missing the changes to use `CertificateAuthenticatorManager`
Why lower this?
Why both `DateTime` and its `\`-prefixed version ?
Shouldn't this be `endOffset - startOffset`?
What is the difference between line 148 and line 149?
typo: "in the in the" -> "in the".
You shouldn't need to import this, it should already be present
Couldn't this be simplify by just `return name == "readme" || name[:7] == "readme."` and remove if len(name) == 6 bracket ?
Should this be converting `""` to `null` or is something else doing that?
Dont want to deviate this PR in to some other direction, but are we okay with this naming or change it to something like `RunOnce` mode?
we might want to find another name here. `rotation` suggests that the input is capable of rotating the file by itself.
If we intend to issue a deprecation warning for `lr` (which is fine), we can issue it unconditionally, without additional checks on the type.
Is the final set here immutable?
Make sure that this imports the right, new `Button` component instead of the old one (which was a styled component)
I don't see any usage of Cartographic in this file.
NULL check not needed.
Need to communicate to users that the agg function is "first"
The WelcomePage was rewritten in React i.e. it was moved to the folder react/features so it looks to me like the source code bellow needs to be rewritten to take into account that now the React App is abstracting the relation between window.location and the React Component rendered at that window.location using Route (an abstraction similar to react-router's).
Do we view these anywhere in the app? I tried searching for views but couldn't find any. Will not having a user break any assumptions we might have made?
I know this was here already, but throwing `Exception` - really? above too
I think my only real question about this PR is if this should maybe be `watchedServerTypes` or something and take a list of server types to watch instead of just a boolean
Ideally use `parseUrl` from url.js and compare the protocol to http or https.
The drawback is that the final list may contain less than five entries. The problem is that `arguments` is a JSON string like `u'[{"access.group": 50002}, {"users.userprofile": 5497308}]'`. I want to check whether `5497308` is in `group.users.all()`. Ideally, I'd like to do something like `.filter(_arguments[1]__in=group.users.all())` but of course that doesn't work. Is there a way to do that?
Should mention that remote locking happens in `LockAction`, just in case we remove `LockAction` and forget to update this.
This should move to the gobblin import group below.
Don't we call it the service?
you shouldn't even need to add the extra arguments there
Can you please add a link to angular.copy?
Ah I just noticed that I named these variables with a capital first letter -- do I need to rename these to `hostCertFile` and `hostKeyFile` to be idiomatic?
This change seems unrelated.
This should not be `ContainerBuilder` but `ContainerInterface`.
rename variable to SELECT_ALL_JOBS_STATE_SQL?
please add a log line here. It will be hard to debug if someone wrongly shuts down the exec.
@aghassemi can you confirm this is an `Error` object?
The change in this file was related to a change in a test which has since been reverted. Should this also be reverted? I don't see a need for it, but let me know if I'm missing something.
I'm not sure why you made this change.
Should be `FIELD_CONTENT_VALUE` to be consistent with the actual name of the condition.
Converted from deleted *.rec test.
Instead of a `# noqa` here I'd prefer to define an `__all__` that has `Index` and `PyPI`.
missing Upgrade451to460 class, I'll add that.
Just reordering stuff and adding googlenet in the list.
is this class actually used? I thought this was not being used yet until txPool integration happens.
should this be a singular name, `OnboardingController` ? It's declared as a `resource`, not `resources` in the routes file
Please fix the format of the imports. There's an empty line missing before `com.google.common.base.Charsets`, and another one before `gobblin.configuration...`
This should iterate over the email addresses and create a mailer for each one.
I think there might have been a reason why 'none' got special treatment.
It doesn't make sense. Why would we want to check if `finished` is true and then set `finished: true`?
Please always use the `m` prefix for member variables so that we can easily distinguish them from locals, i.e. `mFutureLoadingModel`
I am curious about the second part of the condition, where you skip split_topic small actions. I understand you do this to skip the small action that is generated right before this method is called. I think there is an edge case here if you move some posts two times in a row. First time you do not select all posts, do the action and a small action post is created. Then you do it again, without selecting the small action created previously. The system will think you selected all posts, but no, because you did not select the small action from the first move. I might be wrong and even if I am not, I do not think it makes sense fixing it, unless you find something more serious.
We _expect_ to get handshake failures here, so consider logging this at Debug or Info level.
This is used when `Watch3DView.xaml` is bound to `Watch 3D` node.
is configFile still being used? Ideally should be removed.
This line can be removed now?
Even though the `@memoize` decorator is on this function, it's still getting called twice, like python is creating two different instances of it. Don't really understand it. But we also don't need to call it here.
We can't change an interface, the backward compatible solution is to add another interface that extends the first one. We did this with the ContextAwareDataProviderInterface
nit for clarity: "and resume the animation or video"
E501 line too long (124 > 120 characters)
cast to ArrayType
I'm not completely following the conversion process here. Can the test be modified instead?
hasExclusion() -> hasExclusiveOptionals() ?
I would make _prepare_write_metadata a private function like you did for _check_event_id to avoid adding a new method. `metadata = _prepare_write_metadata(self.metadata)`
Would you open a new issue for this?
Maybe we should call this `_lonelyCall` instead then? We could also encapsulate the check in some `isLonleyCall` function, IIRC mobile also performs this check.
I don't like that change - might break many spells using that effect. `SPELL_EFFECT_HANDLE_HIT_TARGET` might be "too late" hook for triggered spells.
Are these changes (to util_test.py) intended ? Looks like a merge issue.
The point of this field is to hold weights, so weights should be part of the API for each one. The annotations are tangential to the point of the PR.
What's this line used for?
NIT: `string? namespaceURI`?
This is the only real change to this test. The other tests are the go simplification.
Move up to k8s imports.
This doesn't looks correct.
Missing long conversion.
Can't you drop the entire loop then?
Can we pass location here instead of a table reference (so that we don't have to update this function when we support queries) ?
It would be more idiomatic here to use raw string literals (which are escaped with `` ` ``) or to put each string literal on its own line and concatenate them, but what you have is simpler. You might file a follow-up issue to track generating the more idiomatic code.
Was a test failing for this? If so, which one (spec failure message plz). If not, then this could do with a spec given its hand-written sql
Isn't this implied by the ordering of `ss` in `newPriorityQueue` can this change after the fact?
This class is missing the changes to use `CertificateAuthenticatorManager`
It's a detail, but `to_global_id` can be used through already imported Graphene: `graphene.Node.to_global_id`.
Please create a method that does the job instead of repeating the same code.
Moving it to Cython means exposing most C structures to Cython and staring at tons of generated C code to see that it actually does the right thing (like in #891). I wouldn't do it bundled together with a functional change.
wouldn't private static make better modifiers?
To discuss if we deprecate this method, as we are not using it anymore.
the `with` statement calls this automatically, so we can remove this one here
do we use zap in production?
How about using more narrow client? I'm shooting core (without looking at code), which should suffice here.
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
lol, i'd appreciate if you just add your name rather than removing mine.
Do we want this flag to be this specific? Why not just have a boolean that enables/disable collision detection completely?
Why a function rather than public field?
is configFile still being used? Ideally should be removed.
Is there a bug report issue for this?
would it be possible to do this fewer than 100 times and still have an effective test? I imagine 100x is kinda slow but maybe I am wrong
similar here with .get()
I think the N is the major word here and doesn't carry much meaning. How about first half and second half?
getObject() of subclasses of this class could return null, so just returning 0 here should qualify as "replaceWithDefault", so I think needs checks
No need to literal cast.
Make these a single `vec2` uniform. Setting individual uniforms - especially for this particle shader - is one of our bottlenecks.
consider merging both lines
not me, but goimports + vscode I've seen this before at other projects and is not usually a blocker, but can remove it if that's a concern of some sorts.
The `in` check shouldn't be needed.
Extra empty line detected at body beginning.
(style) line over 80 characters
nit: should be `&&` rather than `&`?
Prework for next PR. This makes `Collection`s more ergonomic when empty.
I am concerned about removing assignments in initializers, like this and by_dir.c line 231. The project has the habit of initializing things at declaration, to avoid "maybe uninitialized" errors, and removing these two seems like going too far. Especially since these are, as you point out, false positives.
Please throw a NotFoundException and move this to `rawContent` instead.
Is this a linefeed change here? I think this whole file is DOS \r\n formatted, but your patch only has \UNIX n. For now, could you make sure you match the linefeeds of the rest of the file (yes, I hate DOS linefeeds, too, but we need to be consistent in any particular file).
Is this this change accidental? This is the older version, which I think implies the file is using the previous format.
I have no clue why the confirmation here isn't working, but if you could add one in the pack that would be great!
This looks like vestigial debug changes.
`_vendor.toolz` also pukes out a `StopIteration` -- this should be fixed by replacing it with `toolz 0.8.1` or above
Do we have to deactivate the test in here? Can't we have them moved to nighly if required in the `test_FluidDynamicsApplication.py` file?
I think it should be disabled by default at least until all hypervisors tested working properly
this line is over 80 chars long; please shorten.
mmm i'm not sure about this
None is the default default for .get().
this is `array{namesFound: array<string, true>, packages: array<string, BasePackage>}`
Is there any requirement that the password is populated? If the `authType` is `BASIC` but the `authUser` is empty, basic auth won't be enabled but no error/warning will be communicated to the user.
None of these keys belong here, but that's a separate PR.
If we're expecting output in order to test it is likely that this should be erroring the test before continue.
You don't need to stub site settings in tests. It's better to do `SiteSetting.embed_link_to_top = true`
see above: by not using constants, we open ourselves up for simple typos that lead to unexpected behavior; especially so in rarely used code paths. Also: `'onchain_unlock'` is not in raiden/transfer/mediated_transfer/state.py `TargetTransferState.valid_states`, as far as I can tell.
is `email` already downcased here? I wonder if it should be `single_sign_on_record&.external_email&.downcase == email.downcase`
org.apache.dubbo.common.constants.CommonConstants has been imported here, choose to import static org.apache.dubbo.common.constants.CommonConstants.DUBBO or modify PROPERTIES_CHAR_SEPERATOR to CommonConstants.PROPERTIES_CHAR_SEPERATOR
Just an interesting observation but we were calling `cannotSee[username]` in line 55 when `cannotSee` is an Array. I think we fixed that line now that this is an object now.
What's the purpose of this change?
Would it make sense to disable this table from the SQLiteDBManager constructor in `osquery/osquery/sql/sqlite_util.cpp` when compiling on Aarch64?
nit: although we do the rename in a macro, could you change the statement at the end of this loop to FOREACH_BLOCK_ALL?
@smarterclayton did you want this struct reworked also?
Binary incompatible, AbstractSubTask is public
in order to make this check valid, it is critical to add a precheck above to ensure the target_column passed in must not be a list.
Let's try to keep the imports alphabetically sorted
Is it a requirement that the sections have different names? Can we detect that here or they will be mixed together by the ini library if the user repeats names?
Are you sure about this one? We always name our returned arguments
So, the actual practical difference here is that `Yield` will always be an async continuation, but `Delay` might not be, and likely isn't since the delay amount is so small? In that case, would a larger delay value have a similar effect?
nit: remove spacing change here
nit: could be interesting to have a more generic `appendClauses()` based on a `Stream.of(..).filter(..).collect(..)` solution
I still hate this code. Can we come up with a better way to shutdown? This is too much magic and reliable on the correct binding/scope of the bus.
deleteNode() is called from watchNodes() and this will break the normal case when the node is deleted. Also didn't like the fact that addNode() assigns the subnet but the deleteNode() doesn't revoke the subnet.
Why the change from `s_crt` to `crt`?
please also add it for the $desciption parameter in `__construct()`
- It would be much better if you fixed this by adding a proper empty constructor. - AFAIK `char`'s size isn't necessarily a byte, you should use `u8`. - `sizeof(MapNode)` would be much clearer. - Since you aren't using any of `new`'s features you might as well use `malloc()`.
I think there might have been a reason why 'none' got special treatment.
minor: imports in wrong order, should be mule, java, others
I guess it's safe to overwrite here because this is the first step?
Should this value be computed also? I don't care if we do it now but maybe add it to the issue if you didn't.
These two files need to be named `mk1.[ch]`, and the folder name needs to be lowercase.
That seems to be unrelated.
No please dont. This is a test case, that we took from apsche bookeeper
Same as above, the fallthrough for the `DropdownField` implementation needs to stay for the `TextField`.
Good catch - I missed this in the code review.
I think we should **not** add a new API to the Python interface. The new API seems created because there are some implementation difficulties that we have. But from the user's perspective, a single `optimizer` concept seems to suffice. We probably should not introduce two concepts: `remote optimizer` and `local optimizer` to the user. Curious how hard would it be if we keep the current Python interface, but convert the parsed V1 proto to V2 proto internally? (seems you have already written most of the code to do so).
The `UserSubscriptions` the `User` is an `Author` of.
I'd not add this field here but rather give the health check this single boolean.
Was this call idempotent before? If so, is it still? I don't know from the top of my head where this method is called, but it might be good to double-check.
Out of interest, why is this being added?
Seems 0 is sufficient to specify "no gas limit" why add null as well?
@00Kai0 Should be `azure-mgmt-core`
This won't have much of an impact since the other time functions like `timelocal` implicitly invoke `tzset`-like functionality when called.
Missing an **r** in mdserver (same with "bserve" below).
We should keep the old name here and rename the new config `_invite` or something.
Hmmmm, is this really needed? You check whether an entry has been read or not by looking into the InvocationContext. If the entry has been read, the context should have it as one of the looked up entry. Also, anything you add to a command is generally because it needs to be replicated. Do you really need to replicate this information to other nodes?
capitalizing `ReleaseNotes` here indicates to me that this is a class, but it looks like its actually a function called getReleaseNotes. I'd redo this as `const releaseNotesGenerator = require('./release-notes/index.js')`
Remove the `=''` since the default `basePath` is derived from the url.
@lukecwik also found out that this conditional would throw an NPE
did you mean package "errors" or package "github.com/pkg/errors" :)
niiiice -- will we want to remove this redirect at some point ?
what is this other string used for? anything?
This is only thread-safe if `threadRef.get() == currentThread`, so this will not work. for the `pushLater` case we need to use a count that is kept in the `WeakOrderQueue`.
Why not `intval($result[0])`? I would prefer this!
Why is topology and status always 0? Do we need them in the protocol then?
this does make it so that all future authz informers will end up using JSON. just something to think about
Should be server?
change to `jetpack_sync_save_user` action.
Shouldn't we update the image object in etcd if there's such a metadata change? That way, we could allow for easy mass migration if desired (let the user get all the images).
I think there is one other place we use the descriptor (for the return value in locals). Should that also be getInternalName() and/or use describeType?
I think to remove `isolation.level` here and leaves the configuration to users changes the current behavior. Currently users care nothing about this kafka configuration when using a higher version of kafka such as 0.11. By removing it, they need to set this property in supervisor spec, or the default value, which is `read_uncommitted`, will be applied, which may be not what they expect. If this is the root cause that limits the Druid to use Kafka lower than 0.11, I think maybe we can introduce another property, as the same way as `pollTimeout` property does, then we can unset `isolation.level` property according to the value of this new property. Only those who want to use Druid with older kafka need to set this new property.
should return error, not just nil
IMO, `line_len` name suggests the length of a line. Maybe `lines_count` would be suitable?
Can you explain why we don't want to carry this over to `vlabs` (and by extension, to persist it into the `apimodel.json`)?
This line should be removed. You are currently in the "Probe" class.
Sorry! Not sure how I missed this
This property is never referenced, therefore, removed.
Nuke these debug logs and the otherwise unused line above.
This is to protect from broken .equals() implementations which don't check for a null param ?
I don't think we should put AD specific code into the `LDAPEntry` and `LDAPUser` objects. How about using the `AccountStatus` instead? That makes it independent from AD. We could extract the `AccountStatus` into a separate enum out of the `User` interface to make it a bit more generic. What do you think? I also think we should only have an `accountStatus()` method in `LDAPUser` instead of also putting it into the `LDAPEntry` object. The `LDAPEntry` object is supposed to be generic. We can move the `userAccountControl` parsing into the `createLDAPUser()` method in `UnboundLDAPConnector`.
This might fail due to py2-3 differences. Maybe import from ``six``
Should this log message include `err`?
I don't think we can write a single usage string that makes sense for all the things `expose` handles. Even in the route case, explaining target-port is a little crazy... a name is the service port name, a number is a container port number.
new count is `367` but let's not be precise so this doesn't happen again.
I don't understand what's going on here. This function returns `str` (a type) if `x` is `None`, but `x` (a value) otherwise. That doesn't seem right. And why is it needed at all? The logic in `utils.py` already handles the case when `x` is `None`.
We should not pass out the `DynamoView` to client code like this. We should make the property immutable by only expose `{ get; }`. My suggestion is to leave this property out until we have more specific API requirements. It's also easier to add API's then to remove them. :)
Please leave the extra brackets here - It's not as obvious what order those are executed
If we proceed with this fix, should we change this to `if html.blank?` to catch the cases where `html` could be `nil` as well?
Should this be `===` 0 instead of `> -1`? That way a path like `/foo/bar.js` won't incorrectly match `/prefix/foo/bar.js`.
Given the changes we are introducing, I would rename this method to `root_target_name`
I don't like this sentence. (I am not even sure what it means.)
why are we changing this one?
just nothing to be tested?
NIT: "No longer sent from" read a little weird. Did you drop something like "the CLI"
Need to communicate to users that the agg function is "first"
@deads2k @csrwng seems like not needed anymore... this was confusing detection of "real" remote docker....
Maybe just a nitpick, but this is used outside the `BaseCPUCodegen` class - should it be `materialize_module` (no underscore)?
We could indicate that metadata is trimmed. May be..
I don't see where this method is used... I think the change can be reverted.
The old code still reads this table as a fall-through right? It may try to establish a connection to the table....which would go very poorly if dropped WDYT of moving this drop into a 3rd PR?
I would avoid environment dependent code in unit tests, it can interfere with another process or test. It's better to mock `canBind`, ie if you want to check the class doesn't provide occupied *1024* port, make the method stub of `canBind(1024)` return `false`.
Curious: why isn't this needed in master?
Something to consider in the future returning None or Nan might be preferred since it avoids constructing a large zero tensor, saving some time and space. Just curious, why it works before this PR?
LGTM, although this line looks like dead code (probably my fault) - should be safe to remove, but I'm surprised this doesn't trigger lint.
I hate calling this an init binary. It is really a reaper. But this is probably what Docker calls it. :^( Does it forward signals to all of the processes within the container? How does it keep track?
if feels like an output can decide if it needs to be cached or not
move bracket to new line
Amazing   Let's also remove it from our dependencies. You'l want to remove it from `Gopkg.toml` and run `dep ensure`
can you double-check this doesn't kill the convai2 eval_ppl? it might get angry since we try to load the model params into a subclass of the model
Maybe it would be a good idea to create a normal `if` statement instead of a conditional assignment . The amount of condition is at least here, we could increase readability. What do you think? @szewczykmira
usually i workaround this issue by just putting `-` last. That might actually be easier to read too, given the`-` and the em-dash smush together .....
I don't think this is a good idea, especially that `Account.__init__()` does way too much (or in other words, has too many dependencies) such as accessing `Application.getInstance().getPreferences()`.
isn't it weird that we're using the configuration here instead of the settings?
"Currently, The type of item in fetch_list should be LoDTensor the program is compiled" Did you miss "when" ? It is better to be "Currently, the type of item in fetch_list should be LoDTensor when using CompiledProgram"
Another thing we should consider is that when we clear the threadlocal's value. Should we keep them in memory all the time?
Why are we sure that it is non-nullable?
Shouldn't we add support for this only on the new system?
I guess this test could be "smartly" merged with the test above: `if (!(o instanceof RegisteredServiceProxyPolicy)) {`
Should this be converting `""` to `null` or is something else doing that?
Maybe it's time for a CeWsModule class ? : )
You have removed the echo. I suggest this: `echo " $name";`
Is this import still necessary? I don't see we using describe any more here.
this is NOT an aliasing problem, because all accesses have been changed to the `s3_helper` method
I probably missed a review or discussion somewhere, but the original version of this change sets the dbuf state at the same time as generating the trace events. Why did that change?
combine these to avoid needing to repeat the search (if UPDATED)
Call `this.getScrollTop()` to get the cached value.
Even if the bundle does not have a BSN, shouldn't it get a startlevel? And be started?
Suggest deleting these no-op initializers
Please put it back :)
Sorry to be picky but, could we also remove the corresponding import of the Parser class? Thanks @dpiparo
@choumx I understand why we have quotes around `'a4aProfilingRate'`, but not why we have quotes for `'isTrafficEligible'`. The letter should be referenced against `ExperimentInfo` typedef, right? /cc @erwinmombay
:+1: I'm glad to see that this was as simple to implement as I had hoped. This will make more complicated S3 egress setups _much_ nicer, especially for any organization large enough to use multiple accounts for things like billing, per-department access control, etc.
now you see why it's better to trust the backend in your previous ticket about `base_models` ;) I didn't even think about current ticket at that time.
Non blocking, should we be slightly forward thinking and emit a warning if not `1` or `2`?   This is a case cause for instrumenting core as it would be nice to detect if/when unexpected versions start showing up.
nbsp should be replaced with a regular space
do we need to flush the disk?
Future work to drop the need for this...
Might be more readable to give these methods nice names, like `caseInsensitive()` and `caseSensitive()`. Small nit though.
This is already implemented somewhere. Is it possible to just reuse that other code? What if we want to log in with oauth or something?
Why does Prettier not allow me to put everything on one line? It's annoying.
nitpick: The transaction will not "always fail" because of lack of funds, once the account is funded the transaction will succeed. Could you change the wording in here and the logs?
Is there a reason the existing code is using `|` instead of `||`?
Is ctime even used here? Seems like you're only using chrono
Here (and elsewhere), "inestable" should probably be "not robust" (assuming that's the intended meaning).
`forName` (or at least `for`); `of` is suitable when creating value-based object and providing the value for it, and not suitable for lookup-kind operations
Can you also please change these examples to have just one update function that checks if `_sp` is defined or whatever instead of having the separate `_update`. The division can be confusing. I initially was also going to say to only create `_pickId` if it is a pick pass; however, since this is a lightweight object and a simple example, I think we are OK without the check.
Instead of registering in `JerseyService`, we can also use register it from the `ViewsBindings` module by using the `jerseyExceptionMapperBinder`. This keeps all views-related registrations close to each other.
Do we want this flag to be this specific? Why not just have a boolean that enables/disable collision detection completely?
This was very weird, it seems the `text/plain` was just being overwritten by json (later in declaration)
So is this immediate SIGKILL, or does it use the normal stop logic (SIGTERM -> timeout -> SIGKILL)?
It would be great to know when we could use ``NO_DEFAULT_PATH``, because we fully know this is a framework that lives in the Conan package, and forget about all the system paths, and when it would be a system framework and then it could be found in other locations rather than in the ``${CONAN_FRAMEWORK_DIRS${SUFFIX}} `` Now that we have the ``system_libs``, this could be the same for frameworks? ``system_frameworks``? Wdyt @danimtb, @jgsogo ?
nit, we probably should be shooting for the dependency to be on an interface where it so happens that `AbstractProAi` implements that interface. To get there we may have to think a bit more about the modelling of this one AI and which interfaces it makes sense to have. To another extent, we should perhaps also consider 'interface segregation principal' and how many interfaces we would need so that a dependency like this is only given an interface where it actually uses everything that is passed to it.
This is good for now, but just FYI: it'd be even enough to just check for element name - the most likely error is confusing element's for another. If this set goes out of control - we can simply move the assertion for "unknown action" into the form's action handler itself.
you could simplify thing by just using `return code < 200 || code == 204 || code == 304`
TODO: This test should be moved to `esclientleg`.
why is this not needed?
That was correct before, no? `Instance` is the type, so `Instance`s is many of them?
did you mean package "errors" or package "github.com/pkg/errors" :)
Can you please reverse this and call it `HIDE_INVITE_MORE_HEADER` defaulting to `false`. Otherwise those updating but not changing interface_config.js will get different behavior.
Sorry, my bad, just edited it again to make it pass )
How about using more narrow client? I'm shooting core (without looking at code), which should suffice here.
do we need derived actions? can't we just do @game.add_x_action(action) def add_x_action(action) raise if @loading
Get rid of this field completely so we don't accidentally mess this up.
Layout/EmptyLinesAroundAttributeAccessor: Add an empty line after attribute accessor.
Maybe `UNDEFINED` will be better
I don't think we can remove this, otherwise daos_perf will report data corruption if overwriting a large single value with a smaller value.
I think this is needed because in the switch case in for loop, there is no default case so there is possibility that `return false, 0` might not happen so you may this here.
shouldn't above also be excluded for `oauth2` authentication type as it's managed by OIDC provider and should come as part of `roles` attribute
There is no need to add this. There is 17000 files and adding this on the 17000 copyright header will generate a lot of useless changes. Also having copyright credits before gnu gpl licence is a common structure of header.
Should this only be applicable for DEV?
Line is too long. [91/90]
Same suggestion from above about `--no-url`
$_SERVER['HOST_NAME'] is not a valid variable, so you have effectively deleted all this code afaict. What do the different variables contain on your server?
I might be a plank, but surely this avoids using up memory as the body object is copied by reference here, rather than later needing to deserialise again and creating a new object in memory.
Not sure we need to export this?
This was really difficult to debug. This is more readable as well.
This should be reverted.
I don't think the "string" part should be removed, because otherwise it sounds like the expression is not an expression which is confusing.
Is this really a good idea? Being able to overwrite a model has potential to wreak havoc, and building things that depend on it sounds like a workaround for some other issue. I think @couriersud had it right previously in preventing models from being overwritten.
you don't need the `L""` here, you can remove it.
This is starting the network?
this should be `blockOnConsent`, the attribute is `data-block-on-consent`
I don't think this is valid, afaik there's no guarantee that a GCHandle's id will not be re-used
I don't think it's right to check `Object.keys` here-if the user passes the empty object, that's an invalid template, and that case will get caught by the `!item.label && !item.role && !item.type` check you have below.
You can remove this import now.
I have no problem with the namespace, but is it neccessary? Will there be other types of `GdprDeleteRequest` and we want to avoid a name clash?
We'll wait for #4410, then this will turn to `var heatmap = new Chart`
Can you please open an issue and reference it here?
drive by? Not sure if this is a problem from our style guides (I would assume not given that nothing failed)?
This is not allowed - pkg/monitor may not take dependencies on deep test packages in general.
I generally agree that the tests are duplicates. However, the removed tests did check that `p.Validate(data)` returns an error. Removing those tests and changing this check to `if assert.Error(t, err).. ` we lose the check that the validation fails.
What is this used for?
`r` is declared as a `const void * const *` but `OBJ_bsearch_ex_` returns a `const void *` and the only interesting usage of `r` casts it to `const char **`. Surely we should either declare it to be the same as the return type of `OBJ_bsearch_exe_` or the same as the type of where we use it.
This isn't related to Devise authentication.
Updated the variable name because it is not only for A1 migrations.
:nit: class fields should come before methods.
If `RouteMetadata` becomes a `dataclass`, so can this.
Also, what about this variable itself? Should it be removed as well?
Best practice is to use `unique_ptr` for objects that need to be managed by pointer, yet have local scope.
did you mean to import `errors` or `pkg/errors`?
did you mean package "errors" or package "github.com/pkg/errors" :)
Would it make sense to put the certificate in `GenericLoopbackOptions` and make use if it in other loopback servers?
This seems a little out-of-place on the `Events` interface. Should we instead be thinking about an `OnPlanCompleted` event or something that passes some state, including the set of resources that were pending replacement but were never replaced?
given we don't really 'replace' existing params, we should just call it `extraParams`
what if we move this check in the policy or wrap them both in a helper?
previously, it was legal to call `VerifyIntegrity()` on a null snapshot. This seemed wrong to me so I added null checks around calls to `VerifyIntegrity`.
Adds the event feed to one of the services that are called from authz during a project update.
what haopens if value is false?
Why is this needed? (do we needed this elsewhere?)
is there a reason to patch istio-system namespace here? what is this used for?
I see several classes with this directive, I am not familiar with how/when this directive works and this code will be compiled, but i see it needs annotation if the condition passes, shouldn't we annotate them especially for the public classes?
This class doesn't look like it's serialized but did you check for reflective access? I got burned once in the RMI area because there is some utility class that assumes class fields are always prefixed with `m_`. Not sure if `IGame`s are affected or not. You might want to try to play a network game between this branch and `master` to verify.
I would not do this. It can be a significant API change. Don't you think it leads to less changes if you keep it False and just change it in Epochs + Evoked? cc @Eric89GXL @dengemann
shouldn't you apply `preg_quote` to be safe ?
@snehachhabria Thanks for fixing these descriptions!
It looks like all the type arguments are internal, if they are we'd be safe passing them as their enum instead of an int. Less checking for the compiler. Definitely not essential and I could easily have missed something.
Does `RealWorldContextTests` need to be referenced here?
"the value of the dictionary key is not a single array, but another..."
This is in the wrong module, since it does not have anything to do with numeric values or properties. This could be in `bokeh/core/property/primitive.py` Or perhaps `regex.py` could be re-named to `string.py` and then both this and regex could go in the `string.py`module. I like this idea, tho we would need to leave a deprecated `regex.py` as well, to maintain back compat.
Is this causing a test to fail? I feel like it shouldn't be needed, but I could be wrong.
In this case because there's only ever one boot disk, we can add `ConflictsWith` in the schema (so you'd put `ConflictsWith: "[]string{"boot_disk.0.disk_encryption_key_raw"},` in the boot disk kms key section
Nit: plz make this method name consistent with the other `initialize` ones
forgot to remove?
Device_id would be the correct field to check
This is in the wrong module, since it does not have anything to do with numeric values or properties. This could be in `bokeh/core/property/primitive.py` Or perhaps `regex.py` could be re-named to `string.py` and then both this and regex could go in the `string.py`module. I like this idea, tho we would need to leave a deprecated `regex.py` as well, to maintain back compat.
This test now calls the invoke twice and moves the registration before the second invoke. This is not exactly how it would be in real life since containers are usually closed for modification after the first resolve. I figured it is good enough for this test and the following as well.
This test isn't verifying what its testing, it just checks the process didn't crash after pressing buttons. It doesn't check that the buttons do what the test thinks they should do. In other words the next time the new Dialog form is updated this test is probably going to break without reporting a test failure. Should I define a tab order enum for this dialog? This enum doesn't feel great to me since it doesn't really make any sense (the enum will break just the same as a constant if tab order is changed in the designer without updating it). I'd have expected the test helpers use accessibility APIs to (at the very least) verify what form is currently open.
Two existing issues in this attribute. 1. It is odd that the ctor is below the properties. 2. We don't store the `Type` ctor arg in a property anywhere?
nit: do we need this newline here?
What about making sure that these are expanded enough so that they are proper types (but may contain type alias references)? Not sure if this would be worth it, but it might let us avoid a bunch of `get_proper_type` calls elsewhere.
The idea is to use `dummy_context()` instead of `None` to avoid some special cases.
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
Do you know why `wp-i18n` was a dependency here? Looks like admin panel is using `import { translate as __ } from 'i18n-calypso';` instead.
Lets link to the globalize source in the commit message to show where this was taken from. Use symbol keys for the attr names if possible.
Move the method above in alphabet order
let's simplify this to `hash(self.param_id)`.
We only want to match on rules of type node.
We're not linking to `FrameState` because it's private now. @pjcozzi does that mean we should change these callbacks to not take a `FrameState` anymore? The intention was to allow the alpha, etc. to vary with time, camera location, etc. but I'm not aware of anyone using the feature.
We don't need this, right?
Use empty lines between method definitions.
I would prefer another way to fix: Not having entity encoded the value returned by LibStatus. Because this value can be stored in memory, used by other output than HTML, etc...
Metrics/LineLength: Line is too long. [123/120]
Although the previous env var had a valid value, it was a unique ID within GitLab's environment and so it looks odd when rendering it in the UI. The `CI_PIPELINE_IID` is an instance ID within the context of the current GitLab project and is expected to be a more sane number and not something like `406044007`.
Let's add # cython: language_level=3, since this file will be cythonized.
I guess we are decreeing that this is a suitable test for TLS1.3 by virtue of having a given SSL_SESSION object (for TLS1.3) always represent the most recently received ticket from the server, so that the SSL_SESSION would correspond to (e.g.) different keying material at different points in time. Should we have a broader discussion about whether it's better to have an invariant that SSL_SESSION and tickets are a 1-1 correspondence? (I have not spent much time thinking about this issue, and will defer if you have done so already.)
This is a limitation of the current analysis rules for checking file header content. It didn't seem problematic but I wanted to call it out.
struct field ApiKey should be APIKey
Would prefer to call this field `ClusterDomain` since this is under the DNSConfig section and we may have other DNSDomains in the future.
Should use `|`
Keyboard name should be lowercase ;)
Are we expecting more things to be added to this? Using a list for two things might be a bit of premature abstraction, IMO.
Lets link to the globalize source in the commit message to show where this was taken from. Use symbol keys for the attr names if possible.
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
Can we not add to the "unsigned long" tech debt? See #15231 Or maybe the project doesn't care.
Same, you do not need to change this file. Revert the changes.
Is this relying on the fact that `os.path.join` returns the second argument if it is absolute?
This isn't good!
I am fine with this particular method that checks for nullable type to remain nullable.
On `docker` this is by default false so no `chown` is done. Since `podman` should be drop in replacement for `docker` I made it false by default here, however this might be surprising for current users of `podman`.
does this need to catch all exceptions?
Also I just noticed looking at our `cmdutil` package that there's a way to read config files using it too. Not sure if that'll make things easier but it might.
Is there any reason this patch is not getting merged upstream?
Looks like wrong name for the variable or wrong boolean operation. In my feeling the retry is enabled when `retryTemplate != null`. What do you mean?
`is_array()` alone is sufficient here.
@wido Can you use `!String.isNullOrEmpty()` instead?
_collect calls clean_ret in the failure case, so I think we can't do the free here. Could either add a free_ret wrapper that calls clean_ret and then does the free, or do a cleanup function in the Go code that adds the free.
by default it logs to STDOUT, let me know if this should continue the default behavior
F401 'io' imported but unused
Unit tests now rely on `DynamoShapeManager.Preloader` for its geometry preloading activities.
The error message in the `else` case needs to be adjusted to say "Expected a string or numeric value for ..."
Python 3.8 flake8 complained about this for some reason
Should we move the isInstrumentationEnabled() check inside emitTrackingEventsWithAdditionalTags() and emit tracking events if it is true?
Should this be marked private?
None is the default default for .get().
Can we replace `dict({})` with `dict()`?
Please call this `UsesWiki` or just `Wiki` or something like that, then check `if opts.Wiki` instead of `if !opts.NoWiki` to avoid double negation.
Why are we changing this behavior?
If we're expecting output in order to test it is likely that this should be erroring the test before continue.
Nice, I like how this reads :-) In the interest of keeping our services folder clean, should it maybe be `Html::Parser`?
What about backward compatibility ? You could define a default method marked as deprecated which calls `onStandby`
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Not sure that method is needed since it's only used in tests.
I think `.compact` should be on the next line?
Do you need this file?
can you please check below error reported internally. ` File "<embedded stdlib>/unittest/case.py", line 59, in testPartExecutor yield File "<embedded stdlib>/unittest/case.py", line 605, in run testMethod() File "/google3/runfiles/google3/third_party/tensorflow/python/framework/test_util.py", line 1343, in decorated return f(self, *args, **kwargs) File "/google3/runfiles/google3/third_party/tensorflow/lite/python/lite_v2_test.py", line 119, in testTypeInvalid self.assertIn('call from_concrete_function', str(error.exception)) File "<embedded stdlib>/unittest/case.py", line 1089, in assertIn self.fail(self._formatMessage(msg, standardMsg)) File "/google3/runfiles/google3/third_party/py/absl/testing/absltest.py", line 1767, in fail return super(TestCase, self).fail(self._formatMessage(prefix, msg)) File "<embedded stdlib>/unittest/case.py", line 670, in fail raise self.failureException(msg) AssertionError: 'call from_concrete_function' not found in 'This function takes in a list of ConcreteFunction. To get the ConcreteFunction from a Function, call get_concrete_function. `
I think load from etcd is not necessary here.
Isn't this a behavioral change? Seems like it's the equivalent of `First()`, not `Single()`.
The location URL was introduced there to be able to report errors to the external API. Now, with sessions, I guess it's possible we don't need it in the store? Or, alternatively, we could store the config in a `config` attribute to make it easy to add metadata around it.
That does nothing. Is this intended ?
a safer looping   shall we remove `el.tagName != 'BODY'` as well to reduce confusion?
is this even used?
can drop this one right?
shouldn't this also be a copy?
`ImmutableMap.of(k, v)` would be cleaner than the static block
The module header should come immediately after the PCH to avoid weird header dependency issues.
Same here: Are those changes still needed? Having a return value in combination with an error seems very uncommon to me.
Please add this conditional to line 575 instead, or there's a risk of duplicated image again for non-connector posts.
@bflad not sure if this will break anything - had to do it in order for import to work correctly though.
something change about the dots?
I don't think we should add the `mapping` (associative array) to a string here, and if we do, there has to be a space before it.
I feel you abuse of the if then on one line. It makes code compact but harder to read and again it breaks coverage analysis.
Why do you need this interface? Listening for domain notifications can be done using the new API and the adapter only knows about DeploymentListener
maybe you can check the err is net.Error instead. It's better not to check the error message directly.
For this sort of thing, we usually abstract out the relevant features of something like `libkb.Env` into an interface. Does that make sense here?
There's `JavaVersion.current()`. As far as I know, "java.version" should never be null, so you should be able to use that one instead.
is configFile still being used? Ideally should be removed.
We should not support an `M` parameter. Seriously.
caller has done something wrong; remove this.
Please, fix these kind of smells with an explicit array size. Thanks
If we don't support it, this should also report an error message. (In error recovery mode, returning the upper bound sounds fine.)
shouldn't this also be a copy?
Was this a bug, or this is how it is suppose to work? It was using this.isMuted, which is handled in RemoteVideo by this.isVideoMuted, but here we use this.isAudioMuted?
Trailing whitespace detected.
Hey @purplefox , thanks for the review! I discovered more code related to deserializing with unknown fields that I've removed in my latest commit on this PR. Hopefully it still looks good? It's a bit odd that there's a skipped number in these error codes now. Do you think it's better to leave it in and just mark it as unused?
Can you add an expect that the span is still the span?
I'd rather have these both as `EnableFoo` since it makes more sense when reading
I believe this change is not intentional.
Please remove this from here.
Moving it to Cython means exposing most C structures to Cython and staring at tons of generated C code to see that it actually does the right thing (like in #891). I wouldn't do it bundled together with a functional change.
Does gjson.Parse(..) work for this? My understanding was empty strings were always mapped internally to '{}' as empty strings are not valid JSON, so it may be breaking assumptions elsewhere.
since you're in here anyway ;) can you add summaries to these constructors? Also - is there any reason to have the new overload public?
Maybe not in this PR, but it would be nice to at least log other errors below. (Right now logged will be only last one)
the `defer` should be defined outside of the loop, otherwise the function will be scheduled on each loop iteration
You don't need this. you're using AMQPConnection directly, no need to change to change EventHandler. Can you remove it?
The pointee of a EphemeralPointer is not tracked; thus, no incref for it
revert. (I'm calling this out because the new indentation is clearly worse than the previous indentation.)
Not related to the task, but it is typo anyway: s/Exceutor/Executor
This import should be combined with the `log` pkg above.
Is this necessary? Could it return a completed task instead? What if NegotiateClientCertificateAsync had already been called and no certificate was available? We would not want to renegotiate again, a completed task would also be appropriate then.
Methods that start `register*` currently only obtains the service facade `READ` lock. Is this adequate for this and other `register*` methods?
hmm, should it be: `elif isinstance(classes, list): ..`, it more pythonic :)
This basically kiils the heuristics and starts checking the whole file contents. I suppose we could extend the heuristics to "check first N bytes + check last N bytes" to cover your particular case, but there is no real need for it, as the main intention for this heuristics is providing md5 compatibility for git-tracked files between *nix and windows, where git uses CRLF by default even if you didn't have them before in your file. So we actually need to have a heuristic that is an exact match to the one that git uses. :slightly_smiling_face: That being said, we sure could look into optimizing this by not opening the file again or optimizing dos2unix() etc.
When can `entry` be null?
For one of these (`rootFsSize()` and `rwSize()`) we should probably compute the size of the user-specified rootfs so we can report something meaningful via Inspect.
Why this target name? Because it's a target name, it should be able to be anything you want as long as unique. `junit` seems simpler.
explicit names because `endpoints int` is more explanatory than `int`
Sorry for a post-merge review, but we are going away from these obvious messages and deleting them everywhere. Are you sure we need it here?
The docs for ReadFull make it sound like this condition should be impossible. Should we scrap the check?
This inlined func too I don't understand the purpose of, I feel like I must be missing something.
remove the return
Thanks for the cleanup here. This part could probably go into a separate PR to keep the changes in this one to a minimum.
Shouldn't constraints be limited to binaries? It's only binaries that you generally want to pin with a lock file. Fo example, if we allow a library to pick constraints, what do we do with the dist it exports if it does export a dist?
Converted from deleted *.rec test.
Any special reason for setting this to `pfs_max_fee / 2` and not something like `5`?
Too bad this logic has to be the same as the master version, but I guess there isn't a common interface.
maybe rename this since it's not for tests only per se anymore? No strong feelings though.
Doesn't this lead to an error if `len(opts.OrderBy) == 0` evaluates to true as `"id ASC".String()` does not exist?
Line is too long. [97/80]
Wouldn't this method no longer be considered memoized?
Metrics/LineLength: Line is too long. [86/80]
Style/SymbolArray: Use %i or %I for an array of symbols.
Why are files under `lib/browser` affected?
Why is this necessary?
please add this to `equals` and `hashcode`
Can we make something like `ComponentContext` and have all clients there? Guess we will have to repeat this in all installs.
If we aren't going to propagate the error up, can we log it?
nit: move down
Intention was good, execution a bit worse ;) @deads2k mind updating in a followup?
^^copyright needs a range :)
Probably should have emulated std::getline() semantics instead, e.g. `tools::getline(buf);`
This is unfortunately going to break loading old checkpoints (including the pre-trained models in the modelzoo). We might need to implement a different `_load_from_state_dict` with versioning for this. Let me know if you need help with this
raw usage of a generic class
does not sound right :-) you importing this just to get a const...
Will you change the logdump viewer on the website to have a redirector tab? That would be nice.
If you have made equals final then you also need to make hashCode and compareTo final
This doesn't seem right.. I guess it should be always 0. Based on the expected results before this PR, it seems that a timeseries query was issued when `useDefault = true` which returns an empty result. When `useDefault = false`, no query was issued so probably the query computation was done by Calcite. So, I guess there are two potential issues here. One is the timeseries query returning an empty result and another is Calcite returning an empty result which used to return a valid result. We may want to fix the Calcite issue in this PR. The timeseries issue seems a bug, but since it's not introduced in this PR and we are about to cut the branch for 0.18, I'm ok with merging this PR and backporting the bug fix later.
Maybe `zegative` means `zero or negative` :stuck_out_tongue:
same issue as the other one like this
Please reorder imports. Builtin packages should go before 3rd-party packages.
Align the elements of a hash literal if they span more than one line.<br>Space inside } missing.
This seems weird to duplicate code?
Does gjson.Parse(..) work for this? My understanding was empty strings were always mapped internally to '{}' as empty strings are not valid JSON, so it may be breaking assumptions elsewhere.
I was referring to a test to ensure that a deck with a trailing newline in the parent won't break the system from a higher level Something along the lines of: Build: * `A::B\n` * `A::B\n::C` * `A::B\n::D\n` * Ensure that `deckDueTree` works And ensure that the deck list can be built.
I am sure it cannot cause infinite recursion, because `.upper_bound` cannot be another `TypeVar`.
can use metricutil directly here
Misindented. Did you use a tab rather than spaces ?
is the case where webHook.SecretReference is non-nil and webHook.SecretReference.Name is an empty string possible / allowed? If not, TC also needed.
This is the thing that would benefit from the ``_conan_collaborators`` mechanism
I think this `args: ex` can be removed now, since the exception is flown into `exception`. #Closed
What's the objective of making this a `char`? I think it was kind of advantageous to pass a string as it will use all of those tokens as delimiters. Maybe we could introduce another overloaded function that's specific for splits with 1 delimiter? I don't think it matters much, as this function seems to not be used much in the code base.
I fail to remember where this `sessionData` comes from. Is that a global that is set because of `window.Beacon()`?
I agree this new style is cleaner but my eyes aren't being able to see the NPE fix - is the map bring mutated between containsKey and get previously?
how about just `MODE`?
c/p err (was placeholder for something now remove it!)
Why are we calling BreakSolutionStepsLoop here?
If `--build`, `--build=` or `--build=*` is passed, build ALL from sources.
Does gjson.Parse(..) work for this? My understanding was empty strings were always mapped internally to '{}' as empty strings are not valid JSON, so it may be breaking assumptions elsewhere.
do you want to add the curly brackets here and further down along the lines as well? Just as the file is open already.
Get rid of this iteration.
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
this is no longer necessary
Spelling mistake here. Also we should only use plural form `Statuses` if the enum fields can be combined (i.e. intended for use as bit flags that more than one bits may be set at the same time), otherwise, this should be `Status`. So the name should be `ResponseStatus`.
new file always need a license header
Are we sure the sd-library initialises SPCR for every use (read/write) or does it make sense to store it here and restore later
Change your IDE to not use tabs and to remove unneeded whitespaces. Please remove this one, thanks.
iirc @caglar10ur had a change to add the "VCH" prefix -- I believe he was concerned about the proliferation of "config" vars in the codebase -- might double check
Why lower this?
don't need this anymore
You cannot rely on an origin package inside of the kubernetes repo
should this be a `?number` type?
Really not a fan of unqualified class/interface names like this. `Version` is not descriptive at all. (Version of what?)
Nitpick: Space padding.   `/** @const */`
In what situation would _size != 0 but _items == null? I'm wondering why the second check is needed (and worst case, if there's some corner case that could result in that, it would fall out of the subsequent type checks, both of which would be false).
couldn't help myself. I know this isn't related to Collection caching at all. :)
Intention was good, execution a bit worse ;) @deads2k mind updating in a followup?
Teuchos already has a whole bunch of `toString` overloads, doesn't it? How come Utils has its own `toString` functions?
Moving it to Cython means exposing most C structures to Cython and staring at tons of generated C code to see that it actually does the right thing (like in #891). I wouldn't do it bundled together with a functional change.
Is this 30 mins for getting a logline configured somewhere ?
I added this method to set with a NULL value the parameter, if It has a literal null String Value. I amn't sure if It is the expected behavior.
This is a bit disturbing, no compilation here yet?
@weizhouapache, recently we adopted `org.apache.commons.lang3.StringUtils` as the default string lib. A checkstyle validation was added to prohibit imports of `org.apache.commons.lang.StringUtils` and `com.google.common.base.Strings`, however it does not cover `import static`. The files that used `import static` were modified to remove the `import static` and use the object `StringUtils` from `lang3`, however, this file went unnoticed. Could you remove those `import static` (`import static org.apache.commons.lang.StringUtils.isBlank;` and `import static org.apache.commons.lang.StringUtils.isNotBlank;`) from the begin of the file, import the `org.apache.commons.lang3.StringUtils` and use it instead? I observed that `com.cloud.utils.StringUtils` is already imported and would conflict with `org.apache.commons.lang3.StringUtils`. However, `com.cloud.utils.StringUtils` is used only twice and `org.apache.commons.lang3.StringUtils` will be used several times, therefore, I'd recommend to import `org.apache.commons.lang3.StringUtils` and to use the full class name of `com.cloud.utils.StringUtils`.
I know there's more work to do to propagate changes to the ConfigMap to the controller Pod, but at this point should this endpoint always match `kubectl get` (after a polling cycle at least)? I'm not seeing the endpoint return the same config as `kubectl get`.
Totally unimportant nit, but what do you think about ordering these alphabetically?
why change the type of the exception?
Almost certainly not going to end up being this, as we use different structs elsewhere. I would recommend `[]ocicni.PortMapping` as used in libpod
may be better to check if report was saved? '@report.persisted?'
why "cpu()" is necessary, this is a bug fix?
How about using more narrow client? I'm shooting core (without looking at code), which should suffice here.
I think you forgot to add it to the vhd script
Don't we know ahead of what the filename and class is going to be here?
This doesn't look correct.
Prefix this name with `k` like all other strings.
Is this used anywhere?
Not accepted anymore
Can we just remove that?
need this on the other dockerbuilderstrategy converter too. (the old to new one)
Why do we need validate_memory() in free_blocks()? Suppose this memory is used and set other value than DEBUG_BLOCK_FREE_VALUE. So different value from DEBUG_BLOCK_FREE_VALUE should be a right result.
Who would call this?
The `in` check shouldn't be needed.
We generally do NULL !== $offset, it might seem petty but it's important to keep code uniform.
Remove the `=''` since the default `basePath` is derived from the url.
@efiop do we want to check if `--no-commit` is provide and alter the message a bit? Can we do it here? @DmitriyVahrushev thanks! I think it would be better to do the message a bit more formal - `Run dvc push if you want to save your data to remote storage` @jorgeorpinel could you please review the message? :)
any reason why we use sync version?
FMI: The builder would never schedule a disconnected element anyway right? (since it is InOb based). I'm guessing this is just to free up a tiny bit of mem
nit: please sort by alphabetical order
Use `useCallback` to avoid trashing the ref.
A before/after in the commit message (or screenshot in the PR body) would be useful for quickly understanding this change.
Trailing slash could be removed from this example also.
Should this also be constant?
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
same thing about imports
Bad empty line.
Why adding wrapper for existing WordPress function? This method doesn't add anything new.
why is this `Value` change needed?
Since this now includes `dist` and `check-types`, maybe rename `isDist` to `usesClosureCompiler`?
Maby sort by `user__email`, `app_name`?
My preference (here and in the spool) would be to use `InternalQueueSize`, since that's what's used in the earlier structure and "Int" as an abbreviation is overloaded with "Integer"
Make sense to use Array.Empty<byte> if data->Size == 0?
Do we get any benefit from only putting `type: ignore` for `SSL` if there is a stub for `crypto`?
okay i dont know how this works tbh. but does this still have an effect if we return null here?
nit: why use instance variable here instead of a `let(:user)` for consistency with how we do it everywhere else?
Perhaps put in a `TODO` here with the original issue #?
So why does this property still exist? I don't think we're setting it correctly anymore right? here's 2 options: 1. obsolete it and have it return true if State == state.Loaded 2. remove it and cherry pick the removal to 2.3 before we release it.
Look at the trick done above on labels to release pointers to the large gRPC buffer. We need to do the same for labels inside each exemplar.
Interesting. This needs to be `MaybeNullIfNull("defaultValue")`, but that doesn't exist.
`$input->hasArgument` returns `true` if the argument is defined, not if it is passed to the command. This means it will always be `true` here.
Why don't we pass the registerer here?
Just a note - if field is not initialised, the consumer of getter must do a NPE check.
No longer used
If the approach in this PR looks good, then I'll take this diff to API review (likely offline). Edit: this no longer applies, per second commit.
I think i would have done this differently.... either: 1) just check the start time and calculate and end time, and then if the end time has passed at the top of the outer loop 2) get rid of the the Watch entirely and just wrap the list() in a wait.Poll check (which is basically what WaitForABuild does). with the existing logic it's pretty hard to follow how long it's really going to end up waiting, based on expiration of watches. also 3 minutes between polls seems like a lot.
Since you're changing all of these anyway, do you want to switch to the preferred `expect(response).to have_http_status(403)`?
This is no longer required.
The `BaseModule` should have its own logger now. So you don't have to create your own.
Nice that we were able to find this with the `__contains__` change.
Actually, we can technically remove this, since we're only running mypy under python3, where it's built in. And we don't need the import to actually be there otherwise, even in dev. Taking it out, lmk if you want it back in.
interesting. `list_item_del()` in SOF also does `list_init()`, so, you can delete list items as often as you like. And you can use `list_is_empty()` on list items. So this shouldn't hurt the run-time, although this might be redundant. So firstly I don't understand why valgrind complains, and secondly - are we sure `buffer_free()` is only ever called on buffers, already deleted from the lists? That *should* be the case... Maybe add an assert here?
Since we give a `id` to check perhaps `isDefaultStreamId` is better?
Nit: Seems like this newline is intentional?
`Count` should be `4` as there are 4 elements. The `sizeof(Quaternion)` is `16`.
Why this used to be disabled?
You don't need to include the parse methods in the has array, the parse methods are just helper methods, and they're nothing the user should care about
Why wouldn't this just be `expires_at`?
As it's only used in internal, why not use an enum ?
Just thinking. Maybe instead of having N `supports*` methods. We could have `EnumSet<Feature> supportedFeatures()`
not sure this is right - shouldn't c.{env,buildEnv,parms} be redefined as non-maps to test ordering?
Do you have an example of a situation where this would be used?
Again, no need for the parentheses.
why do we need both `guiLog` and `desktopLog`?
Should we just call `getServiceInternal(win, win, id)` for symmetry?
This could just be `c, err := newFSClient(rootDir)`.
Why is PreallocationSize being removed from all of these tests?
Why not check outside the escape output instead of escaping an empty string?
Need to disable it as it could cause OOM in CI due to docker container memory limitation
this should probably be `.to be(true)`
[nit] Could be `func (*State) EnsureNoProjectsMissing(context.Context, []string) error {` but doesn't matter
nit: you may want to change intellij editor settings. its generally discouraged to use '*' imports.
Why was this test renamed?
Two questions here: 1. If it is not allowed to add an anonymous role to a user, does that mean there will be no anonymous user? I.e. that in the code where we need to check for anonymous, we are going to just load the anonymous role instead of getting the roles from a user object? 2. Shouldn't we introduce a more specific exception for that? Could imagine that the calling code might try to recover from that specific error. Would think about something like a `AssignAnonymousRoleException`
Do we know for sure that `setReportError()` will be called by this point?
Should there be a different expectation instead?
This seems wrong. What do you expect the type to be? Note that `typing.cast()` can be helpful, along with `# type: ignore`. I remember you mentioned MyPy wasn't happy earlier. Even if you have to use either of those, that can often be better than falling back to `Any`, as `Any` gives no insight to the future reader what this type should be.
Let's put this on one line. Why did you add the `. "/"`?
Can we use `getPredicate` here?
I think package aliases in go are meant to be all lowercase.. maybe `kbmni`?
Add "if (logger.isDebugEnabled) ". (I know there are other calls to logger.debug in this class without this check, but they are wrong)
Wait, you changed it from static to this, you just have to revert your own changes!
seems there a lot of line endings changes that make tracking the real changes more difficult. Any idea whats going on there?
This should be removed, JComponents are visible by default.
Can the version please be changed to "0.5.0"?
nit: Added blank line doesn't match the other files.
Ugh, looks like I've a merge mess. Will clean up tomorrow.
is configFile still being used? Ideally should be removed.
Do we really need to call `cancel()`? When `cancel` is called, no one is blocking on it.
Judge the situation where `len` is all 0, then we can still use `reflect.DeepEqual` directly?
What has replaced it? `@deprecated <explanation>`
`req.Data` should be in the validation rules as required filed since we need to send back the `id`.
You're missing the `convertMasterProfileToVLabs` line
I'm not sure that we're doing this. Please wait for someone to confirm that though ^^.
This is no longer required.
This is unused now
This import should just be `"context"`.
Did you delete this file too?
Isn't this the same as checking if `networkId == null`?
We should change the `ALLOWED_STOREFRONT_HOSTS` setting name to something more generic as it is used with either storefronts or dashboard. Maybe `ALLOWED_CLIENT_HOSTS`?
Why not simply use recalculateUserAccess() in both cases here?
drive by? Not sure if this is a problem from our style guides (I would assume not given that nothing failed)?
%T will output all the fields of the filter, is it ok here?
Since at this point I know `err` is not `nil`, semantically makes sense to log it with `logp.Err`, whatever it is. This reverts a change @ruflin did a while ago, which checked if `code` is `4XX`, and in that case logs it as Info. Argument IIRC was to not flood log with too much stuff. I don't think that is a concern, but I was ok with that at the time. Now I suggest to change it back mostly to keep the code simpler and afford an `if` branch that doesn't give any benefit. Semantically, a `4XX` is still an error, even if the culprit is not the server.
Why did this change?
This line can be reverted, right?
Please put this method just below `getAncestorGroups`.
You probably want to do this after `100-logster` initializer.
Did you get rid of this line when you tried nesting all `pacpy` imports?
Please sort these
What is the error code returned by the OS API when the sandbox is enabled? Would it be better to just call the OS API and check for that error code instead of trying to detect the sandbox upfront?
`HandoffComponent.STORAGE_KEY` is the same as `AppStorage.HANDOFF_STORAGE_KEY` but it's never used.
I think this makes sense when 1 peer is a recorder because it can receive any type from the other peer. But if 1 peer is a replayer, then I'm not sure if the other peer would consider its type to be consistent with the type that is sent by the replayer, which can be any type. If the other peer is just a regular reader (not a recorder), then it doesn't seem right to me.
Is this for cache busting? What happens to old rows?
are you sure this check is correct? Edit: It's if `raiden` is a `Runnable` class which relies on the `__bool__` of the Greenlet.
extra space before `break`
Is this change intentional?
nit: you can merge both lines above as `checkNotNull` will return the given argument
if I right understand, try-except here need for compatibility with python 2.7, but our target is python3.5 and higher, probably we can use only first statement.
is configFile still being used? Ideally should be removed.
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
This suggests `is_from_silent_import` to me that should be an optional argument to `AnyType`'s constructor.
Nit: and all the rest in this file.
This change makes M42 command compatible with the FAN_PIN (otherwise any value set just gets reset by the planner)
Sorry, my bad for pointing out that place, editor is not loaded yet at that point, so we have an error in the console. The right place should be around Line 542
Why was this changed?
Why do we need this function? Is it possible to have a timestamp out of window bounds?
c/p err (was placeholder for something now remove it!)
same as above we can from bc not add new typehints.
You should not add an extra line here
do you want to add the curly brackets here and further down along the lines as well? Just as the file is open already.
If it's deprecated, shouldn't we rather update the rest of the code to use `$line->id or $line->line_id`? This would also reintroduce the deprecated field in 3.7 and 3.8 when merging. Looks like a lot of duplication to me.
Is a single space before `:` really changing something ?
This could probably live somewhere else   What do we think?
is this needed ?
We don't think this check is necessary, since `id` is a required argument for all `fetchOrder` implementations. In other words, this check is redundant. Do you agree?
import sort order (isort will complain)
If we're going to make this function always return `nil`, maybe we should change the return type to nothing?
remove double space and add a newline between this and the if statement above.
dlc is the sellby dluo is the eatby
this is a bugfix? But it will break scripts, no?
WOW - I didn't realize we used so many constructors! Maybe one day, I'll get around to using mockito to make this refactoring less painful in the future.
What are the first `App` and the second `App`? Are they this side and that side of the channel, or the ordering has no meaning?
We're using `root` twice here, and as I understand it, it doesn't have quite the same meaning both times. Could we find a different word for the second usage?
please use `.format(...)` to be consistent with other string-formatting in this file
Please add @Nullable in the parameter of setSrcHash()
do we realy need the context for api requests injected? (api do not have templates - but I guess we still use it in frontend somewhere ? :/ )
don't you need to remove the schedule? Is this a run immediately and run once scheduler?
Why lower this?
I think I saw that there is a `AzureDataExplorerDataFeedPatch` now so we don't have to use the SqlSourceParameterPatch.
@mramato is there a better place to put this higher in the stack?
I agree with opening that up for more than just `tuple`s, but in that spirit wouldn't it be better to check for `collections.Sequence`?
I really really dislike this.
For bonus points you could move the CompressToIngester flags into the IngesterClientConfig.
If `conf("handle-sites") == False` it does not mean that the site is enabled. If `conf("handle-sites") == True` it means that we are allowed to `a2ensite` a site, which we don't do here, here we only check if the site is enabled. Therefore, I think that `474-477` should be reverted to the original `is_enabled = self.is_site_enabled(filename)`. Unless I'm missing something.
Don't we want to initialize it to a negative value like `-1`? Also, have you considered dropping the `Cache` suffix, i.e. `_sizeCache` --> `_size` and the same for GC info?
@drcrallen this change made the overlord `/druid/indexer/v1/workers` API no longer return a `runningTasks` key for each worker, which may confuse some folks' rolling update scripts and definitely makes the web UI less useful. how do you feel about having the OverlordResource specifically call `getZkWorkers` if the runner is an RTR? or would it make more sense to add a list of running tasks to the Worker object?
Can we do away with this variable and just detect the presence of certain DOM elements in JS instead?
I think it's a bad idea to change this signature. Let's just make it always `'none'`, and update the `compute_loss` to do the sum. That actually enables us to clean up code over in eval_step that does some scoring.
I tried to remove as many magic `28`s, `500`s, and `240`s in the Go code and replace them with constants for maintainability.
just confirming we have a test later in the file that checks for `invalid_code`
nit: move down
`close` needs no parameters, and should have a simple docstring like "Closes sockets opened by the client".
I may be wrong but won't `DateTimes.of(input)` handle all of this, including time zone? The problem with the current code is that timezones are also not necessarily 3-letter long.
Moving it to Cython means exposing most C structures to Cython and staring at tons of generated C code to see that it actually does the right thing (like in #891). I wouldn't do it bundled together with a functional change.
wow, good catch! Could this break something or actually stop working something that was working before due to this bug?
no well format
@solipet Does this still accomplish what you wanted? I'm not totally sure yet if doing a `.clear` will mess up the test suite in any way.
This can be readonly as well, yes?
It causes some performance degradation (getOneOffExecutors() always happens + collection merge), so maybe we want to keep the original implementation
I've just found that removing these methods is actually SPI-breaking :-/ It was a bad SPI arguably, but still. Something to bear in mind for the future. (And, well, I'll dig out the `name` out of the `image` :-) )
This is a useful thing to print, but should it be using `logrus.Warnf()` like all the others?
This creates backward compatibility issue. Must deprecate and create another one.
we should add a separate RuntimePullSecret field.
nitpick: `strategy` should probably be renamed to `router` or something. Same for the other tests in this file.
As above, this is a `SkyBox`.
this call was accidentally lost during conversion from decorator to tracer
Why is this moved?
What does this message actually mean? I.e. is it useful in debugging? Can it be made clearer?
If $startmonth is 1 (january), we should have same resutl than if $conf->global->GRAPH_USE_FISCAL_YEAR is not set. But here we have a difference of 1 year due to next line. Can you check ?
PACKAGES_URL_PREFIX is no longer used, it could be deleted.
This was intentional, what is the case where we want to check a URL without a host against the domain block list?
`from builtins import object` means that this will implement `__nonzero__` for us if Py2
What are your intentions here? Your change as it is does not make much sense: The pointer `str` is a local variable and its value is not used afterwards anymore. So a decent compiler will optimize this assignment away anyway.
Does it have to be the same description as above? What is the difference?
I think in the first stage, we don't need to change the output of API?
should we use `isUserErrorEmbed(error.message)` here? Same reason to why we don't have `error.isUserError`.
nice, was about to ask for a serialization test but here it is
But more specifically, why `10`? Also you replaced some numbers smaller than 10 with this.
Thanks @klim705 but this is not actually correct. If you specify a duration the flight always lasts that exact amount of time, it's only when you don't specify a value that the time varies. Let's change it to something like: _The duration of the flight in seconds. If omitted, Cesium attempts to calculate an ideal duration based on the distance to be traveled by the flight._ I would also get rid of the `=3.0` default value since it's incorrect since #2825. We should probably eventually add a `maxDuration` property to make this less confusing, but let's just leave it as is for now and improve the doc.
Maybe consider to make a unique import from "yoast-components", currently there are 3 of them at line 8, 10, and 15.
Should this be called `_disposeLock`? Are we going to use this lock for anything other than ensuring Dispose is synchronized?
Please group with stdlib imports.
If `action == null` this will throw `NullPointerException`.
This query doesn't look right to me. We're joining on the `primary_email` tables but the query is still referencing the `email` column on the users table.
This test must be in modules/http
why 128 and not some other value (e.g larger)?
It doesn't make sense. Why would we want to check if `finished` is true and then set `finished: true`?
If you have made equals final then you also need to make hashCode and compareTo final
I discovered that GWT uses * as a wildcard placeholder for types; effectively meaning "infer and box the underlying JS object as appropriate".
We should not call this for single-tenant/subnet plugin as it depends on NetNamespaces. I think, we should move this to node.policy.StartEgressIP?
unsure this should be done in the constructor, wouldn't be safer to do it in a lifecycle method e.g. componentDidMount?
Returning the same copy of attributeMap may lead to programatic mistake as many different java file may modify it, we may not have the track of who is modifying what what modifying. Should we not have a put and get method of attribute map it self in this class. What do you say?
the value could be formatted with thousand separator, as you did for DATE_1 and DATE_2
SetServerDefinitions shouldn't need to be exported. If there was a checked type cast to `*Stellar` in `RefreshServerConfig` that would be fine.
You can remove this now that you changed the code below to assign a new cartesian to `mid`.
Not accepted anymore
Remove the trailing period
`VALUE` is already defined here.
This looks like a hack, is it possible to keep the `numberOfRecordsForRate` non-static and protected, and then create a setter only in the test table implementation to override in tests?
Is it necessary `!h.allowBalanceLeader(cluster) `?
you cannot have a param in a __repr__ AFAIK
Maybe make it very explicit here with `bind(OrderedMessageProcessors.class).in(Scopes.NO_SCOPE)`?
I think to remove `isolation.level` here and leaves the configuration to users changes the current behavior. Currently users care nothing about this kafka configuration when using a higher version of kafka such as 0.11. By removing it, they need to set this property in supervisor spec, or the default value, which is `read_uncommitted`, will be applied, which may be not what they expect. If this is the root cause that limits the Druid to use Kafka lower than 0.11, I think maybe we can introduce another property, as the same way as `pollTimeout` property does, then we can unset `isolation.level` property according to the value of this new property. Only those who want to use Druid with older kafka need to set this new property.
I would prefer a list of imports and no wildcard.
Many overloads that funnel into this one should be able to receive null values but are not annotated as such. See lines 159, 164, 168 & 172.
This is ignoring the extra files that will be in those containerVM directories - the containerVM folder will not be deleted. Please move the folder deletion for VMs into the deleteVM function - I don't think there's any case at this time where we don't want to delete the folder as well - can you identify any?
Should we just take away that config ~~parameter~~attribute?
Nit: this should go between cortex imports, and not be standalone.
As @daniel-beck suggested, you should prepend the context path here if possible.
I think you need to `import platform`
missing license header
This will impact anyone that has a custom query type as an extension. However, I don't believe anyone does. In any case, I think we should bring this up in the user groups to see if these changes will impact anyone in the community.
Can we mention this is enabled by default?
Call `this.getScrollTop()` to get the cached value.
I don't think this does anything. I didn't see any requests to our servers or Cloudfront when opening up email in QA.
Should this have `[DisallowNull]` on it?
The text of the error must be updated as well.
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
Couldn't this be simplify by just `return name == "readme" || name[:7] == "readme."` and remove if len(name) == 6 bracket ?
Do you need this?
Make this a `std::map<std::int32_t, std::map<std::string, std::int64_t>>&`, and I'd say also make it the second parameter of the call, as we tend to keep the context and result params at the end.
Unnecessary spacing detected.
this should be restored
need to change
Is this property set to `true` anywhere?
I *think* we have to manually close `ctx` in the success case if we want to avoid leaking this goro. Just checking if that happens? (I couldn't figure out where right away)
Originally this wasn't a race because the manager was initialised deterministically - has this definitely changed?
I think you might be safe without the "global", as you are not assigning, but just using
I'm not sure about these changes. It doesn't seem like deployment-config.latest-version will necessarily be the same as our notion of revision / deployment version - syndesis.io/deployment-version. Are you assuming they are the same? And under what conditions are they the same - recall that stop/start triggers a build even if our revision doesn't change.
This has got out of alphabetical order.
Removed for simplicity, it's only in a legacy view that we should no longer hit anyway.
Indent ) the same as the start of the line where ( is.
struct field ApiKey should be APIKey
can you create the IsLocal function?
Use the new Ruby 1.9 hash syntax.
Invert description and type. Type must follow description.
Recommend rewording to "May not work properly with some OCI runtimes"
cluster is not a value set by user, might have more message, suggest user to check compute-resource settings.
This was really difficult to debug. This is more readable as well.
Please also mention that `withSplit()` will be enabled automatically.
For future, `corev1` is the prefferred alias for this api.
pretty sure allinone doesn't hit this path
This seems unrelated to the current commit.
can't hurt to `require.NoError` these
add a new failure builder that accepts only an exception and an overrided failure code
I personally like `switch` even in simple logic since it's so clean. Some suggest `if` is better here but I like it.
Rename `default_address` to `billing_address` as it's no longer a mere default.
Why is this removed?
Nit: can you please call this 'staging_temp_dir' or something like that. Calling it gcs_.... immediately makes me think that this is something that lives in GCS (i.e., remote storage not local).
Why do we need title set? Is this just to have something in the objects_entity table?
For the shake of mine understanding `if(flag & FLAG_REQUEST) == 0) ` true, then it is response scenario and if it is false means a request has been made to the service(which can be normal request, heartbeat or event received ). Is this understanding of mine correct?
I think this will add an extra DB call for errors every time we pull back jobs, but we probably only need it in the JobSpecController#Show route. Maybe we explicitly pull these errors back then, and otherwise skip the query?
Where should WP-CLI look when it's installed as a Phar file?
Some unused imports here, I'll remove them on merge unless there is a test or something missing that would use them?
Why do we need to replace the OCI Spec on reboot?
Why this change? I think `Started()` is trying to say if the application was started at all. If it is crashed or failed you don't want `Start()` to be called again, because that state is handled internally in the application abstraction.
Why this change? As I understand it, the previous behavior is roughly equivalent to returning unknown for HMV. (Because it would return false, but complete is also false.)
No longer used?
This could fail before fully warming up if the name does not match ALLOWED_HOSTS.
Maybe let's properly initialize the size of the array to avoid creating a new one?
I think this was due to @cjb's lack of a git commit hook.
Please put `entry.getKey()` in a local variable.
I'm not sure if this class is ever used concurrently from multiple threads, but if it was, this should either return a copy of the list (`ImmutableList#copyOf()`) or change the `searchHits` field to a `CopyOnWriteArrayList`.
Hrm should this have been removed?
remove this file from PR?
Hm. So if the param scope is not going to be instantiated, that means there's nothing in that will be bound to anything. Why do we need to record these symbols that no one will bind to?
Late to the game. Is there a reason why `github.com/cri-o/ocicni/pkg/ocicni` is not part of `github.com/containers` (or ideally a package of libpod)? Would be nice for CI and for consolidating packages.
This is a bit complicated. @marpaia, maybe we should move the life of the Config to the life of the process. Then we can reduce this to a runnable future and a mutex lock. We'd also enable `Dispatcher::addService` for things like stateful config update monitors (via TCP/socket/etc). Of course that more-complicated config watching would be in plugins. For the filesystem config we'd lose the ability to "refresh" read the config, but it could support a os-specific file watcher to read in updates and apply them with a SIGHUP.
Can I drop this in 1.4?
no need to slice here and just do `apply(null, arguments)`
No need to literal cast.
Should we just call `getServiceInternal(win, win, id)` for symmetry?
Not directly relevant to this PR, but why do we have one of these here, when we have one in the main repo?
I would remove the `if (Equals(sv1, sv2))` at the beginning, and replace lines 2616 on with `return x.CompareTo(y);`
`do not need to destroy the ARC buffer`
this is duplicated in usersearch and contacts
Broadcast shouldn't change - it should stay as it was `onBroadcast`. Broadcast is a special type of messaging, thus we want a special API for it. Probably be the easiest to just revert this file and related other.
Why `nil` here? (if there were a context instead, this feels like it would be a `context.TODO`).
I think it is better to upload files after all logs were collected. Otherwise an error uploading files will stop the process.
Yay for removing dependencies!
For a script like this you might want to try the `log` package. Just initialize it with `log.SetFlags(0)` at startup. Then you can use `log.Fatalf` which exits and you don't need to worry about newlines since it adds them.
This is not required
Instead of doing all of this, I think the easier fix will be to replace this `else if(quoteString) {` with `if (quoteString && sql.charAt(item - 1) != '\\') {`
Can we put this `9.0 / 16.0` constant somewhere and use it in all places ? We can probably declare such constant into iop/iop_api.h ? And name it IOP_GRAPH_ASPECT_RATIO ?
Is this relying on the fact that `os.path.join` returns the second argument if it is absolute?
Hrm should this have been removed?
As a follow up, we could add a validation to check kubeletArguments["cni-bin-path"] is not set when openshift network plugin is used.
please rip out into an entire new class (probably test_message.py)
hrm. shouldn't this always have APIVersion set?
Just thinking. Maybe instead of having N `supports*` methods. We could have `EnumSet<Feature> supportedFeatures()`
You don't need to add `assignment_id` here, this attribute is set separately.
Did you mean to leave this in?
Or maybe that a better fix would be to resolve this value if not provided by calling `ResourceClassResolver::getResourceClass()`? Something like `$context['resource_class'] ?? $this->resourceClassResolver($data)` in `updateObjectToPopulate()`?
I'm cool with this, just wanted to ask what prompted you to enable it
Probably `attr_reader` would be enough here.
defaults should ensure that this field is not empty
`empty()` isn't faster than `=== NULL`, this isn't related to `get_config()` anyway ... please revert it. :)
Useless assignment to variable - term_id.
Objects.isNull method exists for being used as lambda, direct use is just an obscure way to write `value == null`
@chetverikov I tweaked your change a bit here to return an empty name when `constructor.name` is empty since that would seem to be the expected behavior for anonymous classes like `new (class {})`.
Thanks for removing those TODOs. Just curious about the others above. Why not remove all TODOs?
Why is the wrap of `err` cancelled?
Do not use parentheses for method calls with no arguments.<br>Do not use semicolons to terminate expressions.
Is this constant available in the S3 gem? If the threshold in the gem changes, this constant will no longer be accurate.
if !0 else 0??? I do not see reason to this if statement
we'll need to backfill cost for old rows, should that be a separate migration?
Can this use `sort.Slice` to avoid the need for the intermediate struct type?
Can you add an example here. for eg: connect set spark env variables sample metadata command.
Let's add a link to the issue if possible.
These lines are duplication of L209-211, is it possible to move things around to get rid of the duplicity?
If the error is not a resource timeout error, now the code is completely skipping returning it.   I will fix these on merge.
Why lower this?
Does this have to occur ahead of the PSU control? As I understand it, TMC stepper drivers require 12V before they can be configured. But perhaps this doesn't matter to the initial serial connection here.
can we set the tombstone state directly? Seem it is dangerous.
expected statement, found '<<' (and 3 more errors)
minor formatting `foreach (`
How about `path.Join()`?
Add some examples to show the usage of this parameter?
So here we go convert a tx receipt to Uint64 but in `BlockHeader` we are using `big.Int`. I'm hoping we can lean towards consistency.
`import sys` the next line
This is indeed a problem because it is marked as done even if its previous writes were not.
This is unrelated to table from where `aria-describedby` refers. Maybe move title `metrics.jvm.gc.title` from `metrics.component.html` to this component and refer to that header?
Really dislike the name here - this doesn't really tell me much. `NetworkConfigDir` maybe?
Is this change intentional?
... and then what? :-)
I may move these renamed classes and the corresponding rules to `util_rules/dists.py` in a followup.
The `azure-core` req should be bumped to at least `1.18.0`
Fix `list(,$check_name) = explode('_',$file);` to `list(,$check_name) = explode('_',$file,2);`. Avoids cutoff where the plugin is called `check_rta_multi` etc.
We still need the `null` check here, `null` won't be defaulted and `typeof null === 'object'`
This can just be, return `nil, nil`. I don't think there's a meaningful difference between an empty slice and `nil` slice.
usually i workaround this issue by just putting `-` last. That might actually be easier to read too, given the`-` and the em-dash smush together .....
Returning error here is not correct. The `resolve()` is used as the main service function, so if it returns error the service stops and it causes a cascading failure. We don't want to fail everything just because a DNS resolution failed. I thinks a better approach is just logging the error and always `return nil`.
Was a test failing for this? If so, which one (spec failure message plz). If not, then this could do with a spec given its hand-written sql
I think the N is the major word here and doesn't carry much meaning. How about first half and second half?
Please note that the contents of the `_shared` directory must be copied across all storage SDKs (queues/fileshare/datalake/etc). This includes the `_shared` directory in the test suite. If you feel this should not be in the other SDKs (i.e. that avro will not be a part of queue messages, or datalake etc), then please move this directory up a layer :)
keep all imports vmware/vic related in one block.
Guest VM's with public network access is possible by checking default egress rule. Without adding this new notion of a 'public access', networks can reuse the `Egress Default Policy`.
This probably isn't named correctly
Can these not run in parallel now, or was this for debugging?
We should not call this for single-tenant/subnet plugin as it depends on NetNamespaces. I think, we should move this to node.policy.StartEgressIP?
Perhaps refactor the name? Unless this will handle for EL8 as well.
This was more correct as it was. We could include the generic method parameters (and possibly the generic type parameters for constructors) as legal targets, or suppress this.
Can we be sure that `tracer()` will never be `null`?
did we change this behavior intentionally? If so, seems potentially unrelated to moving SP info from the session into the DB
again, ideally fix you import order in IDE
I think there's enough shared now to warrant including the options (configapi.NodeConfig) directly.
what is the value we get back in `netInterfaceAddrs()` in the DefaultIP path - do we need a corresponding code change there as well?
Pet peeve: can we change this to "information"? We can spare the horizontal real estate.
Shouldn't this test case be simply `SHOW\nTABLES` to reproduce the original bug?
can we ask isabella if we can add VERSION to generated code?
nitpicking: I think the phrases should be english phrases, like "DeleteWebhook deletes a web hook" (note the ending `s` for third person subject being the function)
Burn it with fire! +1 +1 +1 (i.e. +3)
We're using `root` twice here, and as I understand it, it doesn't have quite the same meaning both times. Could we find a different word for the second usage?
`import sys` the next line
The intention with this helper is that if a publisher used `latest` at RTV 123, but 123 is outdated, then they really wanted `latest` at RTV 456. We couldn't just naively translate from the currently loaded version 0.1, because that was the latest at RTV 123. When we published RTV 456, the latest could have been 0.2. But now that we're locking this down, I don't think we need this anymore.
I think calling out `NaN` here would be better than `0`.
The name "bookkeeping" feels a bit unusual here for a public facing thing. Should it be `PULUMI_HOME_DIR`? or `PULUMI_HOME`?
We can remove the `// Re-deploy policies` code in line 218 as a part of this PR too. The test isn't going to pass until we remove this
I like including this, it should help shake out any string issues before we switch.
This has got out of alphabetical order.
Can't do this... SharpDX is only for DirectX platforms.
Why are we calling BreakSolutionStepsLoop here?
NaN cannot be produced by a cast from exact numeric to a floating point. So for these casts is as if NaN value did not exist, and the rule could just work for `*int* -> double` casts. If the literal is NaN... this may require special handling. I am not insisting any change now, but it seems there might be room for improvement.
Once we confirmed resubscribing via "pending" is indeed what we want, we can revisit this check and maybe come up with something smarter.
Somehow missed this before. Would you mind deleting this line, and updating the `'application/json'` above to be `'application/json;charset=utf-8'`?
`canonicalize_path` comes from `spack.util.path`, not `llnl.util.filesystem` doesn't it? There are more of this reference below.
The matches are not _returned_ by the `expression` argument. How about something like: > determining if values retrieved using `expression` should be...
This is incorrect if `shape == ()`, when the correct output is `strides == ()`
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
Could use `self.func_map.get(target, target)` here for a minor simplification.
Don't use the variable name 'sandbox', use something like fastFetchSandbox or renderingSandbox, sandbox is already used as part of the testing framework. Fix here and below.
why an array? would a regular object not be more appropriate? Also, indentation
don't need `.String()`
Ownership requires you to do `pauseCallback`, `resumeCallback`, `setInViewport` and a few others.
Nit : Capitalize the start of the error message
I would move this method to the bottom of the class because it is deprecated.
Could the meta table be empty? If so, maybe omitempty would be good here
Nit: `RTL_STATE` would be shorter and provide the same information
We usually don't put API Docs on non public methods?
i think we could even use `CollectionRepresentation` here, right?
should we add a TODO to remove the thread/tx association?
- Where is the size of this pool configured, whats default? - We should still hand off to Flow pool at some point.
I think the indentation is wrong here
chunks() give user an iterator which allows user to iterate the whole content in chunks. (Your English is better you can rephrase it!!)
I do't think this belongs to the taskContextsupplier. This is very much product specific. Task Context supplier is meant to hold information about spark tasks and nothing more. Let's see if we can move elsewhere.
type definition should be that type is subtype of `java.lang.Thread`
You should use the logger
We did not have any test coverage for Type.GetTypeFromCLSID and Type.GetTypeFromProgID
The `include/libzutil.h` header contains some conditional `HAVE_LIBUDEV` blocks which should perhaps be restructured so the prototypes are always declared and function implemented, even if it may always return `ENODATA` or `B_FALSE`.
super nit: since this is used in a couple places, maybe define a isTxHashValid method.
won't this ignoring of error here could result in improper processing of IngressClass resource semantics? Assume an installation with IngressClass resource defined and an Ingress resource referring to that. Under scenarios where kube-api is unavailable, this would cause the `shouldProcessIngress()` method to skip such an ingress in the provider sync loop. I think such errors needs to be propagated above to the sync loop, so that it goes through backoff retries..
please add some description about what it is and how to configure it
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Why these changes? This feels like more clutter, for no value.
parameters should be "not nullable" by default unless a "this can be null" annotation is provided.
This was copying all 100 bytes of buf even if the message was shorter, and then those extra bytes were being included in the hash
I think load from etcd is not necessary here.
this is something that I've missed in #52928
we can't do this. These libraries need to be cross platform.
You can remove this import now.
should we be defensive here and check to see if there are any items after the split?
I think that this is a requirement for all expressions and not specific to ngClass. If you want, you could modify the example to show how the dash-ed class names should be quoted, I think that would be more useful.
On `docker` this is by default false so no `chown` is done. Since `podman` should be drop in replacement for `docker` I made it false by default here, however this might be surprising for current users of `podman`.
Nit: could revert this couple of lines so that tagName is sometimes undefined. Then below have the check use optional chaining: `if(!tagName?.startsWith('AMP-') &&...`
I would add `get_src_requirement()`.
Looking at the code based on the **this.started**, on start method we are setting **future** with **CompletableFuture** by calling public method **setInternalFuture** of current class. As this is public method caller can modify the already se **future** instance variable. In future if we implement sub class of **AsyncContextImpl** class and override **setInternalFuture** method, then he might introduce bug if missed to caller super.setInternalFuture(). Should we make setInternalFuture method as final? What do you say?
Could remove the need for the loop being that a `map[string]string` should be able to be converted to a `common.MapStr` `common.MapStr(tags.(map[string]interface{}))`
this import does not match what is is use throughout the rest of Jenkins core (be it correct or incorrect).
tbh, i did not like this naming convention either. We use `lParam` and `wParam `extensively across VS and .NET repos. why are they not good here?
This is racey. If the head tracker has pulled down a new head between `Start()` and now, this head number will be wrong. You need to read from the DB _before_ the head tracker starts.
this could be renamed to copy, people have raised issues with the nomenclature of a snapshot method in a unrelated module.
Please use `github.com/ngaut/log`.
could just use `humanize.Bytes` throughout
Why is this necessary?
No need for this guard. The guards below are sufficient (we don't do this elsewhere - e.g. see s_server).
can you go tagless as you apparently don't need it please?
Always prefer for loops over `forEach`. This creates `n * m` closures where none is needed.
I like using `__FreeBSD__`, but a just as a note, I'd like recommendations on a standard osquery OS/DISTRO determination name scheme throughout python (gen___.py), bash (provision.sh), CMake, and C/C++. Right now you can use APPLE/LINUX/CENTOS/UBUNTU/FREEBSD in both CMake and C/C++. In C/C++ the output from lib.sh's OS and DISTRO are defined by CMake. We should set a DARWIN to be consistent on Apple/OSX.
Raising scope now that PBEMSetupPanel is in a different package
Trailing slash could be removed from this example also.
assign the guid to the annotation GUID on deserialize.
Remove configFile, just use configURL instead? We won't want accidentally fall into a situation that configFile and configURL are different.
Also I believe the key type must match the type of the string on the left of the '%' (in Python 3) or must be either str or unicode (Python 2).
MonoGame is using an older version of C# (C# 5?), so this will have to handle both exceptions in separate catch blocks.
Maybe it's time for a CeWsModule class ? : )
Is there no replacement?
there is another class named IndexingServiceFirehoseModule, wondering if we can just delete that class and use FireshoseModule in indexing service also.
The old code still reads this table as a fall-through right? It may try to establish a connection to the table....which would go very poorly if dropped WDYT of moving this drop into a 3rd PR?
Description please, all the new vars should have one.
IMHO, these methods need unit tests to ensure maintainability and that people don't inadvertently change the logic to be incorrect.
There are lints that catch this sort of thing. Does the `if` statement confuse them, or have we not turned them on yet?
Instead of sending an Entity ID as a string, send it as an EntityUid, which has a `ToString()` overload for all your needs!
can you make it accept strings as well, similar to sklearn `cross_val_score`
is this a default value we are hardcoding?
Bad empty line.
Can you remove the added semi-colon please. It's not needed.
Layout/TrailingWhitespace: Trailing whitespace detected.
In Pleroma and Mastodon the `@` is outside the link, it is just some CSS tricks that it looks like it is part of the link.
It seems the only purpose of this line was `name = name.replace(' ', '-')`? I think that's better done in the normalization function (`text_to_slug`) that does everything else.
Here (and elsewhere), "inestable" should probably be "not robust" (assuming that's the intended meaning).
Would be nice to rename the `namespace` parameter into `parentNamespace` like you did in the `createLoadBalancerServerTCP`. It's easier to understand where the namespace comes from.
If these are only for the CLI, then they should remain in top.go.
This is not required
To make sure I understand, this was already done later as part of ReadNextREsponseHeaderLineAsync, but we're preemptively doing it here so that we can definitively say after this that data was received?
this is not a string but a `Position` (`Sulu\Bundle\ContactBundle\Entity\Position`) entity
Can you explain what the +999999 here is for? It seems to contradict the commit message, which offers sub millisecond ticks.
@lmazuel So I noticed that before I updated this the AutorestCI changes set this version back to 0.1.0 instead of bumping it. Why does it do that?
These keyword arguments aren't for the task constructor, they're for boto. Rather than taking in `**kwargs`, perhaps this task (and all other aws tasks) should get a `boto_kwargs=None` keyword argument for kwargs to forward to boto. This makes more sense to me, since we might want to do something else with `**kwargs` in the future, it's clearer where each argument is going. If you want, it'd be nice to add `boto_kwargs` to all the aws tasks, but I'd also be happy to merge if you just added it here alone (I can take care of the rest later). Up to you.
Fix import order to conform with java, org, com, org.apache.gobblin order.
I really would suggest some error handling stuff. I hadn't worked with it either, but I guess there will be enough samples out there.
Please send this line top on the Gogs
Nothing above actually checks and returns early if the new config is the same as the old config, so this could send unnecessary notifications. I don't care much either way, so if that matters for the GUI we should maybe add a check like that above.
I think we can set the `is_data_parallel`, `is_inference` to the arguments of `CompiledProgram`, now if user just use `CompiledProgram` but not invoke `with_data_parallel`, the program is still executed by `Executor`, In this case, the program is not `compiled` in fact.
Also I just noticed looking at our `cmdutil` package that there's a way to read config files using it too. Not sure if that'll make things easier but it might.
Can the version please be changed to "0.5.0"?
Did you get rid of this line when you tried nesting all `pacpy` imports?
Strictly speaking we're not using this as a general const for "ssh retry" defaults (that is in the remote/ssh.go file)
Why are you hyphenating here?
But more specifically, why `10`? Also you replaced some numbers smaller than 10 with this.
`IssuerOverride` tells pachd to try and reach Dex at a different hostname than is specified in `Issuer`. This is necessary if DNS resolves differently within the cluster and outside of it. For example, when we're running in minikube Dex is reachable at `localhost:30658` from the host machine, but at `localhost:658` from within the pachd pod. `Issuer` should be configured so it's accurate from the host machine's perspective, so the OAuth redirect links resolve properly in the user's browser.
I'm still hesitant to re-enable it, it passes locally but apparently sometimes it will fail on CI. I'm looking into it.
nitpicking: I think the phrases should be english phrases, like "DeleteWebhook deletes a web hook" (note the ending `s` for third person subject being the function)
I think load from etcd is not necessary here.
GetString can return null. How do you know it isn't in this case?
Both of these functions should be deleted, since they aren't being used.
Unneeded change adding trailing whitespace.
Pulled this all into the transaction...I'm assuming it's okay/safe to do `record_identity_creation` from within the transaction but let me know if I've got that wrong!
empty has meaning?
i think this will need `mage fmt`
Is there is a default value, why not use a primitive value with a default of `false`? Then, you do not need these logics in a POJO get method.
Perhaps move this to the loop guard directly beneath?
Kind of hacky but don't have a better solution.
Same thing with this import.
maybe using %q? => "Failed to remove image %q: %s"
Missing an **r** in mdserver (same with "bserve" below).
Any reason for this to be removed in pip 10 instead of pip 11? I'm not opposed just wondering why the accelerated schedule.
may need to fix test.
I think no need to camelCase this can be just `_.kebabCase(this.baseName);` I already did this in master
I would only add it if it is actually used
Maybe do that delayed cancellation thing here to preserve the tags? Also do you think we should still have some sort of timeout here?
No - this isn't the realloc semantics. "If realloc() fails the original block is left untouched; it is not freed or moved."
Amazing   Let's also remove it from our dependencies. You'l want to remove it from `Gopkg.toml` and run `dep ensure`
Can't this be avoided by setting `pointer-events` to `none` ?
I think the logic here is reversed? (I don't see ignore_name used in any test in this commit.) About naming: (optional ideas) 1. I'd recommend to be more descriptive about when name is ignored. Ex: `ignore_name_in_eq` 2. I find using positive variable names easier to reason about. `if use_name_in_eq` is easier to read than `if not ignore_name_in_eq`.
Probably `attr_reader` would be enough here.
These are not really mutually exclusive, but our current schema for dvc.yaml doesn't support it. Plus our old dvcfiles were fine with it, so maybe worth just allowing it. Will revisit this line in this PR.
msg: 'Failed to normalize glob patterns: ' ?
Right now we call `accessible?` in `StoriesController`, where we pass in `@page.feature_flag_name`. In `Page` we define this method to return `"page_#{slug}"`. So am I missing something or can this never be `blank?`?
I imagine this is breaking the build, but otherwise LGTM
What's the warning here? Integer overflow? It's probably not very useful to fix this here because a schematic that overflows the size calculation will cause bugs in other places anyway.
Does this need setting more than once? Can we make it readonly? Making this hard is important as defence in depth measure
If we're going to make this function always return `nil`, maybe we should change the return type to nothing?
while you are modifying this line, please add a blank after declaration
What about moving the `_should_suppress_on_change` logic of each specific event to their classes? Feel like taxonomy of events and conditions can quickly make this method blow (in readability and maintainability)..
Do you need this in BDF2?
I don't think you need this unless you want users to use your network as `amp-embed`
No need for a \n here - we can clean that up at another point.
can you nuke this?
Rename this to remove the reference to V2
I'd put the `pdf_fname is not None` check first, it saves one comparison if it is `None`
Hm? Why would you need such change?
We can't do this - breaking change for anyone that has subclassed and implemented `destroy()`. I suggest we use `// NOSONAR TODO: remove throws in 5.2`, which removing it from our subclasses.
This should only be set when it is closed.
Note that this will also handle `'1i-am-not-a-number'` as `'1'`.
Please update to `aws_inspector_rules_packages`
On Line 741, there is already a leader check or do you explicit need to check not for Asisstant?
does this need to be in the base? should it only be on nodes?
The context of this file is empty. Can it be deleted directly?
This import shouldn't be necessary.
What does ` ""!` achieve here? Is this the "null-forgiving" operator?
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
Do we have any callers type asserting for os.ErrNotExist?
this is correct, however we have a long standing name clash between the Kratos::Parameters and ConstitutiveLAw::Paramters. could u add "ConstitutiveLaw::" to prevent future problems?
Can you explain the reason for adding the `class`?
I can't belive we already had it and weren't using it. *face, palm*
why not just move the definition and the assert into the block ?
Conventionally, `is_xxx` functions return a boolean. Returning a pair will be especially surprising if one writes statements like `if is_interactive()` and the return value is `(False, False)` (which as a non-zero-length tuple evaluates to `True`.
bc allowed because interface is experimental, we could even enforce this argument?
Kindly update the docs to reflect the new flag
is upper exclusive here ?
This property is not assigned correctly and never used, so I removed it.
Did you get rid of this line when you tried nesting all `pacpy` imports?
minor: feels odd to call this a get when we don't return anything
This looks dodgy as frig'
Why not just use `__toString` ?
:+1: Good to see ITripleAPlayer be consolidated and the hierarchy collapsed. It was a useful abstraction when there were multiple game types, now that things are focused it is past time for it to be simplified.
did you mean `? (int)bytes : RAND_BUF_SIZE;` ?
Change it to `c.Assert(camelCaseToSnakeCase(input.name), Equals, input.newName)`. Obtained value should be in front of expected value. Although it is not introduced by you, thanks for helping to fix it.
Don't abbreviate. Rename it to `AGGREGATION`
does that mean we don't actually throw the error anymore?
Can this be set to AnyTimes() instead of using multiiple conditionals.
How about using more narrow client? I'm shooting core (without looking at code), which should suffice here.
> This operation updates bounding boxes by applying multi-class non-maximum suppression (NMS) and re-scoring.
Use the same constant defined on FileConnector
Add ButtonOrdinal: `public enum ButtonOrdinal : byte { Left = 1, Middle = 2, Right = 3, X1 = 4, X2 = 5, }`
`Q(email__ilike=search_value)` I think it's missing in parametrize.
Is this file here to make editable installs work (for python 2)? It is not included in the actual package (wheel/sdist), correct?
Specifically, these changes necessitate the changing of the other keymaps, as this module is hard coded to expect the specific layer values. There are other ways to fix this, I'm sure, but this was the simplest option.
Somehow you dropped a space before `src` here.
What is type of $arrayquery['options_'.$key] If int add the cast (int) to avoid sql injection If string, add ' ' and $this->db->escape()
Should be ObservedGeneration is the most recent generation observed for this **Seed**.?
Let's try to keep the imports alphabetically sorted
The new name may now conflict with an existing name. That's why we use a character that's not valid as an identifier. Since we also generate names that aren't valid in C elsewhere, it would be better to have a centralized facility for dealing with problematic names within mypyc. If you want to pursue this, I can give some pointers.
Please use `github.com/ngaut/log`.
Maybe wrap the parse from text functionality in the EnvValues too? Seems have some duplication with parsing ``conaninfo.txt``
Hummm, why did you move this code bellow?
New line is missing.
why'd you do this??
Is this TODO supposed to be done in other PR?
license header to be removed
What is this being used for. gorm should not be anywhere in the code now
Nit: If we're adding new code, we can use `tfawserr.ErrCodeEquals()`/`tfawserr.ErrMessageContains()` to save the later refactoring.
`Dist` should be completely deprecated. I'm ok with all the `CONDA_PACKAGE_EXTENSION_V1` usage in this file.
damping is done one a different level in the penalized_projection algorithm
I would not do this. It can be a significant API change. Don't you think it leads to less changes if you keep it False and just change it in Epochs + Evoked? cc @Eric89GXL @dengemann
Use empty lines between method definitions.
What does "loa of the ial" mean here? Why not just "has content set to LOA1"?
nit: an update on the description would be nice
This has to be swapped around. `start_mediated_transfer_with_secret` is not the base case anymore, but the exception, now it should call `start_mediated_transfer_async` and not the other way around.
we should keep both specs (callback and promise) until the deprecated functions are removed to ensure no regressions
please use braces - this code is very old, that is why it does not follow the code guide.
%T will output all the fields of the filter, is it ok here?
`std::string` has a default constructor, so `boost::value_initialized` was never necessary :/. But the change is nice anyway, I typically construct blank `std::string`s this way.
But more specifically, why `10`? Also you replaced some numbers smaller than 10 with this.
I would go further and put an assertion in the MockHttpExpectation function that throws an explicit error if the url is undefined. Then you don't need this line here at all because by the time you get here you are guaranteed that the URL is not undefined. And also the user gets a clear error message if they failed to provide a URL.
this is no longer valid as the algorithm has changed
Why was this reverted?
While this PR is focused on the receive feature, I'd like to see the same thing happen for sending as well because I'd like to see both startup checks here.
is configFile still being used? Ideally should be removed.
Change package name to `r-r-methodss3`
You should use `\DeviceCache::get($obj['device_id'])->groups` instead so it doesn't fetch the device from the database again.
Could be formatted a little bit better?
This type has only 2 uses, and it doesn't appear we have any "WinFormsCategory*" resources... Perhaps this class was/was meant to be used wider but wasn't. Perhaps we should retire it completely
This file has the main addition for this PR.
has to -> `must` to put more enphasis?
_collect calls clean_ret in the failure case, so I think we can't do the free here. Could either add a free_ret wrapper that calls clean_ret and then does the free, or do a cleanup function in the Go code that adds the free.
we could also switch this to `user_confirmation_path`
Add a view to core and have both profile and groups plugin use it.
Yay for removing dependencies!
`disk` partially conflicts with the intentions of `incremental`. Either 1. rename & clarify `disk` to `sparse_metadata` (or similar) 2. or substitute `incremental` within this function with `!disk` because it is an optimization that's always performed over network, but never to disk. Same concerns for Inventory::serialize
The deletion of the associated `UserProfile` is taken care of via the `on_delete=models.CASCADE`.
Was there a specific reason not to use `esc_html` on the `$tab->get_label()` ? It seems these are translated strings that just contain a word in the implementations.
Did you get rid of this line when you tried nesting all `pacpy` imports?
String concatenation won't leave a space here. We generally use a trailing space on the first line.
Could we rollback this change too?
again where is the assumption that --too is specifying a DockerImage reference coming from?
revert this and rebase
constant can be replaced with `sizeof`
I hope this is a good place to add it.
Is this import still necessary? I don't see we using describe any more here.
Love the addition of the docstring. Nit: Is it more accurate and concise to say ``Update the provider index with additional virtual specs`` given the inclusion of the `Args` description?
Can we schema definition of each dict here so cerberus validates it?
a safer looping   shall we remove `el.tagName != 'BODY'` as well to reduce confusion?
Late to the game. Is there a reason why `github.com/cri-o/ocicni/pkg/ocicni` is not part of `github.com/containers` (or ideally a package of libpod)? Would be nice for CI and for consolidating packages.
Can this link to the Sandcastle example and include an `@example`?
Does this work with nested classes?
I'm not sure this change is going to work for everyone. maybe turn it into a config file parameter?
Trailing whitespace detected.
Not sure if changes to this file are necessary.
this is NOT an aliasing problem, because all accesses have been changed to the `s3_helper` method
This is being removed because #987 got implemented right?
c/p err (was placeholder for something now remove it!)
The state is going to be stored in the regsitry file. Do we really need the ID here? Does the ID change?
What about only passing the `ETCDConfig` instead of the full configuration here?
Sending the delete user event.
I'm not 100% sure if this is the right way to dispose the server
Nothing above actually checks and returns early if the new config is the same as the old config, so this could send unnecessary notifications. I don't care much either way, so if that matters for the GUI we should maybe add a check like that above.
Is there a reason you need this method?
we use to call this `imageapi` (we do in many places)
Just for my understanding, why is an identifier required for the import?
This should be reverted as there `<custom-element>` would never actually appear in any HTML.
_collect calls clean_ret in the failure case, so I think we can't do the free here. Could either add a free_ret wrapper that calls clean_ret and then does the free, or do a cleanup function in the Go code that adds the free.
It would be better to move these lines into `org.apache.hudi.xxx` segments?
Moving it to Cython means exposing most C structures to Cython and staring at tons of generated C code to see that it actually does the right thing (like in #891). I wouldn't do it bundled together with a functional change.
do we need this in e2e tests? They usually don't test some internal states\props of components. e2e cares only about result from user perspective as much as possible
Refactor to use Objects.hash()
Nit: these two migration files could be cut down to one.
Maybe create some default scope for ordering ?
What do you think of doing this in `ReplayableTest._process_response_recording`? That is to say, decompressing the body before running any processors? No processor would need a change then, because they would all get the decompressed body they expect.
Don't do this - keep the fields the same internally and externally. When we move to ingress this is going to have to merge in, and ingress has no concept of duplicate from.
I think just `CACHE_DIR` is better, because we can use this for other types of cache later.
Great, datanodes will no longer print "server started" right when being stopped. :) This has always bothered me, but not enough to fix it.
I guess this test could be "smartly" merged with the test above: `if (!(o instanceof RegisteredServiceProxyPolicy)) {`
This was an automatic IDE optimization I wasn't aware of, but the logic checks out.
I suppose this is the default config now (inherited from `root`) so we could probably remove this entry.
With `is_flag=True` you don't need the default
Do we need/also want to check that each basic auth value adheres to the `user:hash`? I think we should answer the question with _yes_ if it would simplify reporting an error to the user somehow.
OK, completely a personal twitch, but could you change the name from 'Rm' to 'Remove'. Variable names with less than 3 chars make me twitch, especially when their scope is more than a couple of lines.
nit: you can merge both lines above as `checkNotNull` will return the given argument
Is XmlReader.NamespaceUri guaranteed to return non-null? It's abstract, with a ton of of types overriding it.
Can this link to the Sandcastle example and include an `@example`?
lets test that the event is triggered in the controllers as well :)
Intentionally forcing the return type as non-nullable here, as declaring it nullable would require marking the `ISignatureTypeProvider` and `ICustomAttributeTypeProvider` interfaces implemented by this class as having a nullable `RoType` type parameter. In turn this would result in pervasive and unnecessary nullability annotations in big parts of the codebase.
[nit] Could be `func (*State) EnsureNoProjectsMissing(context.Context, []string) error {` but doesn't matter
It's not immediately clear to me that this will call `_default_summary_view()`, but I assume that it does.
this seems to be an unrelated change?
Do we know for sure that `setReportError()` will be called by this point?
replace `System.out` with `log`?
Should this really be the empty string, or is this an error condition?
Maybe we should give an indication that these are suggestions for the user to join and offer a command for them to move forward.
We already have `get_customer_email`.
no need to check overflow?
Since the changes to this file consist only of import ordering, it would be best to rollback the changes to minimize the impact of this PR.
this call was accidentally lost during conversion from decorator to tracer
Can you use another variable name other than `$output` to avoid conflicts anywhere else. Maybe `$ibmi_output`.
this code is practically a copy/paste. Have you considered moving it into a separate function? I am also not sure how does it print a stack trace if there is no call to get a stack trace? Is there any call to a recover() somewhere?
Presumably this works on Windows? Is it ignored, or does it attempt to copy symlinks? If the latter, then it may fail because the pip process is not elevated (creating symlinks needs an elevated process on Windows).
Is this close done somewhere else? Is it not needed?
nit: move to bottom :trollface: Also somebody should set `goimport` for David
Where is this used? I only see this definition (and the one below) but no call sites.
can you add kwargs here?
Same here re `goimports`
you need to move the `tslint:disable-next-line:no-unused-variable` below so that it is applied to `ErrorBoundaryRoute` so that linting doesnt fail when there are no routes here on a fresh app without entities
The parallel foreach can also take the one from CoreDslConstants
@jadarsie if I follow our usual process, this leaves Azure Stack without a supported 1.16.x version, so I disabled this test. But let me know if you prefer a different approach--we can be flexible about version support if need be.
a dev channel could contain a trailing space, this would prevent the prompt from ever being confirmed
Okay, but I'd like to see the `fd >= FD_SETSIZE` also in bio_wait, and defer to the default handling in that case.
I am not sure if using `hide-if-js` does make sense in the menu context. Could we consider changing it to `hide-from-menu`? We will need to pass this guideline to Woo too.
May you confirm Prefix is not also set objects?
Let's use `connectedClients *atomic.Int32` instead. It makes it clear that this is accessed atomically, and it also avoids possible alignment issues (although that's not relevant for 32-bit values I think).
Are there any places to check if the error is `plumbing.ErrReferenceNotFound`?
No longer used?
what else can it be if not string?
I'm not sure this is a good change. If you are constructing a `NotFoundFileInfo`, you should be passing the name in. Allowing `null` here is misleading to the usage of the class. Even though it doesn't throw an exception, we should still annotate it as this needs to be non-null.
`read<T>` implies that multiple types can be read, like bool and integer. Yet it only supports floats, which lose are not accurate enough for 32-bit integers or higher. `luaReadFloat` would currently fit better, without any template.
Why is this an `InterceptingMessageProcessor` if it never ever uses `next` via `processNext` or `applyNext`?
Seems like a bad idea to remove this?
it doesn't change the outcome but show that's the desired returning a `null` value, unless your consider the phpdoc to be enough here?
This could be `private final static Function<DimFilter, DimFilter> NEGATE` (i.e. made static)
Lets pass only the new [conf], not the old one.
"reflect" should go up to the top with the golang stdlib packages.
versoin should be 0.8.0
Nit: this should go between cortex imports, and not be standalone.
we could hit all these k8s resources and fail against a kubernetes server, right?
By only looking at the service name wouldn't that mean that health changes in 1 node in a bigger pool would not trigger a message. Or maybe I'm confused what ServiceName is here.
I would argue we shouldn't return an error for logging debugging data in this "if not successful" block since that will hide the important error which is `Expect(success).To(BeTrue())` on line 624. The logs are bonus, not part of the actual test.
expandStringMap does the same as this i believe
We dont need an extra gap at L9
@bflad not sure if this will break anything - had to do it in order for import to work correctly though.
Consider including a link to the PR that fixed it in the message.
Code-wise, this is the actual fix. All other changes are just related to the removal of dead code.
The config option is "disabled bool" instead of "enabled bool" so that the default will be "enabled" (because the zero value of a bool is false).
Why lower this?
why the conditions, cant it work the same way as other reducers?
Same nit here about import grouping (which looks like was already not quite right). If you don't fix the imports that were already grouped incorrectly, you should at least stick a newline before this new import.
If we aren't going to propagate the error up, can we log it?
Why did you break this line?
This still could be both `ClientInterface|HttpClientInterface` as our bc promise.
Suggest deleting these no-op initializers
Now a `utils` function has to deal with data side-effects :( But it's fine because it was already dirty in how it would edit the user modal if the `stripe_customer_id` had to be set.
4MB? That might be too big  . Lets do 2MB for now (matches the array pool max).
This was fixed a while ago.
Can't we make this safe by preserving the correct things on `XmlSchema`?
It had no host parser before :thinking: but I guess it should have had it.
you might want to put a condition for T to be derived from LoadedTypeItem
parent is now always a span context since 0.7.1
This is the only time we handle the dirty records encryption parameters. Other kinds of raw writes set these parameters directly into the arc_buf_t. Perhaps we should adjust the name of `dmu_buf_set_crypt_params()` to make this apparent?
Nit: plz make this method name consistent with the other `initialize` ones
This will call `cancel_all_open_orders()` at every throttling iteration in the STOPPED state, I do not think it's the intended behavior... This can be fixed/improved either by a flag here or in the Freqtradebot class, or better by introducing the new STOPPING state, which will transit the state from RUNNING to STOPPED. (@xmatthias not in this PR, what do you think?)
Instead of assuming JSON is a subset of YAML for this to work (works most of the time, but there are corner cases), can you use a content-type head to detect YAML? And have JSON be the default.
`tagName` may be undefined if it's not an `Element` (note that `node` is a `Node`).
It seems weird to have semi-typed datatypes...
extra space before `break`
I don't understand this. What are the `select` and `option` elements?
Let's remove this and use `ptypes.MarshalAny` directly.
So even the repository created some issues, this will still hide them when `setting.Repository.EnableIssues` changed to true?
Does this really belong here? I think a better home would perhaps be the thing that configures the mfa flow in general. It would be best to try to keep the flow defn as _pure_ as possible, and only interject when a feature is actually used.
It doesn't really replace the category, it updates it, doesn't it?
Warn and not error as it might be legit to not find a dependency in one repo (should fallback to the next)
Same as the ExtensionResourceStateList -> the names should be unique. Not sure why return was skipped here on my part :/
Why is x the only one that's nullable? Is it fundamentally different in that regard from p, q, g, and y?
You may want to use the new stuff I added to cmdutil to recognize and strigify errors with stacks and causers specially.
why are we changing this one?
why should we introduce this?
Actually this might not be right. A bit confused here -- this is coming from the viewer (which also uses `postMessage` and requires cloneable objects), so how did an `Error` sneak in?
We can import model outside function.
this is a bugfix? But it will break scripts, no?
This attribute name isn't very good. I would suggest "only_required_files" instead.
Pass `&:timestamps` as an argument to `change_table` instead of a block.
This probably needs to read <tf.Tensor(..., numpy=[[[ 1.815 -0.9... 0.09...]]])>
maybe add a `ast.exp` to show the bits have been inverted?
It doesn't seem right for me to have a BundleDependency with additionalDependencies. It feels like it's not a proper Object model. Could't that information be in the ClassLoaderModel instead?
Any reason you're using a different logging package here than we use in most other places in the repo? I'd prefer to keep things unified if possible.
Does this need a return now? Otherwise it will fall through to the next and may write again.
Why is this part of this pull request?
that's all we can check for sure ?
its also okay for me to just update the baseline for such errors in the future
We could link to the directive guide/normalization here
Minor spacing changes here, and above and below by a few lines
Did you mean to leave this in?
Should we remove this method and replace its calls with just creating the action where it's used?
Nit: this doesn't have to be in a `mutateElement`
Should not we use `fmt.Sprintf`?
shouldn't you apply `preg_quote` to be safe ?
Does it make sense adding a static method NullPayload.isNull() which does null check too, or something similar? Or is this check only going to happen like this on specific occasions?
this is missing the license header
Sometimes $_SERVER['HTTPS'] is not set and port is 443, so in such a case, the s will not be added. Can you provide the case you get with a bad detection ?
You've changed from crypto/rand to math/rand here. What this deliberate?
Late to the game. Is there a reason why `github.com/cri-o/ocicni/pkg/ocicni` is not part of `github.com/containers` (or ideally a package of libpod)? Would be nice for CI and for consolidating packages.
This is indeed a problem because it is marked as done even if its previous writes were not.
Pretty cryptic error message. It will make it easy for the software engineer to find where the error happened but will not be useful for an end user I think.
by default it logs to STDOUT, let me know if this should continue the default behavior
I think you also need to do the same changes in `Ref` project
Let me know what you think about this variable, if it should be renamed or implemeted differently
Where is this used?
nitpicking: I think the phrases should be english phrases, like "DeleteWebhook deletes a web hook" (note the ending `s` for third person subject being the function)
IMHO, a more idiomatic way of specifying this is JavaScript would be `this.activeColumn || ""`.
Why? The type annotation is already there in the function signature.
What is this % for?
[nit] Should we call it `ListUsersWithFullState` for consistency with other function names?
@hasnain2808 validate will be called on change event as well right? this seems redundant (because `focusout` will mostly trigger change event)... am I missing something?
Why is this needed?
I would remove the `if (Equals(sv1, sv2))` at the beginning, and replace lines 2616 on with `return x.CompareTo(y);`
Likewise, why use `s_crt` here?
Please put it back :)
Sentences should always start with a capital letter
Intention was good, execution a bit worse ;) @deads2k mind updating in a followup?
why not remove it?
I suppose this PR is WIP? In that case, please add `[WIP]` prefix :slightly_smiling_face: These lines shouldn't be removed in the final PR, unless there is a really good reason for it.
Can you explain what's happening in this method? E.g. it feels a bit strange that `svg` is simply returning `png` instead.
Remove this, since it has its own set of overrides below.
Would be worth making these a bit more realistic? I'm assuming that `key` is the feature name `annotations` and value is some sort of flag (`true`?). I expect there's a good reason, but why isn't value a boolean?
Use relative imports. Actually just add this to line 8 below.
Doesn't this override the value if we change deck, since the extra is never dismissed?
out of scope, when searching for syntax to enable sys properties at runtime, just noticed that this one was not restored correctly.
Extra empty line detected at body beginning.
`name` is a basename, we should be checking for the `str(path_info)` which should also make it work with `../data/**` kind of globs.
In what circumstance is this needed? I think you can just do `{"type": "model_type"}` rather than passing `model_type` as a string.
Almost certainly not going to end up being this, as we use different structs elsewhere. I would recommend `[]ocicni.PortMapping` as used in libpod
We should not pass out the `DynamoView` to client code like this. We should make the property immutable by only expose `{ get; }`. My suggestion is to leave this property out until we have more specific API requirements. It's also easier to add API's then to remove them. :)
Is this an unrelated bug fix?
Maybe `UNDEFINED` will be better
i don't think this is fatal either...just log the error and keep going.
I don't understand this. What are the `select` and `option` elements?
I don't see an edit in here to add `__str__` for python requirements objects. Perhaps you already checked and they are fine?
The original line created a `DateTime` in UTC. Does the new line create a `DateTimeOffset` in UTC?
this should be restored
This seems wrong. Everytime you create a ProjectResolver, you add a new WorkspaceResourcesRepository plugin to the workspace.
This shouldn't be required.
If empty, then just RegisterProtocols(nil)
mocks should never be `static`. For this 'single use' mock I'd just create it inline in `startRestServer`.
Amazing   Let's also remove it from our dependencies. You'l want to remove it from `Gopkg.toml` and run `dep ensure`
I would use error as the second return argument
please add this to `equals` and `hashcode`
@ruflin tests are failing because of this change, according to tests, path should be `6/index-pattern` for all versions major to 5, is this correct? should we continue using the generated index patterns for version 6?
I really think this should be a separate test from the WrongHost test above it, but then I looked at the whole file and saw the pattern. Ugh. It would be a big improvement to make individual tests for each, although I don't blame you for not including that in the scope of this change.
For the same reasoning as above, this should be `Guid WorkspaceGuid`. If you noticed, the attribute names used in most other recordable commands are the same as the properties themselves, so when we serialize this command, it would end up as `WorkspaceGuid`. This is just to align better with other commands.
How did you come to these values? Benchmarking?
Something you want to fill?
Doing a check for list to avoid converting a string into individual letters, which was happening with one test case.
Just like in distutils, I think pip should raise if the user provides both `--user` and `--prefix`.
Is there no replacement?
nit: combine these?
Converted from deleted *.rec test.
This is not allowed - pkg/monitor may not take dependencies on deep test packages in general.
Just to be sure that I understand this WIRE - publish to wire clients DIGITAL - publish to digital clients, used mostly for takes/master files BROADCAST - same as digital but in the case of takes will receive the take stories beside the take package, the only broadcast subscriber we know of currently, is PublicAPI Are these assumptions correct?
c/p err (was placeholder for something now remove it!)
It has already been GetStorage?
nit: you may want to change intellij editor settings. its generally discouraged to use '*' imports.
we might want to find another name here. `rotation` suggests that the input is capable of rotating the file by itself.
Can the version please be changed to "0.5.0"?
Just noticed there's also: "enumetation" -> "enumeration"
This is wrong because we defined a default value in the `Config::get()` call, so the return value will never be `null` and this condition will never be true.
Unrelated to this, but are we going to make an "oc build <subcommand>" branch to eventually retire these top level pieces (start and cancel come to mine)?
I'd strongly prefer if this one was undone. (If someone later decided, for some reason, to change the field assignment to alphabetical, there's now an object state change when the exception is thrown).
Looks like erblint in action in a few places popping in white space.
not clear which difference between first if statement and last
I think load from etcd is not necessary here.
why is this only called in 18mex? should this just be done inline in 18mex? will this be used for other games?
Why is this line removed?
why is this required?
I think load from etcd is not necessary here.
@zhouyx Can you review this change since you originally added this code?
I don't think this is valid, afaik there's no guarantee that a GCHandle's id will not be re-used
I will make it 12.1.0b, let me know if you feel it's weird, I just feel not confident about Jumbo blob feature, since with max_single_put_size equals 64MB, user always get timeout .... I feel panic about max_single_put_size equals 5GB
Line is too long. [98/80]
MIssing a space
IMO this would be better by using JUnit Assumption APIs, e.g. `assumeThat(isHadoopVersionMatch(), "Hadoop version mismatch, skipping the test")`. No need of the `return;`
join with ", "
I think package aliases in go are meant to be all lowercase.. maybe `kbmni`?
Should we name those functions appropriately? Eg; StateWithoutLock()
I wonder if `copy_modified` should propagate this flag or not?
` public function mergeOptions(array $options): self` ???
You don't need the conditional, jist short circuiting is enough
Weird... Was JsrtPch.cpp `#include`d somewhere at some point?
Alternatively I could make the conversion directly before `self.__name` is passed to file system layer which has the potential benefit that `FileIO.name` would return the original pathlike object without conversion. Though I am not 100% sure what the right behaviour there should be.
Just to make sure I understand what's going on: This is because the calling code is a try/except block that catches the error?
It's kind of odd to have a flag that suppresses the `and_diagnose` part of the function's name. :-) Also `quick` reminds (me) of `--quick-and-dirty` but it has nothing to do with that. Also might want to clarify that `ModuleNotFound` is still raised. (Hm, the docstring should probably mention that that is raised in the first place?)
We can keep `!==` for the second expression - that shouldn't be an issue. Parentheses (again on the second one) could be removed though - counts for the next two instances as well.
Probably a mistake before, but worth checking ... Could this have been intentionally hidden ?...
I know this check was added by @pkriens for a reason but inside of a distro bundle, there are multiple osgi.identity capabilities. So I need to be able to avoid this check or allow for it somewhow.
`name` will always end with "." when reaching here, so these codes are redundant.
I don't think an adjective make a good module name. Can you make it a noun, e.g. 'experiments'?
Instead of setting this in the `TaskState` where it is set in two places, why not set it here like `this.isIgnoreCloseFailures = this.taskState.getJobState().getProp(...)`?
This is the most important change. Is there a reason why we delete instead of destroy messages? Let me know if I should revert this.
this is really hard to read.. can't it be called encoderlayer_class or something (assuming that's what it is)? template is so generic...
I know there's more work to do to propagate changes to the ConfigMap to the controller Pod, but at this point should this endpoint always match `kubectl get` (after a polling cycle at least)? I'm not seeing the endpoint return the same config as `kubectl get`.
Maybe use built in `log.Fatal` ?
Not because of your changes, but can you rename it to SpringXmlConfigurationMuleArtifactFactoryTestCase and extend from AbstractMuleTestCase?
should we use logp.Error instead?
How is this different from `ByteBufUtil.indexOf`?
where is this logic in the new implementation?
the default should be made a constant somewhere instead of being defined in multiple places
Please update the import order following the coding style guide.
I'd just call this field `errIfEmpty`.
How is this altering the behaviour?
Probably update the phpdoc here to indicate how $current should be used.
We should note in release notes that iceberg metric names changed
These imports should be before beats imports.
It's not still useful to test FixedMetric here?
Can you use another variable name other than `$output` to avoid conflicts anywhere else. Maybe `$ibmi_output`.
Converted from deleted *.rec test.
I agree this new style is cleaner but my eyes aren't being able to see the NPE fix - is the map bring mutated between containsKey and get previously?
c/p err (was placeholder for something now remove it!)
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
I wonder if the caller is supposed to pass the direct client if we rely on the lines below or if the cache is still "fast" enough. /cc @tim-ebert
I don't think chk can ever be None. The type should probably be adjusted.
To make sure I understand, this was already done later as part of ReadNextREsponseHeaderLineAsync, but we're preemptively doing it here so that we can definitively say after this that data was received?
Could you explain what's going on here? Naively I'd expect a change on L1844 (since it would mirror the change in `parse_file`)
I assume we can't use `#testing` here because this directory isn't part of the runtime, and isn't babel-transformed, minified, etc. Instead of disabling the lint rule like this, I think we should introduce an entry in `build-system/.eslintrc` that completely disables `module-resolver/use-alias` for all of `build-system/`. /cc @rcebulko to keep me honest here.
Moving it to Cython means exposing most C structures to Cython and staring at tons of generated C code to see that it actually does the right thing (like in #891). I wouldn't do it bundled together with a functional change.
line: 177 `public Cookie cookie()` can also be package private right?
`IllegalStateException` maybe? or the `IOException` is always linked to the `port` param?
It can be hidden in the anonymous namespace
If service was just suspended, i think a lot of use case will need to invoice despite that. I suggest a hidden option to be able to choose status to invoice if (! isset( $conf->global->CONTRACT_EXCLUDE_SERVICES_STATUS_FOR_INVOICE)) $conf->global->CONTRACT_EXCLUDE_SERVICES_STATUS_FOR_INVOICE = '0,5'; and replace test with && in_array($lines[$i]->statut, explode(',', $conf->global->CONTRACT_EXCLUDE_SERVICES_STATUS_FOR_INVOICE))
This needs to use gettext().
why not use `time.Unix(...)` here too? like on line 911.
Does `numSamples` need to be recounted? Is there any way that it would differ from the above calculation?
why adding extra braces here ?
Nit: to make it a bit easier to reason about, I would not add +1 here and then remove -1 on line #38 and add +1 on line 41
The new name may now conflict with an existing name. That's why we use a character that's not valid as an identifier. Since we also generate names that aren't valid in C elsewhere, it would be better to have a centralized facility for dealing with problematic names within mypyc. If you want to pursue this, I can give some pointers.
What's the reason for this? the only point `_markets` is used is to debug-log the whole markets-dict as list... ? also it's not refreshed, so you wouldn't see new/disabled markets
Lets pass only the new [conf], not the old one.
Can you please mention the task name which was cancelled here
This fix is just to get the DynamoView to load in the designer.
Does IDEA recognise this annotation?
did you mean package "errors" or package "github.com/pkg/errors" :)
Does this mean there are no listeners at all? In this case all operations on gameMapListeners could be removed. We need to keep the variable for backwards compatibility though.
Not sure what this is...
Can you add docs for this new parameter?
Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body beginning.
nit: I would somehow link this to the variable `type`. Something along the lines of "The value for the recognized field. It's data type is described in `type`"
I would stick to list API typing [] is for me not that painful...
Not a fan of adding this `missing` element. Why not just call `continue` here, instead of later? Or unset the `$template` entry from the `$templates` array?
This regex wasn't anchored, so it would return `true` for something like `repo@<uuid>`, which is obviously wrong. This _shouldn't_ impact any existing code, but it's possible someone is relying on this broken behavior.
still in alpha, let's remove 'ForceCloseFiles' then. Don't treat config as deprecated.
I like this - this should be aligned everywhere i think
Is this intended `@Nullable` on the input argument? There are checks for things that call this for `nullToEmpty`, which are probably not needed.
Can you move this up with OS?
We can probably remove this if it is no longer flaky and we suspect the issue was a delay in Loki.
I don't think this is valid, afaik there's no guarantee that a GCHandle's id will not be re-used
I would remove the `if (Equals(sv1, sv2))` at the beginning, and replace lines 2616 on with `return x.CompareTo(y);`
add `config` struct tag. What is the meaning of `Order`? Do we need to introduce it in this PR?
This line has to be `const result = { 'info': response }` (we must include the `response` in the `info` field inside the balance or any other response).
Please put this method just below `getAncestorGroups`.
Why not `TokensFilePath`? We always create only 1 file (called `tokens`) inside the dir, which looks more natural to allow to configure the full filepath. BTW, I would call it `TokensFile...` instead of `TokenFile...` since it contains all tokens.
this always struck me as odd. the CLI is available for everyone to use and each CLI should have its own authz on who can use it inside the implementation - but users have no way to actually discover these. this is not related to this PR - it has not made this worse, just a note.
Nit - is it worth moving this to a location outside the local backend, since it is now used by both backends?
@dain could you add to commit message what castable constraint is?
okay i dont know how this works tbh. but does this still have an effect if we return null here?
Just making sure this doesn't get reintroduced in a future PR. This restriction has to stay in place. The thing we wanted to allow extra slashes in was docker repos, not imagestreams
i wonder if this was causing some problem before... looking at other implementations some do check for null on this field, :+1:
revert this there should not be any logic here
if I correctly understand, the column SNAPSHOTS.UUID already existed but the DTO was not up-to-date ?
The FXAA file was renamed to SceneFramebuffer and the FXAA specific stuff was moved to `PostProcessLibrary`
The use of `repr` for encoded keys was intentional here.
Do we have to check for `window` for ssr?
is this leftover code?
Or can use a star import. No strong preference.
Is there any specific reason for changing this to false?
The only change in this file is this import, is it just an unused import or are there missing changes in this file?
Is `''` a valid "I have this header"? We could test for `== null` instead.
Would not these be useful for an implementer of a new runner?
Why not `TokensFilePath`? We always create only 1 file (called `tokens`) inside the dir, which looks more natural to allow to configure the full filepath. BTW, I would call it `TokensFile...` instead of `TokenFile...` since it contains all tokens.
this could be removed
I do this to create a "random" system better conditioned (that's why I used AMGCL)
Please don't make whole-file style changes like these. It adds churn, makes the review harder and future git archaeology adventures.
What does this message actually mean? I.e. is it useful in debugging? Can it be made clearer?
Is it guaranteed to be compatible with the original configuration file?
I'm against static imports. Especially when you make heavy use of Guava, there are multiple instances where things like `asList()` could be `Arrays.asList()` or it could be `Lists.asList()` or it could be `Ints.asList()` etc. Please don't use static imports.
The deletion of the associated `UserProfile` is taken care of via the `on_delete=models.CASCADE`.
I'm out of my depth here but will this set `getMode().localDev` to `true` or `getMode().test` to `true` or both?
can this be a `const std::string` instead of a `#define`?
early `return` in an initializer is really confusing to me, WDYT of saving `current_user` as an instance variable and adding a validation check?
util functions in `io.py` also need same operations?
~~~You need to do `go fmt ./...` or `make fmt` to fix code format issue.~~~ You allready done it.
sould -> should.
What's the reason for this? the only point `_markets` is used is to debug-log the whole markets-dict as list... ? also it's not refreshed, so you wouldn't see new/disabled markets
Use empty lines between method definitions.
(style) trailing whitespace
this seems to be a duplicate, maybe you can refactor
We should not call this for single-tenant/subnet plugin as it depends on NetNamespaces. I think, we should move this to node.policy.StartEgressIP?
Let's not add a failed state again. It's a lot easier to work with a single exit point. A session terminates, and in the ancilliary data we'll put the error, if any
We can remove the `// Re-deploy policies` code in line 218 as a part of this PR too. The test isn't going to pass until we remove this
@jjaffeux, I see that this fixes the issue, but I don't quite understand why it's necessary. Why isn't the lazy loading working and could a similar thing happen outside of tests?
Add null check for `node.getSqlTypeParameters()` so we won't have null pointer exception.
Just to be sure: this doesn't affect TF codegen, right?
Using of size="xx" into search field are no more allowed for coming PR. We must now use class="abcwidthxxx" when abc is 'min' of 'max' and xxx is 50, 100, 150, 200, depending on need (see css file for complete list of min/maxwidth known.
I think an enhanced for-loop would be better here for performance purposes?
Since we have an omitzero for toml, don't we want an omitempty for json as well?
Moving it to Cython means exposing most C structures to Cython and staring at tons of generated C code to see that it actually does the right thing (like in #891). I wouldn't do it bundled together with a functional change.
Why would we include `transferOut` and not `transferIn` nor `transfer` ?
`String#includes` is not supported in IE.
Note that `AnyTimes()` is greedy, so you can't change the expectations for this mock call once `AnyTimes()` has been set. This is another reason I suggest not initializing mocks in these fake functions but rather directly in the test.
Shouldn't need to check both.
If you want to avoid storing a second list, `var_name = variable.Name()`
`return t.BaseOperations.Cleanup()` but I don't think you need this at all if `t` is embedding `BaseOperations`
c/p err (was placeholder for something now remove it!)
Is this file needed at all? If so (as a simple example) it should probably go in the examples/ dir, under a new examples/javascript/ subdir.
Ain't 0 the default anyway?
Please drop this git alias everywhere, not needed anymore.
i don't think you need to introduce a new object in consensus - attack.GetInstance() is a singleton which can be called anywhere.
maybe use io.ReadCloser checking reader at construction time implements Close, otherwise wrap via iotuil .
Please note that the contents of the `_shared` directory must be copied across all storage SDKs (queues/fileshare/datalake/etc). This includes the `_shared` directory in the test suite. If you feel this should not be in the other SDKs (i.e. that avro will not be a part of queue messages, or datalake etc), then please move this directory up a layer :)
This got removed by mistake and caused some of the build failures. Re-adding it.
This seems pretty independent of `CodeRunner`. Perhaps this would be better in `handler.py` ? (with the doctring updated)
@ustcweizhou similar cond check applicable for `cpuNumber` and `memory` if these are mandatory params? check and update accordingly.
nitpicking: I think the phrases should be english phrases, like "DeleteWebhook deletes a web hook" (note the ending `s` for third person subject being the function)
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
This technically causes an issue where if a modification to `actions` occurs outside of the ctor this class would no longer see that effect. But i don't think we support that case
Does that mean that this needs a default value? If it's `None`, adding it to `self.jvm_options` below will fail.
This change looks useless, isset() suppresses warnings across multiple depth levels without problem. Unless this is a bug in 5.3.2 which creates a segfault?
(style) please, no space before tabs
This seems to return remaining value, if multiple people are operating on this stream, with synchronised also this can give stale values. Just out of curiosity: Any pointers in which use case having this synchronised will help
The unification of the flag extensions is basically that I kept the name `StringSlice` but "borrowed" the `String` casting function. I like this because for empty values it renders `[]` instead of `""` which seems to be more accurate.
Minor but this description doesn't seem to match what the test does - it is checking that no error is raised, not whether a notification is created.
You can remove this and then use the: public string Key { get; } syntax for a get-only autoprop that the ctor assigns to.
To not make some generic code less safe, suggested to add separate `fromUtf8Nullable()` and `toUtf8Nullable()` methods
Related: I think it is fine here not to check if group->meth is NULL before dereferencing it.
I am not sure this syntax is compatible with PHP 5.6. Can you check ? If not, just store array_keys into a temporary var $tmparraykey
is configFile still being used? Ideally should be removed.
I see `_changeTokenRegistrations` is now being mutated without the lock. Is that going to be a problem?
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
nit: 2017 (should only be the year that the file was created (not sure if I asked you to do this, but sorry if i did!))
I think we were intentionally keeping this out of the registrar so it didn't confuse users.
Would it be simpler to use a `switch` statement?
Please simplify to `isset($nodeinfo['metadata']['nodeName'])`.
Futureproofing that actually worked! Wooho!
Any reason we need the extra catch block?
remove the bracket?
Does this have to occur ahead of the PSU control? As I understand it, TMC stepper drivers require 12V before they can be configured. But perhaps this doesn't matter to the initial serial connection here.
remove this because scrunitizer says it's int and trim int is not possible
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
Can you move `"google.golang.org/grpc/status"` down with the rest of the 3rd party imports?
nit: make this return `String.Empty` when path is null since we do that anyway in `GetFolderPathCore` and it lets us simplify the nullability flow.
Doesn't this function get an `instance` in `**kw`? I think that would be better than passing a `dict` to `track_addon_status_change` here and using `instance.__dict__` in the other call site.
Let's add # cython: language_level=3, since this file will be cythonized.
Please also add metrics for it
this will further be simplified after allowing inserts to log files
Don't do this - keep the fields the same internally and externally. When we move to ingress this is going to have to merge in, and ingress has no concept of duplicate from.
No need for an index here? I don't think there is but double checking.
why was this removed?
This tag is wrong, because the dbuf was not held with FTAG from this function.
Nit: If we're adding new code, we can use `tfawserr.ErrCodeEquals()`/`tfawserr.ErrMessageContains()` to save the later refactoring.
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
You shouldn't need to add `reading_time` to the reaction model. You can include it in the Algolia index without it having to be on the reaction have it in its own table-similar to the other models here like `reactable_published_date` etc.
@cramforce fyi, renamed file.
any reason not to use `topic` here?
move into if statement below
@philbucher this is a test
`StreamHolder` ctor must be protected to avoid synthetic ctor.
if I right understand, try-except here need for compatibility with python 2.7, but our target is python3.5 and higher, probably we can use only first statement.
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
Maybe `UNDEFINED` will be better
I think we can keep the old `WPCOM_JSON_API__BASE` name.
Checkstyle complains about a trailing whitespace on this line.
This reuses the existing email scope, what if we added a new scope so this attribute becomes opt in? bonus, as a separate scope it would also trigger the permission screen again right?
This doesn't actually check whether the user is conscious and able to use the item.
What does this message actually mean? I.e. is it useful in debugging? Can it be made clearer?
Same thing here, should default to "None" instead of an empty string
What is the intent of this change? I forgot what `Substring(1)` was removing.
It is incongruous to make this field static when all of its accessors are instance methods. Also why use AtomicReference here?
Why are we calling BreakSolutionStepsLoop here?
Note that all the operators are assuming `number`/`number` comparisons. - We need to do type checking to make sure, for example, that `4 > 'cat'` is a syntax error. Please carefully think about our type system and make it reasonably strict, e.g., no unexpected implicit conversions like `true > color('red')` - We also need to implement operators for `Color` types, e.g., component-wise operators. If we don't want to do those functions to `Color` (totally cool with me to keep Cesium's API surface area small) then we can just add them a local functions in this file.
Can we make this `4.0`? We still support MongoDB 4.0 so we should use the oldest supported version, I think.
Use the new Ruby 1.9 hash syntax.
This fix is just to get the DynamoView to load in the designer.
Does this work? I thought that subclassing a `nn.Sequential` and overriding its forward was not permitted?
Why do we need to check this? Why not simply set whatever user has passed irrespective of the default value?
is it necessary to check whether mode is 'view' or not?
is it worth `HttpClientSpanNameExtractor` and `HttpServerSpanNameExtractor`?
I assume this TODO just needs to be removed?
Align the parameters of a method call if they span more than one line.<br>Prefer single-quoted strings when you don't need string interpolation or special symbols.
This check immediately after Preconditions.checkNotNull?
Please suggest alternatives to the variable names I've used. In Figma the term "Medium" corresponds with what I've called "default" here. According to Josh there may be other levels of density for the calendar, so I chose not to use a boolean for this prop.
Please don't make whole-file style changes like these. It adds churn, makes the review harder and future git archaeology adventures.
So it seems like some of the changes here are meant to address `defaultValue` handling in the case of `JsonIgnoreAttribute`? Is this the expected behavior when `Y` doesn't have `JsonIgnore` and we deserialize `{ "X" : 1 }`? It's clearly something we should be fixing but I think it's required to fix the bug reported in #59936. I would recommend splitting this PR into one that applies a minimal fix for #599396 for GA backporting and a separate one that addresses default value handling in 7.
Is this causing a test to fail? I feel like it shouldn't be needed, but I could be wrong.
Can this just be removed? Or are we still testing?
Since this is a "special" `JsonPropertyInfo`, maybe it should be renamed to reflect that more explicitly. Same elsewhere.
em, why changed the import order?
Does removing this cause any issues?
Just an interesting observation but we were calling `cannotSee[username]` in line 55 when `cannotSee` is an Array. I think we fixed that line now that this is an object now.
[nit] Could be `func (*State) EnsureNoProjectsMissing(context.Context, []string) error {` but doesn't matter
I would return 0 here, because the code that implements this method already checks if the value it falsy. This way you have one return type for this method. Another thing you can consider is throwing an exception and catch this (but that might be a little bit overkill)
There is no rc from this function. Maybe these file_* functions should have signatures similar to the dfs_sys versions? I.e. bytes_read is passed/returned by reference and rc is returned from the function. Then you would have the corresponding rc
you can use stringutils here
Retry instead of delaying
nit ../models/index should be sufficient
Have you tried locking allocation inside `allocate_stocks`? This is the function that is supposed to handle that, so it would be nice to have this logic there.
Do we view these anywhere in the app? I tried searching for views but couldn't find any. Will not having a user break any assumptions we might have made?
`Count` should be `4` as there are 4 elements. The `sizeof(Quaternion)` is `16`.
As a follow up, we could add a validation to check kubeletArguments["cni-bin-path"] is not set when openshift network plugin is used.
Can we do the same for angular as well
Should `%s` be replaced with `? `
Probably `attr_reader` would be enough here.
May be possible to remove when changing the approach to provide the Service to the MuleContext
You will have to surround this with `#if defined __FreeBSD__` as well, otherwise the other platforms will complain about comparison with an unknown macro.
No need to check for null before calling delete onnit
import sys the next line
Minor: This looks not efficient to me, but that's not in scope of this patch.
This is unrelated to the test migration so should be in a separate cleanup (in the future), to help reviewers and readers.
why is this? If I remember correctly this has always been like this. Wouldn't this affect unrelated functionality?
SetServerDefinitions shouldn't need to be exported. If there was a checked type cast to `*Stellar` in `RefreshServerConfig` that would be fine.
You can remove this import now.
Looking forward, from the AST perspective (not the tokenized perspective), perhaps `ExpressionNodeType.TERNARY` is better named `ExpressionNodeType.CONDITIONAL`.
I am not convinced whether this step to remove the ContainerMetrics belongs to a method called shutdownDispatcher, at least from the name it is not clear it will do so besides shutting down the dispatcher. Shouldn't we separate this two?
multi-value Float columns don't exist, so may as well simplify this and always pass `super(name, null);`
if we're just removing this then do we even need the function?
Shouldn't `finished_32.go` have gained a `,linux` too?
I suppose this should also have `elif isinstance(self.s, UninhabitedType): return self.s`, though I don't know specifically what this is for.
I think it should be `++output`, otherwise afaik you create local copies not completely sue though
My preference (here and in the spool) would be to use `InternalQueueSize`, since that's what's used in the earlier structure and "Int" as an abbreviation is overloaded with "Integer"
@wmvanvliet to have a clean list presentation that does not expose a private class
Should this method be included in this PR?
why? you're loosing functionality here
I get why you did it this way, but I'm pretty sure it's not the best use of interfaces to have implementing classes return themselves as instance, especially because this makes it obvious that the logic is not seperated from the UI class whatsoever.
Do you really need this change? I thought we were moving to single-entry eviction notification, and then metadata should probably be included in the event.
is configFile still being used? Ideally should be removed.
I copy the format from other function that postMessages. `triggerRenderStart()` and `triggerRenderStart(width, height)` both work, how can we represent this in our code and let 3p ad know?
Can you also remove the superfluous `a` from the docstring above?
Style/ClassAndModuleChildren: Use nested module/class definitions instead of compact style.
Probably worth typing this as well. The return type should be PipelineResult.
you don't need this. You should import Client from mne.externals.FieldTrip
Can you add docs for this new parameter?
Please don't do this. If you're writing code that uses numpy, I won't complain if you import it like this. But don't go changing all of the imports in the code to use this contraction.
This needs to be fixed (can be followup), this might risk infecting other tests. We should have scheme just for the test, as discussed some time ago.
@Pearl1594 is this required for ISO as well?
Their region id may not be the same for different ops
I'm not sure this example is strictly correct - I think `at_time(datetime.time(4))` would only allow runs at exactly 4am, but not 4:01am.
Someday we could probably parse this from `README.rst` to make it DRY but don't have to do it now
`alcIsExtensionPresent` definitely doesn't have any side effects?
please add spaces before the new method declarations (see the original code in this class)
I thought we didn't care about obscuring git repo names? Or did you decide to add it because it was easier than anticipated?
Nit: this should go between cortex imports, and not be standalone.
why is number negative?
are you sure? maybe you need `loc.formatBalanceWithoutSuffix()` ?
we don't usually import the whole `mne` module in our testing files, we just import the functions we need (see lines 19-27)
Why is this being removed in this PR?
Do we want to have a default in case this isn't set? Ah looks like nil is fine. Disregard.
This is the only weird thing in this PR. Lol... Because PHP-CS-Fixer only knows about what's in the current file. (It does not parse parent classes / interfaces.) And of course when we bump to PHP 7.2, we can add the `object` return type.
isn't this a path and not a URL?
I think load from etcd is not necessary here.
I'll hold off on reviewing the PR until the errors and existing questions are addressed. Additionally, please make sure you update the ref/System.Net.Primitives.cs file... that will be the first thing we look at.
please try to implement renderStart API.
I don't think we need the locks at all, but if you keep them, how about keeping just one?
Is this the don't use all the memory flag?
Standards: Could you please add a space after the `foreach`?
The ability to change the AnkiDroid directory at runtime means there are actually two places where we have to worry about the accessibility of the AnkiDroid directory.
These can be removed, because we have already checked `ctx.Repo.IsOwner()`.
Just a question: Are we catching this somewhere?
Should be tagged with `binding:"Required;AlphaDashDot;MaxSize(35)"`. Otherwise there will be a 500 if the provided username is invalid
In Ruby 2.3, you can do something like this, `UserEmail.find_by(email: Email.downcase(email))&.user`
(Unrelated fix: the parsing slowly eats away `flow` so that by the end of the loop it's `""`, but the error messages below all included `flow` as though it was still useful. So this just fixes that.)
for this, if the container is joining a pod and `usePodCgroup` is specified, would that override this here or cause a conflict?
space after Throwable
need check err then discard and close the body.
What about changing ``not_to eq(nil)` to `.to be_present`? I think it's better readable.
STSAssumeRoleSessionCredentialsProvider is not a singleton provider
Trailing whitespace detected.
Please make it OMITTED_RELEASE_PACKAGES outside of the method (below DEFAULT_DEST_FOLDER)
We _expect_ to get handshake failures here, so consider logging this at Debug or Info level.
Same here, are you breaking other get_user() calls?
**nit** remove this space
We can't parse SpEL in the XML parser; consider `#{${my.routing.slip}}`
Please don't communicate this via a signal. That introduces unnecessary overhead and makes the code more complex than needed. A simple `pyqtSlot` should do the job. That also prevents the need to create code that's not in the SliceInfoPlugin. For reference on how to use a pyqtSlot to create a dialogue you could look at the UraniumExampleExtensionPlugin or the Change Log.
value is an optional, why are you accessing it here?
how are we handling revision of generated bundle files to clear cache for prod?
Can you move this up with OS?
nit: it would be easier to read if you made false a constant at the top of this test, like `DO_NOT_KEEP_NULL_COLUMNS`
Can you add gitea copyright line to header (and keep gogs one next to it)?
Why its not even used in staking/network/reward.go? And its not easy to understand how results returned by methods in reward.go correspond to UtilityMetric.
are we using `described_class` in this test suite?
What does "loa of the ial" mean here? Why not just "has content set to LOA1"?
Yeah I'd rather this not be made part of WindowRoot. Should make a new control after window root and use that instead.
Would be appropriate to mention the JS string can be made with `CoffeeScript` class from etc.
Returning error here is not correct. The `resolve()` is used as the main service function, so if it returns error the service stops and it causes a cascading failure. We don't want to fail everything just because a DNS resolution failed. I thinks a better approach is just logging the error and always `return nil`.
Remove "" around TMPDIR.
I've just found that removing these methods is actually SPI-breaking :-/ It was a bad SPI arguably, but still. Something to bear in mind for the future. (And, well, I'll dig out the `name` out of the `image` :-) )
@smarterclayton did you want this struct reworked also?
I wonder if we should increase to like 5 minutes? 1 minute seems a bit low for a default you can't change. Although we should probably make this configurable at some point.
while you are modifying this line, please add a blank after declaration
`toString().valueOf(query.getLimit())` is just a weird way of writing `String.valueOf(query.getLimit())`, but using a strange Java feature that lets you call static methods (like valueOf) as if they were methods of specific objects. So please replace it with the latter.
Please, update years to 2019-2000 in line 2.
I would keep this outside the `try` block. We really want the `try` to just be about failure to init, while this could be a failure of the `get_config` value being set. `int(get_config(...))` where `get_config` gives a bad value will probably have an informative enough error on its own.
If you prefer this could just be `updateCalendarEvent`, without having to re-declare the signature or calling it again below.
This is way too boilerplatey and error prone to have to stick at the end of every integration test. I actually tried to make it so this was done automatically with a `[TearDown]` so I would prefer if you figured out why this isn't working instead.
Don't see this used anywhere in the PR. Can we get rid of it?
Should be below the none beats imports.
### Echo State Networks
What does using `MutableMapping` give you over just using `Dict`? Seems like it adds some complexity that we don't really need?
This is not a correct change.
I missed `boolean` here
Is this the don't use all the memory flag?
This is going to result in quadratic behavior when building up a dataset; probably not a big deal for listening sockets, but if someone reuses this for something else, it might have unexpected performance implications, maybe there should be a note in the header?
May need a space between `)` and `{`.
Lots of calls like this one would appear to suit D_FREE/D_ALLOC
Why lower this?
Why are we sure that it is non-nullable?
So this _makes sense_ on the surface since get vs. create for being awaitable; but I raise an eyebrow as a "it's always been this way? and wasn't broken prior?" sort of sense. Feel free to just be like "yeah it changed" or "yeah we dodged that" and close this out if I'm fretting about nothing.
`!!this.messagingMaybePromise_` to keep it boolean
func name will be used as file.FileRemoved by other packages, and that stutters; consider calling this Removed
When implementing this you'll want to be sure to do the `ensureStylesInjected` thing to make sure it properly centers on first show.
nit: I think we technically can remove this check and always call `enhancements.enable`, but feel free to leave this as is if you prefer.
Use `h2` instead of `h4`, just as we use for "Protocol Steps" under "Protocols" tab.
Why not put this method within PanacheEntityBase instead?
Why lower this?
Check all resolver endpoints are destroyed.
Can you modify the `Args:` and `Returns:` sections of this docstring to mention the behavior on non-pathlike objects?
@jsoriano This code change as I also already had it change in this PR. Let me now if my implementation also looks good to you.
I have noticed that this if-statement is similar to the one on 1594 (1572), do you think they can be combined?
we should not disable `loop` unless it was forced by autoplay in the first place. If author has `loop` specified, after autoplay ends, user should still manually loop.
I assume this TODO just needs to be removed?
`request.http_headers.set_default('content-type', 'application/xml; charset=utf-8')`?
@bflad not sure if this will break anything - had to do it in order for import to work correctly though.
`read<T>` implies that multiple types can be read, like bool and integer. Yet it only supports floats, which lose are not accurate enough for 32-bit integers or higher. `luaReadFloat` would currently fit better, without any template.
The meaning of `DEFAULT_CONFIG` seems to be "if a parameter isn't overriden in `config`, use the value specified in `DEFAULT_CONFIG` instead" Where `DEFAULT_CONFIG` isn't just what we specified as a class attribute, because it's been updated in `SetUpClass()`. So semantically, `DEFAULT_CONFIG` is very different from the entries in the `CONFIGS` list. It might be worth renaming `DEFAULT_CONFIG` to something more accurate?
This contains the main change for this PR. Instead of just checking if the node exists with the allowed projects, we are now pulling the projects that are tagged on the associated node.
`is_array()` alone is sufficient here.
`self.table` should be either `self._table` (since it shouldn't be public), or non existent. `self._table` is used in a single method, and only once.
Why did you pick -1 and not 0?
Since you're writing out an empty string for this field in `writeExternal()` (presumably to preserve lobby compatibility), do you also need to read (and discard) a string here for the same reason? Otherwise the stream may become unsynchronized if multiple `GameDescription` instances have been serialized.
by default it logs to STDOUT, let me know if this should continue the default behavior
Are you assuming only conversion from strings here? Like not even allowing people to convert booleans to TRUE and FALSE?
@havocp thanks for your insight. The above works and I can live with it :)
Do you have a reason for different argument names: `action` vs `situation`? I find it a bit confusing.
Can we name this `__dynamonodename__` instead? That way it is consistent with the other variables we are adding.
This line can be reverted, right?
Remove this file?
Why was this reverted?
Did you get rid of this line when you tried nesting all `pacpy` imports?
caused by goimports, can revert
Why is this necessary? Parfor is a standalone statement, not right-hand side of assignment.
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
did gofmt accept this?
This seems useless since we only support postgres now
This test should contain assertions. At least to verify the existence of the variable a in each scope.
Is this inserting hash references after they are invalidated in `erase_block`?
I think the formula is correct. We take the mean for the 0th row in the first case and the 1st row in the second case.
Can we directly use `leader` instead of `leader.String()` as variable?
Looking forward, from the AST perspective (not the tokenized perspective), perhaps `ExpressionNodeType.TERNARY` is better named `ExpressionNodeType.CONDITIONAL`.
Did you get rid of this line when you tried nesting all `pacpy` imports?
"the either the"
This method doesn't match `convertObjectToDouble()` in null handling of the result of getExactLongFromDecimalString().
Can you switch `-mpi` with `~mpi`? `-` can be ambiguous (in this case I don't think that's an actual problem, but I think it keeps things clear to use `~`.
This is still suspicious I read on this line: `- return count_xmps_processed;` That is, removing the return for this routine having an int as returned. Is that also a GitHub bug ? I'm confused now....
Are "not exists" errors really the only type of errors that can be returned here (and the other places below)? What about parsing issues, file system mount errors, etc? It would be nice to have a more specific check, or if that's hard then maybe just print out the error so it doesn't get lost?
Can you add a migration to add this struct to DB (I know the sync below auto does this, however sync runs after migrations and could run into problems)
Nit: should we also `result.delete(entry.getKey())` to avoid a double entry? In the end, Kafka Streams won't understand the prefixed key, and IIRC would log a warning about an unknown config?
Not your fault (except for pointing it out :-), but it is really terrible that this takes either a syntax node or a SymbolNode. Those really aren't like each other. :-(
You can remove this import now.
I think this needs to go in `conda-meta/`. That's the location that's completely off limits to packages. Otherwise any rando package on anaconda.org could overwrite that location.
is this an error or should it be warn?
Should we copy this in the `Contact::getByURL` as well?
Maybe not in this PR, but it would be nice to at least log other errors below. (Right now logged will be only last one)
is it safe to decrease metrics-server container's limits from `500m` to `20m` and from `1Gi` to `40Mi`? If yes, can you explain why and what kind of testing was performed?
please use braces - this code is very old, that is why it does not follow the code guide.
Why lower this?
Not sure if changes to this file are necessary.
nit: you can merge both lines above as `checkNotNull` will return the given argument
It is actually easier to identify jQuery and jqLite instances using `instanceof jqLite`.
This compiles by accident (introduces parameter _string of type string) :) Alternative syntax: `Write(_, _, body string) error`
Constants for the timeout and poll frequency?
This should be done as part of a specialization for remove token.
this needs to be properly obsoleted before merging.
_NoClassDefFoundError_ is a runtime error (not checked exception) so why are we giving it a special treatment here? I am not saying we should not be handling runtime errors if there is a reason, just curious what that reason is here.
oops, missing the not here
Do we accept admin template i18n now? @citizen428
GetLogger is an expensive call - we don't have to it extensively
Does removing this cause any issues?
Is this thread-safe? I guess, maybe, although it might do extra work since not all threads will see the update at the same time. I'm also not sure if ParseSpecs need to be thread-safe; if it's an issue could you please double-check it?
I like using `__FreeBSD__`, but a just as a note, I'd like recommendations on a standard osquery OS/DISTRO determination name scheme throughout python (gen___.py), bash (provision.sh), CMake, and C/C++. Right now you can use APPLE/LINUX/CENTOS/UBUNTU/FREEBSD in both CMake and C/C++. In C/C++ the output from lib.sh's OS and DISTRO are defined by CMake. We should set a DARWIN to be consistent on Apple/OSX.
How can this happen? we won't issue the command if vender id isn't intel, right?
Should be `!empty($rule['builder'])` as builder key is likely to be not present on some rules.
I would prefer we do this as a Separate PR if we want to disable this.
Yay! found an actual bug!
@carlossanlop we can't use cref's here since the source generator doesn't reference STJ. Would it perhaps make sense to use xref's though?
Why not `private static final Logger LOG = LogManager.getLogger(TestCleaner.class);`?
Unsure about that one, since SYSTEM_READ doesn't grant access to view jobs, and `getItemMap` bypasses regular Read permission checks. So you'll be told there's stuff there but cannot see it, which seems weird.
chunks() give user an iterator which allows user to iterate the whole content in chunks. (Your English is better you can rephrase it!!)
You should do `if user_data is not None` since that's when the environment variable has been set (even though the feature won't be that much useful in this case).
Invert description and type. Type must follow description.
How about we make this simpler. Just make `get_package_manager` return the `PKG` imported from `build.py`.
Don't change the copyright year ;)
We only do this when new files are created. Git provides authorship information in all other cases
I would also expect wildcardpolicy on `RouteIngress` so clients can know what wildcard policy the router is using. @smarterclayton, that match what you would expect?
Do we wanna keep it hidden for now? I don't have strong opinions but, without having in it in the doc, will be difficult for our users to try it out.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
please refer com.cloud.utils.StringUtils, and add a proxy method there if you need one.
there is no default uuid set in c. The check and assignment is superfluous. Better set this in the initializer directly then.
`ImmutableMap.of(k, v)` would be cleaner than the static block
does the secret exist in the project doing the build? that should be all that's required....
I've already reverted this change once, why do u keep on putting it back? Use GetSettings() extension method.
In order to compose both vlabs and "unversioned" data types we need these property additions to `MasterProfile` and `AgentPoolProfile` to be in `pkg/api/convertertoapi.go` and `pkg/api/converterfromapi.go`
Is it possible to leave this behind, but deprecate it?
Does this need setting more than once? Can we make it readonly? Making this hard is important as defence in depth measure
Check if META-INF/org/mule/runtime/core/config/mule-exception-codes.properties and META-INF/org/mule/runtime/core/config/mule-exception-config.properties can be deleted too
I guess that different modes exist for a reason... woyld be good to have a way to configure drools using tje old mode (which could be better for perfoema ce reasons umder some scenarios)
Are all these `using`s still needed?
Prefer single-quoted strings when you don't need string interpolation or special symbols.
In this case `env` is expected to include `os.Environ()`?
Drop this empty line. We generally leave 1 empty live between settings, and 2 between "sections".
Should we also remove constant if it's not needed anymore?
Do we have to handle `is_float` here as well?
Optional: This no longer needs to return a tuple with an error.
what haopens if value is false?
this should be a `StringSet`
What's the difference between this test case and `test_creates_git_extraction_entry`, above?
`time.Nanosecond` is `1` so it's enough to do `/ int64(time.Millisecond)`.
Need to permit this for searching
I'm feeling a bit uncomfortable about this location here, because there is no way to indicate an error to the caller. OTOH: if the CSPRNG is already initialized, the failure will not be disastrous, and if it is not, the generate call will fail later on.
When #if-ery has both branches, i.e. has content in its main text and in its #else text, it's clearer to use a positive test rather than a negative one. Although we know how double negatives work, people are more prone to getting confused, the more layers of negation they have to unwrap to see what's going on. So I encourage you to change this to a #ifdef and swap the content around to suit. Also: what about 64-bit MinGW ? Does it still define the same "32-bit" symbol ?
Should we throw an exception when key is null?
Merging import to "*" is not recommended. Could you please expand it?
Do we have it somewhere in the style guide? That brackets should be omitted if there is only one argument.
Can you move `"google.golang.org/grpc/status"` down with the rest of the 3rd party imports?
this is not needed. this test should actually capture the bug
Can this be removed?
We could link to the directive guide/normalization here
This RE is not good. It will allow "[includedirs_My_Other^Lib]" too. `:-^.` is any character between ^ and . ascii codes. The right ER could be: `re.compile(r"^\[([a-zA-Z0-9_:-\\.]+)\]([^\[]+)", re.MULTILINE)`
Similar note here, if `git_clone_depth` defaults to 0, this will change the TypeSet hash when folks upgrade their AWS provider and it will show a diff. We'll need to implement a state migration if that's the case to prevent the diff.
I feel it's a bit ambiguous to say pass the output to by_page(). we can tell them if they set messages_per_page to iterate by page, they need to call by_page() on the AsyncItemPaged, so that they can get a page iterator with which they can call next() to get the next page.
This is a pretty big `TODO`; we shouldn't merge without this being figured out.
The crash is fixed, but it does not seem like setting the radius works anymore / it does not change. Do you mind testing using the eyetracking Builder demo? Maybe setting the base `visual.Circle` radius is no longer working?
`from builtins import object` means that this will implement `__nonzero__` for us if Py2
Why we use obtain_token_by_refresh_token(refresh_token["secret"]) in _redeem_refresh_token but refresh_token (no ["secret"]) here?
I rejiggered the way type dispatch was done in this file in my `DeleteAll` pr. Could you make this function match the others?
I hope this is a good place to add it.
Use tr instead of gsub.
Incoming or outgoing? Please be clear
You can use CollectionUtils.isNotEmpty
Could you remove the space between `,` and `<`?
Can we check the dual of this where it is appropriate? : If the schema is null, then CreateDisposition == CreateNEVER
Hello @dufoli , won't this cause a problem if the `!` character isn't part of the `String` `i`, in which case `lastIndexOf` will return -1?
This should probably have been plural. I didn't catch that in the previous PR.
This function shouldn't be necessary.
no empty line, it is all stdlib here
Two things: * If the `source.GitCloneDepth` value is always returned, this will change the TypeSet hash when folks upgrade their AWS provider and it will show a diff. We'll need to implement a state migration if that's the case to prevent the diff. * We should convert this from int64 to int to match the Terraform schema: `int(aws.Int64Value(source.GitCloneDepth))`
You can remove this import now.
Should `outputType` be in here, `equals()` and `getCacheKey()`?
@ramramps, This won't just affect sliders. It will affect a lot of nodes. Is there a way to do this without modifying `BasicInteractive`?
NULL check not needed.
Can you extract the body of this IF to a method?
Method `estimateStrength` has 5 arguments (exceeds 4 allowed). Consider refactoring.
What is the effect of this change in old, 5.1.x, clients?
probably the logic was broken here. it should have become TRUE for a brief period of time every minute just to render readable transaction times
propagate `@Nullable` to other uses? E.g., the constructor and the getter?
We should explicit this array as a list of IWritableStorage class names.
Is there a reason behind this change?
let's keep the order of the arguments
What is the benefit of using ByteBuffer.wrap here? We do not perform any operations on the returned ByteBuffer but instead call .array() on it to retrive the internal byte[]
isNaN might not be the best choice here, but I think it's probably ok
Should not be here.
Minor, but I think the `trace` is unnecessary here, since this is not doing anything particularly complex (in contrast to `commandReader`, for example).
I wonder if the constructor is the correct place to be doing this and not say componentDidMount. Are there any potential timing issues that could occur so a re-render might get missed? I think somewhere in the react docs it had suggested to make (maybe) these types of api calls in componentDidMount to ensure a re-render is triggered. So not to say it's "wrong" but it's not something I've seen normally.
import sys the next line
I would make _prepare_write_metadata a private function like you did for _check_event_id to avoid adding a new method. `metadata = _prepare_write_metadata(self.metadata)`
Why not just use `__toString` ?
Added the options here cause I was getting errors due to the `Logger` being `nil` when creating the app with EVM disabled.
All these test names where confusing since we are testing the rpc function `GetServicweGroups` not the `ServiceGroupsHealthCounts`.
Could you modify the logic so that we only add this property into the dict if the data-ad-host attribute is present on this.autoAmpAdsElement_. The return type of this function (!JsonObject<string, string>) would imply that values can't be null. I know that it's not actually type-safe for data-ad-client, but that is a required field, so we don't expect it to ever be null, whereas we would for data-ad-host.
I think `NumberOfFailedImmediateDeliveryAttempts` is a better name for this one. It clearly indicates that this is a number of attempts that already have been performed and failed
Both `ViewExtension` definition and `Definition` should have precisely the same names! Let's not rename `TypeName` to `ExtensionDefinition`, let's leave it as it is. Let's rename `ExtensionDefinition.AssemblyName` to `AssemblyPath` to match your change here.
Won't this panic if you don't pass in a message to deserialize into?
Use options[:preview_token] = current_admin.preview_token instead of options.merge!(preview_token: current_admin.preview_token).
This is good, but `cchName` below is also wrong. `size_t` should be `UIntPtr`. It is `uint` on x32 and `ulong` on x64.
you can just use `WorkerMode.DRIVER.ordinal()`.
Did you get rid of this line when you tried nesting all `pacpy` imports?
Not super excited about how the future gets set on the task, but don't have any better ideas at the moment. Feels like it give access to details that shouldn't be reachable.
Why this flip in choice
Here again we're mixing up concepts - why do we need a group concept for this PR?
Did you get rid of this line when you tried nesting all `pacpy` imports?
The WelcomePage was rewritten in React i.e. it was moved to the folder react/features so it looks to me like the source code bellow needs to be rewritten to take into account that now the React App is abstracting the relation between window.location and the React Component rendered at that window.location using Route (an abstraction similar to react-router's).
I think things get a little complicated here - if the replay file is `NO_VERSION`, then we need to create a new one with the newer version but restore using the existing one. I think it might just be simpler if we don't compare across versions - we didn't have this functionality until 0.13, it's probably OK to go one more deploy without it. thoughts @stevenpyzhang @rodesai?
This needs to fix spacing.
The result is `<autogen-<...@...>>` which does not look correct.
@entantoencuanto this isn't necessary anymore
What has replaced it? `@deprecated <explanation>`
Won't this still leave it broken? If the context is cancelled, then this will stop extracting.
Should this be `origin-bridge/src/models`?
Do you really need `1500ms` for the new tests? Is `1000ms` not enough?
@strib Any reason for not logging context tags? Is it because it's too spammy for unit tests? Would it be useful for the DSL/fuse/docker tests?
Why do you need a treeset here? To order/sort the names? If so, could you have used Collections.sort() op?
this method should be grouped with the `get` and `is` methods above instead of the `set` methods
I would keep this, since it's a reserved word   It'd be weird to have a dev.to/delayed_job_admin user anway :D
is max item the only place where the double converter is used?
Use empty lines between method definitions.
I suppose this PR is WIP? In that case, please add `[WIP]` prefix :slightly_smiling_face: These lines shouldn't be removed in the final PR, unless there is a really good reason for it.
I'm confused.. is that a typo on the name?
does this mean `poolCacheMaxCount` needs to be removed from docs?
seems like you can just get rid of `loss_dict` and not return it since it will always return `None`. You should also get rid of all of the `loss_dict` code in the `batch_act` function
Can you explain a bit why this is a `constant`? `downsample` has learnable parameters.
NULL check not needed.
@casperdcl Please avoid modifying unrelated things :slightly_smiling_face:
why didn't you move this message/logic up into handlebuild?
I think this is even more confusing and also break the contract of returning a Boolean value. Now its returning a tuple with errors. And also, catching the error and rethrow it is kind of anti-pattern in the code. Why do u want to specially handle these errors? Is it just for hiding the stacktrace?
Did you get rid of this line when you tried nesting all `pacpy` imports?
`value` is typed as an object, not a string. does flow not display an error?
Instead of a `# noqa` here I'd prefer to define an `__all__` that has `Index` and `PyPI`.
Would be better to qualify it as PurgerCycleCompleted, to identify which cycle the event is referring to.
this is a bugfix? But it will break scripts, no?
Do we need this as a separate file? Seems it's only used once
Personally not totally convinced that the `NPE` is the correct way to manage this case. In the core, there are lots more `IAE` (> 40) than `NPE` (~8) for such cases. More generally speaking, there is a debate concerning the fact that only the JVM should throw `NPE` but seems that `Effective Java` says the contrary. So -0.1 from me
I would remove the `if (Equals(sv1, sv2))` at the beginning, and replace lines 2616 on with `return x.CompareTo(y);`
Is there a reason you need this method?
ditto above about deprecation instead of deletion
need to update types_test.go to include the new field, and open a doc and config change issue with details
Not accepted anymore
This should move to the gobblin import group below.
this situation should be `overload`
Ditto, should check if the path exists.
Can we make this error message a little more helpful? `Unknown or invalid vendor ${vendor}, note that vendor must use transport: iframe`
Is it incoming or outgoing? `MinRequiredIncomingConfirmations` or `MinIncomingConfirmations` would be clearer
is configFile still being used? Ideally should be removed.
Better move this to DbProperties class
I think it should be ok to reuse `isCiBuild` even though it's less precise.
Can this be refactored to import less modules?
The UniformSession package itself has been updated for tokens. Should these stubs be updated to match?
I think a blank line would be helpful here to highlight the fact that this if statement returns early.
Probably `attr_reader` would be enough here.
this is generalized function to write to file. dont mention the transaction, only something like "we dont have enough permissions to save file". and use this generalized text everywhere else in this pr
This still isn't correct because the timer will keep running. This means that if you manage to pause at the perfect time you could advance the game while having research points get stuck.
It seems like a safe change. But just to check, is this not considered a public API that could be called from extensions? The same about other changes in this class.
I thought only `error.message` will survive, should we still use `error.embed`?
Please use separate lines for these two declarations.
You can probably simplify this syntax by making a GraderPermissionPolicy class and defining a policy for each configuration option.
Not a fan of adding this `missing` element. Why not just call `continue` here, instead of later? Or unset the `$template` entry from the `$templates` array?
Do we have a tests that covers cases like `filter(limit(scan)` and `limit(filter(scan))`. In other words I think we should consider banning filter pushdown if there is already limit applied as I guess it is buggy today.
Need two tests to show we don't override an already-present CT header, unless the attribute is set on the transformer.
@kacf @pasinskim @GregorioDiStefano how can we guard against such stupidity, by using our CI? Is there a simple tool we can run with little effort?
this call was accidentally lost during conversion from decorator to tracer
If we don't want this behavior, the check should just be deleted because `None`s are subtypes of all other types when not in strict Optional mode, so this check is unnecessary. That said, I think what we really want is to update this check to be more permissive rather than doing AST replacement at the parser stage.
struct field ApiKey should be APIKey
end at 47, 4 is not aligned with if at 43, 22.
`NotFound` is using `IndexError` as one parent class.
license header to be removed
In the description you stated: _"I noticed that the test failed with timeout after ~1s."_ Should we instead increase the timeout for that specific test and move to outerloop instead?
This one was a blast too. Took me quite some time to realize I missed that `bool` here..
I like where this is going, but even cleaner would be @staticmethod, which doesn't need the unused cls variable.
[nit] Could be `func (*State) EnsureNoProjectsMissing(context.Context, []string) error {` but doesn't matter
We _expect_ to get handshake failures here, so consider logging this at Debug or Info level.
Why lower this?
SetServerDefinitions shouldn't need to be exported. If there was a checked type cast to `*Stellar` in `RefreshServerConfig` that would be fine.
Does this do unexpected things if you redirect `stdout` to a file? Like `mame -oslog -verbose | tee output.log` which I imagine we'd want to have in some ASCII superset encoding.
I don't understand this. What are the `select` and `option` elements?
is it safe to use nil here? maybe empty slice?
introduced here and not wired up?
We can now use `out.isEmpty()` instead which is more intuitive.
Can this be removed?
Should we add `false` entries for 1.18.0-beta.2 and 1.18.0-rc.1? AKS Engine never supported either one due to bugs, but we could add them in order to reference the issues.
Ambiguous regexp literal. Parenthesize the method arguments if it's surely a regexp literal, or add a whitespace to the right of the / if it should be a division.
Style/UnneededCondition: This condition is not needed.
:-1: for a default value, I'd say we force the core to set it
I think keeping both `Target string` and the new `Modules map[string]bool` may lead to bugs in the future. We may forget to check `Modules` instead of `Target`. A better option may be define a CLI flag custom type in `pkg/util/flagext` which is a `[]string` but implements `flag.Value` and `yaml.Marshaller/Unmarshaller` to marshal/unmarshal a comma separated string. We wouldn't have a map, but checking if a module is within the `[]string` would be as easy as calling `util.StringsContain()`. What do you think?
Do you need this file?
We need to trigger deprecation errors instead. This phpdoc is unnecessary.
This test has been 500ing leading to a false positive.
Don't you want to cast the result as a double, instead of just the failure threshold?
This isn't right - it might be another thread that's running in an invoke. See `invokeScope` variable in rabbit template's doExecute
This could be `private final static Function<DimFilter, DimFilter> NEGATE` (i.e. made static)
You can remove this import now.
I suppose this could be a warning in the ValidateMasterConfig if it may cause problems
should we assert that this value will never be positive ?
Could you make sure that the license header is at the very top of the file?
Returning error here is not correct. The `resolve()` is used as the main service function, so if it returns error the service stops and it causes a cascading failure. We don't want to fail everything just because a DNS resolution failed. I thinks a better approach is just logging the error and always `return nil`.
This is a newline character, see #1740 and #1853.
We need a test for the case where we use the headers for `jsonToObject` for a TestPerson.
I don't think an adjective make a good module name. Can you make it a noun, e.g. 'experiments'?
In case we want to use this more in the future we might want to store all attached headers as an attribute and update them with each call to this method (so that multiple calls don't wipe old headers but rather add to them / update them)
nitpicking: I think the phrases should be english phrases, like "DeleteWebhook deletes a web hook" (note the ending `s` for third person subject being the function)
It's just occurred to me that with `display_title` being a thing now, `full_title` would be better described as `long_display_title`. Would you have any issue with me renaming the `full_title` constants/variables/functions to use `long_display_title`?
Any reason not to try and run this split always before the `strconv.ParseInt(...)`, so basically right inside the `if fc.isInteger` block? Are you doing this lazily as a performance optimization?
should this say `param` ?
I like this - this should be aligned everywhere i think
Should we return immutable list?
Allows `configuration` to be set to default on use in case `init` is not called.
If you know what this function does please add a doxygen description
Converted from deleted *.rec test.
I'd suggest to move this out of ~~this HOC~~ component. We could add a component (added to root inside App) that uses withWallet HOC and set the scope inside `useEffect` hook of that component.
no empty line, it is all stdlib here
Do we really need to call `cancel()`? When `cancel` is called, no one is blocking on it.
Could you update the copyright?
Why remove config for labels and annotations?
I just learned that this is a limitation from the Dubbo framework. Previously, I got an exception when trying to use mock value with the following format: `fail: return null`
why would `OwningScrollBar` be null?
Why are the full prefixes required in the `export` declaration now?
Inconsistent line wrapping.
should template the error into format string
this probably snuck in by mistake, can you remove it? thanks :D
In the other classes, name `InnerStandardMetrics` is used. For readability, could we make the name consistent?
`2.3` nay ? Kinda strange to introduce a deprecated on > 2.2.0...
nit: although we do the rename in a macro, could you change the statement at the end of this loop to FOREACH_BLOCK_ALL?
Can you not just pass a null message instead of this switch? The constructor parameter on the exception is nullable...
I don't think we need the locks at all, but if you keep them, how about keeping just one?
@Override returning null usaully indicates an abstraction problem. It's not much of a surprise given headless vs headed was done in a massive hurry to get the bots up and running. In this case it seems like `getTerritoryEffectImageFactory` should only be a method on the `HeadedContext`, not the headless. If a caller is not aware of the difference, they can get a NPE. Seems like a caller of this code would need to know which instance type, so moving the method to the right instance type I suspect is appropriate and would avoid the error and abstraction problem.
The new name may now conflict with an existing name. That's why we use a character that's not valid as an identifier. Since we also generate names that aren't valid in C elsewhere, it would be better to have a centralized facility for dealing with problematic names within mypyc. If you want to pursue this, I can give some pointers.
Is there is a default value, why not use a primitive value with a default of `false`? Then, you do not need these logics in a POJO get method.
Remove the copyright update - it's not being updated otherwise.
I have troubles with my editor and code formatter right now. I don't further know if this is the good or the bad format
Seeing as we are no longer passing the `allow_email_password_registration` and `allow_email_password_login` through params, I deleted them from ALLOWED_PARAMS
This should be `change: 'change'` since we follow the naming pattern like `change | close | open | moveUp | moveDown | etc.` in other components
Fixed another way in develop, ignore
I like this - this should be aligned everywhere i think
Where do you specifically use this?
does that mean we don't actually throw the error anymore?
I think this should be non-nullable
Adding this kind of method on public and important API like that is an architecture change that should be discussed first. Please open a discussion on Slack in `#team-platform` about this, because I'm really not sure it's the best way to move forward.
please don't remove EOL
Is this line totally correct? In default state, the order is like this: `order: [2, 'asc']`, but here, it changes to `order: [[2, 'asc'], 'asc']`.
https is required
_then_ --> _than_
`return` is removed? returned value is never used?
Why not directly do `self::$baseurl = "http://".$host;` here and removing the subsequent added line later?
Same - why is this separate from other imports?
Please revert these constants.
should we hard code this?
wha if `autoplayLoops_` is set to `0`? this logic would treat it as infinite loop. We probably want to either disallow it or treat `autoplay=0` same as `no autoplay`
We _expect_ to get handshake failures here, so consider logging this at Debug or Info level.
can we also call it `flag` ?
you can just use `WorkerMode.DRIVER.ordinal()`.
You dont need to do this inside the iterator. You have the operation queue and only need be done once
The protected access check I can live without. The invalid name one? I guess it's sometimes useful to give new contributors a heads up if they use really bad variable names, but otherwise probably isn't useful.
The location URL was introduced there to be able to report errors to the external API. Now, with sessions, I guess it's possible we don't need it in the store? Or, alternatively, we could store the config in a `config` attribute to make it easy to add metadata around it.
does that mean we don't actually throw the error anymore?
can you create the IsLocal function?
Why are these here and not the `WriteStack`?
It doesn't make sense to return a `nil` `cfgfile.Runner` unless there's an error being returned, and `integrationConfig` will/should only be `nil` if `config.NewIntegrationConfig` returns an error -- so I don't think this is right.
Proper docstring style is actually to have the close """ on the same line _iff_ it's a single line. So it was wrong, and it's still wrong. :-)
this should be `elif` now that `if not name` doesn't throw. should be moot since get_project should always return a string.
Unnecessary - you're re-assigning this variable on the very next line.
As this is a builder, we should just make a deep-copy (not use `Collections.unmodifiableList()`)
Metrics/BlockLength: Block has too many lines. [27/25]
Could we add an analytics call here to track how many users see this page, and pass in the `session[:sp][:loa3]` and `@sp_name` attributes?
Do we really need a new attribute for that? Can't we use an attribute?
I think load from etcd is not necessary here.
The closing colon should be after ValueError: `:raises ValueError: If format is invalid.`
Should not be here.
why change `isUserPartOfOrg` to `IsUserPartOfOrg` ?
Oh could we have 'r' added to usage as well? I spent forever wondering why `zdb -h` wasn't showing the new option :)
You can remove this import now.
Both of two lines got the same meaning, I believe it's unnecessary to change this.
Is this fixing a bug? Are we missing a test?
Not super familiar with context, but it doesn't seem this is used outsied the s2 package, will it be? Does it need to be exported?
Does it make sense to have an utility method that returns a mock muleContext with the required services? (to avoid having to create the mock and then configure the services on it)
It's public function we need to deprecate it properly. It's used in mnelab
No one is setting the info yet?
We'll probably need an index or two here for `user_id` and `group_id`
grp_size seems to be a better name
Why do you need this import here?
That was correct before, no? `Instance` is the type, so `Instance`s is many of them?
Ah I just noticed that I named these variables with a capital first letter -- do I need to rename these to `hostCertFile` and `hostKeyFile` to be idiomatic?
Why is this change necessary? I am not seeing it ever being set to a nullable string.
Most APIs below accepting `string text` allows null text
Extra empty line detected at body beginning.
Should there be a TODO to remove this logic? or will this stay?
Nice move. We might want to deprecate `RunnableOnService` now. There is a separate category "actually important to establish the capability matrix" which we might call `RunnerCapabilityTest extends NeedsRunner` but there are certainly far fewer of these than `RunnableOnService` tests.
`Waiting for info`
What does the check s->session->ext.max_early_data == 0 do? I guess it relates to having both an s->session and a s->psksession but don't fully undestand how that interacts yet.
Generally we use method references. So this would be `Capability::getResource`.
we'll need to backfill cost for old rows, should that be a separate migration?
Code standards: Please remove spaces inside square brackets.
Please remove the stray comma here.
Does `%q` work here instead of `\"%s\"`?
c/p err (was placeholder for something now remove it!)
don't return null. just return `CompletedFuture.completed(null);`
We will want a dedicated support page. Is there one on wordpress.com we can point to for now?
This is defaultable when we only have one container. I don't see that happening and it should be mentioned in the godoc.
could this be a breaking change ?
Maybe it would be better to do instead `from . import feature_extraction`. This should appease the testing system, and also is probably better for discoverability, although users will need to query `torchvision.models.feature_extraction.build_feature_extractor` instead of `torchvision.models.build_feature_extractor`, which I think it's ok
For this sort of thing, we usually abstract out the relevant features of something like `libkb.Env` into an interface. Does that make sense here?
ditto for this
Does home_bundle take care of undoing what useradd did, or working round it, when we were unable to pass -M ?
Any thought to rename this to `addSlapEvent`? There is also a false consistency of the "add" prefix, `addStatusMessage` is badly named, since it's setting a status message. But for slap event, 'add' is not the worst verb, but I'm struck as it's not really a message but more a chat event.
Should this be (c) 2019 here, and elsewhere in the patch, or is this a port of an existing patch written last year?
Why do we need to guard against a nil account recovery request? It seems like if we are trying to send an email with a nil account recovery request then we should raise, right?
@danrot what do you think?
This is to protect from broken .equals() implementations which don't check for a null param ?
We should change the filename to projects/wizard_of_wikipedia/...
Same here. Can be `long`.
Deleting assertions here as well?
These assertions should come from org.testng.AssertJUnit to avoid mixing up libraries... unless we've started porting over testsuites over to JUnit but I don't think that's the case yet?
We need to remove the registry when an alert manager is stopped, otherwise it will leak forever. This could be done in the `deleteUser()`.
Final newline missing.
You probably don't need `root` here, as that `url` from `REMOTE_COMMON should work, no?
I suspect that this will not be enough, and that you actually need to reorder one to match the other. See a few lines below, we just `zip` over them -- this implies they are equivalently ordered already.
:+1: I'm glad to see that this was as simple to implement as I had hoped. This will make more complicated S3 egress setups _much_ nicer, especially for any organization large enough to use multiple accounts for things like billing, per-department access control, etc.
Hm, you can add a line. But the copyright to the old stuff cannot be removed, FMPOV.
`socialPreviewImageURL` ? It's for the snippet preview, aight?
Nit: Please sort this new import in the third-party imports section near the other services
Is the `['type' => 'media']` part really necessary? I don't think so...
@rhymes this method common for alll controllers
Nit: Shall we rely on ` len(self.data)` instead of creating and managing a new field.
What's the objective of making this a `char`? I think it was kind of advantageous to pass a string as it will use all of those tokens as delimiters. Maybe we could introduce another overloaded function that's specific for splits with 1 delimiter? I don't think it matters much, as this function seems to not be used much in the code base.
E501 line too long (124 > 120 characters)
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
@BeatC, I don't like that you removed the `config` prop from the public API of the React component `App`. I'd still like consumers of the public API to be able to provide their own `config` prop value. Let's please talk before you continue with modifications to this PR.
Why did you use ! here, but a hard cast on GetEnumerator? Seems like changing as-cast to hard-cast would make this look nicer.
Yeah I'd rather this not be made part of WindowRoot. Should make a new control after window root and use that instead.
This is not allowed - pkg/monitor may not take dependencies on deep test packages in general.
@annatisch quick guidelines question: If we're conforming to the "all objects must accept dict representation" guideline, should we express this at the type level even though it's very much "not the preferred flow"? I'm very torn here between being "completely honest" and "providing less confusing guidance and relying on mypy+dict coercing users to express intent" (in terms of muddying up all the parameter types with Union[dict, ...])
Is this something we should just be removing? This seems like a good thing to have, and if it isn't hooked up at the moment, should we fix it?
if there is no reason to have 0 as a limit, then we can use 0 as the default of no limit?
A little late now, I guess, but do you think it's worth making a convenience wrapper for this pattern? Not sure how representative our tests are of usage of our API
new file always need a license header
I think any warnings should be in `PartitionHandlingConfigurationBuilder.validate()`. I'd also create a separate factory class, I would expect `EmptyConstructorNamedCacheFactory` to just create an instance without any logic.
You can use CollectionUtils.isNotEmpty
might want to log a warning or throw or something, if value === escaped or === the current escaped start symbol, and ditto for the end symbol. Or maybe not, I dunno.
At the meeting, we decided to add a new line at the start and end of this message.
so one thing to note is that avialble_hex should return an array of edges, what you have now is a boolean which is hacky and sort of works, but is not consistent with how this method is used elsewhere
I'm concerned that we may have a risk of collision with a customer-defined facet already named `Tag`. I'm asking @tiry what he thinks about naming it `NXTag` instead.
Is it necessary to change that?
actually what i meant is to do `AvroOrcUtils.createOrcSchema()` here for this constant so callers can use it directly
Just curious why you removed the errors.Wrapf here and above.
Also make sure you do one call to `ensure_running` before you close the spinner to give the ui a chance to start.
by default it logs to STDOUT, let me know if this should continue the default behavior
Hm... "True if no extension" is an odd case. AFAICT, this method is only used in Target... would probably be good to inline the logic there so that it is more obvious that it is completely overridden by `Resources`. Would that also make this check unnecessary?
why not use a default value instead?
I decided not to change the arguments name, as it makes sense to be more aggressive by setting the arguments here. and looks to be good name. The other idea I had was `scm_exclude=None` where we could pass *Collections* (set/tuple/list/set/dict, etc).
How come we initialize fleet both here and in line 38?
Please add a check here using `is_wp_error` to also account for `WP_Error` returns instead of just `null` returns.
I changed the language of the `description` here to something that makes more sense to me (and perhaps to @vaidehijoshi, as she mentioned being a little confused with the word `only`   )
Remove the cast
Does it make sense for these consts to go into `CasWebflowConstants`?
I do not know if this is the best place to define this interface. Maybe `pkg/oauth/server/osinserver/interfaces.go`?
This could also be an anonymous class or a class defined in the initializer.
Sorry to be picky but, could we also remove the corresponding import of the Parser class? Thanks @dpiparo
I don't think you need to introduce the temporary `node` here.
Let add WINDOWS to the field name to make it clear this is only used on windows
why did we change this to swallow interrupted exceptions? seems like an atni-pattern
Wherever this function is used `keepInTestDir` is always `true`. So maybe remove that argument altogether?
Similar to above -- is this unused?
Can we add a long entry here which internal port is used and that this is not "officially" supported?
damping is done one a different level in the penalized_projection algorithm
I think this was due to @cjb's lack of a git commit hook.
are we going to stick to name or use this?
Minor but this description doesn't seem to match what the test does - it is checking that no error is raised, not whether a notification is created.
Why do we need a new function for this? Seems like a trivial wrapper.
Wondering if there are actually two separate concepts here. inline reading - Where are use a parquet reader or hfile reader to read block content, iinstead of reading it out as a byte[] record lookups - Whether we scan and filter the keys of interest or push the lookups to the reader/fileformat. I feel the first one should be what the log reader should care about. We should push the record lookups into the file reader?
Please put `entry.getKey()` in a local variable.
I think checking double-tap by measuring interval between 2 onTouchStart being very small would be much safer for this, as onTouchEnd can be triggered following a long touch and not a tap, which might have a different meaning/handling. Even more, for accuracy we can use both onTouchStart measurement being in quick succession, and the onTouchEnd also coming almost immediately after the second onTouchStart. Basically with the current approach we might have a long touch followed by a quick tap considered as double tap. WDYT?
I decided to pull "Current Roles" out into its own partial to make it more extensible and with the addition of the removal button to roles, it no longer makes sense to show "Current Roles" on the `/admin/users/:id` page.
This a long standing issue, but while you're here let's either add a proper `extern kmem_cache_t *btree_leaf_cache;` to `sys/btree.h` or a wrapper function. Then we can shed this from `arc.c` and `metaslab.c`.
Why do you place it in the checkout module? It definitely looks like logic related to order.
What's the need for the above two lines?
nit, This should return a const ref since the shared lock will expire when it goes out of scope. The caller will still have a reference to the Config-internal data structure. ((Looking at some of the other accessor functions, they need const references too :crying_cat_face:.)) //cc @jedi22
Could we have a slightly more detailed explanation here?
Can we encapsulate this logic in a method that takes the country to select and performs the finding and clicking? This can be located in the same file for now, but at some point we may want it shared if we have to access it for other phone number change related tests.
I assume this is due to GiD not printing the output in the progress window? I would preffer not to put it in the `application_importer.py` since you are already adding one to your script. At least not for the release, we can discuss later about this, but as I see this is something that GiD team has to solve, not us.
Since this is used in `interfaces.go`, I think it should be defined there.
only `model` removal seems not big enough to be breaking change. So treat it as features here.
Shouldn't this be forceSecurte = c.Bool("tls-verify")
Fix import grouping.
@wido the index is not added, if you look at the code above ^^ the if statement to check if index already exists with given key name and it only adds the index if it does not exist otherwise skips.
Add note to say why we don't use `#sanitize`
maybe we could set this to be a minSize setting rather than size (so it can be stretched bigger with the dialog but can't go smaller?)
This has no chance of working properly. In fact, the original code can't work properly. @dvoytenko
should be handled.
c/p err (was placeholder for something now remove it!)
@vsoch I think the test was asserting the output of a wrong implementation. `install_root` is not in the schema so I would expect it to be an 'object' by default, not an 'array'.
The matches are not _returned_ by the `expression` argument. How about something like: > determining if values retrieved using `expression` should be...
This check needs to be way safer. `options.session.constructor` could be falsey / not an object
If you are going to create a method that does the same thing, just make `_createFormPart` public
As the postprocessing is gone, we might need another name?
Avoid deeply nested control flow statements.
aren't you getting out the same exact element each iteration here?
It might be cleaner to store the resources in the proper format on the call request instead of translating them here. I don't have super strong feelings about this, so it's your call, just thought I'd mention it. :egg:
@rathukugan please change the text here as well.
`skipUpdateLeader` should be renamed.
By doing so, you are changing the expected behavior for some weird cases. I would prefer to have a separate method like `createAccountWithHashedPassword` if the goal is only for CasC. In the current approach you are impacting users that desires to have a real password starting `#jbcrypt:`. I understand that the impact is quite small but such behavior could be potentially used by malicious users to achieve things.
In the context of previous side note. I have some ~wage~ vague memory that it, header ordering rule, was indirectly discussed at some point. It was formulated as "cryptlib.h over everything else", and we do see instance of it here. Do note that cryptlib.h did include e_os.h till now...
`get_raw_has_agreed` is a simpler call than `is_active`, so I agree with this ordering. It'll be more performant. The only edge case is, upon disconnection, does that imply the customer is revoking their "use" of Jetpack or do we state that any use of Jetpack following that. In either event, that's a separate issue that can be discussed/implemented in a later PR.
Hummm.... this class is nasty. It's extending something, but then overriding every method. Yuk! Think I'll raise a PR to get rid of this. No issue with your change though.
I'd recommend using `Ints.saturatedCast(MINUTES.toSeconds(5L))` here or create a constant `private final int SECONDS_PER_MINUTE = 60;` which can be multiplied by the number of minutes (of course we also need `SECONDS_PER_HOUR`, `SECONDS_PER_DAY`, and `SECONDS_PER_LUNAR_YEAR`).
are there instances in which Sender/Receiver can be added multiple times to the same client?
I like using `__FreeBSD__`, but a just as a note, I'd like recommendations on a standard osquery OS/DISTRO determination name scheme throughout python (gen___.py), bash (provision.sh), CMake, and C/C++. Right now you can use APPLE/LINUX/CENTOS/UBUNTU/FREEBSD in both CMake and C/C++. In C/C++ the output from lib.sh's OS and DISTRO are defined by CMake. We should set a DARWIN to be consistent on Apple/OSX.
Please put it back :)
Would it be worth wrapping these params in a struct? This list is getting unwieldy.
Path provides API to get this last segment.
do we need to flush the disk?
Are we doing this now? Or is this just my `clang-format` freakin out?
NIT: should be `java.lang.AutoCloseable` according to the commit description
I think load from etcd is not necessary here.
how is `RestClientException` map to `kerberos`?
@tnozicka this was closed and fixed hopefully
does that mean we don't actually throw the error anymore?
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
Shouldn't this one be ?int too?
I'm not sure about this one. It seems fine, but I would check the permissions excel file, or at least ask some, like @Ducz0r or Matja. These rules are pretty tricky/rigid/strict.
Use the < >, search priority
I think there might have been a reason why 'none' got special treatment.
where do we draw the line internally on when we use connect `Schema`s vs. where we use `SchemaInfo` schemas? Is it only for the rest APIs or do we also use `SchemaInfo` internally?
Maybe we go with `enabled` here ... Reasoning about `where enabled` is way simpler than thinking about double negatives, `where not disabled`
@ycombinator Is this a typo? Should it be `json:"avg_time_in_millis"`?
Can you confirm this: If user has permission user->user->password (and only this permission), can you confirm that user is not allowed to edit another information than password ? The change seems to open access to this but i am not sure.
Hardcoded timeout? Can we put it as an option into python config file?
does this possibly leak PII into the span names?
should `SharedStyleProps` be passed as an arg to the type?
this should probably be `.to be(true)`
nit: although we do the rename in a macro, could you change the statement at the end of this loop to FOREACH_BLOCK_ALL?
Why `Object`, the instance should still be of type `T`, right?
Nit: you have a bunch of newlines added in-between imports that probably the IDE's "auto-indent" added, they are unnecessary.
@rafaelweingartner, Thanks for the fix. I think these names would be better (PREVIOUS_ACL_RULE_ID and NEXT_ACL_RULE_ID).
We normally use `memset(3)` to clear a structure not `= {}`.
Can you add a migration to add this struct to DB (I know the sync below auto does this, however sync runs after migrations and could run into problems)
This seems like it should be a property called "Priority" rather than a "GetPriorityCore"?
Why are we calling BreakSolutionStepsLoop here?
What are the semantics that we envision for `Pixels`? What is its format structure? Can it be tied to `Keypoint`s?
Is that also correct for heartbeat? We might want to keep a monitor running to see when the node becomes ready. A node can become NotReady if it is powered off or has some kind of problem.
Should `num_blocks_used` be initialized to `1` instead of `0`?
binary backwards compatibility is preserved here.
there is another spelling mistake
attr.Visible can be false.
This line should be removed. You are currently in the "Probe" class.
nit: although we do the rename in a macro, could you change the statement at the end of this loop to FOREACH_BLOCK_ALL?
We shouldn't be linting this file.
how is this used in the API? I could imagine a name like srcStore or srcImage would be more appropriate.
I think you should add a bucket for 0. As is, "no retries" shares a bucket with "one retry", and if we want to find out how many have no retries we'll only ever get an interpolation.
this is a hack. We should avoid global variables as they can cause issues when reusing code, among many other problems (I'm ok with this for testing the approach, but we need to find another solution before merging). I think the `Beat` object is exposing the keystore through `beat.Keystore()` method. Probably you can get it somewhere and pass it to autodiscover.
Other parts of Epetra64 have a convention for naming templated routines: the templated version / implementation method of a nontemplated method starts with T.
Are the MarshalJSON/UnmarshalJSON functions used by fleet?
We do still want the `d.Set("scale_down_behavior", cluster.ScaleDownBehavior)` here so Terraform is always updating its state correctly from the API each read as well as on import. We just didn't need the wrapping `if d.Get()` check that was previously in the PR. Sorry I wasn't more clear about what I meant earlier!
we probably just want to make sure all the `CERTIFICATE` blocks in the PEM parse (again, just the CertificatesFromPEM() method)
Not sure about the name. Opinions?
Is it standard SQL ? Compatible with Postgresql ?
This is a bit weird, why would I ever call a `Must` function with `nil` ?
I was using these `getDefaultConsensusConfigCopy` functions to get default value for optional config fields (fields are pointers in harmonyConfig). I think currently `sysConfig` is a mandatory field in harmony config, so maybe we don't need this function?
May I propose `make_unique_id()` to assert in all cases what a unique ID is and make future changes easier.
Why is the new ChatMessage object not passed to the listener?
TLS Context factory is not a meaningful name for this. From the user point of view this is TLS configuration, he doesn't know or care that we handle it through a factory.
this could have just been `const quiet = process.env.SERVE_QUIET == 'true';` (that already returns a boolean) right?
I believe this part got merged in accidentally
Do we need this controller at all anymore, or is it used for 'deleting' existing service workers?
Hm. So if the param scope is not going to be instantiated, that means there's nothing in that will be bound to anything. Why do we need to record these symbols that no one will bind to?
please add this to `equals` and `hashcode`
Moving it to Cython means exposing most C structures to Cython and staring at tons of generated C code to see that it actually does the right thing (like in #891). I wouldn't do it bundled together with a functional change.
`org_name_to_org_name_rev` was used to as catch all for a certain `groupId:artifactId` (line 447-449), I think with your change it shouldn't be needed anymore, or at least it's worth looking into why it may be still needed and get it clarified.
#7222 introduces `LookupSerdeModule` which I think might be nicer behavior for middle manager and overlord than using `LookupModule` and configuring it not to load, but it will require this PR to wait until the other is merged.
I'm surprised how short the fix was, that's a very good point!
If I understand correctly, this means that the diagnostics path will end up in the cache key (but not the contents), right?
@batmat as discussed where you going to deprecate this?
TOML spec requires UTF-8, so added the `encoding` kwarg
Looks like we're just moving this import from one line to another and there are no other changes in this file. Can we undo this change to minimize noise in the diff?
Why it's unsigned int?
Didn't you remove the quotconvert.php file?
nit: cut the 'y' in 'implicity'
nit: Our normal import order is modules from the standard library, modules from our dependencies, followed by our own modules. With this in mind, I'd put this right before all of the `from letsencrypt...`, preserving the space between the `from acme import challenges` line above it.
Both `ViewExtension` definition and `Definition` should have precisely the same names! Let's not rename `TypeName` to `ExtensionDefinition`, let's leave it as it is. Let's rename `ExtensionDefinition.AssemblyName` to `AssemblyPath` to match your change here.
What happens if someone materialized a function from a string?
This isn't error, it just means that overrides file is empty or doesn't exist. Both are perfectly fine. Writing text message with code 200 is preferred.
Remove the copyright update - it's not being updated otherwise.
This compiles by accident (introduces parameter _string of type string) :) Alternative syntax: `Write(_, _, body string) error`
This looks like vestigial debug changes.
There's no way to tell the source of the texture (in a sane way) after caching the path. It's also not needed to check for it here: `is_base_pack` is only passed when initializing the textures the first time.
I'm a little confused about why we need to change the signature of AddJob. `in` is a `jobs.Job` and should already have the Name assigned to it. I don't see anything in AddJob that mutates that name. I can see some value in being defensive here since AddJob mutates `Id` we should indeed maybe assume it mutates everything. But, in that case, I think one of the following signatures for AddJob might be preferable: 1) `AddJob(inJob jobs.Job) (jobs.Job, error)` (i.e take the input by value return the an entire job object) 2) `AddJob(inJob *jobs.Job) error` (i.e. take the input by reference, assume AddJob mutates it appropriately) If I'm right about not actually needing this `name` return, it might be best to leave AddJob as-is for now to reduce the scope of this change.
What utility does this have for someone writing config? I don't remember us stuffing all the claims into `.Extra` or anything, though I'm not necessarily opposed. I would worry about staleness though.
Should this update client span in context as well?
nit: We don't need three blank lines here.
this should be a `StringSet`
Occasionally (1 out of about 25 refreshes) this check is not triggered, leaving fallback never toggled when loading an invalid video. Actually, the fallback is almost never toggled when we scroll down the page slowly to the invalid videos
add a TODO and issue key
Nit: This fits in one line, or?
Can you use the existing variable for this instead of inventing a new variable ?
(style) space required before the open brace '{'
IMO `profile.update_profile()` looks too redundand. `profile.update()` is nice and self-explaining.
@aghassemi Added this as positionObserver should unobserve and stop calling `getBoundingClientRect` after an element is cleaned up.
is there some reason we wouldn't just destroy the entire session (log the user out) at this point?
could you explain a little bit why is this change needed? This was to mimic `amp-analytics`'s behavior. If we want to make sure it's never displayed, we can probably explicitly set the element to hidden in `buildCallback`.
@kohsuke has a lovely blog post somewhere about how evil `<p/>` is
We only reference `HostContextInfo` here so Analytics.Net refrence is kept only for DynamoCore
`math` before `os`
But more specifically, why `10`? Also you replaced some numbers smaller than 10 with this.
why the assignment of 0? the value of `i`, or 1 character beyond the end of the string seems to make sense for describing a line break
iirc @caglar10ur specifically asked for the iota + 1 (in this or another change) --> I can't recall the reasoning...might double check
Should we update vendor for this repo?
Why can't we use `JsonEncoder` directly for JSON-LD? There is no special handling whatsoever required.
So, with such a setting, "\u0031" will get parsed as the integer number 1. Neat.
Strange. There is new line at the end of this file in my clone...
I think you can move it to `server/config.go`.
Related: I think it is fine here not to check if group->meth is NULL before dereferencing it.
Use `dubbo` as the default group will be better?
The empty check seems not necessary when you use is_string
we don't usually import the whole `mne` module in our testing files, we just import the functions we need (see lines 19-27)
Are you sure you want to have less info in the returned error than before?
Is 0 a valid containerID ?
This new parameter only seems to get added to the synchronous receiver and not the async one?
Could you please extract static method isNumericType(typeName)?
We should not pass out the `DynamoView` to client code like this. We should make the property immutable by only expose `{ get; }`. My suggestion is to leave this property out until we have more specific API requirements. It's also easier to add API's then to remove them. :)
This adds flexibility if we want to load an integer property as a string, otherwise we get a cast exception
I moved this invoke below the check for IDisposable, because this callback is only used at test time, and my test case was expecting it to be invoked 3 times (1 for each IDisposable service) but it was being invoked 4 times (once for the IEnumerable itself which doesn't implement IDisposable). It seemed clearer to adjust this, than to change my test to assert that onDispose should be called 4 times when there are only 3 disposable services.
I would suggest to finish these lines. Using ... is not good coding practice (I know the function name is already very elaborative, but would better to explain it in human language).
There is a -DER_UNINIT - I'd say this case means the agent path wasn't initialized. Would be nice to make the log message more specific too
WRT to commit message. It looks like the refactor is not the most important change here. The most important part is that you added missing invalidate for caches. And refactor is only about preventing this to happen in future again. Please consider writing better commit message.
Previously we were not returning anything from unlayoutcallback, and I'm not sure why we need the return value now. Can you explain a little why we do?
I think the bootstrap default location should be in the Spack tree, not in the config directory
Same as above, remove the type here to avoid BC breaks.
don't built this on ios, only osx
FMI: The builder would never schedule a disconnected element anyway right? (since it is InOb based). I'm guessing this is just to free up a tiny bit of mem
Would keep the trait and fallback to it if the `accessControlQueryEnhancer` is not set.
Wouldn't `static const char f[] = "0123456789ABCDEF";` be better? It avoids a pointer.
Note that this line will never be reached, since `WP_CLI::error()` will stop the script.
Please don't add to IEffectBlocker, just use the events.
No need for this guard. The guards below are sufficient (we don't do this elsewhere - e.g. see s_server).
Why is this needed?
always enable double buffer. The `async load` is very confusing. It just enable double buffer in DataProvider. Maybe we should change it later.
Both `ViewExtension` definition and `Definition` should have precisely the same names! Let's not rename `TypeName` to `ExtensionDefinition`, let's leave it as it is. Let's rename `ExtensionDefinition.AssemblyName` to `AssemblyPath` to match your change here.
We need to enable this in the vlabs API type as well (including conversion to the base api version in both directions)
Could the `return` part of `init` be moved to the `BaseElement` definition? And the `registerApiAction` would stay here in the AMP layer?
It's very weird to be calling this attribute as `.year.year` in all the code. A year is a year, and a date, is a date. If you just want to store the year, I don't think `date` is the proper type here. I'd make it to be a integer.
Can we add the commit hash for v0.9.1?
I think you mentioned that this wasn't working before, but I don't see where it is being fixed? Or did you just want to make sure we have more complete tests (which is great too :) )
All these test names where confusing since we are testing the rpc function `GetServicweGroups` not the `ServiceGroupsHealthCounts`.
After this change, what is starting the informers?
Looks like `next_grouping` is just a helper, so you shouldn't create a route.
These lines are duplication of L209-211, is it possible to move things around to get rid of the duplicity?
You should use `Regexp.escape` here
3 seconds might be too generous, based on checking NewRelic, this was bigger than the average for all our requests (except when we were in an outage state a few weeks ago)
I think load from etcd is not necessary here.
1) spotted `;;` 2) Could you please move the block, start=`if (!texture_path.empty()`, end=`fs::GetRecursiveSubPaths` into a function? An empty vector can be returned if the path is not set or not a directory. EDIT: Or initialize a vector and pass it by a reference, which would work for the code in `Server::fillMediaCache()` too
Standards: Please add a space after commas.
There needs to be a space between if and the opening parenthesis, i.e. `if (`
don't love this, but works right now and behavior probably should end up going in `AppConfigReader` rather than here or in `IdentityConfig`
Standards: Can you please add a space after commas?
There used to be a freeform `message` param in the old templates, I decided to remove it as part of the cleanup
why we need this?
I'm not crazy about the wording on the error but I would prefer that we don't even do this check, if globe is off just silently ignore the other stuff. Otherwise there are a host of other options that need to be checked: `selectedImageryProviderViewModel`, `imageryProviderViewModels`, `selectedTerrainProviderViewModel`, `terrainProviderViewModels`, and `terrainProvider`, possible more. EDIT: working -> wording.
Why is this needed? I don't see any nullability attribute being used in this file.
Do not use space inside array brackets.
It's a small file, but why do we need three identical copies? We have other files that are used in corelib and other libraries.
1 trailing blank lines detected.
You probably want to change CRYPTO_THREAD_unlock() too, and check for EPERM there
Can you explain why this patch is needed? Also, I assume it doesn't apply to every version of Bazel...
Nit: You could just call `Arrays.toString(args)` here. Also, I believe the explicit calls `Object#toString()` are unnecessary as `String#format()` does that implicitly.
this should probably be `.to be(true)`
I think this is not a right place for this check. It should be rather processed before (or in) ``clean_up_bases_and_infer_type_variables``, this is why you see problems with ``Generic`` in #3366.
`time.Nanosecond` is `1` so it's enough to do `/ int64(time.Millisecond)`.
are we going to stick to name or use this?
Didn't we say we only use aliases if really necessary? /cc @chirimoya
I think it's strange to add a `returns` tag when a method does not return anything. Does it actually do anything? Also, I don't see descriptions for the parameters, which is actually important.
The preferred style is `from typing import X`. Think Typeshed (official type hints repo) established this in their style guide.
Removing the extra space after the equals will satisfy the wpcs sniff, so `'' === $argument` goes to `'' === $argument` (hard to see on github!).
Could this cause any exception; maybe return empty array instead or null?
At the meeting, we decided to add a new line at the start and end of this message.
I would remove the `if (Equals(sv1, sv2))` at the beginning, and replace lines 2616 on with `return x.CompareTo(y);`
why'd you do this??
I think this was due to @cjb's lack of a git commit hook.
Is there an issue tracking the need to use `type: ignore` here? Can we link it?
I really really dislike this.
Layout/MultilineMethodCallIndentation: Use 2 (not 20) spaces for indenting an expression spanning multiple lines.
Can we schema definition of each dict here so cerberus validates it?
is this used outside?
There's no way to tell the source of the texture (in a sane way) after caching the path. It's also not needed to check for it here: `is_base_pack` is only passed when initializing the textures the first time.
I'm confused if this is just for node modifications, shouldn't the argument type be `NodeModel`. Also, can you give the client more information about how this method is to be used? Please make me reviewer when you plan to make changes to the `Extension` code. As I've noted below, I'd advise using the recordable command framework and, where posssible, try your best to isolate client code from the nitty-gritty details of undo-redo.
I'd rather `syncInterval <= 0` be a disabled case. We currently rung with syncing disabled, and only send queries to ingesters in our testing, and it makes it more synonymous with Thanos where the LTS is optional.
Do we need to coerce this?
Rename `toTable()` method to `to()`? Seems more consistent with other ios, eg. BigQueryIO and you already specify `String table` argument and the docs tells what's the subject of this operation so it's all clear. :)
Why line-break? Did this exceed the line length limit before?
Is `getData()` called by a test?
Is this required or can be updated the code that uses this method to use `Integer.parseInt`?
should this be returning the result of the assign?
Did you get rid of this line when you tried nesting all `pacpy` imports?
either missing a `@CheckForNull` or some check in the implementation is missing to enforce the method's contract
There is an inspection of **extractionFn** below, but I don't see it plays as a 'boolean flag'. io/druid/query/groupby/RowBasedColumnSelectorFactory.java:180
could create a map of 6 rather than 16 (default capacity)
"... mocked out in tests ..."
This is not allowed - pkg/monitor may not take dependencies on deep test packages in general.
Totally open to other names. Here are the options I thought of: * FileListing * SnapshotListing * FilesAndDirs * ResolvedGlobs * PathStats
We could also just use the "try with" syntax for all of this. This is true for all files :). But we can also do this as a followup I guess
OK, now I'm confused. Lint wanted tt changed to test in the other code, but test to tt here?
Move this down to the grouping of github.com/elastic imports.
What about the ingress DNS?
is there a JIRA to implement this?
Should this permission still be there? Looks like `COLLECTIONS_EDIT` is unused entirely now.
Here, explicitly assigning `end` to some idempotent element would improve readability and remove the need for the pylint suppression. Am I missing something special?
util functions in `io.py` also need same operations?
Is this variable still necessary?
this variable name cannot be changed. it correlates to the create.go line 58 and is the pointer endpoint for where the cgroups user input is stored.
Should we also remove constant if it's not needed anymore?
Wrong capitalization for the `if`.
can you nuke this?
If we aren't going to propagate the error up, can we log it?
FYI (and I found it recently), you can use `.addPackage(HelloService.class.getPackage())`, which avoid a long list of classes (not something to change)
do we need derived actions? can't we just do @game.add_x_action(action) def add_x_action(action) raise if @loading
Could be formatted a little bit better?
Same as above, but with the additional step of making this lambda a function (you can't add type annotations to lambdas).
4MB? That might be too big  . Lets do 2MB for now (matches the array pool max).
What happens if someone materialized a function from a string?
If this isn't working with hashes there's a more serious regression issue somewhere in the codebase, I'm worried this is a bandaid on a missing limb.
Is there any reason why this is better? If not, I think we should stick to the official JavaScript styleguide and keep using string literals.
is set as `selectedNavContexts` in the constructor. maybe I shoule deprecate `getSelectedNavContext` and add `getSelectedNavContexts`?
why need hello here?
IDisposable here isn't necessary.
Why are we downconverting a long here? It seems odd to say the least.
Should the default be set on the database level? Maybe it would be best to do when creating the Job Runs.
nit of the tiniest nits. If possible, it would be nice to have the blank line above this still. But only adjust if you need other refinements for this PR.
Could we get Yoda conditions here?
Is this change intentional?
Shall we define it at consensus if the only use is in consensus module?
Shall we define it at consensus if the only use is in consensus module?
The result of this call is unused. I don't think it should be here.
This property is not assigned correctly and never used, so I removed it.
A similar check in gradient is being added in #27183.
do we need this in e2e tests? They usually don't test some internal states\props of components. e2e cares only about result from user perspective as much as possible
The Json path shouldn't be `$.Manager.Name` in this case? The payload was fine until it hit the trailing property `Name` in the reference object.
The required framework required us to reset the priority every time we resumed the timer, but that is no longer necessary. Setting it once in `setInterruptPriority` is adequate.
c/p err (was placeholder for something now remove it!)
should this belong with the actual metadata column names? may be high time we pulled those into a `enum` ? (ordering/size done in a standard way)
Although this is correct, please write `use Friendica\Module;` and later `Module\Contact::getContactTemplateVars` to prevent any immediate confusion.
Neither `clean` nor `bower` tasks exists in this file. An example of an async task is `doc-gen`, but actually I think that one returns a promise...
would be better to have new mapper on a dedicated line, more diff and conflict friendly
why this change? and either way once we release we would be able to start using fstrings.
:grimacing: Any guesses how this would have manifested?
I think the outermost parentheses are unnecessary..would be good to confirm via REPL.
out of scope, when searching for syntax to enable sys properties at runtime, just noticed that this one was not restored correctly.
We need to keep the lock held over this whole function, but we can release it in if (wait) {}
`on the value` -> `on the return of {@link #get(int)}`.
Need to do a similar adjustment in `dvc/command/cache.py`.
let's use parameters since we don't have any other binding without the complete name
Can you add a TODO to export this from a lower level, like `src`? (No need to do for this PR, I'll take care of it)
The naming of all these 3 unlimited variables is confusing. I would drop them all and just use UINT256_MAX directly wherever you use them. That conveys the fact that there is no real limit in that case much better imo. Alternatively, but I like it less, just call them `MAX_TOKEN_NETWORKS`, `MAX_PER_CHANNEL...` e.t.c. Anything but "unlimited limit" :sweat_smile:
for this, if the container is joining a pod and `usePodCgroup` is specified, would that override this here or cause a conflict?
Isn't the add-on facility used in aks-engine different from the add-on facility used in AKS (helm based). Hence I am not sure how this can be used in AKS. I was expecting the facility to be more generic and be VMSS/VMA template specific. What is the missing piece piece connecting this ?
This line will get added automatically by the build system, no need to add it manually here. JFYI for the future. )
I get why you did it this way, but I'm pretty sure it's not the best use of interfaces to have implementing classes return themselves as instance, especially because this makes it obvious that the logic is not seperated from the UI class whatsoever.
Put `global` right under the function define.
@simitt, I've tried the change you suggested here and my tests have rejected the certificate
wouwie, does this not deserve it's own data type?
There are lots of first() calls in this module
You cannot rely on an origin package inside of the kubernetes repo
@dvoytenko had to cast here
I think this has the same problem as IdentityExtractionFn. It should return a constant rather than `super.hashCode()`. Please check the other usages of `super.hashCode()` as well.
nit: Could be removed
Better initialize this?
Why the new arrangement here? Did a stray change sneak into the commit?
I think checking double-tap by measuring interval between 2 onTouchStart being very small would be much safer for this, as onTouchEnd can be triggered following a long touch and not a tap, which might have a different meaning/handling. Even more, for accuracy we can use both onTouchStart measurement being in quick succession, and the onTouchEnd also coming almost immediately after the second onTouchStart. Basically with the current approach we might have a long touch followed by a quick tap considered as double tap. WDYT?
Glad to see this one removed ;-)
import sys the next line
I always like to add an `else` clause that explicitly disables options. That way, if the default changes or CMake tries to be fancy and sets the default based on what your compiler is capable of or what dependencies it finds on your system, the build is still reproducible.
#7222 introduces `LookupSerdeModule` which I think might be nicer behavior for middle manager and overlord than using `LookupModule` and configuring it not to load, but it will require this PR to wait until the other is merged.
Why lower this?
You can now remove `DeveloperError` from the list.
ignore this change, just needed for testing
The translation of units are saved into language file with syntax 'unitXXX' with XXX is unit code. If you removed this, the units will not more be translated.
This has got out of alphabetical order.
can we set the tombstone state directly? Seem it is dangerous.
how do the defs in Python.h come in here in future?
is it not the case anymore?
Whether -> wether
Space inside { missing.<br>Prefer single-quoted strings when you don't need string interpolation or special symbols.<br>Line is too long. [111/80]<br>Space inside } missing.
This change is also crucial to avoid unnecessary nesting. Returning a list of groups didn't get us anything besides added complexity later. So now this function unwraps the group created by each `create_chunked_tasks_signatures` call, returns a flat list of tasks, and that list is _then_ fed into a `group()` either by `gather_index_stats_tasks()` (used in `reindex`) or the command `handle()` method.
Not a fan of adding this `missing` element. Why not just call `continue` here, instead of later? Or unset the `$template` entry from the `$templates` array?
Not accepted anymore
It's not `Q`, it's `$q`.
I don't understand this change, can you explain, please?
this will cause that account cannot be changed anymore, once a main account-contact relation is set.
why `string|false` ?
There's no need to save this - it's set on construction and never changed.
I'd put this at the class level (without `self.`) -- that's where all instance attrs of this class go.
Does gjson.Parse(..) work for this? My understanding was empty strings were always mapped internally to '{}' as empty strings are not valid JSON, so it may be breaking assumptions elsewhere.
Not "|"? Also, should the docs to CORRMAP also be amended in this way?
We probably want to do as much canonicalization as possible to phone numbers to avoid unnecessary weird conflicts. Not sure where or if this is already done. Wouldn't want different impteams with "1083475713" and "108 347 5713" and "108-347-5713".
This will break the functionality. The value will become a boolean if the `$dependency_management` is set with a value.
nitpick, prefer `if (args.empty()) {`
Is this constant available in the S3 gem? If the threshold in the gem changes, this constant will no longer be accurate.
That UTF8_ENABLED is FALSE doesn't mean that you shouldn't be able to use the class ...
We need the equivalent conversion boilerplate for agentPoolProfiles as well.
This name could be fairly misleading with that doc along with it, which isnt precisely what it does. I would consider it reasonable to think think a 'force' auto deletion described that way would always delete and do it there and then, which it doesnt necessarily. It only deletes due to this if the address was itself auto-created, and only if it has an exactly-0 autoDeleteDelay. This would again give super-surprising behaviour if auto-delete-delay is also disabled in the broker config generally, as it was leading to finding this issue, since the address would then never be removed (by the reaper), even despite this requested 'forcing'.
A more reasonable default timeout is 30s not infinite.
Does removing this cause any issues?
Do you need to declare this variable globally?
This function name is out of date now.
Have you tested this? I think this might still fail. In any case, I think the best place to do make the change here is in `dmypy_server.py` where the error message is generated.
by default it logs to STDOUT, let me know if this should continue the default behavior
This `CLS(CLS.get_url())` mess will be removed once no tests use it. Likely in this PR.
do you need the check? D_FREE handles NULL
Would it be `1.3.0.rc0`?
CS issue: public properties should be defined before protected ones
`&& !kerrors.IsNotFound(err)` looks to have been an intentional choice. Also, we risk breaking existing scripts by changing behavior for this case. Tagging @simo5 and @deads2k to confirm it'd be fine to remove that check.
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.
IMHO, these methods need unit tests to ensure maintainability and that people don't inadvertently change the logic to be incorrect.
Is it better to do a non-empty check and remove the try block?
Do we ever create a `ByteString` without looking it up in a map of caches?
Is this just a shortcut, or does it fix some issue?
Not a fan of the naming here but as it's not user facing we can figure out the "correct" name when we have multiple use cases. This will make it easier.
Remove this test case since it's now the same as the one below.
It is incongruous to make this field static when all of its accessors are instance methods. Also why use AtomicReference here?
good call! You're totally right that we need to create offline versions of the async streaming tests as well. :)
You can merge this line with the previous.
Without quotes, it removes the `;` from lists... which can be very confusing when you are focused on an issue related to a list of paths
It can be hidden in the anonymous namespace
just confirm, the initial version should be set as 0 or 1? (seems initially is zero, and every change will +1)
I think DetachAll should be during pl.storage initialization rather than in the NewX methods - this will cause havoc if we end up trying to create scratch at the same time as a NewVolumeStore for example - ditto if we ever have dynamic config.
`return client == null ? false : client.isClosed();`
Please update to 'Installation instructions'
would it be possible to do this fewer than 100 times and still have an effective test? I imagine 100x is kinda slow but maybe I am wrong
spurious change, revert?
You can remove the log now too.
I think load from etcd is not necessary here.
Hmm, this shouldn't be necessary
I would use a static class property instead
Not accepted anymore
Can we display all helium types at first?
I couldn't come up with a good use case where we want to reset `requestOriginPromise` when we reset the batching status. What do you think? Should we support `requestOrigin` just like `baseUrl`, or do we want to be more restrictive on this specific usage. I am a bit concerned and want to confirm the default behavior. Because it would be a breaking change if we want to make a change later.
Is this necessary to create the dir in the validation phase?
nit unnecessary add
Line is too long. [89/80]
This ofc is not generically valid, but I think with our current version handling (`alpha, beta, rc1, ..`) it should be good enough.
@smarterclayton This is breaking change. The current default is `add`. While I do think that `claim` is a better default, this means that old `master-config.yaml`s will suddenly start behaving differently after an upgrade: something we previously said we wouldn't do. We could make this defaulter choose `add` and generate new configs using `claim` to avoid the break, but have better defaults moving forward.
We ran our application built with Beam `2.18.0` and the metrics are displayed correctly, with this fix Spark displays the same results. The change that broke things up for Spark was part of BEAM-9600 - #11369 .
don't use `^` in version please
Do you have a reason for different argument names: `action` vs `situation`? I find it a bit confusing.
This `if` condition should not have been removed.
Also a recursive call here!
can we add an example that is mixed with numbers. and also an example of having consecutive uppercase letters.
Is there a particular reason for this specific frame size? It seems like it should be a configurable `Integer` property that could be checked for null and used to set the Send and Receive Buffer sizes when found.
man that if test is getting very complicated.
We should change the name of Dispatch to Create or Deploy - doesn't need to be done in this PR, but at the moment it's single purpose with a general purpose name which is confusing
I suggest to use a name that makes us know the meaning of this consumer. A consumer to do what? do you know what I mean?
by default it logs to STDOUT, let me know if this should continue the default behavior
Can the version please be changed to "0.5.0"?
Really not needed? I'd have think those are for a given behat test, if not np just remove them though it's not part of the fix (or is it?).
Please note this change in behavior. What prompted this here is that on circular redirect, apache-httpasyncclient calls `Instrumenter.end()` with both a 302 response object AND and exception. And our http client tests think that circular redirects should result in `StatusCode.ERROR`.
I've added in another PR.
the `defer` should be defined outside of the loop, otherwise the function will be scheduled on each loop iteration
how is this change related to the issue?
is this really needed?
`PlayingStates` sounds far more descriptive than `string`, @alanorozco does this look correct?
Lol how did we not catch this
Was this a bug?
This is defaultable when we only have one container. I don't see that happening and it should be mentioned in the godoc.
any reason not to overload the LegacyNodeName - maybe note that this is property is only valid for NodeModel dummy nodes?
This is the more crucial change. This means that any `pytest` based test now starts with an empty cache. It wasn't like this before. Any test that was `unittest` class based based on `KumaTestCase` would always start with a cleared cache.
Can't find the docs on that option, what does it do?
As this is very specific to only test_package, I am fine if this is dynamic and not a class attribute (but fine with it too)
A question to everyone for this PR, what's the stat on migrations? I was under the impression we decided to go w/ pure golang, but I may be mistaken.
Instead of having individual caller handle the expiration of local storage. I think a more helpful method would be to provide a method like `getUnexpiredValue(name, duration)`. Not a blocker.
I'd rather not see this change here. The problem is that Android needs `SoundEffect.FromStream()` supported... we should fix it there.
how about make log more friendly?
What is `basicCtx` used for?
TBH I'm not a huge fan of "Pulumi CI" as the default, catch-all. Since it might confuse some people to think that we offer some CI/CD product. Or, if we ever do offer a CI/CD product, would then require us to rename this value. It seems like "Generic CI" would be more appropriate for the use-case? ... though since you are specifying the generic CI system _to Pulumi_, I guess prefixing the env vars with `PULUMI_` makes sense. Naming is hard.
I see what you're going there. If it was me, I would remove the closing brace before the `#ifdef` and place it before the `else` here...
Generalising it because SSH could use the same optimization a bit later.
oh its here. then its not needed in `class/abstract-hd-wallet.js`
I typoed my suggestion; should be `probeForAvailableMountDir`
I am not sure if using `hide-if-js` does make sense in the menu context. Could we consider changing it to `hide-from-menu`? We will need to pass this guideline to Woo too.
consider re-gennning this with in Java 7+ style?
This could be a strict comparison.
should handle the error.
Why is it moved here?
Can we also assert that the env vars are **not** added to the application container?
We need to update line 473 of class-themes.php to pass $send_full_theme_data as true. Otherwise when switch_theme is triggered only name/version/uri/slug will be synced. When we want to have all the data stay aligned.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
This reference is conflicting with the other two changes.
I think the formula is correct. We take the mean for the 0th row in the first case and the 1st row in the second case.
Remove the trailing period
i keep trying to do both. We should just make a helper method in logging that allows warning
nit - group this with the other openshift imports
I think this is not necessary to add `: Tensor`
@danrot what do you think?
why'd you do this??
Just guessing this is due to the newer compiler helpfully telling us to make this change?
This won't suffice because some of the task runs may not be finished
Is this really needed? I something is deleted, he will see it upon refresh, and this won't help. Except, if there is another reason for this change...
This is not allowed - pkg/monitor may not take dependencies on deep test packages in general.
We could link to the directive guide/normalization here
Can you include the exception `e` as the second parameter of `CloudRuntimeException` please?
maybe update the spec description to be "when @show_progress_bar is true" or something?
`file = null;` in the `finally` block is evaluated even when `file` is `null`. I would move the null-check out of the try block and return early when `file` is `null`.
Unfortunate that this has to be in both places, but it looks like that's necessary. It might work to put this into a shared method or something, though, like the existing `check_for_gpu` or `int_to_device`.
This should also be configured in `nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/resources/access-control/nifi.properties` and `nifi-assembly/pom.xml`
shouldn't you apply `preg_quote` to be safe ?
Does it actually suppress the lint error as it's after the affected line
If you know what this function does please add a doxygen description
It should be version 0 only. For items created in personal desk it starts with version 0. @petrjasek correct me if am wrong.
this isn't needed?
Hey @jordanbonilla, you should set up whatever text editor/IDE you're using to automatically run `gofmt` for you so things like this don't slip through.
22 extra queries? That's all from a single collection? (with one addon and a sole author)?
_collect calls clean_ret in the failure case, so I think we can't do the free here. Could either add a free_ret wrapper that calls clean_ret and then does the free, or do a cleanup function in the Go code that adds the free.
You can remove this import now.
Use empty lines between method definitions.
Is this correct for `page: 0`, `totalItems: 0`, `itemsPerPage: 0`? Is it supposed to happen?
Don't you have to also make some changes in sulu-standard because of this?
is null buffer actually allowed or is it only for zero length?
Thanks for not ignoring me! Also, cool, `errors.Is` :+1:
We could link to the directive guide/normalization here
see initialise vs initialize. :) don't bother changing all of them to one or the other.
I think you can write `framework.Variable` or `(framework.Variable, )` instead of `(framework.Variable)`
Why change of logger now means the loss of formatted/and id'd log
nit: you may want to change intellij editor settings. its generally discouraged to use '*' imports.
We're not linking to `FrameState` because it's private now. @pjcozzi does that mean we should change these callbacks to not take a `FrameState` anymore? The intention was to allow the alpha, etc. to vary with time, camera location, etc. but I'm not aware of anyone using the feature.
Keeping this `kmem_free(dst, sizeof (*dst));` under the `dst->dst_freefunc != NULL` check makes passing a `freefunc` mandatory for a nowait caller. Otherwise `dst` will be leaked here. Keeping the `dst_nowaiter` would probably be the simplest way to handle this.
As this is a builder, we should just make a deep-copy (not use `Collections.unmodifiableList()`)
Can this be removed?
@vsoch I think the test was asserting the output of a wrong implementation. `install_root` is not in the schema so I would expect it to be an 'object' by default, not an 'array'.
This converter is used in various places, please don't change its original intent. We need a different solution.
This function shouldn't be necessary.
this line is too long
Seems like this can be an optional depending on whether or not the user chooses to bootstrap. Its okay if that work is going to be part of a separate PR.
Well here's your problem. Issue to do a more thorough refactor please.
The test fails because `GenericRecord` in AVRO should be supplied with `Utf8` instead of `String`. We should handle it as a special case.
`value` is typed as an object, not a string. does flow not display an error?
Suggest to change the reason to `Not supported in SINGLE_PROCESS mode.` as this is not a public API and it's only referenced in `RayNativeRuntime`, which means we won't implement it for single process mode.
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
replaced with `email_link` because this is a HTML template
If you're not doing anything here, this can be safely removed.
I think It is strange to put a response variable member in a struct called XXRequest. Any suggestion? @siddontang
Shouldn't we still pass `...rest` to iframe? Note also that the `iframeStyle` prop can be used as plain `style` with this change.
Not sure we need to export this?
Can you make the sense of these positive? i.e., `if _print_msg:` instead of `if not _suppress_msg:`
`assertEquals()` --> `assertEqual()` (the former is deprecated)
Ain't 0 the default anyway?
is there some reason we wouldn't just destroy the entire session (log the user out) at this point?
Is it standard SQL ? Compatible with Postgresql ?
Don't do this - keep the fields the same internally and externally. When we move to ingress this is going to have to merge in, and ingress has no concept of duplicate from.
This should be a full sentence.
v4 should be changed
revert. (I'm calling this out because the new indentation is clearly worse than the previous indentation.)
If this is nonfunctional, it can probably be left out.
Can you also add a newline to end of this file?
Could you explain the idea of accessor?
I would recommend to avoid doing it in a production code to avoid ambiguity
Thoughts on renaming this? `target` isn't very descriptive. Maybe `target_alias`?
What's the point, `scroller` is always null no?
If we keep this file and I'm correct in assuming that the name of the file is unimportant, can we give it a more descriptive name like `docs.py`?
This allows us to QA a branch from inside of our mobile app.
This is bad. We have the default value in two places. Either (1) Add a named constant for the default value. (2) (Preferred) Have a config accessor class/method that reads the right value from the configuration and the default value is maintained only in one place.
Please use a policy
You don't need the `to_s` here.
No spaces around concatenation please.
Spelling mistake here. Also we should only use plural form `Statuses` if the enum fields can be combined (i.e. intended for use as bit flags that more than one bits may be set at the same time), otherwise, this should be `Status`. So the name should be `ResponseStatus`.
Very good point about `getsize`. Indeed, `hash_info` is part of the object itself and identifies itself fully, so `getsize` is likely not needed anymore. But the same could be asked about `Tree.size` too, since its hash_info also has `size`. So looks like we could use it there as well. WDYT?
Have you tried adding it in ``transform_conanfile()`` function of the pylint_plugin logic instead?
Technically, those should be optional pointer types for backwards-compatibility
The value may cause us cannot find a suitable store.
For my proposal: This is the place where we should evaluate the `$$digestTarget` expression: ```if (scope.$$digestTarget && !scope.$eval(scope.$$digestTarget)) scope = scope.$parent; ...`
why do we need this? if an unknown property is checked it will return undefined anyway.
Why do we need this converter? If that, shouldn't we introduce it alongside with that `ToStringFriendlyJsonNodeToStringConverter`? On the other hand: do we still need that `ToStringFriendlyJsonNodeToStringConverter` with this whole your change?
we don't usually import the whole `mne` module in our testing files, we just import the functions we need (see lines 19-27)
Are you sure about this one? Because the previous implementation covered both methods. The new one gets `handlers(Phase phase)` to return an empty list always. OK, it's deprecated but who knows who's calling it...
Allows `configuration` to be set to default on use in case `init` is not called.
At least one more here
Unit tests now rely on `DynamoShapeManager.Preloader` for its geometry preloading activities.
Started on this upgrade, probably wasn't worth it in the end
I think calling out `NaN` here would be better than `0`.
what is this can you do this more elegantly with jquery?
We do this in the `Admin::TagsController#update` method and when adding a moderator to a tag (but we display the moderator's name rather than the tag name!), so I updated this for consistency.
Instead of setting `self._egg_info_path` explicitly everywhere, can we turn `source_dir` into a property and then set `self._egg_info_path = None` in the setter?
Given that this is the `signed_out_base_feed` method and we already performed the `user_signed_in?` check-in `assign_feed_stories` to even get to this point we can hard-code the value to `false`.
Why? The previous implementation (delegating to `getAlternativePriority`) seems still valid.
Please check ParquetUtils class for similar APIs
Won't this just NPE in the next line instead though?
Is this just a shortcut, or does it fix some issue?
Accomodating for taskbar.
Hey Andy, does it make sense to also include a check for a `:reported_url` that is *more than* 50 characters? Seeing as that was the use case that necessitated this PR?
Do we need a check to make sure `attrp->da_pool_label` is NULL before strdup? Or is that the user's responsibility?
Final newline missing.
We can use iterator here to replace ArrayList.
this variable name cannot be changed. it correlates to the create.go line 58 and is the pointer endpoint for where the cgroups user input is stored.
Is the condition still needed? if it `hasIri` `context['iri']` is defined no?
Expose it in YAML config too, please. Then run `make doc`.
I've just found that removing these methods is actually SPI-breaking :-/ It was a bad SPI arguably, but still. Something to bear in mind for the future. (And, well, I'll dig out the `name` out of the `image` :-) )
Changing the name will break existing processors. Instead add `.displayName("Kudu Operation Type")` to change the displayed name without changing the property name.
This file has nothing to do with your PR.
Trailing whitespace detected.
What is that FIXME and why we are not fixing it?
Shouldn't we just make this fatal in 2.2?
The original is wrong here too   Changing the comparison to `d >= 0 && d < 18446744073709551616.` should work.
could entityType be null?
Shouldn't this block be _after_ the call to `EVP_ENCODE_CTX_new()`?
Doesn't this lead to an error if `len(opts.OrderBy) == 0` evaluates to true as `"id ASC".String()` does not exist?
i removed colorFlag because it just didn't seem to be serving any real purpose. It was an intermediary indirection that we then needed to translate again into the 'Colorization' type.
I don't think `unique: true` is working, see the schema.rb. I think you need `add_index(:classified_listings_categories, :name, unique: true)` after the `create_table`
consider merging both lines
nitpick, this is a long flag, can `--mjson` stand for "merged JSON" or `--sjson` for "single JSON" work?
I think maybe this logic can be extracted/cleaned and separated as an independent PR with: - get_generator never adds the platform - get_generator_platform always compute the platform, for all visuals - The build helpers compose the ``self.generator`` with both as needed. wdyt?
Out of scope for this PR, but it might be nice to have helper methods to generate references for optional types without requiring a temporary variable. I believe Kubernetes client-go has something like this.
Please don't communicate this via a signal. That introduces unnecessary overhead and makes the code more complex than needed. A simple `pyqtSlot` should do the job. That also prevents the need to create code that's not in the SliceInfoPlugin. For reference on how to use a pyqtSlot to create a dialogue you could look at the UraniumExampleExtensionPlugin or the Change Log.
Shouldn't constraints be limited to binaries? It's only binaries that you generally want to pin with a lock file. Fo example, if we allow a library to pick constraints, what do we do with the dist it exports if it does export a dist?
I suspect we don't need this since we calculate the server span name correctly in the tracer IIUC. The fact that no tests changed means either this update isn't necessary or we're missing a test :)
damping is done one a different level in the penalized_projection algorithm
only a single icon should be used for square and round
Oh this wasn't used before?
nit: sort alphabetically please.
Why can't we use `JsonEncoder` directly for JSON-LD? There is no special handling whatsoever required.
Guessing you didn't mean to change this?
It would be great if you could remove these whitespace changes in all files.
Did you get rid of this line when you tried nesting all `pacpy` imports?
`PackageManagerClientTests` will be done in a separate PR. It is now thoroughly mocked.
Why did we need to reorder this?
can we check for errors here, if file exists but you're revoked access to it (too many fd, process reading/writing to it already whatever...) this will fail and we wont know
There is a safer `dma_trace_initialized()`
This one is redundant.
I'm generally less of a fan of "version" fields, and more of a fan of feature flags, mainly because feature fields are more self-explanatory.
We don't tend to put defaults in consts; we only have them mentioned once in the flag setup.
Not sure this is the most user friendly message.
It seems like this should be grouped with the other standard library imports.
Can you add gitea copyright line to header (and keep gogs one next to it)?
@bflad not sure if this will break anything - had to do it in order for import to work correctly though.
Is there no replacement?
We should probably have two tests: one with the value of the property set to true and the other one to false, to actually see the difference.
(question) should this default to being an empty list?
You can use `true` directly here like in `Statfs`, because of the `if` check.
Would rename this to `ServiceSeparator` or something more meaningful.
rubocop got mad at this lack of newline
This import should be combined with the `log` pkg above.
Unless there is a reason to believe that `name` might be null, which should be tested before entering the predicate, it might be better to change the line to `name.equals("flatExtracting")` for stylistic consistency.
Avoid unnecessary whitespace changes.
Should there be a call to `set_repo_permissions` here too?
TIL, we should use this elsewhere
I assume here should be `autor`, not `description`.
rename those data provide to be named `provide*` instead, so that the config does not require typehint them
why not `logger.error` since it's an error?
Looking forward, from the AST perspective (not the tokenized perspective), perhaps `ExpressionNodeType.TERNARY` is better named `ExpressionNodeType.CONDITIONAL`.
Any reason to use a `Boolean` object here rather than a `boolean`? Doesn't seem like something that would be unset.
I know there's more work to do to propagate changes to the ConfigMap to the controller Pod, but at this point should this endpoint always match `kubectl get` (after a polling cycle at least)? I'm not seeing the endpoint return the same config as `kubectl get`.
Doesn't this return the default value used when creating the context? Meaning, we should never get `undefined`, unless you used `createContext(undefined)` (which I think is an error?).
nit: have the test throw `Exception` as it results in less code churn, i.e. if someone comes along and changes the code to throw some other exception you get a smaller diff to review.
is this the only algorithm and do we always want to apply it?
I've been wondering about naming this.. We currently have different flags for user accounts: - `isReadOnly` for internal system users that shouldn't be deleted or modified - `isExternal` for users that shouldn't be managed from within graylog (except for our cloud okta use case) Would it make sense to add a third flag (e.g. `isManaged`) or should we simply mark okta users as not `external`? It's probably not a big deal, just a thought..
binary backwards compatibility is preserved here.
Note: `hook_mod` was dead code here, it wasn't being used
why do we need both `guiLog` and `desktopLog`?
Just remove this line?
But more specifically, why `10`? Also you replaced some numbers smaller than 10 with this.
I get that rtvVersion_ is required sometimes to keep loading files of same version. But is it always required. Should we make it optional?
Plz add a blank line between tags and summary for better readability
I think we can't do this as it would be a breaking change.
We should check the returned `error`
Also, what about this variable itself? Should it be removed as well?
There are two other occurrences in the file, can you fix those as well?
Probably out of the scope - but could we throw an `UnsupportedOperationException` here? It's better than todo :)
should this be done after the node is updated?
Not sure about the name, how about EnableCriticalTimeCounter|EnableSLACounter? And when we have the diagnostics layer championed by @johnsimons I guess a better name would be CaptureCriticalTime or similar?
Do not use parentheses for method calls with no arguments.
need to change
this is NOT an aliasing problem, because all accesses have been changed to the `s3_helper` method
Consider registering the init rules here in `python_sources.py`. It will avoid you having to update all those tests.
In the master build, I don't think that there is a `codeName` etc... Don't we need to do some logic similar to what was removed in line 11 above?
The commit message is too long. We can shorten it while conveying the essence of the change: "Add resource waiting time to query completion event"
The correct name here is Universal Windows Platform.
I think this method has to be `@Deprecated` as well
Not a fan of the naming here but as it's not user facing we can figure out the "correct" name when we have multiple use cases. This will make it easier.
I think I said this before, but maybe it would have been simpler to use two separate maps :)
the error appears in `setDisplayName` a public method which access this undefined attribute the function is also called in `setName`. I'm also not sure if it should just call `setDisplayTitle` instead
This bridge must be usable without the Symfony framework. It can depend on the Mercure Component, but not on MercureBundle. Maybe should we move this class in the component?
used this to test if the `phpstan-prophecy` is working
nit: The naming `JsonSchemaFormat` doesn't make it immediately obvious how this is different to `JsonFormat`. Maybe `SchemaRegistryJsonFormat`?
Do we really need this? I'm not a fan of cluttering the product code with debugging helpers.
Looks like a un-common pattern to generate a Optional.of
Is there a drawback to simplifying this to `acc_x += event->delta_x / 150.0`
Why are we returning the request object?
I'd like to avoid the proliferation of such ifdefs. We've generally tried to do this with partial files, e.g. this would call a method `ThrowInvalidUril` which would be defined appropriately in the relevant build. Alternatively, I'd be fine if we just changed the shared error message to be `The 'blah' scheme is not supported.` rather than having two different messages that list what is supported.
Ok, let's try to improve that. We have: - click (no wildchar) - ctrl-click `|%` at end - shift-click `%` at end You changed the shift-click to use `*` but the tooltip is now wrong. I propose to keep `%` at end (which is uniform with all others collection kind) and check if we end with `%` and not with `|%` in the code above. Should work too, and will not introduce a new wildchar.
Other places have used the checker: `libkb.CheckEmail.F(e.usernameOrEmail)`
Could we track pageviews with a before_action instead to catch them all and avoid a specific test for each page?
Pretty cryptic error message. It will make it easy for the software engineer to find where the error happened but will not be useful for an end user I think.
I suggest making this new property private. Private things are easier to maintain as they are not covered by any backward compatibility concern and so can change anytime we need it (while protected stuff are harder to change outside of major versions)
@liggitt amazingly it is possible that when doing a specific search for a specific DN in LDAP we can get nothing back and _not_ `NoSuchObject`
I always assumed that CDI would handle synchronization for this :)
Style/EmptyMethod: Put empty method definitions on a single line.
Okay, but when `self._vault_id is None`, the `name` and `vault_url` properties will raise. Should a user ever construct this class?
Hash code is not safe unique. Should use equals against actual object doing comparison.
Add a boolean flag for BC to keep consistent.
what if anyother software uses a different version of cefsharp that requires `RegisterJsObject`? I believe it should not be the case. Is there a possible way to check if this object is registered and `window["controller` will return the right object?
Would be better to qualify it as PurgerCycleCompleted, to identify which cycle the event is referring to.
Why not setDestinationPath ?
We can push this logic to the constructor or maybe add an annotation `PostConstructor` to the `ConnectorManager#updateConnectorIds` so that it would be invoked after `ConnectorManager` is created.
Hi @aosyatnik, I'm expecting the `DynamoToolTip` inside `NodeView.xaml` to be changed -- add another `TextBlock` for `Signature` property below `TextBlock` for `Description`. Is that possible? I don't think we should change at this level.
Should this be conditional on os.name as well? (os.name=='nt' directly implies os.path==ntpath, which would seem to be more relevant than sys.platform here)
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
As you have added <bits/stdc++.h> you don't need to add any other header. Remove this line.
Couldn't this be simplify by just `return name == "readme" || name[:7] == "readme."` and remove if len(name) == 6 bracket ?
Line is too long. [154/80]
Delete this file?
I probably missed a review or discussion somewhere, but the original version of this change sets the dbuf state at the same time as generating the trace events. Why did that change?
Should this be JOB_START_TIME = "jobStartTime"?
do we need to obsolete the old API? Seems like it doesn't make much sense since you shouldn't be using this API if the transport definition doesn't implement `IMessageDrivenSubscriptionTransport` anyway. But an obsolete message in that case wouldn't hurt. But do we have a problem with ambiguous signatures in case the transport implements `IMessageDrivenSubscriptionTransport`? (also we would keep the noise on the config although the method is obsolete)
You should be looking for Windows platform here, not `OSD_WINDOWS`, as this is also applicable to the SDL OSD when built on Windows. Probably better to check `defined(WIN32)` here. Same applies for the other platform checks.
if you're adding new environment variables, setting this to a reasonable default in .env_sample is polite :)
Standards: Please add a space after commas.
Did you get rid of this line when you tried nesting all `pacpy` imports?
This now uses `publicGetTime` for `margin` (previous code used `fapiPublicGetTime`).
The "spec" types are specifically for mediating things that can either be a single scalar value *or* a reference to an entire column of data in a CDS. This is always just a number, so it should be `Float`
The flip side is that `param` now *must* be a properly terminated OSSL_PARAM array. Because `test_param_int()` makes a singular OSSL_PARAM, this call barfs all over Travis for the moment...
Do you need this file?
The original check that `bool(value) == False` is lost. Is that ok?
Maybe emit and obviously incorrect string if err != nil? (also above)
How do you decide whether the tags should be emptied or if the update doesn't contain the tags at all? Example: When you only update the "body", this part of the code mustn't be executed.
this should go to `install_requires`
Should this be converting `""` to `null` or is something else doing that?
Is this import still necessary? I don't see we using describe any more here.
Shouldn't we do something like `private static final Labels STATE_USED = Labels.of("state", "used")`? That way we don't have to create a labels object every time we record a value (at least I think that's what's happening right now)
It seems properties is only used in main(), so you can make it a local variable inside main(). And jobProperties can be private static.
I thought rubocop was gonna get cranky and force `unless` here but it didn't which is great, I think negation is much easier to read than `unless`
Let's try to keep the imports alphabetically sorted
Not super excited about how the future gets set on the task, but don't have any better ideas at the moment. Feels like it give access to details that shouldn't be reachable.
Wait okay I think we miscommunicated. I still want you to *search* the `id_number` column; it's just that this column is now a string, so you can just use a plain `LIKE`.
Really need to understand this one. It might not be correct. But codegen breaks badly without the change.
Maybe pass verbose=True here? or even options.verbose?
Did you change all the places where we call this method using the 2nd arg?
The current behavior of the bigquery_matcher is to compare data retrieved from bigquery by sorting both the list of rows (L146) but also the values in a row. This gave an error in python 3 `TypeError: unorderable types` when multiple types were present in a row e.g. when `data` is `('a',1)`. I removed the sorting because I think it does not make sense to order the values within a bigquery row
Why is this being added? It is not used anywhere.
did you mean to import `errors` or `pkg/errors`?
This would then be changed to `elif self.beta and self.addon.show_beta:`
Do we need a try/catch around this, since it's optional symbols? Maybe even move the one from `LoadSymbolsOnDemand`, to here.
Please also add to the docs few lines above that explain the "one of" nature of `attr`, `attrs` and now `attrPrefix`.
once the `float` is in `empty_info` you won't need it here
just for my own knowledge, how is this any more reliable than a super random sentinel+prefix?
IMO, we should also have tests for defining `values` without given `value` in the `values` input field.
this test is no longer relevant
Can you either clarify the TODOs and remove them or add a bit more detail, your github handle and/or a link to a follow up task?
The new name may now conflict with an existing name. That's why we use a character that's not valid as an identifier. Since we also generate names that aren't valid in C elsewhere, it would be better to have a centralized facility for dealing with problematic names within mypyc. If you want to pursue this, I can give some pointers.
Surrounding space missing for operator '|'.
`it's` -> `its`
I don't see an edit in here to add `__str__` for python requirements objects. Perhaps you already checked and they are fine?
Style/ClassAndModuleChildren: Use nested module/class definitions instead of compact style.
I'm just thinking loud: do we even allow rendering of this element, if user doesn't comply to `can_manage_tags?`? Because if that is the case, we can remove all checks within this modal.
Is this the same PR?
Why is the monitoring URL in the spec? Should be in the global config right? There is only ever one config at a time.
Weird... Was JsrtPch.cpp `#include`d somewhere at some point?
could you log an issue to bump the azure-schemaregistry dependency in setup.py and shared_requirements.txt + re-record tests after azure-schemaregistry b3 is released?
I think you'd want validations for all the non-null attributes as defined in schema.rb Same for other model classes.
Please `#include` standard library headers after project headers, to protect against inadvertently getting into a situation where a header doesn't work if you don't `#include` something else first.
Did you get rid of this line when you tried nesting all `pacpy` imports?
No need to repeat host name used in prefetch
This actually fixes a bug :/ We don't want to return a `false, nil` result in such a func. A non-truthy succeeded result should always accompany an error.
++ to remove that.
Please create a JIRA to track the issue, and link it here.
It looks like this option will be deprecated and new option `--commit` will be introduced after the strategy changes. Is there any way to avoid this depreciation? I don't see any got ways ...
Shouldn't this be initialized to con.CurrentState()?
How about using more narrow client? I'm shooting core (without looking at code), which should suffice here.
Actually, given the escaping of the single backslash, do we still need to escape the case when a backslash is followed by quote ?
It looks like `i` and `aggFunctionVarSuffix` have identical values through the body of this loop; if so, they should probably just be consolidated into a single variable.
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
Final newline missing.
clearParagraphOutput doesn't take any parameter
Please move `searchCards` outside of the if/else, to avoid code duplication
did you mean package "errors" or package "github.com/pkg/errors" :)
I was about to say could remove `Dict` and `List` here but I'm not actually sure we need to remove anything, since the actual `sys.modules` entry is not this module but the `_PalettesModule` instance
Should probably just make this D_ASSERTF(evx->evx_status == DAOS_EVS_READY, ...); On the other hand, since it's a client library, it may be better to return some error. The user may want to do something before crashing.
Why are we sure that it is non-nullable?
I feel it's a bit ambiguous to say pass the output to by_page(). we can tell them if they set messages_per_page to iterate by page, they need to call by_page() on the AsyncItemPaged, so that they can get a page iterator with which they can call next() to get the next page.
Should `FmtRequest` be deleted in `fmt.py`?
here you just renamed this ... nothing to do with the bugfix, or?
why is this Spring stuff serializable?
better check `<%_ if (relationshipValidate ) { _%>` alone here to future proof so that other validations can also be added if required, you are already checking the required condition in the ejs file so thats sufficient
At line 331, you do `(string?)` and here you do `!`? Maybe both are fine, just something I noticed. Not sure if it needs to be changed.
can you please include a screenshot of what the new agents file looks like? this didn't render well for me at all but i am assuming with the new style it does?
I think you should add a bucket for 0. As is, "no retries" shares a bucket with "one retry", and if we want to find out how many have no retries we'll only ever get an interpolation.
Use empty lines between method definitions.
NotFound is not really the right error message, I would go with a simple 400 here Discourse::InvalidParameters (will change it in a follow up commit)
Rename `toTable()` method to `to()`? Seems more consistent with other ios, eg. BigQueryIO and you already specify `String table` argument and the docs tells what's the subject of this operation so it's all clear. :)
Can this be a local variable in the test that needs it?
maybe move this into `testhelpers` like `Intp`?
Also good but could be better: "Specify name of the DVC-file this command will generate."
why not just a MiddlewareRef ?
CloudStack uses SLAAC for managing IPv6 ranges, therefore it is not necessary to have a start/end IPv6 address; on the other hand, IPv6 CIDR is mandatory for IPv6 networks. That is why I changed this and other pieces of code that had start/end ipv6 address as mandatory.
It's a little unfortunate that the variable name MAX_DIRECT_MEMORY isn't returned for this method name
`EthCompatibleChainID` or `EthTxChainID` is more clear of a name to me.
The "spec" types are specifically for mediating things that can either be a single scalar value *or* a reference to an entire column of data in a CDS. This is always just a number, so it should be `Float`
Class name should be `i-amphtml-form`
Really not a fan of unqualified class/interface names like this. `Version` is not descriptive at all. (Version of what?)
Late to the game. Is there a reason why `github.com/cri-o/ocicni/pkg/ocicni` is not part of `github.com/containers` (or ideally a package of libpod)? Would be nice for CI and for consolidating packages.
since you're in here anyway ;) can you add summaries to these constructors? Also - is there any reason to have the new overload public?
++ to remove that.
Given this is used to identify the graph driver that's associated with an image, "vSphere" is a better user facing term.
rubygems should not be required here. rubygems is required by default in MarkUs.
As this is a builder, we should just make a deep-copy (not use `Collections.unmodifiableList()`)
It can't ever be a chain of `TypeAlias`es?
I think the old implementation had an issue as the end should be start + pageSize and not start + Page or did i miss anything here?
You forgot about `params[:path]` here. Also, this method already generates the absolute path to the file for you. Just use that please: `FileUtils.mkdir_p File.dirname(file_path)`
Should be ObservedGeneration is the most recent generation observed for this **Seed**.?
What if `$io` is null?
please sort this according to the existing order
I don't think this is valid, afaik there's no guarantee that a GCHandle's id will not be re-used
minor: the ternary op `c ? x : y` is nice for avoiding the need to initialize empty. here it could even be tucked within the first arg expr to `String.format`.
Lots of calls like this one would appear to suit D_FREE/D_ALLOC
Why not just call ValidateBufferArguments here?
Love the addition of the docstring. Nit: Is it more accurate and concise to say ``Update the provider index with additional virtual specs`` given the inclusion of the `Args` description?
While I know it not in scope of the PR, would it be possible to convert the `try` block into a try with resources? It would remove the need for this `finally` clause.
do we always append it to the end? If so, it might be safer to do `name.endswith()` and `name = name[:-8]`
Best to use a real name here (either a person or a legal business entity) here, in addition to the userid.
I prefer returning `label.GetValue()` here, use `strings.EqualFold` outside to compare.
Should not this be `get_filesystem(self.file_path_prefix.get())`? Otherwise the type of `self._file_system` might be different depending on which function is called first and its parameters.
I guess this test could be "smartly" merged with the test above: `if (!(o instanceof RegisteredServiceProxyPolicy)) {`
Not accepted anymore
Style/ClassAndModuleChildren: Use nested module/class definitions instead of compact style.
this had to change to match the new interface..
Do you need this?
Surrounding space missing for operator /.
Does this need additional processing? Does this have to be formatted as a corenlp-tagged table?
please use the new style for importing applications(as python-modules only), see the template-application This will make things easier when Kratos moves to this entirely
Remove the `=''` since the default `basePath` is derived from the url.
It seems to be a good time the remove XceiverServerSpi interface. Originally we had two separated implementation to connect to the datanode. Today we have only one. One interface is used between the client and the datanode, and the other one between datanode and ratis (datanode). As this example shows, the two interface shouldn't be the same.
I noticed you use whereNotIn in the legacy index and whereIn here. Not an issue just an inconsistency.
I don't think you should change the return value, anyways the nullability of this should be same as `Value` property above, so if `Value` end up being nullable it should return nullable
This is wrong I think
Late to the game. Is there a reason why `github.com/cri-o/ocicni/pkg/ocicni` is not part of `github.com/containers` (or ideally a package of libpod)? Would be nice for CI and for consolidating packages.
Same as the other job, should there be a queue per job?
Please put this method just below `getAncestorGroups`.
Is it incoming or outgoing? `MinRequiredIncomingConfirmations` or `MinIncomingConfirmations` would be clearer
I am not too sure whether it is correct to change to referenceClass if referenceClass is not a subclass of targetClass
Should be checking `ampdoc.getHeadNode()` for shadow AMP (PWA) support.
This shouldn't be needed IIUC, you could just pull `Config` out of CDI.current() instead of wrapping in this class
Converted from deleted *.rec test.
Intention was good, execution a bit worse ;) @deads2k mind updating in a followup?
super nit, input -> inputs.
there should be a sanity check here for the unlikely case that the server id is > `m_next_particle_spawner_id`
can we make this ~8 characters; or ~6 characters? something more akin to short git hashes.
Just combind these in 1 if statement
might be simpler to unnest these? `skipOnboardMessaging` and `skipOnboardRewards` maybe?
Removing the condition `consumerRemovedTimestamp != -1` could change the semantic of the **public** method `delayCheck`. With this change `delayCheck` will return **true** before removing a consumer.
I like using `__FreeBSD__`, but a just as a note, I'd like recommendations on a standard osquery OS/DISTRO determination name scheme throughout python (gen___.py), bash (provision.sh), CMake, and C/C++. Right now you can use APPLE/LINUX/CENTOS/UBUNTU/FREEBSD in both CMake and C/C++. In C/C++ the output from lib.sh's OS and DISTRO are defined by CMake. We should set a DARWIN to be consistent on Apple/OSX.
just nothing to be tested?
not going to have any impacts on the UI of any of the major auth plugins? (assume not but just checking)
Arguably it should be the way around :) `DPI` is an acronym.
Is there is a default value, why not use a primitive value with a default of `false`? Then, you do not need these logics in a POJO get method.
does this need to be in base?
What is the exception here? Something like NameError?
I am not sure if this is a tool. It is located on the tools page, but it is an indexing thing...
Other places have used the checker: `libkb.CheckEmail.F(e.usernameOrEmail)`
This makes an assumption that platform can tolerate unaligned references to memory. Even though most popular one does, it's not safe assumption to make. Because OpenSSL is multi-platform.
The _getTitle method looks like something what could be shared as well among all the classes.
It is incongruous to make this field static when all of its accessors are instance methods. Also why use AtomicReference here?
The same here. Just return `root`?
I see that `appNamespaces` is plural, but the type is `string` so I start to wonder - is this a CSV? Might be good to leave a tiny commend for readability.
I'd _prefer_ not to do this, because I'm always worried about tests which secretly rely on some env var being present without explicitly requiring it -> is this necessary for the tests to pass?
this is already checked!!! (at L48) the only new thing is the `release.IsTag` check ... witch will break things If we are going this way, we have to invent a new endpoint for git tags only
Why switch to list multimap _everywhere_? If we want to _always_ allow duplicates, was this a bug previously? Why should a given element consumer (timer) appear multiple times for a given pcollection? I realize that most cases are just interface changes to clarify some contract, but what were we doing before?
Rename `toTable()` method to `to()`? Seems more consistent with other ios, eg. BigQueryIO and you already specify `String table` argument and the docs tells what's the subject of this operation so it's all clear. :)
Can we move this whole block of EH handling code to a ProcessExceptionHandling() functions? I'd like to remove code from OptInstr() to attempt to maintain readability.
Why switch to `None` instead of `tmp_trace`?
can you create the IsLocal function?
Why has the reference config different access right?
This was very weird, it seems the `text/plain` was just being overwritten by json (later in declaration)
Aren't we missing something because of that?
Is it worth adding some filecheck annotations here?
Change this to `2015-2021` after moving the benchmark code back in here.
Would be better to qualify it as PurgerCycleCompleted, to identify which cycle the event is referring to.
Need to update other call to `watchRepo(..)` on line 1483
I usually don't see headers/created stamps in jitsi-meet.
Why is the monitoring URL in the spec? Should be in the global config right? There is only ever one config at a time.
@RiccardoRossi : I explicitly set it to "false" to indicate that it is actually implemented (in CalculateValue), and to avoid the confusion of setting it to true (for GetValue) when is meant to be in CalculateValue, which has given problems in the past.
@bflad not sure if this will break anything - had to do it in order for import to work correctly though.
Should we name those functions appropriately? Eg; StateWithoutLock()
This assignment could be inlined even
Wait okay I think we miscommunicated. I still want you to *search* the `id_number` column; it's just that this column is now a string, so you can just use a plain `LIKE`.
a hotfix? if yes. FIXME
I left `dbg` since I don't know if there's anything coming out from somewhere that still uses it so I wanted to be better safe than sorry.
woudl call this `dependantResourceBatches` to make clear that it is an array of arrays of resources
Non-backwards-compatible change, same in the builder
I would not do this. It can be a significant API change. Don't you think it leads to less changes if you keep it False and just change it in Epochs + Evoked? cc @Eric89GXL @dengemann
Would it make sense to move this method into the `UsernameChanger` class instead of creating a new class just for this method.
or you could add another inline getmsec
You need to remove this line. The CI doesn't like unused imports. :-)
same here about credentials
No please dont. This is a test case, that we took from apsche bookeeper
We really need a function to encapsulate this logic for all places we care about "empty" strings.
`math.Max` in standard lib
Should still exist. Should be `if (this.targetOrigin_ == null) {throw new ...}`
Need to communicate to users that the agg function is "first"
I don't think treating a socket as a black hole while it's listening is a good idea. Also, this makes Win32 and POSIX behaviour diverge.
this is missing the license header
Fatal errors in this file should be ok.
Can we name this `__dynamonodename__` instead? That way it is consistent with the other variables we are adding.
I guess "local" should be "configdb".
This property is not assigned correctly and never used, so I removed it.
what if anyother software uses a different version of cefsharp that requires `RegisterJsObject`? I believe it should not be the case. Is there a possible way to check if this object is registered and `window["controller` will return the right object?
[nit] Could be `func (*State) EnsureNoProjectsMissing(context.Context, []string) error {` but doesn't matter
The `...def` is very iffy for typedef structs. It probably breaks the overall type. I realize why it's here. But maybe we should just return a `match` and let the caller do the `def = props[match]`?
Minor: Unnecessary change
naming releaseId -> releaseID
I don't get the sense of this new test. Should we always blacklist by default these variables? Here we are just trying the same `sanitize` method with different inputs in unit-tests - so I don't really see a difference among this new test and the ones before it.
exclude has a different semantic everywhere else. I think what you describe should be the default behavior and an exclude parameter should not be necessary.
The inverse mapping is done every time `InverseMapper` is called, which happens for every sample event. Please make the mapping static instead.
Nit: combine these two into one line
Use `h2` instead of `h4`, just as we use for "Protocol Steps" under "Protocols" tab.
Won't this still leave it broken? If the context is cancelled, then this will stop extracting.
And I moved this to use commons lang3 to align with other modules and beam-parent. Notice that the scope is only test, so no issues.
@mjkkirschner It's the `System` type that fails in the custom node workspace. `Autodesk` namespace works fine. I am not sure whether this is the right fix. Otherwise, the fix is to use `ToString` and fix the tooltip to show `point` instead of `Autodesk.Geometry.point`.
The whole thing looks complicated but solid. Some of the wildcard checking/tokenizing/path Frankensteining might be clearer if broken out to intermediate methods. One note here, looks like you can take a relative path, then on 322, does that join clobber a relative into an absolute?
How do you decide whether the tags should be emptied or if the update doesn't contain the tags at all? Example: When you only update the "body", this part of the code mustn't be executed.
I just realized that the OAuth config also needs this (and is currently incorrectly using servingInfo.clientCA instead - see `GetAPIServerCertCAPool`)... do we want this field replicated in several places, or a single top-level field?
c/p err (was placeholder for something now remove it!)
Do you have an example of a situation where this would be used?
What is the case where you can't neither follow nor unfollow a contact?
Did you get rid of this line when you tried nesting all `pacpy` imports?
error strings should not be capitalized or end with punctuation or a newline
Proper docstring style is actually to have the close """ on the same line _iff_ it's a single line. So it was wrong, and it's still wrong. :-)
Note that this line will never be reached, since `WP_CLI::error()` will stop the script.
As others have pointed out, consider making this just a 1.3 feature; it simplifies things.
Nothing above actually checks and returns early if the new config is the same as the old config, so this could send unnecessary notifications. I don't care much either way, so if that matters for the GUI we should maybe add a check like that above.
Not super familiar with context, but it doesn't seem this is used outsied the s2 package, will it be? Does it need to be exported?
I think you could share the same static instance as it is stateless
This seems to be new, what does it mean?
pytest is not a builtin python module, imports shouldn't be here (but not a big problem)
I know it's old code, but correct spacing is `[ $var_with_space ]`
This is a good example of why aliasing is helpful, because multiple imports packages could be named `v1` and changing the import alias later on is a bit annoying.
This always performs at least 3 SQL queries while the previous structure perfomed at most 3 SQL queries, why the change? Also, line 17 could have been included in the flattening as well, becoming the last call after line 22.
We don't need to add an overloaded method for `putRaw`. Just add the new parameter to the existing `putRaw` method and use null value to represent the no ownership assignment behavior. BTW, rename `address` to `owner_address` please.
Is this okay? I'm not sure if we treat `6.0` differently from `6`
rename the callback
probably wont do this in this PR but leaving it here since it would make sense for StorageCounter to have an EntityWhitelist and not just do it based on tags
you should should probably remove the declaration from `libzfs_impl.h` if you're removing all definitions
I think it should already have this type?
Sorry, but would it make sense now to "remember to bump the version at the top of the top-level README.md"? </snark>
You do remember that this is dicy, right? The "other" end may not have initialized *return_size* at all...
What does this message actually mean? I.e. is it useful in debugging? Can it be made clearer?
I avoided adding a field to `Socket` for the stake of tracking the file to be deleted. Instead this is tracked through `_rightEndPoint` `UnixDomainSocketEndPoint.BoundFileName`. On Bind an instance is created that has this property set. And on dispose, the file then gets deleted.
Why did this need to change?
Why is this removed?
In what circumstance is this needed? I think you can just do `{"type": "model_type"}` rather than passing `model_type` as a string.
Don't we call it the service?
Use nested module/class definitions instead of compact style.
`IsPrivate: repo.IsPrivate`, ? And remove the `if repo.IsPrivate` ?
More of a question really: so if you set `CORE_API_TOKEN_TTL` env. var to true (?), you need to also set `API_TOKEN_TTL` env. var with the actual value? Or am I misinterpreting this wrong?
`_detect_filename()` can return `None`, indicating that detection failed, so `os.access()` check should be moved there.
this should be a `StringSet`
should we be defensive here and check to see if there are any items after the split?
`ignore: true` I think additional bonus points!
This is causing the test problem. The example does `from bokeh.models import Jitter` which was only "working" because this import was transitively available in `bokeh.models` unintentionally @Maggie-M is going to make another issue/PR to fix, then you can merge that into this PR and it will pass.
Please add @Nullable in the parameter of setSrcHash()
Minor: ActiveOMs -> ActiiiveSCMs OMs -> SCMs
I'd rather `syncInterval <= 0` be a disabled case. We currently rung with syncing disabled, and only send queries to ingesters in our testing, and it makes it more synonymous with Thanos where the LTS is optional.
Call `this.getScrollTop()` to get the cached value.
why should we introduce this?
Why the parameters are version, url and name? not interfaceName, group and version?
This can never be null because `ExtensionList#getInstance` throws `IllegalStateException` if the class cannot be found.
Condition never met now.
is this being used?
Copyright date should not be changed from the original unless the file has been completely replaced
It would probably be better to just change the call site to use the function without the driver receiver.
We should probably not call this twice. It's called anyway in the "init" fn.
"command is command is run"? :)
should we use `isUserErrorEmbed(error.message)` here? Same reason to why we don't have `error.isUserError`.
I don't see this actually used outside of `beforeEach`, maybe inline as `installViewerServiceForDoc(ampdocService.getAmpDoc());`
Looks like this isn't needed.
I would rather this function to return the condition with placeholders you've been creating in all places the `unavailableNetworks` return is used in this PR. Then you can simply use `DBA::mergeCondition` instead of the concatenation and the `array_merge` you've been doing manually.
We shouldn't wrap the error if `err == nil`
Is there any risk here of mutually recursive dependencies? We could consider splitting this method into its own lil' module
Why was that necessary?
We should probably not call this twice. It's called anyway in the "init" fn.
Should we update vendor for this repo?
Can you explain why there is no need for this check, now?
The matches are not _returned_ by the `expression` argument. How about something like: > determining if values retrieved using `expression` should be...
I think this is not necessary to add `: Tensor`
Given the special nature of this field name and the desire to keep it consistent in multiple places, do you think we should make it an exported const?
I would use `Timecop` to test that by moving forward or backwards in time those timeframes adjust to the current time inside the Timecop block, just to be on the safe side (I think testing one of them is enough)
Is this correct? This would mean that user which doesn't have archive/restore permissions can't update the project (e.g. `can_manage_project` permission).
It shouldn't be 320 hardcoded. It should be the same logic as in Compute.
I think since the tree comes with a default reference, this isn't needed?
what is the goal of defining unused arguments ?
(style) line over 80 characters
can you create the IsLocal function?
Use single quotes for strings. Here you may just want to use `id.length !== 0` since you are just checking for a non-empty string.
once the `float` is in `empty_info` you won't need it here
I don't see any blocking calls. Removing `InterruptedException` does not indicate unhandled exception in this method.
Why are we calling BreakSolutionStepsLoop here?
So this is not a breaking change because if $render didn't change the value then it will be the same as before, right? I think it is only the range input that is likely to do this...
Question: Is there an assumption that a nil field will never have defaults populated to it?
Nit - as you seem to be beautifying spacing, you're missing a space after the opening bracket ;-).
Just follow how it is done for other DB types like MySQL, Postgres etc. No need to do a separate track for MSSQL
You can remove every `mapstructure:",squash"` now :)
I probably missed a review or discussion somewhere, but the original version of this change sets the dbuf state at the same time as generating the trace events. Why did that change?
unrelated to your change, but just noticed: the error message seems to be wrong, should say "Invalid archive name".
The state is not set by the request anymore. This happens now automatically by the `WorkflowStageSubscriber`, based on if a page is only saved or also published.
We probably should not do this here. If the user configured `ssl.verification_mode: strict` this means they already have all necessary certificates in place and we should should not touch their configuration.
It would be great if you could remove these whitespace changes in all files.
Check if we are still using all of these variables, and let's drop the ones we don't.
I think this has the same problem as IdentityExtractionFn. It should return a constant rather than `super.hashCode()`. Please check the other usages of `super.hashCode()` as well.
Do we want this flag to be this specific? Why not just have a boolean that enables/disable collision detection completely?
Are we no worried about loosing type information here? If we're going with a List, then this should just be the interface `List.class`, rather than the impl `ArrayList.class`, giving us freedom to use other list impls if we so choose. (Same for HashMap.class below)
Shall we define it at consensus if the only use is in consensus module?
Surely these should be static declarations ?
Please align this with the $$ above
You should turn these layer defines into an enum so you don't have to keep renumbering them :)
Note that all the operators are assuming `number`/`number` comparisons. - We need to do type checking to make sure, for example, that `4 > 'cat'` is a syntax error. Please carefully think about our type system and make it reasonably strict, e.g., no unexpected implicit conversions like `true > color('red')` - We also need to implement operators for `Color` types, e.g., component-wise operators. If we don't want to do those functions to `Color` (totally cool with me to keep Cesium's API surface area small) then we can just add them a local functions in this file.
this imports logrus twice
[nit] Could be `func (*State) EnsureNoProjectsMissing(context.Context, []string) error {` but doesn't matter
It's generally not recommended to loop over iterables inside of pytest tests. The suggested thing to do is use the `@pytest.mark.parametrize` decorator. Idk if it's worth messing with now though
you can delete the `__init__` method now - it's not doing anything beyond the superclass.
this should be `elif` now that `if not name` doesn't throw. should be moot since get_project should always return a string.
May as well do `expect(p).toBeUndefined();` like you've done other places in this file.
I noticed that there are now functional adjustments about chains, are they all based on epoch Instead of a specific height value? This feels like it would be more convenient, an epoch I remember is 24 hours?
Wait, you changed it from static to this, you just have to revert your own changes!
I'm concerned about the change here. They're obviously worried that deactivateAP() can be very long and that activateAP() can also be long. If deactivateAP() takes 9ms, the 1st optimistic_yield() won't fire. Then, if activateAP() takes 9ms, you will have 18ms between yields() here, whereas before you'd be only 9ms between them. Before, they'd get 2 yields no matter what, but here, if activateAP() is long, you could
Is this doing anything? Do we not have any coverage for throttled flows in these specs?
I don't think this is going to grow enough to merit its own package.
`silentlyGet` or `getWithoutUpdatePos`?
do we need derived actions? can't we just do @game.add_x_action(action) def add_x_action(action) raise if @loading
there's still a global call in here...that seems like a problem.
I'd only do the alternate path for `tvOS` where we know that `Environment.CurrentDirectory` isn't writable, and use `Path.GetTempPath()` there.
constant can be replaced with `sizeof`
This should be in a separate patch where you explain why this should be available to outside modules. In fact, I think all the changes from detect_test.c should be in separate patches with a proper explanation of they are needed.
I think this has the same problem as IdentityExtractionFn. It should return a constant rather than `super.hashCode()`. Please check the other usages of `super.hashCode()` as well.
if there are other forbidden keywords we could validate the cliName when "What is the unique name for your API client ?" is prompted to the user. WDYT?
Let's put all this in a function in `_setup_helpers.py`, e.g. `fixup_for_rtd()`
Shouldn't the `serialVersionUID` be changed?
This is the first monitor that needs to be conditional. If you plan on running as a pod, we don't want to list / watch everything from inside the cluster (we're watching from outside). You probably need to have a monitor specifically for this, and you should not be running this from outside the cluster. A proxy connection through the cluster will be disrupted.
Please use the `allowParentPostMessage_` method instead.
Should we cache `n` so that we don't have to compute it again for the same row?
why is this done here?
Missing `<p>` / partial => partially.
Do you have an example of a situation where this would be used?
I would make the pattern `self.file.endswith('.fif') or self.file.endswith('.fif.gz'):` and in that case use `return read_info(...)`, else use `return read_raw(...).info`. This should make it work with any reader that supports digitization
A little late now, I guess, but do you think it's worth making a convenience wrapper for this pattern? Not sure how representative our tests are of usage of our API
Just confirming that we want to remove `aws_instance` from this list
Final newline missing.
I think both `PackageManagerSearchElement` and `CategorySearchElement` do not require input/output parameters. Is there a reason we need them here?
why is `checked` removed here?
Inheriting from `SAXException` is a leaky abstraction. Clients of `GameParser` shouldn't know or care that we're using a SAX, DOM, XPP, etc. parser. `SAXException`s thrown internally to the parser should be wrapped in a `GameParseException` and rethrown.
Use Fully Qualified Class Names please
I think this `!` is lying that this can't be `null`. We should make the `ReadTarget` method accept `string? targetName`.
rubygems should not be required here. rubygems is required by default in MarkUs.
Do you have an example of a situation where this would be used?
This is not true. The only callsite is not marked unsafe.
These assertions should come from org.testng.AssertJUnit to avoid mixing up libraries... unless we've started porting over testsuites over to JUnit but I don't think that's the case yet?
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.
You don't need `@memberof`.
You have to also call ERR_clear_last_mark() in the else branch.
this needs to happen _after_ `setVersion`, so the proper store will be updated in the process (v2 vs v2.1). (v1 is done per-call in its corresponding handlers)
All those attributes are written in `setUp`, so reseting them to `null` in a tear down does not make any sense IMO.
Not sure if changes to this file are necessary.
I'm not sure this is a good idea. Assuming you've always used the BUF_MEM_grow_clean() function (and no other bugs writing too much), that data should be all 0s. But BUF_MEM_new() doesn't do this for instance. I don't think you can rely on it already being 0 while the function promises to turn it into 0. The same goes for the other change in this function, you try to optimize it by starting at the previous max instead of the previous length. In short I think this whole function should be left as it was.
I am guessing the path of this file (infra-proxy-service/server/v1/orgs.go) includes "v1" because that was copied from some other service (likely teams)? But the v1/v2 distinction is now removed from the code base as of last week. Please remove the "v1" so that everything under infra-proxy-service/server/v1 is now under infra-proxy-service/server/v1
isn't this superfluous?
Plural is correct here - a NOP takes multiple cycles to complete.
Why add the star-argument?
I think you could share the same static instance as it is stateless
Add an expectation for `args[1]`.
if feels like an output can decide if it needs to be cached or not
Why the doc string of the v1alpha1 is quite different from the doc string of the internal type. The internal doc string does not specify anything about the `*` special case.
Should this not be in a platform header?
Can we just do - `` generateTestCert(dn, pair, algorithm, from, from);`` Means eliminate the `to` and pass `from` only instead, rather than this?
What does negative exit code mean here?
Use 2 (not 1) spaces for indentation.<br>Tab detected.
These should only allow the legal values of `user`, `group`, and `world`, then you don't have to do all that error checking and `ConfigFileError`s will be raised automatically.
I renamed the controller and paths to follow the rails convention of having controllers with plural names
Is this intended `@Nullable` on the input argument? There are checks for things that call this for `nullToEmpty`, which are probably not needed.
should this say `param` ?
shouldn't you apply `preg_quote` to be safe ?
I think we should rename the `root_source_folder` to `root_folders` and force it to be always a list (changing the calls to it). Shouldn't be a problem, right? Or is this class public somehow?
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
Very good point about `getsize`. Indeed, `hash_info` is part of the object itself and identifies itself fully, so `getsize` is likely not needed anymore. But the same could be asked about `Tree.size` too, since its hash_info also has `size`. So looks like we could use it there as well. WDYT?
@michalpristas Should we have a fallback to "info" ?
"boolean". here and below.
I don't see this actually used outside of `beforeEach`, maybe inline as `installViewerServiceForDoc(ampdocService.getAmpDoc());`
I'm not sure if this is the right thing to do. SetMem doesn't modify the destination in a data-flow sense. In data-flow the destination is actually a source. (This may be related: It looks like the `type` attribute of `SetMem` is incorrect -- it should be void, and the `type` of the value being assigned needs to be stored in another attribute.)
use braces even for one line blocks
Other parts of Epetra64 have a convention for naming templated routines: the templated version / implementation method of a nontemplated method starts with T.
split line enum flags look harder to read IMO
I guess you want to remove that as well?
Is it necessary to change all these copyrights when the actual content isn't changed in the file?
no empty line, it is all stdlib here
This was unclear before. This is really a map of `scheme(str) -> []host(str)`
Just curious why you killed the .DataBus namespace. If we stick everything in NServiceBus isn't it better to just remove the NS completely? (honest question since I'm getting on the no NS bandwagon)
on my view better to add key `dataset_meta` and put in this field, in your solution, possible intersection and overriding original meta keys on datasets meta values
This converter is used in various places, please don't change its original intent. We need a different solution.
Please use `if ctx.Data["IsApiToken"] {`.
Something is not right. Remove the arg if it isn't used, but it seems more likely that the block is wrong.
delete this file?
I hope this is a good place to add it.
Remember not to include files without any change in your commit, then things will be much simpler to review.
how this don't bother our formatter
The `in` check shouldn't be needed.
This seems to be checked in ParameterModelValidator, I think it is better if it keeps failing there.
Same suggestion from above about `--no-url`
This is to protect from broken .equals() implementations which don't check for a null param ?
This implements "names starting with __ are unnamed arguments". It's probably necessary to actually get the typeshed files passing.
remove this empty line
I think in the first stage, we don't need to change the output of API?
This is too specific -- it'll force every thing that builds with `json-c` to use Perl 5.16.3. If this is the minimum version needed it should say `5.16.3:` I'm also nearly positive this is a build dependency inherited through `autoconf`, so it needs to be specified (by default it's build/link and will add RPATHs for perl libs)
@bflad not sure if this will break anything - had to do it in order for import to work correctly though.
Seems like a bad idea to remove this?
This check needs to be way safer. `options.session.constructor` could be falsey / not an object
rubocop got mad at this lack of newline
Should this be (c) 2019 here, and elsewhere in the patch, or is this a port of an existing patch written last year?
It seems to me this is the only change needed to fix the bug, and the change to ``get_doc_components_from_url`` is unneeded. Or, this change is unneeded if you change ``get_doc_components_from_url``... In either case, this breaks a test, as reported by TravisCI.
this is the important part If this works (which I think it does as it is only declared and used once here) then we can use it for initializing the `GlobalLock` ...
I think `title` and `description` would be fine, we can drop the `seo_` prefix here.
Thanks-- can you use assertRaisesRegex to ensure the error caught is the one expected?
should this magic `'9999999-dev'` value be hidden behind a constant? this could also improve semantics/readability
I'd like to avoid preprocessor usage here, it can be an anonymous-namespace-scoped const char[].
For my own education. What is this class?
Moving it to Cython means exposing most C structures to Cython and staring at tons of generated C code to see that it actually does the right thing (like in #891). I wouldn't do it bundled together with a functional change.
Would you be so kind to doc this?
Wow, how did these test work?
Can't you drop the entire loop then?
More can be tested here? The script and div are both probably amend to aaic t least some b`startwith` testing, or the div could be parsed entirely with beautiful soup and have its structure and expected attributes verified
Layout/HashAlignment: Align the keys of a hash literal if they span more than one line.<br>Style/HashSyntax: Use the new Ruby 1.9 hash syntax.
Ouch, that's a bug - it should've been `containsKey()` right from the start
I think this should happen after the thread.sleep at line 117. As for most of the cases, when an OM restart the trash emptier it should check this status and skip doing any Trash processing.
are the file/line locations right if the log messages are forwarded?
Please prove the code with unit tests
I know there's more work to do to propagate changes to the ConfigMap to the controller Pod, but at this point should this endpoint always match `kubectl get` (after a polling cycle at least)? I'm not seeing the endpoint return the same config as `kubectl get`.
[nit] Could be `func (*State) EnsureNoProjectsMissing(context.Context, []string) error {` but doesn't matter
this is missing the license header
Does this change account for BEAM-12863? I think we could need a way to handle it here. The ticket reporter suggested calling `toBeamRowFieldValue` instead of `toBeamValue` directly, for it to check on null array elements.
Would you set system using to be before customized one in Visual Studio settings?
Could be formatted a little bit better?
can this logic be pushed down one level?
Wouldn't it be safer to ask if `maxOccurs` is bigger than `1` or `null`? The value of `minOccurs` doesn't really matter here, since it must be lower than `maxOccurs` (although I am not really sure if this is checked...). Maybe @wachterjohannes can also add his opinion, since he wrote this part.
we should add a separate RuntimePullSecret field.
i'm not clear on how sourceuri vs sourceref is used, can you add some more doc here?
Nit: what is this test meant to be testing? If it's ensuring that the serialization infrastructure can cope with many serialization in parallel, that is generally handled by xunit's capacity to run multiple tests in parallel. If it's testing something else, it should be refelected in the test name.
The fact that we're accessing the method from a static method somewhere else is another indication why it shouldn't live in the `Manager`.
This didn't work in #10169 because the app domain was `dev.to`, so we never actually made it into this conditional!
don't return null. just return `CompletedFuture.completed(null);`
Should `outputType` be in here, `equals()` and `getCacheKey()`?
I believe `val` here will always be either a non-empty string or `null`, but never empty string, since Indexed<String> returned by getDimValueLookup, which is either an Indexed<String> based on a NullValueConverterDimDim or or a GenericIndexed<String> will already map empty to null.
How about using more narrow client? I'm shooting core (without looking at code), which should suffice here.
js student asks: what does the addition of parenthesis do here?
The current logic is fine, but typically it's more robust if you give a name to the returned `error` and then define a `defer` which increase the failed metric if the returned `error != nil`
One outstanding issue that I couldn't think of a good way to handle is adjusting for the `scale_factor`. In Calypso the adjustment is made in `train.py`, but that only works because that code knows it's dealing with a specific model. Two questions: 1. What is the purpose behind `scale_factor`? Can/should we drop it? 2. If not, can you think of clean way to make it work with `"batch_weight"`?
A super small thing, but would you mind adding a space between the colon `:` and `a` after the vomit emoji?
I'm not sure this will fix it. Don't use any CORBA:: namespace functions unless you're dealing with types defined in IDL. This is an _rch type. The simplest code that might work is `if (link->second.in())` because _rch has no implicit conversion to raw pointer (like _var does).
Need to disable it as it could cause OOM in CI due to docker container memory limitation
I hope this is a good place to add it.
Rename `toTable()` method to `to()`? Seems more consistent with other ios, eg. BigQueryIO and you already specify `String table` argument and the docs tells what's the subject of this operation so it's all clear. :)
@davidjumani didn't see any change with respect to hosts count, does these changes fix the count issue?
We always need to append `_reported_`.
Should this update client span in context as well?
maybe put it next to the other one in the list.
Unused method argument - team. If it's necessary, use _ or _team as an argument name to indicate that it won't be used.
unnecessary whitespace change
Do we want to localize this message, instead of adding more English only copy to the code? It's an update and not an addition, so arguably that's a secondary concern to the change you're making here.
I am not sure about this condition. Alternatives: 1. `any(is_subtype())` 2. `any(is_same_type())` ?
Stupid question here: since SonarQube is now using Java8 and that classes won't be loaded by Java 7 or Java 6, does this test shouldn't be dropped ?
Line is too long. [91/90]
this is semantically different from what was happening before.
Minor: ActiveOMs -> ActiiiveSCMs OMs -> SCMs
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
I went for `nullify` here because I wasn't 100% sure if all fields always need to belong to a group.
usually i workaround this issue by just putting `-` last. That might actually be easier to read too, given the`-` and the em-dash smush together .....
I think this should be `join_path(python_spec.prefix, python_spec.package.config_vars['python_inc'])`, same in `migraphx`.
What about making sure that these are expanded enough so that they are proper types (but may contain type alias references)? Not sure if this would be worth it, but it might let us avoid a bunch of `get_proper_type` calls elsewhere.
If I understand correctly, this means that the diagnostics path will end up in the cache key (but not the contents), right?
Maybe that should be logic that gets embedded into logp.
Could you explain why you made this change?
Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body end.
we need an empty line here.
Since at this point I know `err` is not `nil`, semantically makes sense to log it with `logp.Err`, whatever it is. This reverts a change @ruflin did a while ago, which checked if `code` is `4XX`, and in that case logs it as Info. Argument IIRC was to not flood log with too much stuff. I don't think that is a concern, but I was ok with that at the time. Now I suggest to change it back mostly to keep the code simpler and afford an `if` branch that doesn't give any benefit. Semantically, a `4XX` is still an error, even if the culprit is not the server.
This indeed looks strange, and probably would be not necessary if class variables would be implemented as flags for types or ``Var`` nodes.
don't use `^` in version please
I would remove the `if (Equals(sv1, sv2))` at the beginning, and replace lines 2616 on with `return x.CompareTo(y);`
explain how this padding value will be translated to bytes on the wire. it may be unexpected that 256 is allowed when the frame definition only allows for 8 byte length.
Sorry, but would it make sense now to "remember to bump the version at the top of the top-level README.md"? </snark>
I generally do not bother patching `HudsonTestCase` any more, especially after most of its usages have already been fixed in core to be `JenkinsRule`, but since you have already done the work
Could you take the opportunity to move the test file into the new module?
need to update fake_oauthclient.go to implement this as well
As we've discussed, this is very weird that we need to touch the args names here. Feels like we need an explicit way of telling how to complete this specific arg. E.g. maybe some special marker/flag to complete to files/dvcfiles/(in future we would even want stages, but there is no CLI command to provide that yet)
I think this was due to @cjb's lack of a git commit hook.
save the allocation using `Collections.emptyMap()` is the option is empty?
Block has too many lines. [207/25]
Why is lastTime set to firstTime?
will this work with Jupyter Lab?
nit ../models/index should be sufficient
this is the fix ...
In the generator we define always the LTS version, not sure we should downgrade here?
I think this can be simplified by passing the i18n prop to the `Provider` below, since `I18nextProvider` looks like a simple wrapper.
What is this % for?
Why are we putting the enum in `Hosting.Abstractions`, when the only usage of it is in `Hosting`?
Why is this change ok... it's never empty if it's not null? Does that need to be asserted below before we return?
c/p err (was placeholder for something now remove it!)
Would be better to qualify it as PurgerCycleCompleted, to identify which cycle the event is referring to.
You probably don't need to cache this, since it's unlikely to be reused.
I believe to be non-breaking here that this object must inherit from BOTH ICommand and IDnnCommand @bdukes can you confirm this for me?
Again, this path should be faster on all supported 64-bit platforms, but I wasn't sure how that's best expressed here. Should this use conditional compilation, or an explicit `if (X86Base.X64.IsSupported || ArmBase.Arm64.IsSupported)`?
What's the objective of making this a `char`? I think it was kind of advantageous to pass a string as it will use all of those tokens as delimiters. Maybe we could introduce another overloaded function that's specific for splits with 1 delimiter? I don't think it matters much, as this function seems to not be used much in the code base.
Could use `self.func_map.get(target, target)` here for a minor simplification.
Didn't the previous check assert that Error is nil, and now it verifies that it is no error? The equivalent would be `assert.NoError(err)`?
Don't we have to close the compressor before calling `buf.Bytes()` ? (we try not to use FramedSnappy at all, but it's here for backwards-compatibility)
Can this be changed to `SSH.BuiltinServerUser = sec.Key("BUILTIN_SSH_USER").MustString(RunUser)`?
Trailing whitespace detected.
this change doesn't seem right to me - if we pass in a context, that context should be respected in the `visitType` just like it is everywhere else. The bigger problem seems like there's some place that is passing the `FormatOptions.noEscape()` when it shouldn't (or that perhaps it isn't being respected properly for `Struct` types)
Is there a reason this is public?
Could just be a `boolean` then. This is only needed if the default isn't `false`.
This should support binary files too (e.g. images, zips).
No need for the trailing comma.
Please add a /// explaining here what migration logging is
Seems not supposed to be called in browser context, asserted for now
if we're just removing this then do we even need the function?
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
i think If indexer is nullable `Add(string value)` should be nullable too
Plugin name shouldn't be in data/input?
You could try to output the build into the module instead perhaps?
Is InMemoryObjectStore the implementaiton used by ObjectStoreManager with persistent=false? if not delete it
can this be a `const std::string` instead of a `#define`?
test the rows don't get deleted
The point of this field is to hold weights, so weights should be part of the API for each one. The annotations are tangential to the point of the PR.
This should move to the gobblin import group below.
My mistake, @farrufat-cimne . Thanks for fixing. However, the error was to put 'name'' instead of ''name_rotational'. We should give the option of choosing "Velocity_Verlet" for translational and "Forward_Euler" for rotational. So we cannot delete all those options, they must be fixed by switching 'name' to 'name_rotational'.
TODO: This test should be moved to `esclientleg`.
I would say yes. It's true that we are only calling `start` twice from the tests, but were else would this go?
What is this being used for. gorm should not be anywhere in the code now
missing Upgrade451to460 class, I'll add that.
Why the parameters are version, url and name? not interfaceName, group and version?
Ok, so the interface has not moved. Is that why it is OK to move the implementation to Core? Should the interface also move to Core in Dynamo 3.0?
nit: move to bottom :trollface: Also somebody should set `goimport` for David
Can we make this `4.0`? We still support MongoDB 4.0 so we should use the oldest supported version, I think.
Revert this one
Please fix the spacing for the last "" },
So even if `ei.Behavior.AlwaysRunIdentify()` is true, we could still skip. Though I guess AlwaysRunIdentify and WarningInsteadOfErrorOnBrokenTracks are mutually exclusive.
Is this constant available in the S3 gem? If the threshold in the gem changes, this constant will no longer be accurate.
This pulled out because I was transforming the serialized_flow but switched to transforming the flow copy before serialization. Still useful pulled out for debugging.
Did anyone already point out that Windows doesn't have `unistd.h`?
Just follow how it is done for other DB types like MySQL, Postgres etc. No need to do a separate track for MSSQL
Why does this both need to be in a goroutine, and pass `async = true`? Seems like one is canceling out the other. I would think the only reason to block on fetching the favorites list is so that we're guaranteed it's done by the time we return, but the `go` construct means we're not even waiting for it to return. (I agree that we shouldn't be blocking notifications while refreshing the favorites -- I guess I just don't understand the need for `async = true` here, as it seems useless).
Are there any places to check if the error is `plumbing.ErrReferenceNotFound`?
you can now use `Optional.of(Collections.emptyMap())`
What is the dateo of an intervention ? This field seems to not be used. An intervention has a date of creation and validation. The other dates are on the line level
`java.io.File` is not needed anymore, remove it
d.build.Spec.Strategy.DockerStrategy.From.Name isn't the right value to use for this. d.build.Name should be ok.
Nit: I know we don't have strong conventions here, but: consider exporting the `symbol_mapper` rules via the `dep_inf_rules`, unless they are actually optional.
I know this is the same as the existing code, but this seems like an easy change to string.IsNullOrEmpty(name) to replace the null and Length == 0 checks. :)
It seems that we should adjust ThriftCodecTest to make the UT pass.
yay for passing ctx through!!!!
did you mean to import `errors` or `pkg/errors`?
Would be good to add the NRTA as a follow up
Why did you break this line?
this offset should be 'len(self._arg_names) - len(self._fullargspec.defaults or [])'. Args here is the one passed during calling execution, self._arg_names is the name in function definition. Your probably want to just put this number inside init function.
For BC reasons, we need to maintain the `.mobilenet` space.
log.warn()? since this is possibly security related.
@adoroszlai Can we avoid creating variable `conf` as it is only needed to createClient and not used later? We can stick with original code and you could make any checkstyle/formatting changes without creating a local variable.
Silly question: don't we still want a `finish()` here?
please add this to `equals` and `hashcode`
I think you need something in the spec file for Build..ask Brian if that's needed or if it will figure it out automatically.
Shouldn't this be used as a parent directory for `message_journal_dir` and `content_packs_dir` by default?
I know it was already a `ConcurrentSkipListMap`, but why not a `ConcurrentHashMap`?
This is a NOOP.
please add this to `equals` and `hashcode`
Change is unrelated to the PR (and in two places below in this class).
Totally minor, but the comma belongs after resolve, not resource.
Good practice to add `@CheckForNull` (from e.g. `javax.annotation`) to the return value in this case.
`FileLock`, `_resource_to_filename`, `CacheFile`, and `_Meta` should now come from `cached_path`, right?
Here (and elsewhere), "inestable" should probably be "not robust" (assuming that's the intended meaning).
Why lower this?
Strange. There is new line at the end of this file in my clone...
@roigcarlo there is a typo here...
@bflad not sure if this will break anything - had to do it in order for import to work correctly though.
I'm confused-how does the routing differentiate between `:tag` and `:username` in terms of params here?
Is this okay? I'm not sure if we treat `6.0` differently from `6`
The result of this call is unused. I don't think it should be here.
Please just restore the original code. This folder is not a package, and I really don't want a toplevel module named 'util'. (And there are many good reasons why the folder should not be made into a package.)
Same here. Can be `long`.
This looks wrong!
Maybe we should add proxy policy as well.
Should we maybe throw an error when the `doctrine_cache` extension does not exist but the `cache.type` configuration is set? I just tried to reuse the old configuration, and tripped because of that.
this should be `elif` now that `if not name` doesn't throw. should be moot since get_project should always return a string.
Did you get rid of this line when you tried nesting all `pacpy` imports?
We try to not rely on `platform` for architecture specific decisions, but rather on `spec.target` which is the target of compilation.
Here is another angle. Earlier I mentioned "unjustified OPENSSL_asserts". But which are those? In first hand those that involve treatment of input provided by caller. From this viewpoint OPENSSL_assert is actually ... justified, but it still makes sense to get rid of it, because it's actually excessive. But does it actually make sense to replace it with ossl_assert? Not really, because ctx->digest->md_size is supposed to be constant. This assert is meaningful when you develop corresponding EVP "provider" module, but otherwise the condition is *always* met. In other words it makes lesser sense to replace it with if(ossl_assert), plain assert alone would be sufficient. [Unless of course one starts arguing that failure to meet the condition can actually be considered as indication of memory corruption, in which case OPENSSL_assert would be actually more appropriate.]
Same as above, but with the additional step of making this lambda a function (you can't add type annotations to lambdas).
If these are only for the CLI, then they should remain in top.go.
So it seems like this pool still doesn't solve one of the bigger issues we had with the old pool which is that it would return duplicate connections to you and you'd have to figure out when you had a duplicate connection using the busy signal. It seems like that wouldn't be too hard to solve if you kept track of the ips that various connections came from and then could easily tell which IPs you hand't already connected to.
Can you pass a message without this constructor?
We can use `params[:per_page]` here, for consistency with adjacent lines.
@Tryneus why do we want to re-attempt the transaction forever?
You don't need the conditional, jist short circuiting is enough
`CompilationModuleGroup` might be a good place to hang these three since it already knows which modules are in compilation. I know we've tried to keep non-node state out of `NodeFactory` in the past to stop it becoming a dumping ground.
Isn't this implied by the ordering of `ss` in `newPriorityQueue` can this change after the fact?
struct field ApiKey should be APIKey
specify what unit (per second) in the docs/variable name, and maybe make this milliseconds instead
Need to communicate to users that the agg function is "first"
This is a legit mention of Google Cloud Platform -- the linked issue (and pending new release of the Bigtable module so we can fix the API surface) is a reason we can't upgrade yet. All the rest looks great, thanks!
nit, for clarity purposes, we may want to call this `TStack` instead of `T`
Can you add an expect that the span is still the span?
This is not allowed - pkg/monitor may not take dependencies on deep test packages in general.
I've just found that removing these methods is actually SPI-breaking :-/ It was a bad SPI arguably, but still. Something to bear in mind for the future. (And, well, I'll dig out the `name` out of the `image` :-) )
Is the listener always ready once this returns?
consider merging both lines
Judge the situation where `len` is all 0, then we can still use `reflect.DeepEqual` directly?
Without quotes, it removes the `;` from lists... which can be very confusing when you are focused on an issue related to a list of paths
The internal `start()` is called to restart on a crash. We sure this change with the above change is not going to affect that behavior?
Should we track this with a JIRA?
nit: `P` looked like a type until I noticed it is a promise.
Technically the upper bound is 2/128, when we have a 2-byte size for a 128-byte value. However, as this is only a size *estimate* that's probably OK.
Is it possible to get a regression test?
what does `mode='w'` on a reader mean?
Just formatting changes. Remove it from the PR
Missing use Cache?
Space missing to the left of {.<br>Unused block argument - plan_type. You can omit the argument if you don't care about it.
Why the change from `s_crt` to `crt`?
Do we need to cast it to boolean? (if undefined)
Should we default this value to "True"?
Missing a few instances of request in this file
I thought only `error.message` will survive, should we still use `error.embed`?
Now you can remove this line to pass the tests.
`noop` makes me think that the logger will be noop as well. Can we just remove that variable and just return `&SpanLogger{Logger: util.Logger, Span: noopSpan}`
@earth001 Does this method name still make sense, given the assert that you have?
I suspect this is a WIP, but is the search bar supposed to be rendered on all routes, just the listings page(s), or some subset of routes?
I'm not really happy about having the same class name for implementation of the new semantic interface.
both are dead
Technically, those should be optional pointer types for backwards-compatibility
the import is already here, so you can just change the line above
Use the lambda method for multiline lambdas.
I'd expect a function called "force" to actually directly update itself, rather than after 500ms.
How about add `MockContext.Close` and close repository there?
Should be a constructor argument.
We could move this to `models/user.rb` as `def banished?`. We can have orgs return false for the same method. After all this is not exactly "controller logic"
It looks like all the type arguments are internal, if they are we'd be safe passing them as their enum instead of an int. Less checking for the compiler. Definitely not essential and I could easily have missed something.
this should be restored
No need for an index here? I don't think there is but double checking.
The RTC interface is accessible trough the APP object (APP.RTC). Do we need that line?
The implication is that `previous_max_sn` > `max_sn_.previous()` is possible. I would like to understand how this may occur. If it is the for case of `previous-max_sn == max_sn` then that is probably okay.
I would remove the `if (Equals(sv1, sv2))` at the beginning, and replace lines 2616 on with `return x.CompareTo(y);`
Or can use a star import. No strong preference.
y function changed to func?
How about combining the two if blocks into one?
I'm tempted to say that this should be `publicImageRepository` or `publicPullSpec` to set the longer term direction.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Should the default be set on the database level? Maybe it would be best to do when creating the Job Runs.
We have a TimeZoneInfo.cs file. This `private static readonly TimeZoneInfo s_utcTimeZone = CreateUtcTimeZone();` is now declared in both TimeZoneInfo.Unix.cs and TimeZoneInfo.Win32.cs. Can this not be deduplicated into the shared TimeZoneInfo.cs file?
Never use `math/rand`, please only use `crypto/rand`
guess i would rename the command to `sulu:admin:update-build` as it can not only download it with these changes
we null check often enough that maybe it should be a condition in the work item
Should we also keep this for templates ?
Maybe it would be a good idea to create a normal `if` statement instead of a conditional assignment . The amount of condition is at least here, we could increase readability. What do you think? @szewczykmira
is set as `selectedNavContexts` in the constructor. maybe I shoule deprecate `getSelectedNavContext` and add `getSelectedNavContexts`?
Didn't the previous check assert that Error is nil, and now it verifies that it is no error? The equivalent would be `assert.NoError(err)`?
Is the indentation level correct? Shouldn't this assert be part of the second, inner `with` block?
`Replicas` is nil is HA tracking is disabled, so this will panic.
`shutil.copymode()` should be better.
is configFile still being used? Ideally should be removed.
Why use `FLAGS_schedule_timeout` here? Wouldn't it be better to write out `_timeout` so we know how long it actually ran for, as opposed to the desired timeout?
space after Throwable
WDYT about moving it to class level? There are some metrics (`http.server.active_requests`) that receive new values on both `start()` and `end()`.
I thought this change was only about equality operators. I am not sure I see the value of reordering inequality operators. (edit: I mean > < >= <=)
With the addition of `null: false` here, can you run `rails db:migrate` again to get the change into `schema.rb`?
Does `importlib.import_module()` not work?
this import is duplicated
@Override returning null usaully indicates an abstraction problem. It's not much of a surprise given headless vs headed was done in a massive hurry to get the bots up and running. In this case it seems like `getTerritoryEffectImageFactory` should only be a method on the `HeadedContext`, not the headless. If a caller is not aware of the difference, they can get a NPE. Seems like a caller of this code would need to know which instance type, so moving the method to the right instance type I suspect is appropriate and would avoid the error and abstraction problem.
[standards] Please add braces to this instance and retroactively to the three previous ones
Why we use obtain_token_by_refresh_token(refresh_token["secret"]) in _redeem_refresh_token but refresh_token (no ["secret"]) here?
should we be defensive here and check to see if there are any items after the split?
small typo here: `predefiend` instead of `predefined`
I don't quite agree with the term "KeyBindings" here. In my opinion the interfaces name should make clear that it only supplies a collection of bindings, but doesn't actually manage them. Maybe that's just me being silly, but just wanted to point out that this confused me for a moment
Final newline missing.
Wrapping `cloneElement` to prevent passing the index, and array.
Can you add docs for this new parameter?
Strange. There is new line at the end of this file in my clone...
I think it should be done just once in case of an oracle driver was deregistered. What would happen if there are two different oracle driver versions loaded? (for example an app that inserts into two databases or that reads from one and writes to another)
Need to communicate to users that the agg function is "first"
This is good, but `cchName` below is also wrong. `size_t` should be `UIntPtr`. It is `uint` on x32 and `ulong` on x64.
Looks like this import is actually unused. Perhaps we can remove the line entirely?
This should probably still use m["group"] if getRelativePath fails.
rm empty line
no need for this as it's an empty table :) we also should keep transactions on for `CREATE TABLE`
still in alpha, let's remove 'ForceCloseFiles' then. Don't treat config as deprecated.
I re-read this sentence and it is a bit confusing
We usually don't accept ANY values here, the settings are intended to be a well-known set of values. What is the `platform` here? I see in the code that you manage it as the "architecture" but, I don't get why to differentiate here.
sorry, but we need a more solid test than this :)
Does this need to be updated too?
4 spaces here (I know, I know, it's weird)
capitalizing `ReleaseNotes` here indicates to me that this is a class, but it looks like its actually a function called getReleaseNotes. I'd redo this as `const releaseNotesGenerator = require('./release-notes/index.js')`
I just noticed that we are missing this check in `doRefresh()` So, if you wait after the check interval of the data adapter, the file gets loaded anyway.
@jdoliner I think this is a bug I happened across while working on this - could you confirm that the old code was wrong?
Use the correct enum  .
nit: remove "the" and change to "If the value is <see..."
Does this need to be filtered? It's not clear that it does. The local variable is "address_specs", but I think that's only because everything was renamed to address_specs recently.
in what case the project id could be null?
Instead of making this method public and introducing a spurious depedency between AggregationQueryPageSource and this class, this method should move somewhere else. E.g., to a new class named `Decoders`
Was the API endpoint changed to allow this parameter?
I don't understand what this `bool` does. If `false` is returned here, `ec` has an error code and enters the conditional on line 509. That's why I removed this flag, returning false in the verify callback already fails the handshake.
MIssing a space
Why lower this?
We dont need an extra gap at L9
If hasSentComplete, isn't complete always true?
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Out of curiosity, why do we pass a `() => callbackFn()` instead of just `callbackFn` in this file?
Shouldn't copy replace the method too?
I suggest making this new property private. Private things are easier to maintain as they are not covered by any backward compatibility concern and so can change anytime we need it (while protected stuff are harder to change outside of major versions)
we are using sha256 now, you can use the output from `spack checksum`
@vsoch I think the test was asserting the output of a wrong implementation. `install_root` is not in the schema so I would expect it to be an 'object' by default, not an 'array'.
can we simplify this test while keeping the tested behavior?
maybe this was to comply with findbugs
Put one space between the method name and the first argument.
missing `entry_points={'console_scripts': [...]}`; see main `setup.py` for guidanance
this import should go with the rest of `github.com/elastic/beats/libbeat/`
do we use `_spath` anywhere? is it effectively undefined in the `else`? what is the reason to rename it, btw (private to public)?
we now use `TeamMember.Status` throughout
If ctx.User == nil should not be removed.
Is there any reason this patch is not getting merged upstream?
This should be a prerelease so 1.0.0b1 possibly?
I'd prefer a positive env-var ``CONAN_ENABLE_API_V2``. Just personal taste, I am ok with any.
I think it is `InitInstallEngineWithMigration`, no `Test` here
int -> gboolean
<!--new_thread; commit:84f538f392fa0a3244e7ffe4819adbef86d6e289; resolved:1--> Something about this is funny ;-)
- It would be much better if you fixed this by adding a proper empty constructor. - AFAIK `char`'s size isn't necessarily a byte, you should use `u8`. - `sizeof(MapNode)` would be much clearer. - Since you aren't using any of `new`'s features you might as well use `malloc()`.
this needs to be properly obsoleted before merging.
I'm not big on adding a new parameter to $httpBackend, but I guess there's no other way
Does this change only affect stats parent hashtrees or is it both? Either way seems like a good change to me.
anything bad likely to happen by adding an enum value in the middle here? are these values persisted or used outside this one binary?
nit: you may want to change intellij editor settings. its generally discouraged to use '*' imports.
no need empty line here
I'm aware your following the example of the code that was there already -- but it's a bit silly what we're doing here, isn't it? What do we try to protect against? I can only imagine two things: 1. We're renaming "applied" to "foobared" some time in the future. Would we then change this to `const applied = "foobared"`? I don't think so. 2. We're afraid of having typos in the code below, someone fat-fingering this into "aplied". What would happen? The tests where this is typo'ed in would probably fail, and the typo would be noticed. I'm having a hard time imagining a situation where a typo (which has had to slip through code review, too) turns a test into a phantom test, or some other harmful thing...   Of course it doesn't hurt either. I'm just wondering.
It is incongruous to make this field static when all of its accessors are instance methods. Also why use AtomicReference here?
Should we also remove constant if it's not needed anymore?
Do any of the OID's change here?
For an initial `0` progress it will render the spinner. Or is the expectation to have the progressAmount > 0?
do you want to add the curly brackets here and further down along the lines as well? Just as the file is open already.
Was this change relevant ?
Why these changes from `id()` to `getOwnerClassName()`?
given we don't really 'replace' existing params, we should just call it `extraParams`
maybe not for this iteration, but this var name should be all upper i.e. LOG
Is this change required by Python3 migration or we are just fixing an omission that __hash__ was not previously defined, while __eq__ was?
change the name of this because it's no longer pretty printed
Could be formatted a little bit better?
This would cause issues when linking and stuff. Let me try something out for this tomorrow. I have some ideas on how to fix this
Call `this.getScrollTop()` to get the cached value.
c/p err (was placeholder for something now remove it!)
The Gauge value is a `double` so this will get turned back into a double, should we just keep the calculation as a double instead?
nit. Can the method name be just finalizeUpgrade (to go with pre and post)?
The only problem with this approach is that Nested views may appear as a search result even if there is TopLevel view with such name. And as a user I would expect them to have higher priority. Maybe it worth checking all TopLevel views first. I would also vote for making a parameterizable method `View getView(String name, boolean recursive)` and maybe changing only the API calls which are really related to search. Otherwise it it hard to predict the impact of the defaukt behavior change
new file always need a license header
I do not like this change ...this maps to the target field in DS @Reference
why is the name of this a constructor argument? I think it could and would better be a private constant in `ProcessStateProvider` it's really confusing to have an object called a provider, instanced rather than added as a class to the Pico container, and which is actually not a Provider by the definition of Pico
It seems that `len(ProgramCache)` is not called.
Isn't the prejoin page visibility `false` anyway since it is disabled?
deprecation on this method is higher up but line 316 (which I guess will move as you remove them - but you get the idea - we can remove the issue 8293 deprecations for the methods you have worked on
If we really should be doing runtime channel resolution, this test should really send a message to verify the resolution is done properly.
I think we can't do this as it would be a breaking change.
This import is unused.
(style) line over 80 characters
Device_id would be the correct field to check
This should be `ArithmeticOperation` - you lost a `p` :)
I don't understand what's going on here. This function returns `str` (a type) if `x` is `None`, but `x` (a value) otherwise. That doesn't seem right. And why is it needed at all? The logic in `utils.py` already handles the case when `x` is `None`.
This test is validating that the `new Uri(...)` throws, right? What's the purpose of the line after it? Isn't that dead code? Same for cases below.
1. Visit WordPress dashboard. 2. `jQuery.isFunction() is deprecated` should not be visible anymore.
Maybe this should be done in an `afterEach` to ensure it gets cleared even when the test fails?
I went for `nullify` here because I wasn't 100% sure if all fields always need to belong to a group.
Can you also update the godocs to mention `period` and show `period` in the sample JSON.
Please move this function above, grouping it with `baseStore` after then `newBaseStore`
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
This makes me so happy! That bit of cruft was a thorn in our side for so long.
If it does both `preventDefault` and `stopPropagation` (per `onProgressClick` above), won't it effectively prevent triggering ads anyway?
Should this be named `Properties` instead of `Options`? They are called `Properties` in the `TransportOperation` class in the `Transports` namespace.
Probably `attr_reader` would be enough here.
I'm assuming you modified the 4 methods in this file because they are the ones that previously printed to `stdout`? If it's not too difficult, it'd be nice if we could modify the `_call_no_clientmock` method which should result in fewer code changes and future methods can benefit without knowing the intricacies here. If making this change causes a few test failures, perhaps we could make a method called `_call_no_get_utility_mock` that works like `_call_no_clientmock`. If making this change causes a lot of test failures though, I think the approach you took here is perfectly fine.
In this case, we should test the CORS-capability of the exchange API and set this to its real value.
I'm afraid it is inappropriate to add `symbol` to `warningEntry`. All fields are about when/where/what. They should be common and meaningful for every `WarningEntry`. So IMHO, firstly, it is hard to figure out the meaning of this field based on name `symbol` -- updated symbols or symbols referenced in this warning (it raise the other questions -- why not a list of symbols?). Secondly, most warning entries don't have this field, we can see in the following code, we need to check if `symbol != null`. So my idea is, if we really need this symbol filed, why not inherit from `WarningEntry`, for example, `SymbolResolutionWarning` so that it is category for warnings like symbol redefined, symbol not found and so on.
But more specifically, why `10`? Also you replaced some numbers smaller than 10 with this.
I'm curious, why do you prefer `this->gcPassStats.Empty() == false` over `!this->gcPassStats.Empty()` ?
Please add @Nullable in the parameter of setSrcHash()
Generally I'm wrapping this directly into println
nit: cut the 'y' in 'implicity'
We have `**options` in ``AzureMonitorTraceExporter` but `**kwargs` in `BaseExporter`?
how about just `MODE`?
How about "sendRawCommand" or "sendGcodeCommand" instead? Slightly more reusable in (other) plugins
I've just found that removing these methods is actually SPI-breaking :-/ It was a bad SPI arguably, but still. Something to bear in mind for the future. (And, well, I'll dig out the `name` out of the `image` :-) )
I'm not sure about this one. It seems fine, but I would check the permissions excel file, or at least ask some, like @Ducz0r or Matja. These rules are pretty tricky/rigid/strict.
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
NULL check not needed.
just nothing to be tested?
No need to literal cast.
Shall we change this line as well to consistently use the object API ?
should we need to check the key here?
had the wrong default here :(
Not sure that this needs to be a Singleton (is there state we need to share across invocations?).
i think this can stay private for now at least
Was this a dup? Wondering why it's being deleted.
Could we use `UPSERT` or does not fit into GORM's model?
Won't this panic if you don't pass in a message to deserialize into?
I think it should be done just once in case of an oracle driver was deregistered. What would happen if there are two different oracle driver versions loaded? (for example an app that inserts into two databases or that reads from one and writes to another)
msg: 'Failed to normalize glob patterns: ' ?
Missing use Cache?
@dvoytenko: We're allowing a forced height change?
Any idea why `make()` is present in the `install` phase? We already run it during the `build` phase.
What is this being used for. gorm should not be anywhere in the code now
This will never be true because the option name is "`ULTRA_LCD`." That's been replaced in code with `HAS_SPI_LCD`. But note, this whole block of code (all lines from 67 to 1284) is already wrapped in `HAS_SPI_LCD`. So  I think the right condition here is probably `HAS_LCD_MENU`.
this event must be raised after the InputData is set in the ConnectInput call above.
why not just a MiddlewareRef ?
why not use `long long` (64bit even on 32bit machines) and `%ll` in scanf? Can't we rely on this to work on many platforms (it's C99 standard, but you know...)
Can we use null.v4 for new things>
it is odd to log and throw. Such a thing usually leads to double logging. Would it make more sense just to put the log message in the `RuntimeException`?
Please use the `allowParentPostMessage_` method instead.
So here we go convert a tx receipt to Uint64 but in `BlockHeader` we are using `big.Int`. I'm hoping we can lean towards consistency.
This definitely feels wrong. The logical schema should _never_ have a BYTE field that is anything other than Decimal.
I still don't understand why this requires "blocking".
why `string|false` ?
should this be multiple abilities?
I thought we already had an analyzer for "yoda conditionals"
Should we disable play if there is no device id? I'm not sure what the behavior of <Audio /> is if we don't set a sink id.
Do we still need this test class here? There's another TestJdbcHugeStream in nifi/nifi-nar-bundles/nifi-extension-utils/nifi-database-utils/src/test/java/org/apache/nifi/util/db
Doing a check for list to avoid converting a string into individual letters, which was happening with one test case.
Remove abstract and add a private constructor
Why lower this?
I think this was due to @cjb's lack of a git commit hook.
struct field ApiKey should be APIKey
Why not move this check out of this component? We could avoid rendering `PaymentOptions` if it is a historical component right?
**nitpick (non-blocking):** The indentation for this `div` seems off. OCD: triggered
Please revert this.
Why did this change? We shouldn't have dependencies on shaded classes, as they are an implementation detail of the library that uses them.
For future, `corev1` is the prefferred alias for this api.
Usually we add new fields at the end of enums.
nit: s/EnableCsiProxy/EnableCSIProxy and s/enableCsiProxy/enableCSIProxy I know
Shouldn't this be `Laravel\OutOfBoundsException`
are changes very different from ops_linux? I would consider keeping platform independent logic in one file
would be nice to add a hook in the metadata connector to alter existing tables if the column is not present may be we can also set the default for this column as current time, so that users need not manually go and run alter table statements.
Would be better to qualify it as PurgerCycleCompleted, to identify which cycle the event is referring to.
We always need to append `_reported_`.
Most of the information provided in this PR is information not directly useful to a user. We may need an additional field (`AdditionalInfo` or some such) in the marker that will hold that? I would vote for keeping `try:` to provide one-liners that users can cp and use.
Should we use Locale here? i.e. .toUpperCase(StandardCharsets.UTF_8)
Probably I am missing something here. @nvazquez Why not consider also `host.getResourceState() == ResourceState.PrepareForMaintenance`, and `host.getResourceState() == ResourceState.ErrorInMaintenance`?
I feels like some overkill calling wrapper methods with the same endpoint: `get_post_count`.
Likewise, why use `s_crt` here?
I am not a big fan of this hack approach since there are huge risks to add multi-threading logic in the state machine which is designed to be single threaded which returns immediately. 1. Now function `InsertChain` holds the blockchain global mutex now will probably get blocked until sigsReady timeout. Do you think it will cause other goroutines running `InsertChain` intentions to be failed unexpected. causing the locking scenario of blockchain to be extensively complicated. I would suggest not to do this "hack" coding, instead I would prefer do it in a dummy way that only finalize after collected enough commit signature. 2. Is there any code that provides a constraint on leader node cannot enter prepare phase until last block is committed?
nit: blank line in imports is not inline with our code style
Can we make this `4.0`? We still support MongoDB 4.0 so we should use the oldest supported version, I think.
This function shouldn't be necessary.
Do you need this file?
Please leave the method and mark as deprecated. It is possible other products are relying on this method as a library.
Why is this change necessary? I am not seeing it ever being set to a nullable string.
Nit. Don't keep track of this if `p.config.MetricField == ""`, the atomic operation could add some contention.
Since you're making such large changes, do you think its worth making this an `AutoToolsPackage` now?
`from builtins import object` means that this will implement `__nonzero__` for us if Py2
Why are we calling BreakSolutionStepsLoop here?
`value` is typed as an object, not a string. does flow not display an error?
Is 0 a valid containerID ?
Maybe better to remove line 152, instead of add line 153.
TODO: This test should be moved to `esclientleg`.
For this sort of thing, we usually abstract out the relevant features of something like `libkb.Env` into an interface. Does that make sense here?
Did you get rid of this line when you tried nesting all `pacpy` imports?
nit, This should return a const ref since the shared lock will expire when it goes out of scope. The caller will still have a reference to the Config-internal data structure. ((Looking at some of the other accessor functions, they need const references too :crying_cat_face:.)) //cc @jedi22
This message and "Inspecting children with status change" will always proc together - redundant
This should move to the gobblin import group below.
update file copyright year
[nit] Could be `func (*State) EnsureNoProjectsMissing(context.Context, []string) error {` but doesn't matter
Does this need a return now? Otherwise it will fall through to the next and may write again.
I don't think this needs changing, not without an `up-41.js` script, otherwise we might have an issue when someone adds `up-41.js` it will not be executed as the schema version is already at 41.
why there is no such parameter before?
why adding extra braces here ?
`volumeSsQuota` and `volumeNsQuota` ditto, consider a better naming, it will be easier to for others to use and maintain.
Better also add an assert in the constructor to make sure `root` is never null
But more specifically, why `10`? Also you replaced some numbers smaller than 10 with this.
This is the main change. We are validating that the project can be deleted.
log.Lock could be inside the `log.log.Failed()` block
How about using more narrow client? I'm shooting core (without looking at code), which should suffice here.
Neither of these reporters support a second parameter.
suggest to decorate it with `@classmethod` or `@staticmethod`
Let's also wrap this in experiment flag.
"Cancelling" here as well
Actually, this package does not import anything
you should also specify a command line flag and a config setting
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
You forgot to implement `List()` in `BlobStorage`.
unnecessary change ?
typo: `lay` -> `determine`. Add the default value here.
Can we use null.v4 for new things>
What does this message actually mean? I.e. is it useful in debugging? Can it be made clearer?
3 seconds might be too generous, based on checking NewRelic, this was bigger than the average for all our requests (except when we were in an outage state a few weeks ago)
Why set concurrency to 1?
don't need `.String()`
Why lower this?
How about using `Reflect`?
[nit] Could be `func (*State) EnsureNoProjectsMissing(context.Context, []string) error {` but doesn't matter
typo: `lay` -> `determine`. Add the default value here.
Plots have a default Title object. You can just set _plot.title.text no need to create a new Title
Even if Prometheus currently does nothing with the ctx, let's pass it anyway. It's more future proof.
This file has nothing to do with your PR.
multi-value Float columns don't exist, so may as well simplify this and always pass `super(name, null);`
Wouldn't `null` (`None`) be more explicit here?
Removing a field from the list of supported property descriptors will cause all existing flows (after upgrade) to mark these processors as Invalid. I think we should keep this field and mention in the description of Translate Field Expression that it will be ignored if Translate Field Names is false. That means the other logic below would have to change slightly as well, to provide the default expression if Translate Field Names is set to true.
A little late now, I guess, but do you think it's worth making a convenience wrapper for this pattern? Not sure how representative our tests are of usage of our API
Undo this pl
why an array? would a regular object not be more appropriate? Also, indentation
Why was this added? PropertyPath would never be null, even if no path (it would be ".")
is configFile still being used? Ideally should be removed.
I just learned that this is a limitation from the Dubbo framework. Previously, I got an exception when trying to use mock value with the following format: `fail: return null`
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Does the <Query /> component from `react-apollo` return errors as something that `Sentry.captureException` won't choke on?
So it seems like some of the changes here are meant to address `defaultValue` handling in the case of `JsonIgnoreAttribute`? Is this the expected behavior when `Y` doesn't have `JsonIgnore` and we deserialize `{ "X" : 1 }`? It's clearly something we should be fixing but I think it's required to fix the bug reported in #59936. I would recommend splitting this PR into one that applies a minimal fix for #599396 for GA backporting and a separate one that addresses default value handling in 7.
it looks like we can unify the logic for method *public static byte[] base642bytes(final String str, final int off, final int len, final String code)* and method *public static byte[] base642bytes(final String str, final int off, final int len, final char[] code) * would you mind to give it a try?
This will be printed in the task log if it's string. Please use `PasswordProvider` to make it configurable.
We're not linking to `FrameState` because it's private now. @pjcozzi does that mean we should change these callbacks to not take a `FrameState` anymore? The intention was to allow the alpha, etc. to vary with time, camera location, etc. but I'm not aware of anyone using the feature.
how is this going to work? where is the foreground? My call is not to even style this cause its just too annoying.
Similarly here and else where (WriteCoreString/WriteValueCore/WriteCore methods). Type shouldn't need to be nullable.
This `ShowStartPage` is the only way to control the visibility of `Start Page` object. In the future if there is an option to not show `Start Page` at all, then the codes surrounding these visibility control do not have to be changed.
We usually don't accept ANY values here, the settings are intended to be a well-known set of values. What is the `platform` here? I see in the code that you manage it as the "architecture" but, I don't get why to differentiate here.
I think this too should raise, see `visit_partial_type()` below.
Maybe I'm wrong, but... If components are iterated in order, then it is safe to add these build-modules here (just after the component). That way we ensure that a build-module declared at a component level is not using any target-component that is not available. ...and we include the `build_modules` declared at component level.
This change isn't required. UINT32_MAX comfortably fits into a double.
this removes the auth information that will later be used in the command :-1:
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
The `PoolArena.HeapArena` is also getting the configured `directMemoryCacheAlignment` for some reason, which I don't think makes sense because then it will also modify the size tables for heap buffers.
We could save some memory if we packed `_sendStatus`, `_versionPolicy`, and `_disposed` into a single `int`.
Looks like this union function is defined a couple times. Can if be extracted into a utils module or something and shared?
Why does adding uuid in the key make it better, please ?
Why switch to list multimap _everywhere_? If we want to _always_ allow duplicates, was this a bug previously? Why should a given element consumer (timer) appear multiple times for a given pcollection? I realize that most cases are just interface changes to clarify some contract, but what were we doing before?
Total nit - and no change needed - but I was surprised this wasn't inverted (`if err == ErrPlugins` {`).
Does gjson.Parse(..) work for this? My understanding was empty strings were always mapped internally to '{}' as empty strings are not valid JSON, so it may be breaking assumptions elsewhere.
just nothing to be tested?
Final newline missing.
there's also the build hash here.
@Override returning null usaully indicates an abstraction problem. It's not much of a surprise given headless vs headed was done in a massive hurry to get the bots up and running. In this case it seems like `getTerritoryEffectImageFactory` should only be a method on the `HeadedContext`, not the headless. If a caller is not aware of the difference, they can get a NPE. Seems like a caller of this code would need to know which instance type, so moving the method to the right instance type I suspect is appropriate and would avoid the error and abstraction problem.
Do we have a tests that covers cases like `filter(limit(scan)` and `limit(filter(scan))`. In other words I think we should consider banning filter pushdown if there is already limit applied as I guess it is buggy today.
I think that we should either validate that the second param is not `Message` or modify the `EventBusConsumer` appropriately. My guess is that `@ConsumeEvent void consume(MultiMap headers, Message<String> message)` would currently fail at runtime...
Nit: Please sort this new import in the third-party imports section near the other services
only necessary because I don't know how to set `CompModSwitches` via configuration settings
This file `index.js` shouldn't be in the PR. Revert.
This is to protect from broken .equals() implementations which don't check for a null param ?
`tagName` may be undefined if it's not an `Element` (note that `node` is a `Node`).
Let's keep the API simple and intuitive and just have `play()` and `pause()` for now.
Who wins here? Our internal DNS or dhcp provided one?
Class that is not an actual test should not start with `Test`
@strib I'm wondering why this isn't a flaw in all instances of `waitForPrefetchOrBust`
nit: space after `:` is not compliant with our linter
nit: remove extra lines between usings
Should we stick to this default value? /cc @normanmaurer @tea-dragon
shouldn't you apply `preg_quote` to be safe ?
did you test it ? i'm suprised the `\n` works inside simple quotes
Introduce variable for properties because the line is long? e.g. `var properties = typeof(JsonSerializerOptions).GetProperties(BindingFlags.Public | BindingFlags.Instance)`
It's just a feeling, but shouldn't it be part of the checkout mutation class? Or maybe even `18nMixin`? This function is not being used elsewhere but during the checkout process, and maybe in general internalization process and `checkout` object is being called as a `cls` below, which for me is a little counterintuitive.
Great, datanodes will no longer print "server started" right when being stopped. :) This has always bothered me, but not enough to fix it.
Parameter Annotation attitude need check excludedwhen the Member variables is not Basic Data Typesdefault value is nullwhen the member function have isXXX and getXXXthe compile sequence will change the default value the other way to fix is make the MethodUtils.isGetter return false so i think to change isXXX function name to other namebut this change have Too much influenceso need auth to check i think appendAttributes also need add check excludednow maybe it is Mutually exclusive(attitude and exclude)future it maybe not Parameterisgetmethods
This will need renaming too now, won't it? I tried to find where it was `use`d, but it's not, so it's going to be accessed as `\Automattic\Jetpack\Connection\Connection_Error_Handler`, which doesn't exist anymore.
Unused block argument - user. You can omit the argument if you don't care about it.
`time.Nanosecond` is `1` so it's enough to do `/ int64(time.Millisecond)`.
This is inaccurate, since it creates an HttpRequest object, but the user still has to call `send`.
I see `_changeTokenRegistrations` is now being mutated without the lock. Is that going to be a problem?
Is the promise always promised to resolve?
We really really really need to make sure this get's DCE.
NOQA shouldn't be needed for URLs.
I don't think you have to do this, just call oc.AdminClient()?
I do think this works as written, but what would you think of creating a LinkedList.AddLast() API and invoking that here rather than storing extra state in the LinkedList? To me that would be a little bit simpler and has some minor performance benefits: 4-8 bytes less memory used in the LinkedList object and avoids adding a new conditional branch in the code path for tags, events, and baggage.
So if I'm reading this right, you're formally removing `track_features` from internal use, translating all of its instances into `provides_features`, but you're not doing the same for `features` by itself. Why not?
can't do this since it can set a `true` back to `false`
doesn't make sense to spend the effort to migrate the v1 migrations to gorm v2 (we'd also need a parallel set of test utilities like BootstrapThrowawayORM etc.), perhaps I just remove this file?
So, only one instance of this class is needed? If we pass different injector (or other params), then also it reuses the existing instance?
can you create the IsLocal function?
why? I guess as 0 (Horde) would count as no SourceGroup
These are needed for migrating the actions to the event-feed-service.
This was very weird, it seems the `text/plain` was just being overwritten by json (later in declaration)
Is it possible to new up a cost analyzer and cost computer and pass them around in the params? This way, the balancer will just use the objects in the params. Previously, the balancer analyzer was only used by the balancer but now it is used in the assigns as well.
Missing `<p>` / partial => partially.
Or can use a star import. No strong preference.
Unfortunately, that doesn't work on existing indexes: `{'type': 'illegal_argument_exception', 'reason': 'Rejecting mapping update to [addons-20210707143803] as the final mapping would have more than 1 type: [_doc, addons]'}` Need to look if I can remove it entirely while keeping ES 6 compatibility. Might have to do something differently depending on the version to make the change transparent.
Seems like your formatter isn't configured correctly.
Not sure of this. This can be misleading. @maarcingebala What do you think?
`getEnvironmentVariables()` is synchronized, so this should be as well. Not to mention every other platform's `getArguments()` in this class is also synchronized. This seems like an oversight.
More can be tested here? The script and div are both probably amend to aaic t least some b`startwith` testing, or the div could be parsed entirely with beautiful soup and have its structure and expected attributes verified
Can't we make this an environment variable and let ops configure the queues?
we'll need to backfill cost for old rows, should that be a separate migration?
@strib I'm wondering why this isn't a flaw in all instances of `waitForPrefetchOrBust`
Not sure this is the most user friendly message.
You may want to mark it as `@BoundedPerElement`. And are we able to provide better size information here?
probably should rename this file secret_store_none.go or something
I don't find this necessary a good change, having a more local definition means that there is less code to read to see where it is used.
The state is going to be stored in the regsitry file. Do we really need the ID here? Does the ID change?
Don't we usually try to catch exceptions as `const` references?
@vsoch I think the test was asserting the output of a wrong implementation. `install_root` is not in the schema so I would expect it to be an 'object' by default, not an 'array'.
Is line 14 and line 22 lacking periods in the end?
You can remove this import now.
Revert this change
Can we give this one a default value (throw) so that we can limit the number of places where this needs to be passed?
Since this is the `!IMPLEMENTED` block, you could use `CRYPTO_malloc()` here instead, to be more explicit.
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
Honestly I feel you won't need two files. But that's totally up to you : )
Looks like we introduced breaking changes?
Can we remove this and keep the change minimal to just exporting huber loss?
Also good but could be better: "Specify name of the DVC-file this command will generate."
I think that it might be disturbing for users to think that None means no priority, meaning that each dimension has the same priority
This property is not assigned correctly and never used, so I removed it.
@liggitt amazingly it is possible that when doing a specific search for a specific DN in LDAP we can get nothing back and _not_ `NoSuchObject`
Generally I'm wrapping this directly into println
maybe you can check the err is net.Error instead. It's better not to check the error message directly.
could we have a constant for this value? I see it used twice in the same file (the constant could be local to this file)
Ain't 0 the default anyway?
nit, if you nix the string stream for the string and `operator+` I mentioned, then nix this too.
`from builtins import object` means that this will implement `__nonzero__` for us if Py2
Why is this necessary?
Line is too long. [83/80]
Does gjson.Parse(..) work for this? My understanding was empty strings were always mapped internally to '{}' as empty strings are not valid JSON, so it may be breaking assumptions elsewhere.
use id instead of class as these are unique names
this was because the test previous had to kick something and doesn't need to anymore?
Maybe we want to do this at the end so it can't be overwritten, and tie it to a parameter so we only get this output when the consumer provides an OnEvent delegate? Or is this how the other SDKs are doing it?
I found another problem here: for some reason `activate` adds the path as `C:\...` (capital drive letter), whereas `deactivate` tries to remove `c:\...` (lower case drive letter). So, no match is found and no path is actually removed. Since the Windows file system is (still, IIRC) case-insensitive, a case-insensitive comparison should be used on Windows here.
this is no longer necessary
Not accepted anymore
tiny nit: the logic is laid out a bit weirdly here; it'd make more sense to emphasize what's different by having the dataSource be created in the if block, but the DruidTable created outside of it.
(style) space required before the open brace '{'
Is it always guaranteed to be single quotes around `utf8` ? (asking because I don't actually know)
@deads2k why doesn't this controller/logic use the same registry hostname retriever logic as everything else? (ie lookup the value from internalRegistryHostname, fall back to looking for existing services).
As I understand we can't use the result of ATOMIC_TYPE_TO_PRIMITIVE[schema_pb2.BYTES] because it would result in `x = bytes('abc')` which would raise an error?
I really really dislike this.
Deleted lines completely redundant.
`config=None` should be changed to just `config` (i.e. without default value) - this class won't work without valid `IConfig` - moreover, you should update the docstring for the class
Is this space necessary?
Now you can remove this line to pass the tests.
how is this used in the API? I could imagine a name like srcStore or srcImage would be more appropriate.
Is there any reason why this wasn't removed completely?
explicitly use the std namespace with `std::` instead
This change has already been merged with master - so you can remove it from here and just pull the latest updates :)
we need to remove "after which the receiver will automatically shutdown" as it won't be closed now.
Are you meaning `try_split(0)`?
This might be a WIP artifact, but I think we should create new examples to showcase the unit option and leave these ones as-is. We can add more like the `custom-css-unit` example you've made if needed.
Any reason for removing the error log here?
Maybe only do image for now?
did gofmt accept this?
to align with the new design, we should later aim to restrain its use. This can be useful for testing low-level file-manipulation logic. HoodieTestTable should leverage more src code path.
You'll also need to add this to `predict_entailment` in the model, I think.
This is not right, because the zookeeper transporter is not only used by config-center. It will not use "config.timeout" as timeout key when it is used by Zookeeper Registry. And it seems your pr is not clean, you should rebase your repository from official upstream master branch. I have send a pr #4763 to solve the problem. (I am really sorry that I didn't see your pr when I sent my pr. Would you please close the pr ? Welcome to send more prs!)
Do we ever create a `ByteString` without looking it up in a map of caches?
We should remove the SourceIdentity from ContentProcessorContext and leave it as part of the PipelineProcessorContext. The user can get the source/filename with `((PipelineProcessorContext)context).SourceIdentity`. In general whenever we extent on the XNA API this way we should do so with interfaces. like so: `public ContentIdentity IFilebasedContentProcessorContext.SourceIdentity { get; }` FYI, @Ragath
I know that verbose should be last but `imtype` is temporary - you may for example want me to remove it :)
Not worth touching the file and bloating the diff.
Need to disable it as it could cause OOM in CI due to docker container memory limitation
This is a pretty big `TODO`; we shouldn't merge without this being figured out.
Change the tab for spaces here.
struct field ApiKey should be APIKey
Without this change I keep getting failures on linux gpu for `maskrcnn_resnet50_fpn`
Nothing `_WIN32`-specific, why conditional?
Maybe we should give an indication that these are suggestions for the user to join and offer a command for them to move forward.
This should be a `static` function.
Why are you hyphenating here?
The fact that we're accessing the method from a static method somewhere else is another indication why it shouldn't live in the `Manager`.
I'm out of my depth here but will this set `getMode().localDev` to `true` or `getMode().test` to `true` or both?
Probably `attr_reader` would be enough here.
Use || instead of or.<br>Line is too long. [90/80]
These assertions should come from org.testng.AssertJUnit to avoid mixing up libraries... unless we've started porting over testsuites over to JUnit but I don't think that's the case yet?
what is this sessionID used for?
@daniel-beck : this line's removal needs to be unremoved.
Why not just have an event like `OnRequestClear`? This is out of scope, though.
> 60 Do we have a standard timeout constant defined anywhere that we could use for consistency (and the ability to change all timeouts at once later) instead of hardcoding the 60?
nit - roletype is enough? unless of course we're using this with projectroletype in some API
I would remove the `if (Equals(sv1, sv2))` at the beginning, and replace lines 2616 on with `return x.CompareTo(y);`
Something worth considering: As we all know the report body is truncated at X characters. This means that the trailing `\n```\n\n` will be cut off if the stacktrace is too long. Perhaps we want to truncate the stracktrace so we don't ever hit the other limit
Note to self: the above is handled closer to the source in final implementation (postgres.go::ListRoles)
It might be better to move `waitForBody` outside. It's a very rare thing that body is not available by this time.
Here maybe fixed by #8208
`JsonIgnore` please if not intend to serialize
nit: you can merge both lines above as `checkNotNull` will return the given argument
We probably need a better name for this file, `AgentBootstrap`, `AgentDelegate`, etc
Prefer keyword arguments that are optional.
Ah sorry I missed this the first time through. Why was this working before? Or was it silently risking a close-someone-else's-file condition?
This function shouldn't be necessary.
`recovery` is just a single feature, it should not occupy the api's name. What if there is a new feature that needs to reset the TSO too?
Again I would think this would be better named Append
Ditto above regarding names. Fine to leave TODOs/FIXMEs, but rather than targeting them at a particular person, create a ticket with enough explanation to allow anyone to fix the issue. Or if the TODO is self-explanatory or low priority, can skip a ticket.
Why did we need to reorder this?
Seems we are merging splited `SelectedRows` using `concat_op` and it's not supported?
Nit please sort using statements
I think this should be done after `m.Accessor.Remove(id)` as we use negative caching. The cache should first be emptied for this entry, otherwise it could happen that a `nil` value is read from cache (no error) although no entry is there.
why remove this line?
Can you pass a message without this constructor?
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.
I think removing `ApiQueryId` is a bad thing. It helps disambiguate between it and other queryIds we have in the system.
curious: What happens if primary language is None?
The intention with this helper is that if a publisher used `latest` at RTV 123, but 123 is outdated, then they really wanted `latest` at RTV 456. We couldn't just naively translate from the currently loaded version 0.1, because that was the latest at RTV 123. When we published RTV 456, the latest could have been 0.2. But now that we're locking this down, I don't think we need this anymore.
This file should be CI-agnostic too, right?
Nit - I wonder whether it might make sense to enumerate the allowed GC stress levels in the help string, I believe there are just 3 or so unless I'm mistaken.
I understand why its doing this but this is quite stupid nonetheless
it seemed to need less code to account empty buckets rather than tombstones, so i did that.
You don't need to include the parse methods in the has array, the parse methods are just helper methods, and they're nothing the user should care about
nit: why use instance variable here instead of a `let(:user)` for consistency with how we do it everywhere else?
This might fail due to py2-3 differences. Maybe import from ``six``
I prefer to include types, as in: `project_id: str, GCP project ID`. But perhaps it's obvious it's a string...
Is this causing a test to fail? I feel like it shouldn't be needed, but I could be wrong.
Can you store the result of `$request->getContent()` in a variable to avoid 2 (costly) method calls (the next one is line 70)? Also, please use Yoda styl (`'' === $content`).
I assume this also works with later versions?
please update the same for the sass files as well
to avoid confusion that I have with `StreamSelectKey` every time i look at the class, what do you think about (in a follow-up PR) changing the class name of `StreamGroupBy` to `StreamGroupByV2` and `StreamSelectKey` to `StreamSelectKeyV2`
Can this really return `null`? In the ctor, `if (ipAddress.AddressFamily == AddressFamily.InterNetwork)`, then `_ipv4Mask` is set to non-null. Then below, the AddressFamily is checked, and if it isn't `InterNetwork`, then `Any` is returned, else `_ipv4Mask` which is set above. So I'm not sure how `null` could be returned.
should we be defensive here and check to see if there are any items after the split?
This is good, but `cchName` below is also wrong. `size_t` should be `UIntPtr`. It is `uint` on x32 and `ulong` on x64.
This file should be CI-agnostic too, right?
I renamed the controller and paths to follow the rails convention of having controllers with plural names
nit: GWT element objects should have a `setId()` method, which does the same thing here but is more succinct
afaict this is the correct spelling of the kvm thing..
While your refactoring the camera, do you want to make `_getPickRayPerspective`, `_getPickRayOrthographic`, etc. file-scoped functions?
BC break? Did you intend to duplicate (like the other ones below) rather than rename the existing? *Update:* #4203
@JeremyKuhne might want to check that the new VS designer doesn't use those, but I really doubt it, given the IID is new and not explicitly specified.
Why keep it as False? Now is raising always, right?
What if we just made this a switch statement for readability?
what does 'shared' mean then if there is "No need to writeback or invalidate it anymore or invoke comp_make_shared() either." Does this mean that 'shared' means uncached and this this patch introduces a performance hit until the addition of the coherent access?
Are these changes (to util_test.py) intended ? Looks like a merge issue.
honestly I think `path` should be marked as `non-null` the doc suggests it should be a path also it's not intuitive what will happen when it's null. I do not feel strongly about this so fine with me if you think we should keep it as is
"...to indicate **where** the filter will act on"
Rather than add direct coupling here between `KsqlSchemaAuthorizationException` and the executor logic, how about adding a `NotRetryableException` base class, which `KsqlSchemaAuthorizationException` can extend and which the executor can look for?
Use the new Ruby 1.9 hash syntax.<br>Use 2 (not 1) spaces for indentation.<br>Tab detected.
Maybe I missed this earlier, but just wanted to check that we're confident in removing this lock. Will the db provide sufficient locking itself?
this is not needed, please revert
Would `s.ReplaceLineEndings()` work the same?
Moving it to Cython means exposing most C structures to Cython and staring at tons of generated C code to see that it actually does the right thing (like in #891). I wouldn't do it bundled together with a functional change.
Why are we storing this as a string? We should use whatever type the OCI spec uses - probably an int? Parsing should be done when we set the umask.
This condition will always evaluate to true, since the variant is present for all `CudaPackage`s.
The `LOGGER` is never used. Should we remove it from the code?
This was really difficult to debug. This is more readable as well.
Thanks @klim705 but this is not actually correct. If you specify a duration the flight always lasts that exact amount of time, it's only when you don't specify a value that the time varies. Let's change it to something like: _The duration of the flight in seconds. If omitted, Cesium attempts to calculate an ideal duration based on the distance to be traveled by the flight._ I would also get rid of the `=3.0` default value since it's incorrect since #2825. We should probably eventually add a `maxDuration` property to make this less confusing, but let's just leave it as is for now and improve the doc.
go ahead and add a case for UnknownAuthorityError here and return certificateAuthorityUnknownReason, just in case they change the text in the future
blanket imports are evil. I'm guessing that your IDE did this instead of you. Depending on the IDE you are using, you can set it to essentially not collapse imports like this. In IntelliJ IntelliJ -> Preferences -> Code Style -> Java -> Imports tab -> Class count to use import with '*'. Set that to 99 :)
I think this is not necessary to add `: Tensor`
It is currently possible for this value to be null but maybe it shouldn't be? I think it would make sense to throw an error on line 81 to prevent that situation but I would rather keep functional changes out of this PR.
Should probably be XAML'd, but I guess that can be done seperately
We could link to the directive guide/normalization here
I think we're actually going to want a single priority for both raised and lowered flags, or else they might end up being received out of order. For example, if a "lowered" flag arrives, and then a "raised" flag, FM will process "lowered" last, causing it to hibernate when it shouldn't. Assuming the hibernation logic you've written is idempotent, we should be able to keep the queue for the "flags" priority at a length of 1. If it's not, we should keep 2.
what if anyother software uses a different version of cefsharp that requires `RegisterJsObject`? I believe it should not be the case. Is there a possible way to check if this object is registered and `window["controller` will return the right object?
This import looks wrong. I guess sdk also has a copy of weaklockfree
Standards: Can you please wrap operators with spaces and add a space before the brace?
To be consistent, `cont_columns` or use `self.continuous_columns` for the `len` check
Add an empty line after this please, to clearly separate the two blocks
I wonder if it would be better to at least ensure we continue with the loop ?
did you systematically search for all occurances of `'files'` or `"files"` and replace them all?
I think this was due to @cjb's lack of a git commit hook.
this should be a `StringSet`
this is used in case one wants to write the h5 files to a folder => check the `file_utilities` to see how it works
I don't think this is valid, afaik there's no guarantee that a GCHandle's id will not be re-used
Mayve we should use `six.moves` since `zip` is different with `izip` in Py2
line 37's 'import string' is duplicated with lin 25's 'import string'
the authorized keyfile that is generated by gitea has each key start off with something like `command="/usr/bin/gitea serv key-1 --config='/var/lib/gitea/conf/app.ini'"` by removing the `--config` flag this will error out.
We _expect_ to get handshake failures here, so consider logging this at Debug or Info level.
`$input->hasArgument` returns `true` if the argument is defined, not if it is passed to the command. This means it will always be `true` here.
was this broken before?
@dvoytenko had to cast here
Is this file here to make editable installs work (for python 2)? It is not included in the actual package (wheel/sdist), correct?
This line doesn't have to be moved I guess
Two existing issues in this attribute. 1. It is odd that the ctor is below the properties. 2. We don't store the `Type` ctor arg in a property anywhere?
This should be noted somewhere that it was disabled and needs to be re-enabled before `1.8.x` can go stable
Curious - why the name change?
How about adding `e.getStackTrace()` if `e.getMessage() != null`?
Please revert this, it's supposed to return FALSE.
why do we need post-aggregators for each cached results? can't we compute then post-merge?
Just a question: Are we catching this somewhere?
note: we never actually consume these. i didn't want to change semantics in some unforseen manner. so in the body, we still reference `arguments`. These params just serve to ensure that `func.length` returns the *declared* param count so that we work with other libraries that check for that.
We dont need an extra gap at L9
how about `response.status_code not in [201, 200]`?
Declaration of `opmode` at the beginning of the function
`context` doesn't have an `agent` property, as `agent` is part of `context.service` which is covered here.
nit: I think we can have a method `ListMeshServices()` that handles the logic in these lines and returns `[]service.MeshService`. I see more use cases in the future where this method might be useful
Refactoring because the name `EsClient` does not fit any longer.
why `string|false` ?
Did I understand correctly, this is the same as `Kratos.ParallelEnvironment.GetDefaultDataCommunicator()`?
This file is the export commands entrypoint. Let's rename it to libbeat/cmd/export/export.go and also put very small helpers like `fatalf` in here.
Suggestion for better naming would be appreciated.
for this, if the container is joining a pod and `usePodCgroup` is specified, would that override this here or cause a conflict?
I think the new behavior is equivalent to the behavior of this removed code.
import sort order (isort will complain)
Please use separate lines for these two declarations.
Should this be converting `""` to `null` or is something else doing that?
@vsoch I think the test was asserting the output of a wrong implementation. `install_root` is not in the schema so I would expect it to be an 'object' by default, not an 'array'.
with new 100 column limit (up from 80) coding coding convention we may be able to condense this to just one line. Would suggest only if there are other changes needed in this patch though.
nit: you don't need to specify `None` as the default with a dict `.get` call in python - it's the default anyway.
I think there's enough shared now to warrant including the options (configapi.NodeConfig) directly.
with the deletion of the error, `errInvalidKeyInConfigMap` won't be needed any more, please remove the reference from `errors.go`
Why is this part of this pull request?
what is this other string used for? anything?
perhaps somewhere around these const definitions we might make a const for `"tcp"`
Can you move `"google.golang.org/grpc/status"` down with the rest of the 3rd party imports?
this is needed by `package.json` in server/ folder, that's why the build failed I think
Is this blank line intentional?
Not needed anymore
No reader during running? Writer may block.
nit of the tiniest nits. If possible, it would be nice to have the blank line above this still. But only adjust if you need other refinements for this PR.
I'm not familiar with this code. Do you know why it is safe to ignore it?
Since you're changing all of these anyway, do you want to switch to the preferred `expect(response).to have_http_status(403)`?
This is not needed or desired. The cleanup process should take care of it.
This could be a normal synchronous call that returns an error but internally feeds runs to the `RunQueue` to be run async. Would be consistent with the other `Start`s
WindowTop can be aligned the same way.
Can you add docs for this new parameter?
you don't need this. You should import Client from mne.externals.FieldTrip
These two files need to be named `mk1.[ch]`, and the folder name needs to be lowercase.
Ain't 0 the default anyway?
are you encouraging us to use `returns` instead of `return`? Afaik both are valid and I tend to use the latter, but for the sake of consistency, I'm ready to use the conjugated version and pay attention to this when reviewing other's PR as well.
nit for clarity: "and resume the animation or video"
Since this subcommand has a specific workflow with a unique parameter, I'd rather you create a separate console command that would be dry-run by default and suggest to use the -e flag to actually perform the destructive operations.
Can you store the result of `$request->getContent()` in a variable to avoid 2 (costly) method calls (the next one is line 70)? Also, please use Yoda styl (`'' === $content`).
I would say : _EhCache_ instead of _eh cache_, to keep the name of the known library...
missing Upgrade451to460 class, I'll add that.
I think this one should be `if not message or message[-1] != '\n':`.
You cannot rely on an origin package inside of the kubernetes repo
We're using `root` twice here, and as I understand it, it doesn't have quite the same meaning both times. Could we find a different word for the second usage?
nit: remove unnecessary new lines
Suggestion for better naming would be appreciated.
This will break the `TextField.LIST_TYPE` case, because it now also returns on the `break`. We need to implement a separate case for `ListField.FIELD_TYPE` that also sets the list value like the `DropdownField.FIELD_TYPE` does. (just for lists) This probably needs a `listIsSet(String)` method implementation in `org.graylog2.plugin.configuration.Configuration`.
Identical blocks of code found in 2 locations. Consider refactoring.
could be an `elif`
Not sure what the capitalization convention is for java, but I noticed we have `replicaTag` below but `DeploymentTag` here. Should it be `deploymentTag`?
you sure this is how locales are named in iOS environment..?
I think this means we have to set the standard level to WARN in the default server template
Hm. I'm a little concerned about this being O(n) since it executes on every action, but maybe I'm grasping at straws since `TAP_WIDGET_ROLES` is small. Is it worth considering making `TAP_WIDGET_ROLES` a simple map and then check for key so it's O(1)?
So the `VisibleType` 's definition could be also put this package.
Is `getData()` called by a test?
This one is actually useful. Looks like flake8 doesn't check for that? Would mypy?
let's use parameters since we don't have any other binding without the complete name
Shouldn't we add support for this only on the new system?
The internal `start()` is called to restart on a crash. We sure this change with the above change is not going to affect that behavior?
Don't you already have this from the service state?
This should be left as "enabling"
`GetClientSpecifiedSpn()` can return `null`. Are we sure this will never be null? ~Maybe we can change `NegotiateStreamPal.QueryContextClientSpecifiedSpn` to return a `string` and not a nullable string?~ EDIT: Scratch that last idea - that method will return `null` on an error.
Do we have any concerns about running this on Forem instances other than DEV? Should we add a guard clause if so?
minor: the ternary op `c ? x : y` is nice for avoiding the need to initialize empty. here it could even be tucked within the first arg expr to `String.format`.
Should this also be constant?
nbsp should be replaced with a regular space
Judge the situation where `len` is all 0, then we can still use `reflect.DeepEqual` directly?
I feel like we shouldn't add this in the specs, the services should require the files?
nit: Added blank line doesn't match the other files.
v4 should be changed
This was really difficult to debug. This is more readable as well.
@rafaelweingartner this may quickly fill up /var/log, otherwise LGTM.
Is `TypeInfo` and associated classes still needed here?
tensors -> **T**ensors, the same below
What's the warning here? Integer overflow? It's probably not very useful to fix this here because a schematic that overflows the size calculation will cause bugs in other places anyway.
`math` before `os`
[nit] Could be `func (*State) EnsureNoProjectsMissing(context.Context, []string) error {` but doesn't matter
Just because it appears counter-intuitive it doesn't mean it's wrong. 32-bit code can take advantage of ARMv8 extensions, and that's what this placement is about.
can you rename this to `writeNullTerminatedString`? otherwise, i'd think it's a function that just writes `[]byte{0}` and nothing else.
Is ctime even used here? Seems like you're only using chrono
`make update` did this change.
Instead of `'transportConfiguration.StorageDirectory'`, this should be `'EndpointConfiguration.UseTransport<LearningTransport>().StorageDirectory()'`
we use to call this `imageapi` (we do in many places)
Why this change here?
If we're removing the functionality, can we also remove the conditional? Should this be added to a deprecated list?
I suspect this breaks things when using the content pipeline for Song. SongReader will prepend `ContentManager.RootDirectoryFullPath` which includes the `TitleContainer.Location`. Since this constructor is called from the other one you will end up with the directory added twice or some sort of exception I guess. The right fix should be to move this to ContentManager.ReadRawAsset<T>() where this constructor is called.
Final not necessary here (as a local); only necessary for accessing from inner classes.
Good catch, `parse_url()` without 2nd parameter does return the full array. OT: Maybe we should remove `@`? I find it not good muting PHP functions. Instead maybe switch to a proper class (composer again) which allows validation?
have you renamed `./tutorials/pyroot/h1draw.py` ? it do not see this file renaming in that PR (I may have missed it)
util method for rehuse
can you change this back to how it was?
Why are you hyphenating here?
can we add some basic java docs like the one at the top of the class
we should not disable `loop` unless it was forced by autoplay in the first place. If author has `loop` specified, after autoplay ends, user should still manually loop.
Also I just noticed looking at our `cmdutil` package that there's a way to read config files using it too. Not sure if that'll make things easier but it might.
this should be a `StringSet`
debt here to be cleaned up with the ignore case rationalization later?
why did you take away the namespace?
this can go around line 20 below.
This signals a huge problem with the diff. If an icon is passed to overrides it will fail flow check.
Nit: Please sort this new import in the third-party imports section near the other services
This change isn't really related, but is a minor performance improvement.
`Array.p.find` is forbidden, because it's not available in IE11.
Looks like `result` can be `final` here.
Just confirming that we want to remove `aws_instance` from this list
what are you testing here?
The dragging related data members are specific to `overlayCanvas`, which is now removed.
took me a few reads to understand this test but so great to have it now.
A CI error is raised `"error: Expression" has no attribute "name" `, its confusing because lvalue is either NameExpr or MemberExpr both of which have `name` attribute.
It also should be available on macOS only.
Let's not add a failed state again. It's a lot easier to work with a single exit point. A session terminates, and in the ancilliary data we'll put the error, if any
nit: although we do the rename in a macro, could you change the statement at the end of this loop to FOREACH_BLOCK_ALL?
Why add `DONE`? What is the behavior of `SUCCEED` or `FAILED`?
use `models.UpdateRepositoryUnits(repo, nil, []models.UnitType{UnitTypeWiki})` to be able to rm repo.DeleteWiki() func
What's the idea behind this change, and the makeTopNResults -> makeTopNResultsWithoutRename change? It's not clear to me why the new test is better.
Since lightbox gallery was the only user of this function (`installAutoLoadExtensions`), I went ahead and deleted it. Is there good reason to keep it alive? cc @rsimha-amp
nit: numbers and other primitives are non-nullable by default, so no need for `!`
#7222 introduces `LookupSerdeModule` which I think might be nicer behavior for middle manager and overlord than using `LookupModule` and configuring it not to load, but it will require this PR to wait until the other is merged.
I don't understand why we can remove this. If we remove this, how do we exit this for loop in the case of a timeout?
At this point ibd is NULL, because of the if statement few lines above.
can you nuke this?
not me, but goimports + vscode I've seen this before at other projects and is not usually a blocker, but can remove it if that's a concern of some sorts.
maybe it would be better to set a `error_reason` than to try to infer from the translated error emssage?
Could users implement it too? What are the requirements for a mapping function to be `RemovableFunction`?
I'd rather have these both as `EnableFoo` since it makes more sense when reading
This declaration for `supportedLocale` can be moved into the `else` condition so that it won't be created unnecessarily.
For windows platform, main.ts monitor `SIGBREAK` signal to trigger stop process, does this terminate() function in win32 trigger `SIGBREAK`?
Double check, is this intended?
Could you share some context around this: * Why is targets not a valid name? What does it conflict with? * Is targets2 the most descriptive name we can come up with?
decision. How can I reject with proj=False ie. without applying the proj?
This is a functional change to match what coreclr does rather than, you know, null ref'ing :)
maybe .Any() would be more clear to - also, I wouldn't mind if this was a helper function. - we may already have it around in utils.
This is a breaking change as the other products/module in EVOQ are using it. It is better to add RegexOptions.IgnoreCase option than using ToLowerInvariant() all over the place.
There is a lint error here: GoogleApiDebugOptions.java:43: Line is longer than 100 characters (found 101). [LineLength] perhaps move the empty space at the end of the line to the next line.
TODO: This test should be moved to `esclientleg`.
This const shouldn't be changed. It is used for small avatars.
so previously, pip has never exercised the multi-file support of ConfigParser. not sure how the layering works with that? are you comfortable with that?
we should keep both specs (callback and promise) until the deprecated functions are removed to ensure no regressions
had the wrong default here :(
Should be min initialized as LONG_MAX ?
`Waiting for info`
At this point, the `api_server.start` exception is being handled and `api_server` was not added yet to the `tasks` list. In the line below, you should clean the already started tasks (as done by that `stop_task`+`joinall` in the end of this function), and **then** exit.
Seems we don't use this variable, Could you be so kind as to let me know its usage if I miss something.
Why isn't this using D_ASPRINTF? It would be much cleaner and less error-prone.
Please sort these
Did you get rid of this line when you tried nesting all `pacpy` imports?
Now you can remove this line to pass the tests.
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
Is it expected?
Strange, but I agree that this looks like a bad copy/paste rather than `ClientBound` called for some side-effect. @SergeySmirnov-Akvelon - FYI
Lines 466-468 duplicate lines 461-463; please remove one or the other.
Did you mean to delete this?
The getter never return null, i would use [AllowNull] for setter nullability
Oh, it looks like opt_root can be of type `ShadowRoot`, so a similar fix should be applied here as well.
Drop index.js altogether while you're here please.
For me, one of the problems with the current wording is this sentence: > `The results will be available at <see cref="HostBuilderContext.Configuration"/> for subsequent operations, as well as in <see cref="IHost.Services"/>.` It is a little unclear what "subsequent operations" means here. Does it mean for subsequent `ConfigureAppConfiguration` delegates? Or for operations after the whole AppConfiguration has been built?
`on-event` (maybe `onbubble-event` too but seems less likely) potentially breaks existing apps (which might use this for a `&` isolate scope/controller binding property, for example). Do we want to do that?
this should be `blockOnConsent`, the attribute is `data-block-on-consent`
Can we reuse encodeRegionSearchKey function? Change `endKey` variable to `key`?
Why can't this be part of details?
oh nice catch fixing that nested `RetryOnSigOldSeqnoError`
It looks like the corresponding `Kokkos::finalize` is still at the bottom of the file. ScopeGuard will be grumpy about the double finalize. Unfortunately, Kokkos only has an `is_initialized()` function, not an `is_finalized()` function. (That's different than MPI, alas.) This means that Tpetra can't check whether the user made a mistake like this.
This adds flexibility if we want to load an integer property as a string, otherwise we get a cast exception
Better to move this outside of the `try`. It will not raise the `TypeError` handled below.
Should be able to remove this second param now.
Maybe this is better off at `SetEngine()`?
`attr.ngKeypress` should be also changed to `attr.ngKeydown`. I wonder if it's a good idea to check for both (`ngKeydown` and `ngKeypress`).
unnecessary added whitespace
our goimports are going to fight over this...mine will move it back to where it was.
This string.Replace this is replacing is vectorized; this is not. Might that matter?
I see us using `os.path` in a few other places instead of using the `self.tree`. Might be a potential bug in non-local trees (e.g. GitTree). Need to double check that, this PR might worsen it.
unrelated, but I noticed the typo
Another way is using `strval($postdata) === ''` but IMHO, it hurts the performance
This fix is just to get the DynamoView to load in the designer.
What do you think about calling this method `call` for consistency with other service objects, and for less redundancy with the class name?
All these test names where confusing since we are testing the rpc function `GetServicweGroups` not the `ServiceGroupsHealthCounts`.
Is this something that we could configure with a default? I'm just thinking worst case scenario, if something happened to those records, users could temporarily override with a CLI arg, rather than having to use a rebuilt binary/image.
I see now why underscore
Let's try to keep the imports alphabetically sorted
In this file, we could keep the instance in a local variable. @thingalon
Did you delete this file too?
Revert this change
Looks like this isn't needed.
Did you get rid of this line when you tried nesting all `pacpy` imports?
while you are modifying this line, please add a blank after declaration
Both `fields.yml` and `docs.asciidoc` templates are under `scripts/module`. You should not change this path, otherwise templates won't be found.
`Default` suggests that it's configurable. It's more like `required`.
I think the outermost parentheses are unnecessary..would be good to confirm via REPL.
remove the bracket?
capitalizing `ReleaseNotes` here indicates to me that this is a class, but it looks like its actually a function called getReleaseNotes. I'd redo this as `const releaseNotesGenerator = require('./release-notes/index.js')`
I suggest to use a name that makes us know the meaning of this consumer. A consumer to do what? do you know what I mean?
"attempts are exhausted" "would be called (ifprovided) with the error information. The failed internal partition consumer will be closed..." "and a new internal partition consumer will be created...."
Looks like `translate_field_reverse()` passes `field` `to _remapped_fields()` without doing the `if field` as before. Will `to _remapped_fields()` do the right thing if `field=None`?
Sort imports :wink:
Explicitly not saving the successful TaskRuns for FMv2 here
Can you please elaborate on why this is needed? What state is inconsistent and in what way?
Nitpick: Would it be more logical to pass the saga type as the second argument since the message and the saga type is the "input" and the processing context contains the "actions" that the user can take? (Could we even consider a SagaHandlerContext perhaps?)
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
See `#perform` and line 91.
Can you change this to testRadwin
should template the error into format string
This was a bug, right?
At some point we should consider to introduce structs for Secret or HMAC :) nit: `HMACX`, not `HmacX` (common go naming convention)
Tracking the "last" count as member data doesn't seem to be necessary based on how this pattern works in other parts of the code. I also don't think it's computing total_count_change correctly for cases that don't have a listener. Please see other `total_count_change`s and interactions with the `get_*_status` method, like the ones in DataWriterImpl.
I would argue we shouldn't return an error for logging debugging data in this "if not successful" block since that will hide the important error which is `Expect(success).To(BeTrue())` on line 624. The logs are bonus, not part of the actual test.
@oconnor663 this broke `keybase sigs list`, fixed with a specific implementation that wasn't a generic.
1. Change HashMap to Map (program to the interface, not to the implementation). Or consider that it is more common in a REST service for the PUT operation to accept an entire JSON object instead of only the fields to be changed like you do here using the Map, and instead you can just implement it as public void User editUser(User user) ... 2. Don't declare that something throws 'Exception'. Instead, create your own exception class (e.g. UserException) and throw that.
Unit tests now rely on `DynamoShapeManager.Preloader` for its geometry preloading activities.
[non blocking, just FYI] You can achieve the same with `flagext.DefaultValues()`.
I suggest making this new property private. Private things are easier to maintain as they are not covered by any backward compatibility concern and so can change anytime we need it (while protected stuff are harder to change outside of major versions)
Should it be `changed_checksum` now?
I think the Setter is needed for the message field too.
nitpick, can you use `password.empty()`?
What happened to this method? Why isn't it a `private` anymore?
nitpick: naming a list a set is a bit strange. also, I usually avoid having a data type in the name. txn_files maybe?
Added consistent logging so we can tell what is going on with this multi-service operation. It is infrequent enough and complex enough that `info` level is warranted.
Please call this `UsesWiki` or just `Wiki` or something like that, then check `if opts.Wiki` instead of `if !opts.NoWiki` to avoid double negation.
In Elgg 4 the default behaviour will change to `true`, so could you please change this to explicit `false` to prevent the same error in the future.
It this deleted on purpose?
I tried retaining `--storage-type` as well. but have to choose betwen this and the new `--table-type`to mark as required.. Whichever we pick, it wont be ideal. So choose to simply rename, requiring the users to make a small change in the command, when upgrading.
Unnecessary spacing detected.
This was unused and its type conversion was wrong with cpython, so it was easier to delete than port.
This should use the relationship instead. `$port->group()->pluck('name');`
Would you be amenable to adding your name as a contributor without adding it to the copyright? We're trying to keep our formal copyrights as simple as possible e.g. in case we want to relicense to GPL 3.0 in the future.
This mock was not working before because the import had already occurred. This replaces `kube_secret` in tests, roughly restoring the old behavior.
works for me. @smarterclayton should we also "openshift.default.local", or wait until we're creating that service?
Why not just use this string as the error message for ErrNameRequired?
Should we update this issue with the new experiment name?
why `TxLookupKey` is not sufficient? Do you expect normal tx hash and staking tx hash to collide? If so, different prefix is required, otherwise not. Also, note that going forward when we unify normal and staking transactions, all these additional code specific to staking tx will be deleted anyways.
The fact that we're accessing the method from a static method somewhere else is another indication why it shouldn't live in the `Manager`.
Should we add a fallback value if `$plan['class']` is empty? Like if someone adds a new plan down the road and forgets to include a class?
we don't usually import the whole `mne` module in our testing files, we just import the functions we need (see lines 19-27)
It would have been nice to have this renaming done in another commit, as it's a "side" modification. Moving it in another commit makes commits clearer
So instead of this, you could just set `Sys.Hosts` to `etcconf.NewHosts(hostsPathBindSrc)` in an `init()` function in `/lib/tether/tether.go`. Same goes for `Sys.ResolvConf`. That way you do not need to modify the `Conf` interface.
would not use Flysystem in the LocalStorage there should be a FlySystemStorage which implements `ExternalStorageInterface` to get the external urls. see #4024
So even the repository created some issues, this will still hide them when `setting.Repository.EnableIssues` changed to true?
Why lower this?
`canonicalize_path` comes from `spack.util.path`, not `llnl.util.filesystem` doesn't it? There are more of this reference below.
You will need to run `make codegen` to update the `zz_generated.deepcopy.go` file as well
how about just `MODE`?
Not sure what to do here about this since the enum value will be different. If we use the new enum it will correspond to the same value as READONLY, which I assume is not what we want.
@bflad not sure if this will break anything - had to do it in order for import to work correctly though.
Huh? Did version go down from 3.0.0 to 2.0.0?
What if we had an explicit setting for `use_rack_attack`? According to our README we already have 3 configs to set for load testing mode, why not make it extra clear and set a 4th?
hasExclusion() -> hasExclusiveOptionals() ?
nit: use ' instead of "
Same here, looks like a private default ctor is forcing this. Can it be removed?
I don't think this is valid, afaik there's no guarantee that a GCHandle's id will not be re-used
nit: you can merge both lines above as `checkNotNull` will return the given argument
You need to g_strdup() all values added in the list.
Can't the `index` be `0`? Further: is this error comes from predefined use case, such as swiping or auto-advance/loop? Or from user-defined user action (`on` action). If on-action - this should probably be `user().error()` if from predefined behavior - it should probably be a `dev.error`.
`IssuerOverride` tells pachd to try and reach Dex at a different hostname than is specified in `Issuer`. This is necessary if DNS resolves differently within the cluster and outside of it. For example, when we're running in minikube Dex is reachable at `localhost:30658` from the host machine, but at `localhost:658` from within the pachd pod. `Issuer` should be configured so it's accurate from the host machine's perspective, so the OAuth redirect links resolve properly in the user's browser.
Since we're expecting this to succeed now, we should probably check that the latest pipeline info is the right version and has the right input.
I get why you did it this way, but I'm pretty sure it's not the best use of interfaces to have implementing classes return themselves as instance, especially because this makes it obvious that the logic is not seperated from the UI class whatsoever.
private isMember() is no longer used; remove.
can you keep alphabetical order here? weird that checkstyle is passing nonetheless...
What happens if you remove this bit of code?
nit: although we do the rename in a macro, could you change the statement at the end of this loop to FOREACH_BLOCK_ALL?
I prefer using another subcommand here, not in store. maybe `store_ns set|rm`
When, if ever, do we expect the user to provide a reasonable value for this flag?
TODO: This test should be moved to `esclientleg`.
Seems also can return null
I don't quite get this one. It means that before if the config for the given key did not exist, we would use `MNE_DATA`, but now we only do so if `key is None`? This seems like an incorrect change in behavior?
Can you elaborate as to why you removed the case-insensitive flag?
I'd vote to include this as an init argument as well, so users don't have to declaratively call this method if they don't want to.
No need for a \n here - we can clean that up at another point.
Please add `// @flow` to this file too. Unfortunately it will point out a few things that need to be taken care of.
These two numbers seem very different. One is the number of free pages in bytes the other seems to be the number of 32 bit words? Is this really the comparison?
This is interesting. The optional type does not complain here. @dvoytenko
This is imported, but doesn't seem to be used.
Instead of `'transportConfiguration.StorageDirectory'`, this should be `'EndpointConfiguration.UseTransport<LearningTransport>().StorageDirectory()'`
The custom size string still won't work I think.
try to avoid space characters on empty lines
Shouldn't we add support for this only on the new system?
Can you use auto-generated `hashCode` using IDE instead ?
My preference (here and in the spool) would be to use `InternalQueueSize`, since that's what's used in the earlier structure and "Int" as an abbreviation is overloaded with "Integer"
`final` should be capitalized
These `error_prefix` and `error_type` were just a confusing control flow with very little added value. I streamlined the code a bit, added proper checks, and improved the error messages.
cc @bvaradar is this field name serialized with the plan? if so, we can't change it easily
Rename it to `placeholder.go` and don't ignore it in `.gitignore`.
This can lead to imx query failures as DummyBookKeeper is used when `hive.cache.start-server-on-coordinator=false` which is the default value. Better return an empty map here.
this already exists at `com.mulesoft.service.oauth.internal.platform.OCSSettings#sanitizeUrl`. Move to a shared Utils class that both classes can reuse
Question here: the generated code has switched from raising a NotImplementedError to a ValueError if an unsupported API version is provided. I think either error is valid in this context, but I don't know if it's best to switch the error raised by the client for consistency, or to keep the NotImplementedError to avoid a (very small) breaking change. I marginally prefer the latter approach
`joins(:human)` Also, `id` is now ambiguous and should be `roles.id`
Looks like we keep using this as a direction, maybe switch the variable to `this.direction_` (-1 or 1) instead?
This is the same than above (and similar to the one below except for the !== ) so I think it's unnecessary to repeat all the code.
do you want to add the curly brackets here and further down along the lines as well? Just as the file is open already.
This looked like a real bug. Please let me know if something different should be done.
Do not localize. This is an HTML attribute and must not change.
If this is already pushed upstream, do a bump() style commit for origin.
When called from within a `gulp` task, `reportTestSkipped()` infers the test type from the command line. I don't believe calling it from within `experiment-tests.js` will do anything because this is the job script wrapper and there is no `gulp` task running at this point. One option is to change `reportAllExpectedTests()` to read the experiment flags and only report enabled experiments as queued. I'm not sure what the other options are given that this is a unique case where the decision on whether to run experiment tests or not is based on the config file _and_ the build targets.
Would be much easier to review if some of these things were a separate commit.
Closing the table is inside a if but opening table has been moved outside. This is surely a bug.
Why is this action needed? Can't we directly use `sendReaction`?
Standards: Please add a space after commas.
Does removing this cause any issues?
Is `.name` the translated name? If not, we should use the translated version instead.
Why is `skip_validations` required here? I don't see any validations in this line or within the following closure
This is not a correct change.
This test should contain assertions. At least to verify the existence of the variable a in each scope.
nitpicking: I think the phrases should be english phrases, like "DeleteWebhook deletes a web hook" (note the ending `s` for third person subject being the function)
now that `Db::AuthAppConfiguration::Authenticate.call` returns a config object, can we rename this so it's no longer a predicate method that implies true/false? Mabe make it `otp_confp` or somthing
Create supporting policies within the same DB transaction.
"BS"? I agree, but maybe we can name it better?
I think the idea here is to do a re-request immediately when `referer == *.cdn.ampproject.org && token == '$NOT_FOUND'`. For all the other cases, it is okay to get cookie value.
I think we could leave the old method calling the new one plus printing a big warning on screen (with expiration date), in case someone is still using it from private applications. After some time we completely remove the old version. This is what we are doing in the Kratos core for every api breaker. What do you think?
We support shoot clusters with Kubernetes at least v1.10. The `v1` version of the admission API was only introduced with v1.16. Does all of this still work if we just use `v1` now?
why the @if($level) ?
Could you update the copyright?
How does this module differ from the top-level one below?
Hm. So if the param scope is not going to be instantiated, that means there's nothing in that will be bound to anything. Why do we need to record these symbols that no one will bind to?
correct me if I am wrong. we may not have a separate delete block for hfile, since everything is a key, value in bytes. So, we might have to fetch all values and resolve to the latest one to find if the value represents delete or active.
Do we need to introduce a config? Can we always look for writer schema first and then default to file schema if it doesn't exist?
Compares `name` first to "new preset" and checks if `name` is a null-pointer afterwards. Code is also hard to read.
This is not required
FWIW, the actual regex that is used by Django (and there by the current solution as well as the future allauth version) allows the following characters: @ . + - _ This is basically a fault in the current system but I wanted to mention it now that we're here.
Good - i think i made a mistake in missing this in my last refactor.
Please remove the following setter, we don't need one, it should be a read-only property.
c/p err (was placeholder for something now remove it!)
There is a safer `dma_trace_initialized()`
I would keep `self.branch_name` above `self.extra_args` so they are sorted, but also second-guess myself because it's reasonable to assign from parameters to properties first and set other members afterwards.
is configFile still being used? Ideally should be removed.
Please add a note explaining the consequences this will have to longer URLs (e.g. will they break? will they lack information? will the stack traces be truncated?)
Is this safe in the event someone adds a new player type in the future?
No need to expose it. You can rename it to `isOK()` so that doesn't start with an uppercase letter and doesn't clash with `ok` variable too.
Should default to "" or None, whichever is appropriate here.
It doesn't look like any of the callers use this `extra_work` argument. Is this left over from some experiment?
I think it would be good to include the extend pipeline spec docs that we have on GH in this help string.
This will likely cause a panic as usually the response from the SDK when there is an error is `(nil, error)`.
Rails/DynamicFindBy: Use find_by instead of dynamic find_by_user_id.<br>Lint/SafeNavigationChain: Do not chain ordinary method call after safe navigation operator.
`login` should be added as a `reservedUsernames`.
That's not great, but for now `DatasetTestCase` cannot patch the `_check_integrity` method, so I had to move it as a function. What would you recommend here @pmeier? I would tend towards updating `DatasetTestCase._patch_checks()` instead, as it's a bit unfortunate to have to change some code here just so that it's compatible with the test infrastructure
would you mind adding examples for all the exists commands?
Now that the iptables calls are being executed sequentially, the flag to wait for the xtables lock is no longer necessary.
Why do we need this function? Is it possible to have a timestamp out of window bounds?
This star import should be removed.
should have a default filename. If the file exists, we should always use this file. If the file doesn't exist, we can ignore it.
how is this possible? there should be no step available if it is not that user's turn
are there enough tests ensuring this doesn't happen if there's incompatible options? eg this should not atomify: `(a(?-i:b)(?-i:B*)|def)ghi` and possibly the same for other options. I don't see `(?-i` in this file at all.
please add this to `equals` and `hashcode`
This is defaultable when we only have one container. I don't see that happening and it should be mentioned in the godoc.
is there a reason why we were calling `deliver` instead of `deliver_now` being this already an async job? We call `deliver_now` in other similar jobs
private isMember() is no longer used; remove.
We need to enable this in the vlabs API type as well (including conversion to the base api version in both directions)
You should return `false`.
i believe we were returning the wrong status code here
I think load from etcd is not necessary here.
`logger.Debug` will already not print if `debug` is false, so you can remove this `if` and the passed `debug bool`.
This will need renaming too now, won't it? I tried to find where it was `use`d, but it's not, so it's going to be accessed as `\Automattic\Jetpack\Connection\Connection_Error_Handler`, which doesn't exist anymore.
I would try to avoid the second then.
not me, but goimports + vscode I've seen this before at other projects and is not usually a blocker, but can remove it if that's a concern of some sorts.
I'd like to do this, but it conflicts with the way that `IExtension` is implemented today. `IExtension` is implemented so that you can access certain parts of `IDynamoModel` at certain points in it's lifetime. This gives the client (i.e. someone implementing an `IExtension`) guarantees on whether an object is loaded or not. In other words, we give clients progressive, safe access to the `DynamoModel` over its lifetime through the `XParams` objects.
Missing this file?
I'm not sure what to do about these hidden fields   Would anyone know how to find out if they're used anywhere?
Converted from deleted *.rec test.
Why? Isn't it best that routers work with child chains rather than processors? If they use child chains then we know processing strategy and notifications will be fired/used correctly, whereas with Processor the router than needs to create these chains internally. What will we do with <scatter-gather> and routers where the parsers create the chain?
Is there some tests to verify that an enum is NOT static in some cases ?
Do we really want to shut this off for the other tests? Would it be better to pass a `bool` into this method to say whether to expect diagnostics or not?
can we add `for serialized keys`
Nit: Remove this extra line.
I assume the removal of default port is intended and checked, but in case it's not.
shouldn't that be "ret = -1" ?
Just curious, what does the `:` in `target=ppc64le:` mean? `ppc64le` and supersets of that architecture?
Why does it need to be cleared before and after?
Isn't it good to keep this so we can get useful information from the field? Or is it for performance?
line 37's 'import string' is duplicated with lin 25's 'import string'
I think this was due to @cjb's lack of a git commit hook.
Does it make sense adding a static method NullPayload.isNull() which does null check too, or something similar? Or is this check only going to happen like this on specific occasions?
Can you check if you can properly serialize/deserialize this object. AFAIK, Optional is not serializable
It doesn't make sense. Why would we want to check if `finished` is true and then set `finished: true`?
Why lower this?
when can it happen that a MessagingException doesn't have the event set?
Do we need to keep these concatenated strings? Maybe better to keep host, port, and tlsPort individually?
Yay for removing dependencies!
This line will be replaced by: # num_anchors_per_level = [torch.prod(shape_as_tensor(o[0])) for o in objectness]
I don't like the name of this function because it sounds like a struct/interface, Please rename it to `ValidateTopic`.
Can this link to the Sandcastle example and include an `@example`?
We will need to port this to exchange.py and Exchange.php, cause base classes are not transpiled. Also, JFYI, In Py and PHP we use the snake_case notation.
Line is too long. [136/80]<br>Redundant `self` detected.
IIRC I did that because the speed of copy/paste a in a large set of images was really slow. Computing the aspect ration need some CPU cycle. So the idea was to do that here only if the current sorting was based on aspect ratio (for obvious reasons) and delay that at some other point otherwise. So, have you tested the perf?
Note that all the operators are assuming `number`/`number` comparisons. - We need to do type checking to make sure, for example, that `4 > 'cat'` is a syntax error. Please carefully think about our type system and make it reasonably strict, e.g., no unexpected implicit conversions like `true > color('red')` - We also need to implement operators for `Color` types, e.g., component-wise operators. If we don't want to do those functions to `Color` (totally cool with me to keep Cesium's API surface area small) then we can just add them a local functions in this file.
@ramramps, This won't just affect sliders. It will affect a lot of nodes. Is there a way to do this without modifying `BasicInteractive`?
Moving it to Cython means exposing most C structures to Cython and staring at tons of generated C code to see that it actually does the right thing (like in #891). I wouldn't do it bundled together with a functional change.
Maybe it's time for a CeWsModule class ? : )
Standards: Please add braces to this conditional statement and spaces around the `==` and `=` operators.
I think it auto optimises, but you might as well do a `limit 1` once done feel free to merge
this is the important part If this works (which I think it does as it is only declared and used once here) then we can use it for initializing the `GlobalLock` ...
But here I suspect we want to keep a version of this with `UninhabitedType`. After all consider what happens when `t` is `UninhabitedType` instead.
If `TypedParameter` no longer requires `pathManager` (see below), then do we need this in `FunctionDescriptor` class? I know we have a public property `FunctionDescriptor.PathManager`, not sure if that's used anywhere. But please have a look, thanks! :)
we should also inject `ConnectorSecurityContext` so it could be used instead of `null`. It could be artificial but user should the one passed by us when checking the access.
Funny enough gce still uses crc32 in some cases for etags and aws also fully uses md5 hashes. Anyhow... the spec doesn't say what should be used so we're fine here.
I think mock_verify is no longer used an can be removed from the test
Should we check that the leading parts are not zero? Otherwise the version number will not be unique, e.g. 0.23 and 0.0.23 would results in the same integer.
have no idea why we didn't do that in the first place. But I remember a discussion, but not the arguments.
These weren't being used, seems leftover from `tags`. Moved these to `_yaml` and slightly changed the UI.
In what situation would _size != 0 but _items == null? I'm wondering why the second check is needed (and worst case, if there's some corner case that could result in that, it would fall out of the subsequent type checks, both of which would be false).
Use empty lines between method definitions.
Would be nice to extract it to a separate method. And combine these 2 conditions using `Predicate.or()` if possible.
We did not have any test coverage for Type.GetTypeFromCLSID and Type.GetTypeFromProgID
code is repeating 3 times, maybe move it inside `self._run` instead?
Why lower this?
... and line 121
Stray thought: strlen() has to traverse the string looking for a '\0' byte, which strcspn already did for us. We could make this test cheaper by writing it as: <code> if (string[strcspn(string, "metachars")] == '\0') /\* i.e. no metachars appear in string */ </code>
This will override the calculated value if it's err. Put this into else
Could you explain the idea of accessor?
So it seems like some of the changes here are meant to address `defaultValue` handling in the case of `JsonIgnoreAttribute`? Is this the expected behavior when `Y` doesn't have `JsonIgnore` and we deserialize `{ "X" : 1 }`? It's clearly something we should be fixing but I think it's required to fix the bug reported in #59936. I would recommend splitting this PR into one that applies a minimal fix for #599396 for GA backporting and a separate one that addresses default value handling in 7.
shouldn't be completed with TimeoutException?
is this needed ?
Is there any point in keeping this program? Replace it with stanzas for evp_test?
Just to point it out: this is a breaking change, as the return type of the method is changed.
does this need to be in the base? should it only be on nodes?
Previously, we use most common block hashes to determine which block to download, then we use that blocks to try to update the status. Now from my understanding, here we are improving the logic by verify the block first before put it into the queue. If that is the case, VerifyHeader call needs cooperate with the retry download other blocks logic before updateBlockAndStatus.
we null check often enough that maybe it should be a condition in the work item
Change to FlatList.
don't use `^` in version please
Or try `hudson.Platform`.
Is 0 a valid containerID ?
this we're calling two methods, we should probably use parenthesis at least in the inner one: `title sanitize(@organization.name)` it's easier to read IMO
I really really dislike this.
Add a line break after this.
It doesn't look like any of the callers use this `extra_work` argument. Is this left over from some experiment?
Do we want to put the class name?
Whenever you get time, try to reduce the exposure of ExecutionMirror, so if it's not used downstream then, just don't use this variable.
Did you intend to remove this line?
Would it make sense to relocate this to `src/server/pfs/pretty`?
is it a function or a regular primitive? (string, number, etc.) here, I guess it's a function because it begins with a verb
this is not needed. this test should actually capture the bug
Same as above, remove the type here to avoid BC breaks.
Won't these already be toggled off on refresh? Also, would we want to toggle the loading on refresh, possibly in the Preact layer?
Why double ss on the end?
Isn't this first call with TRUE superfluous since you call the same with FALSE below (only_visible = FALSE, means everything?).
Ditto above regarding names. Fine to leave TODOs/FIXMEs, but rather than targeting them at a particular person, create a ticket with enough explanation to allow anyone to fix the issue. Or if the TODO is self-explanatory or low priority, can skip a ticket.
Did we consider making `Path` nullable?
Why change of logger now means the loss of formatted/and id'd log
Why couldn't this stay `delegate().populateDisplayData(builder)`? Will this have any side-effects on what information is actually produced?
Don't we usually try to catch exceptions as `const` references?
This type had been incorrect
Looks like `result` can be `final` here.
Isn't the add-on facility used in aks-engine different from the add-on facility used in AKS (helm based). Hence I am not sure how this can be used in AKS. I was expecting the facility to be more generic and be VMSS/VMA template specific. What is the missing piece piece connecting this ?
A little late now, I guess, but do you think it's worth making a convenience wrapper for this pattern? Not sure how representative our tests are of usage of our API
we don't use wildcard imports. Please review contribution guies
I'm not really happy about having the same class name for implementation of the new semantic interface.
You don't need to include the parse methods in the has array, the parse methods are just helper methods, and they're nothing the user should care about
**question:** is there a reason why you didn't want to assert against `good_ssn` that you set in the `let` block on line 6?
Why is this changed?
what's our coding style guide on multiple imports? is it clearer to list them out
@liyong4x could you please describe the reason of these changes? It breaks general pipeline, so we need to find another solution
I'm not to sure what the best way to fix this is, but currently this also prevents you from stripping someone if they are stunned. Maybe stripping should just bypass the (un)equipAttemptEvents?
I think this is wrong, this way you will allow settings that are not in the defaults (and hence disable the validation of the parameters)
But here I suspect we want to keep a version of this with `UninhabitedType`. After all consider what happens when `t` is `UninhabitedType` instead.
Intention was good, execution a bit worse ;) @deads2k mind updating in a followup?
Do we need `monkeypatch` here?
@snehachhabria Thanks for fixing these descriptions!
Would be worth making these a bit more realistic? I'm assuming that `key` is the feature name `annotations` and value is some sort of flag (`true`?). I expect there's a good reason, but why isn't value a boolean?
I'd recommend using `Ints.saturatedCast(MINUTES.toSeconds(5L))` here or create a constant `private final int SECONDS_PER_MINUTE = 60;` which can be multiplied by the number of minutes (of course we also need `SECONDS_PER_HOUR`, `SECONDS_PER_DAY`, and `SECONDS_PER_LUNAR_YEAR`).
It causes some performance degradation (getOneOffExecutors() always happens + collection merge), so maybe we want to keep the original implementation
For Go conventions this would be `HMACHeader`
did you mean to import `errors` or `pkg/errors`?
Type annotations could instead use `../types/date.Timestamp` for less-frequently used typedefs, but this felt common enough to merit the import
We were never hitting this code path in v2. We only ever had `self._build_graph` defined in v1 code, and not in the Pantsd code. So, I think this is safe to delete.
the existing "colloquial" API page has been replaced by the auto generated doc (which supports markdown in the descriptions by the way)
"as if it had been"
if we're just removing this then do we even need the function?
why not use switch statement here instead a bunch of `IFs`? To make a code style consistent with what has been done earlier in the PR.
This fixes the post to the server.
why we are defining this as int64 in the struct and then casting it to int32, can't we start with int32? Don't think we will overflow but just in case :)
please explain ... ? this seems ... wrongish
Is this a regression or a fix for an existing bug?
I know there's more work to do to propagate changes to the ConfigMap to the controller Pod, but at this point should this endpoint always match `kubectl get` (after a polling cycle at least)? I'm not seeing the endpoint return the same config as `kubectl get`.
Can you use another variable name other than `$output` to avoid conflicts anywhere else. Maybe `$ibmi_output`.
Did you get rid of this line when you tried nesting all `pacpy` imports?
Don't think this is necessary, the util.DefaultValues call should populate it.
I would remove the `if (Equals(sv1, sv2))` at the beginning, and replace lines 2616 on with `return x.CompareTo(y);`
Could the changes on packetbeat move to its own independent PR to decouple it from adding it to the agent?
return in_eager_mode() and (_dygraph_tracer_ is not None) ?
I noticed, that class button doesn't collapse, when it's clicked second time. Fine, that noone has noticed it... :smirk:
And ultimately this was never reachable because the locale is re-applied through the super call above it.
where did you find this constant? Isn't it public in the Prometheus client?
Use 2 (not 3) spaces for indentation.
The current logic is fine, but typically it's more robust if you give a name to the returned `error` and then define a `defer` which increase the failed metric if the returned `error != nil`
This line doesn't have to be moved I guess
Can we add the docstring tag for SDK version that this was introduced?
typo: `lay` -> `determine`. Add the default value here.
My preference (here and in the spool) would be to use `InternalQueueSize`, since that's what's used in the earlier structure and "Int" as an abbreviation is overloaded with "Integer"
Probably `attr_reader` would be enough here.
I think it should be `\A`
Should `%s` be replaced with `? `
Since we control whether or not to start animations based on whether or not this `side` variable is truthy, then we initialize to `null` since we should not have a truthy value to start. We will do all calculations for side within `useLayoutEffect`.
Me thinks you need a return statement here.
this assignment is dead now
I don't think it's good idea to make such intrusive dependency into `wallet2` module
nit: move `status-report.js` file out of `tasks/runtime-test`
this was hoisted out of the inner function which has a retry loop
@gabriel what's the plan for populating these for real?
Just to point it out: this is a breaking change, as the return type of the method is changed.
I know that verbose should be last but `imtype` is temporary - you may for example want me to remove it :)
This is problematic. Our examples should never rely on private APIs.
@Jg1255 move this file into the folder `azure-eventhub-checkpointstoretable/azure/eventhub/extensions/checkpointstoretable`
I'm really questioning if this method should exist
is this even used?
May be possible to remove when changing the approach to provide the Service to the MuleContext
add entry down below too to keep it consistent?
Also spi_master.h please :)
this is incorrect. The semantic of this method is to indicate if the operation is non blocking and therefore executes asynchronously. Adding the `@Execution(BLOCKING)` annotation does not change that. The only effect of that is sending the initial portion of the operation in the `IO` pool instead of `CPU_LIGHT`. The operation doesn't become blocking because of that. The only way a non blocking operation becomes blocking is if using a connection that is participating in an active transaction
this file could stay unmodified
This function shouldn't be necessary.
You can remove this import now.
When called from within a `gulp` task, `reportTestSkipped()` infers the test type from the command line. I don't believe calling it from within `experiment-tests.js` will do anything because this is the job script wrapper and there is no `gulp` task running at this point. One option is to change `reportAllExpectedTests()` to read the experiment flags and only report enabled experiments as queued. I'm not sure what the other options are given that this is a unique case where the decision on whether to run experiment tests or not is based on the config file _and_ the build targets.
Please add a space after the `if`.
This field was no longer used after removing the `GameData` parameter from the constructor.
Not 100% sure what the problem is without this - could you post a quick code example of a before/after?
why do you fetch all port groups if you only need one?
Do you have an example of a situation where this would be used?
This is in general an anti-pattern, you shouldn't pass to a self.method a self.variable
Had to add type so I could make a custom parser. Can't custom parse types, only composite literals.
same here, use `time.Ticker` and `ttl.Stop` on close. Otherwise we introduce leaks in case we ever support reloading/reconfiguring outputs.
Please remove files that are not related to the article
Any reason we can't build these in parallel via a `Promise.join` instead of then?
Now that all handles have partitionPath, can this be moved to base class (HoodieWriteHandle ?)
Probably `attr_reader` would be enough here.
I think you could share the same static instance as it is stateless
Is there any case where the transaction is found in the thread in this case?
This means that if I specify `https://hostname` and the defaultPort is `8080`, I will get `https://hostname` instead of `https://hostname:8080`? Why would I want that to happen?
This could have a huge impact on the used storage so I suggest to make this configurable.
Why are we calling BreakSolutionStepsLoop here?
@pfmoore the intention is to have requirementset.add do less. By moving this outside, I've tried to make it explicit which paths go which way. This makes it easier to keep track of what's happening (because this bit of code is highly intertwined). I'm sort of trying to untangle this bit of code here.
what is the goal of defining unused arguments ?
I like this - this should be aligned everywhere i think
Better to extract local variable for `URL` to avoid noise from Sonar that we defer NPE calling the method several times.
nit: docstring since it is public?
The new name may now conflict with an existing name. That's why we use a character that's not valid as an identifier. Since we also generate names that aren't valid in C elsewhere, it would be better to have a centralized facility for dealing with problematic names within mypyc. If you want to pursue this, I can give some pointers.
Is it possible for us to simply not set the `FarPlaneDistance`? i.e. is there some way to disable it completely?
Did you get rid of this line when you tried nesting all `pacpy` imports?
Is deepcopy actually returning an instance of `SubscriptionProperties` rather than a dict?
This expectation fails sometimes and I can't really get why   I tried to debug this using `byebug`, but when I check for `user.collections.count` it returns `2` and the test never fails in that case, so I don't know how to proceed.
This has to be swapped around. `start_mediated_transfer_with_secret` is not the base case anymore, but the exception, now it should call `start_mediated_transfer_async` and not the other way around.
So load_config() is deprecated? Can it this then please be marked with `@deprecated` ?
I noticed the schema still contains the default, sorry @seb1441 for not having caught it before! :-)
that's not actually true. `psr-0` and `psr-4` keys are indeed of type `array<string, string>`. But for `classmap` and `files`, the type is `list<string>`
There is no checking against what is already a dependency, so can this result in things ending up in the dependency list multiple times or having the priority clobbered? (Though I suppose we hope that the priority does not matter with the new semantic analyzer, right?)
This is a good example of why aliasing is helpful, because multiple imports packages could be named `v1` and changing the import alias later on is a bit annoying.
Should we have an ending "else" to catch edge cases we were not thinking of?
Do nothing? or throw exception as per other examples?
can we simplify this test while keeping the tested behavior?
This line doesn't actually do anything, because you're just importing a submodule into a place it was already accessible. Before this line, I could do `from allennlp.semparse.contexts import atis_tables` in code outside of `semparse`, and this line lets me do exactly the same thing. In contrast, the line above takes something that was only accessible in a submodule and makes it accessible here. So before, you had to do `from allennlp.semparse.contexts.table_question_knowledge_graph import TableQuestionKnowledgeGraph`, and after, you can do `from allennlp.semparse.contexts import TableQuestionKnowledgeGraph`.
Do we other places that needs this change?
Am I missing something or did you lose the call to `build()`? :)
Change to lowercase.
Is this something that we could configure with a default? I'm just thinking worst case scenario, if something happened to those records, users could temporarily override with a CLI arg, rather than having to use a rebuilt binary/image.
This is a breaking change, it should be mentioned in the release notes.
Nit - missing space after the comma
from the impl of these methods it looks like they can be implemented here (or somewhere else rather than leaving those to be implemented via all Remote task runner) ... check for worker can be either done by the output of `getWorkers()` method (I understand that is a list of all workers and search would be O(n) but I wouldn't worry about that in this context, if it really becomes an issue then we can add an abstract method that just returns specific ImmutableWorkerInfo object given its name ).
ah - this explains the failure in spec/initializers/application_config_spec.rb:7 - changing from method args to a block here made the expected "receive with an arg" fail.
why add a function here doing nothing?
Either "container" singular, or "in containers"
@netchampfaris, Can we keep this for backward capability, these methods might be used in custom script or custom app
hasExclusion() -> hasExclusiveOptionals() ?
This means that it will change the behavior of a note with a field named "FrontSide". That's fine by me, but should be noted in the commit message. Or maybe even better, a unit test should be written, ensuring that we clearly see that Fields with name FrontSide are ignored
I wanted to use `IWorkspaceModel` here, but there are a lot of places, where it's needed to use `WorkspaceModel` with its' properties and events.
I prefer not to use the string directly since we may change the error message later by accident.
Are these the only rules we have? Is there a rule about "false" string values?
@mercyblitz should you import the codestyle/dubbo_codestyle_for_idea.xml into idea codestyle. The order of org.apache.dubbo is firstly.
why did you add this, it's the same as line 13
@stuartwdouglas this change doesn't look related? Is it something you want in?
After giving it another thought, I think we should remove the include `include-pid` and `exclude-pid` rules. I don't think they make sense in the context of globally specifying include/exclude rules. That's because PIDs are not predictable before a process starts and even more so across different hosts.
Probably update the phpdoc here to indicate how $current should be used.
What about the ingress DNS?
what is the difference between `node_num` and `worker_num`
plz add whitespace in brackets (3 more below)
Specifically, these changes necessitate the changing of the other keymaps, as this module is hard coded to expect the specific layer values. There are other ways to fix this, I'm sure, but this was the simplest option.
Don't we want to initialize it to a negative value like `-1`? Also, have you considered dropping the `Cache` suffix, i.e. `_sizeCache` --> `_size` and the same for GC info?
Just wondering, what inconsistency does this solve? Would this be an issue with playwright as well? Looks like there's no equivalent flag.
Could you revert these line changes? This is a complex PR that we'll likely need to look at in detail, and it's best to avoid line noise to focus on what matters.
@tristantarrant Do we have a consensus on where these static imports should go? I know that eclipse by default likes the top and intellij like the bottom (or something like that). Just would be nice if we could make sure we do the same spot each time. Maybe we should update the various code styles to be the same?
`It might be slightly create this to create this` -> :o
As this is a builder, we should just make a deep-copy (not use `Collections.unmodifiableList()`)
this is incorrect. The semantic of this method is to indicate if the operation is non blocking and therefore executes asynchronously. Adding the `@Execution(BLOCKING)` annotation does not change that. The only effect of that is sending the initial portion of the operation in the `IO` pool instead of `CPU_LIGHT`. The operation doesn't become blocking because of that. The only way a non blocking operation becomes blocking is if using a connection that is participating in an active transaction
lots of changes on imports. Is that expected ?
This is needed because sometimes we can switch between `custom-endpoint` or `pre-configured-endpoint` on attribute changes, so we need to also clear out the props used from the other type.
Minor style nit. Take it if you want. I prefer to not have compound if statements in returns. It makes things clearer if you break it up, but up to you.
@IntelligentQuantum wow... big diff here ^_^ where are the actual changes?
is this right? or `function(new: T)`?
nbsp should be replaced with a regular space
we don't seem to be using this class in this file
This seems to return remaining value, if multiple people are operating on this stream, with synchronised also this can give stale values. Just out of curiosity: Any pointers in which use case having this synchronised will help
So there are no problems setting both flags regardless of the package type?
Could we make this `errors.Is(ctx.Err(), context.Canceled)`.
I think canonically we usually do `String(x)`
I think this test for `$in_transaction` should be inside `transaction()`.
Isn't there a timeout on the server side? i.e. doesn't the server wait for some configurable amount of time before failing? If that's the case, is there any point adding a retry? If you want one retry, just double the timeout - same affect. If this was configurable within the client, then I could see it might have use. But hard coded... I'd just remove it.
Is this still needed? Doesn't seem like we reference this anywhere?
assert isinstancedata_loaderPython GeneratorPaddle.io.DataLoader?
remove this line?
This is incorrect, AFAIK. The `<related>` tag shouldn't have any surrounding text. If you want to have descriptive text like that, I think you need to use a `<see href="url">text</see>` within the summary or remarks.
not a typo
I'll hold off on reviewing the PR until the errors and existing questions are addressed. Additionally, please make sure you update the ref/System.Net.Primitives.cs file... that will be the first thing we look at.
This class does not contain tests, and thus does not need to be annotated with `@Nested`. It also can remain `static` because it's a child of the top-level class.
Did you get rid of this line when you tried nesting all `pacpy` imports?
this is a hack for now. Need to clean up such that a new client is created.
I don't recommend caching the value because isActionPromptTrigger is tied to the `show()` action, not to the consentUI class. It's possible that `#show()` is called twice with different `isActionPromptTrigger` value. Caching it to the class, could lead to the value been overridden before the promise is resolved. This won't lead to a race condition only because the notificationUIManager makes sure no two UI can be shown at the same time.
You already did `this.userMode.userError = opt_userError || false`, no need to add the `|| false` here
Please put it back :)
We do not want Weld to generally create sessions for each request. If portlet impl needs this it should start a new session itself.
This feels like the kind of thing that should never really happen?
Looks like you can get rid of this as well
The GCF for IPFS pinner relies on the related field so I think we'll need to update it.
Looking forward, from the AST perspective (not the tokenized perspective), perhaps `ExpressionNodeType.TERNARY` is better named `ExpressionNodeType.CONDITIONAL`.
so `_merge_grad_data` does not retain the shape properly? does it make this 3D array 2D? If so perhaps it should be fixed to make it properly return an array of the same shape (other than along the merged dimension)
Why is this override needed if there is no assertion about the value of the IP address?
Ah I just noticed that I named these variables with a capital first letter -- do I need to rename these to `hostCertFile` and `hostKeyFile` to be idiomatic?
Shall we define it at consensus if the only use is in consensus module?
Don't we typically keep the URL up-to-date with the most recent version?
Can you make sure all these options are listed in the help.
I might say this even stronger, e.g. pipeline.options will be removed
Do we really need to memset(,0,) the whole buffer ? It would be better to have ServerIdentificationDialog() guarantee that it'll set the string empty on failure.
would you mind adding examples for all the exists commands?
This is more of a question, but am I right in understanding that we can't simply use the service's name and expect it to be resolved into the correct IP? Is that something that requires a k8s DNS setup?
Layout/AlignHash: Align the elements of a hash literal if they span more than one line.
data.width data.height exist for every 3p iframe. Please do not add them.
I've made the fast path resilient to more redefinition errors.
Converted from deleted *.rec test.
NULL check not needed.
Should this log message include `err`?
Changed signature, to stay true to our "normalized" structure for entry points. The `List[str]` form for entry points is applied at the last moment when outputting for the setup kwargs.
Sneaky angle bracket at the front there.
A copying method shouldn't be called "getCallbacks()", perhaps, "snapshotCallbacks()"
I think the default should be to do nothing, and chmod should only be called if `mode` is provided. But I actually think it would be better if `chmod` were left outside this function -- as is, it clutters `mkdirp`.
better would be `$tab_name = elgg_extract('tab', $vars, 'file');`
If I remember correctly this is not the only code part where the token is read and the user accessed. Can you check for the other `$this->tokenStorage->getToken()` calls and fix it also there.
before this change, this was a bit strange: a relative path was transformed to a homedir-relative url. (this is only corresponding with default ssh behaviour, where you start in the homedir, but with forced commands, you can cd somewhere else first and then there is no correspondance any more) as we support generic relative urls now, we transform it into such a url.
The matches are not _returned_ by the `expression` argument. How about something like: > determining if values retrieved using `expression` should be...
Based on the param is used and described I'd expect it to be a boolean, is there a reason you decided for a string? I think it would make the code more readable.
I am curious why this is not just a property?
Missing long conversion.
c/p err (was placeholder for something now remove it!)
All is still hazardous to use, we're going to lose every error except the first one.
Line is too long. [81/80]
This looks like a good candidate for `errors.Wrapf` as opposed to `Errorf`.
can you create the IsLocal function?
same thing about using `allow`
You could just check `StatsCommit != nil` here. It being non-nil implies that `EnableStats` must have been true too.
I think we'd prefer to capitalize only the first character for this and PATCH - `Dst` and `Patch`
Here, please just remove the bracket. The alternate logic should remain.
This is the meat of the change.
I think you can just remove the `PlatformGetMaxIndex()` function entirely and return 4 here.
I've added in another PR.
Should this have a `_` suffix?
We can use iterator here to replace ArrayList.
Please use `github.com/ngaut/log`.
does this need to be in base?
We should not call this for single-tenant/subnet plugin as it depends on NetNamespaces. I think, we should move this to node.policy.StartEgressIP?
Can we not add dependency to regex and fix the line ending instead?
Could be more readable by renaming as `COMP_STATUS_STATE....` to indicate this is a status rather than another COMP_STATE...
Why remove this (the RPC class also caches this) ?
This is hard to understand without punctuation.
Do you mind expanding the `@example` below to show one that is KVP-encoded and another that is the tile-URL template?
Invert description and type. Type must follow description.
This check looks fine here but, are you sure nobody will attempt to call `t.removeRepository(sess,...)` at some point? I think this check should be there rather than here (or here too if you want to shortcut by optimization).
would use `UserInterface` (`Sulu\Component\Security\Authentication\UserInterface`) here
I'm generally less of a fan of "version" fields, and more of a fan of feature flags, mainly because feature fields are more self-explanatory.
Did the auto format add this? (should be the other way around)
Suggested "DISTRIBUTION_TARGET_SOURCE", I don't see why it should be abbreviated. Same for the String value.
(question) should this default to being an empty list?
This function name is out of date now.
Can we make this `4.0`? We still support MongoDB 4.0 so we should use the oldest supported version, I think.
I think it would be better to use Query::withOverriddenContext() rather than using this method with changing its access level.
@nmittler - This may be optimized out but do we need the the temporary variable for the `.length` member?
Looking forward, from the AST perspective (not the tokenized perspective), perhaps `ExpressionNodeType.TERNARY` is better named `ExpressionNodeType.CONDITIONAL`.
Why do reader users need these permissions? I think we should leave them out for now until we know how to proceed with alerting permissions.
in case you moved these for the sake of alfabetical ordering; these 'I' items should be way up and not amitts 'O' items
You can remove `&schema.Schema` from this line here.
pubsub - is it what eugene is working on now?
Didn't the previous check assert that Error is nil, and now it verifies that it is no error? The equivalent would be `assert.NoError(err)`?
I think you should add `cmdoptions.require_hashes` to the `SUPPORTED_OPTIONS list above I assume people might want to put the `--require-hashes` flag in the requirements file at the top like other supported options.
There's really no benefit to most of the DECREF/XDECREF changes -- XDECREF is only needed if the object might be null, but since that's already checked a few lines earlier, it ends up being redundant to use XDECREF
This can be moved to a place where it always happens, instead of with a conditional.
seems like this error might be worth warning about?
Could you retrieve `_decayed_lr` instead? Then the `isinstance` call etc. is taken care of, as well as any potential decay.
Please revert this.
Is there is a default value, why not use a primitive value with a default of `false`? Then, you do not need these logics in a POJO get method.
typo: `lay` -> `determine`. Add the default value here.
really small nitpick   `mandatories` comes before `mascots`
This dangling `return` is throwing me off. I suspect a bug here.
Shouldn't we update the image object in etcd if there's such a metadata change? That way, we could allow for easy mass migration if desired (let the user get all the images).
Is the reason "Install hangs on windows" accurate or a copy + paste error? Similar for other tests in this file
Here I need to add this check. Because I used new member template in `ClassInformationView` and its' ViewModel is not `SearchViewModel`.
Converted from deleted *.rec test.
need to update the description as well
This is the meat of the change.
Is there a common area we could/should tuck this away into like you did in Buildah?
Have you tested this? I think this might still fail. In any case, I think the best place to do make the change here is in `dmypy_server.py` where the error message is generated.
The `null` guard should not be necessary because the constructor always converts `null` to an empty string.
The variable $interface seems to be never defined
I wonder if we should temporarily support both, as this will break all non-english languages right away?
Should this be null since we won't be packaging Derby?
Won't this skip the last element of `roles`?
I'm not sure I understood why this is wrong? It sounds like they should be the same; what do they really represent?
This should be max size in bytes. The only places MB should be used is when a human needs to see the value. Everything else should be translates back and forth to bytes.
i dont think this is correct/needed. we call rpc handler locally, but we still wait for all children of collective rpc to finish before we destroy this rpc
Mastodon endpoints only support a JSON output. So wouldn't it be better having just a `jsonExit` function in the `response` class?
nit: although we do the rename in a macro, could you change the statement at the end of this loop to FOREACH_BLOCK_ALL?
The default dtype is also used in the creation of parameters and other creation APIs, like normal.
Please remove unnecessary change.
Gotta remove MeetingList.web.js.
rename pressure to backpressure or backpressurePolicy
Why wait until `buildCallback`?
you don't need this. You should import Client from mne.externals.FieldTrip
I didn't verify that every function that needs this now has this. But I guess your test change does cover this, after all.
small change! zero test on a core hot path functionality!!! Really dangerous to merge this man! Can you provide tests for this? or some background on why a test is not needed? (would this be covered by existing tests? which I don't believe it's the case).
Rather than having rules call this explicitly, it feels like the first writes to stdio per `@goal_rule` could do this automatically?
(1) no casting, type-safe (2) decouples view and model, we no longer require for the model and view object to be one and the same, we could return an arbitrary object here for the view.
Can we make this `4.0`? We still support MongoDB 4.0 so we should use the oldest supported version, I think.
Drive by note: We'll probably be looking for including `_ec2` in the resource name.   Trying to get better about denoting the AWS service to prevent future collisions/confusion.
At this point, the `api_server.start` exception is being handled and `api_server` was not added yet to the `tasks` list. In the line below, you should clean the already started tasks (as done by that `stop_task`+`joinall` in the end of this function), and **then** exit.
don't return null. just return `CompletedFuture.completed(null);`
I don't understand why this isn't sampleTextString anymore? I will revert to that
Can we get `AllOwnersLostException` for writes?
Why is this line being removed instead of replaced?
I think this can be similar -- the `hg` url is already a good unique identifier.
We _expect_ to get handshake failures here, so consider logging this at Debug or Info level.
This header now looks different from other one in this PR. Not sure if that is intentional and which one is right, but we better have only one
Maybe `UNDEFINED` will be better
Once again, saying: > is collection available Is really odd for a collection (plus the test `test_collection_not_yet_published` is having a different name).
Now you can remove this line to pass the tests.
@ramramps, This won't just affect sliders. It will affect a lot of nodes. Is there a way to do this without modifying `BasicInteractive`?
Final newline missing.
This property is not assigned correctly and never used, so I removed it.
I'd put the `pdf_fname is not None` check first, it saves one comparison if it is `None`
do we always append it to the end? If so, it might be safer to do `name.endswith()` and `name = name[:-8]`
Not related to your diff, but I wonder why Sized and Collection aren't in here.
Since you're editing this: maybe it should say 'the element which will HAVE its CSS classes changed'?
Wouldn't it be better to be consistent with Kafka?
Otherwise, handling directly in the except, when an error occurs in the install, the trace is pretty ugly, as a "something failed when managing failure..."
I assume that logic elsewhere is handling the case that this was originally meant to solve, resetting the value if max or min is exceeded. Is that correct?
Same here, let's remove silencing.
Please use this constant for service registration.
For this function and the one for SimpleDeploymentAppDef, I think you could just a local variable to be the DefaultOS if the string is empty, and then take the value if it is not. That way you don't have to modify all of the other tests to pass this in.
:+1: I am surprised we didn't have this before I wonder if returning the size used may be better, WDYT?
@liggitt amazingly it is possible that when doing a specific search for a specific DN in LDAP we can get nothing back and _not_ `NoSuchObject`
extra space before `break`
`get_id` returns `unsigned`, why do you want to change this?
public static BeamSqlRowType beam**Row**Type;
merge as a separate fix?
I think this was due to @cjb's lack of a git commit hook.
can you make the return the struct, instead of pointer? To loose the client's burden of checking nil and avoid potential crash.
Oops; will remove this when addressing reviews.
what do we gain by replacing int with String? seems to me like that would have negative performance
This is probably technically not necessary for _brand new users_, but I tossed it in to make sure cache clears as normal when content updated.
In some cases you substitute `import logging as log` with `import loggging`, but here and in some other cases you still import it as log.
if you're just implementing the interface to allow `setOnClickListener(this)`, then you can would be better define it as a lambda inside the method and remove the interface impementation I believe the syntax would be `btn.setOnClickListener(this::onClick)`. Then you can rename the method to something more readable.
better to add container id too
you have a NONE enum set!
capitalizing `ReleaseNotes` here indicates to me that this is a class, but it looks like its actually a function called getReleaseNotes. I'd redo this as `const releaseNotesGenerator = require('./release-notes/index.js')`
What is left to do ? :angel: (should be written here, or the `TODO` should go away :stuck_out_tongue_closed_eyes: )
Is this change intentional?
You don't need the conditional, jist short circuiting is enough
Won't this disable all tests of the nested classes? Was this intended?
Use the new Ruby 1.9 hash syntax.
you forgot to remove enzyme here (+ the new line)
Can you move this to the processor package. It is a start for what we had in the `processor/package` tests for v1.
how is `RestClientException` map to `kerberos`?
Converted from deleted *.rec test.
if I right understand, try-except here need for compatibility with python 2.7, but our target is python3.5 and higher, probably we can use only first statement.
Would recommend calling the one-parameter constructor here if there is no default value.
Please note that `toState(store)` is executed twice in the two lines above! That's very likely the result of copy-pasting that that's why copy-pasting is discouraged by our coding style. I'm taking care of this one.
(question) should this default to being an empty list?
We should not support an `M` parameter. Seriously.
Use the new Ruby 1.9 hash syntax.
space missing `if (`
why not a plain "else" case? I'm not understanding if you expect the batchContainer to not be able to return the batchTransaction, and you want to fallback to the TM in that case.. looks odd?
What type of env variables do we expect to be loaded? We need to be very careful about having secrets in env files that might get committed to the repo.
Let's use `connectedClients *atomic.Int32` instead. It makes it clear that this is accessed atomically, and it also avoids possible alignment issues (although that's not relevant for 32-bit values I think).
I think it would be better to add `[assembly: CLSCompliant(true)]` to the Abstractions project (also the Dependency Injection project probably needs it also).
auto formatted this way?
Please put this method just below `getAncestorGroups`.
This error might be confusing, because we were able to import the module, but it contains a critical error. Maybe add a message (explaining cause) to this exception class?
Ambiguous block operator. Parenthesize the method arguments if it's surely a block operator, or add a whitespace to the right of the `&` if it should be a binary AND.
I think this has the same problem as IdentityExtractionFn. It should return a constant rather than `super.hashCode()`. Please check the other usages of `super.hashCode()` as well.
This is needed so that release builds use the larger 32-core machines.
I am guilty of this a lot, I'm afraid. Since Python can only return one thing (though that thing may be a collection of other things), is the `-` necessary? Happy to do whatever you say is right, I just didn't know.
Is this constant available in the S3 gem? If the threshold in the gem changes, this constant will no longer be accurate.
3 seconds might be too generous, based on checking NewRelic, this was bigger than the average for all our requests (except when we were in an outage state a few weeks ago)
I found another problem here: for some reason `activate` adds the path as `C:\...` (capital drive letter), whereas `deactivate` tries to remove `c:\...` (lower case drive letter). So, no match is found and no path is actually removed. Since the Windows file system is (still, IIRC) case-insensitive, a case-insensitive comparison should be used on Windows here.
We cannot do much about errors returned here, but doing nothing seems like too little. We could log it, which may have benefit of being logged with traceID so it can be tracked back to specific requests (in case someone is complaining).
This made no sense. `context` is a `T`. `initial` takes a `T`. So why were we passing a `Class<T>`?
where we declare this can_read_protocol_in_repository?
This may bite us, can you at least log an error here?
Does this mean that iframe poll always require port exchange? Is this an ok requirement per existing viewers?
@rhtyd Makes sense to eject only when ISO is inserted. Verified that this is being handled in all cases before ejecting vdb, except here.
Converted from deleted *.rec test.
Please drop this git alias everywhere, not needed anymore.
Thanks for not ignoring me! Also, cool, `errors.Is` :+1:
Strange. There is new line at the end of this file in my clone...
Should use `JulianDate.equals`.
Could remove the need for the loop being that a `map[string]string` should be able to be converted to a `common.MapStr` `common.MapStr(tags.(map[string]interface{}))`
We also need to store the `key_type` value in the `config` object depending on the actual type of the existing key.
struct field ApiKey should be APIKey
maybe we could set this to be a minSize setting rather than size (so it can be stretched bigger with the dialog but can't go smaller?)
Not very informative IMO :)
Note: this line is still a bit suspect. Effectively, if we have a blank line in the output we don't bother sending it along. Doesn't seem sensible. But i don't wan't to touch it because it might degrade something we care about.
I think Systemic Font is unclear. What does this represent?
@n3nash : Is there anything we need to do to handle backwards compatibility with commit metadata written in older format. Would this change automatically handle that ?
Breaking change, anyway we can make this backwards?
I don't think this is valid, afaik there's no guarantee that a GCHandle's id will not be re-used
utf8_to_wide requires to delete the pointer no ?
in general, i like to have the consistency of having everything available via config and command line parameters. Can you do that here too? See this file for plenty of examples
we need to remove "after which the receiver will automatically shutdown" as it won't be closed now.
we don't record **author**
This should be a full sentence.
Method GobiertoAdmin::GobiertoPlans::PlanForm#vocabulary_id is defined at both app/forms/gobierto_admin/gobierto_plans/plan_form.rb:7 and app/forms/gobierto_admin/gobierto_plans/plan_form.rb:48.
this should be `elif` now that `if not name` doesn't throw. should be moot since get_project should always return a string.
Those modification are not anymore relevant to your fix.
Do you have an example of a situation where this would be used?
It's a small file, but why do we need three identical copies? We have other files that are used in corelib and other libraries.
Shouldn't it be a `defaults()` call instead? I'm not sure both headers are required to potentially send a 304.
Why are we skipping these?
When the if has brackets, the else should match it and also have brackets...checkpatch will not complain in this case.
Revert this please.
Fixed another way in develop, ignore
Side note: We should make sure we explicitly say in the docs for all freectx functions that they should be written to accept NULL.
Started on this upgrade, probably wasn't worth it in the end
Move this one up too?
I feel as though this would break more things than it solves. Instead of an error being thrown we instead pretend to return a value (in this case null) which will almost certainly cause a different error to occur in the code? That new error will be far less traceable to this issue, I think we should attempt to fix the root cause of the issue than just patch over it. If @zcbenz is correct and it is a V8 bug the issue might simply be cleared out on the next Chromium bump (maybe) as our V8 version is linked to the Chromium version (I believe)
Looks like this method can be deprecated
unfortunately I don't think this is the right context for this one. In fact I'm certain this is the incorrect Context.
This line is already included in the previous paragraph
I know that verbose should be last but `imtype` is temporary - you may for example want me to remove it :)
wouldn't this be set already above seems redundant and by making it boolean such defaulting will be unnecessary anyway
this is not needed if youre not formatting the data
Standards: Please add a space after commas.
It changed from `met` to the default of `metrics` here because I removed `quarkus.smallrye-metrics.path` for this test as I also wanted to have a test that used the default path
append works with a nil array, so the check for d.k is not needed
Instead of first creating a `dict` and then a `Forward`, just create a `Forward` earlier (instead of `dict`).
nit: you can merge both lines above as `checkNotNull` will return the given argument
What has replaced it? `@deprecated <explanation>`
Invert description and type. Type must follow description.
Why does it need to be explicitly executed here?
referrerEthAddress on line down below should no longer be part of the primaryKey. otherwise we'll have a composite primary key on (id, referrerEthAddress).
Please extract combiner as a variable and add `return NullHandlingHelper.getNullableCombiner(combiner)` line below
'c++/v1' seems like dark magic. Does it rely on xcode version x.y.z? Is it always available? What the heck does it signify, something like c++11 - is this a c++ standards committee moniker? ... If there is a concise pointer to doc that defines this dir, that would be ideal.
This function shouldn't be necessary.
We need to be careful here when it comes to calling `get_access_token` So far the method has a `suppress_errors` arg by default set to `true`. What worries me is that if something in that logic changes and the method returns a `WP_Error` our `bool` cast will return `true`. I guess it wouldn't hurt to add an extra check.
Why did you move the assignment to here? It is needed also in case `BIO_ctrl(req, BIO_CTRL_INFO, 0, NULL)` fails, for instance for a streaming BIO not support querying its size. If the assignment is not done the request to be sent would be (wrongly) omitted in such cases.
I wonder if removing this line isn't a mistake, the correspond code still exists
@ruflin tests are failing because of this change, according to tests, path should be `6/index-pattern` for all versions major to 5, is this correct? should we continue using the generated index patterns for version 6?
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
What is `basicCtx` used for?
This line has to be `const result = { 'info': response }` (we must include the `response` in the `info` field inside the balance or any other response).
nit for clarity: "and resume the animation or video"
The name of this source file (custom-routes.rb) should use snake_case.
do we use zap in production?
can we remove this constant from the constants module now?
Hi @SSE4 Please try to avoid adding this ``vim``-only line to all the files.
This docstring is out-of-date. The implementation now will create a tempfile matching the `__file__` name instead of raising a RuntimeError.
Maybe it's time for a CeWsModule class ? : )
i'd be surprised if we don't already have this function somewhere else.
If `self.map_states` is an empty list, should `self.result` also be an empty list (rather than `None`)? Also, is the only time `s` won't have a `result` attribute if `s` is `None`? If so, I'd prefer a check for `None` rather than `getattr`, as it better indicates the logic of what's happening.
Please update the import order following the coding style guide.
Not sure how valid this is. Safer to create & register a real descriptor, but return `false` from `isEnabled()`.
Do we need the unit test?
The text of the error must be updated as well.
Converted from deleted *.rec test.
Looks not a good name.
Again, _ReviewSummary_ would be a better name.
Doh! Of course.
nit of the tiniest nits. If possible, it would be nice to have the blank line above this still. But only adjust if you need other refinements for this PR.
Could we test to make sure the pipeline_spec_error was also deleted?
I think you can use `Time.zone.at(0)` here if you want to use the "beginning of time"
Won't this still leave it broken? If the context is cancelled, then this will stop extracting.
Is this a configuration key? Users are never expected to set this by hand.
Better use $scope than $rootScope for variables
we should keep both specs (callback and promise) until the deprecated functions are removed to ensure no regressions
I thought we discussed the null check is not necessary. At least you tried to convince me about that. If that is still true why was id added here?
When will this happen? I think better to update test to check nil.
Do we really need this interface? isn't the TO fit for purpose?
Did the maxSize increase because we are shipping both polyfills in this PR?
Why delete the debug statement?
This is never modified in the chunk reader right, we just contract the slice without copying anything?
Hmm this feel a little too vague for me. What approval are we referring to?
Please use `String#IndexOf(String, StringComparison)`
If we're still open to bikeshedding the name, what about `test_export` for symmetry with `test_import`?
This has got out of alphabetical order.
Problem was here. From MSDN: The file or directory specified by path is not required to exist. For example, if `c:\temp\newdir` is the current directory, calling **GetFullPath** on a file name such as `test.txt` returns `c:\temp\newdir\test.txt`. The file need not exist. So, we have file, that doesn't exist in fact. They are BuiltIn.dll and Operators.dll. In DynamoStandalone `Path.GetFullPath` will return `bin` folder. But in Dynamo on Revit the same code will return Revit folder. And that will be incorrect. My intent was, if file is not found => use base Dynamo folder to search for needed .xml file.
Note that all the operators are assuming `number`/`number` comparisons. - We need to do type checking to make sure, for example, that `4 > 'cat'` is a syntax error. Please carefully think about our type system and make it reasonably strict, e.g., no unexpected implicit conversions like `true > color('red')` - We also need to implement operators for `Color` types, e.g., component-wise operators. If we don't want to do those functions to `Color` (totally cool with me to keep Cesium's API surface area small) then we can just add them a local functions in this file.
bad commit message `owen by`
TODO: change the other diagnostics to be consistent with this naming scheme
Maybe pass verbose=True here? or even options.verbose?
Line is too long. [85/80]
do we really want to expose the internal object `channel.external_state.netting_channel` here? Who is the intended consumer?
could we have a constant for this value? I see it used twice in the same file (the constant could be local to this file)
A little late now, I guess, but do you think it's worth making a convenience wrapper for this pattern? Not sure how representative our tests are of usage of our API
Fixed another way in develop, ignore
Why is the monitoring URL in the spec? Should be in the global config right? There is only ever one config at a time.
I don't think you need to introduce the temporary `node` here.
purposely didn't add anything in the changelog, I'm assuming we don't want to publicize us adding old properties onto our new requests
This is vulnerable to a negative value. This issue is in other parts of config and can hold out for another PR.
Since it is a protected method, shall we maintain the backward compatibility ?
Wait, you changed it from static to this, you just have to revert your own changes!
[nit] Could be `func (*State) EnsureNoProjectsMissing(context.Context, []string) error {` but doesn't matter
Should the value here be 2 or is that intentional?
Can we add the unit like other config options?
this is a good idea to support wide-scope catching, but not needed here, see below.
Spelling mistake here. Also we should only use plural form `Statuses` if the enum fields can be combined (i.e. intended for use as bit flags that more than one bits may be set at the same time), otherwise, this should be `Status`. So the name should be `ResponseStatus`.
Should this stay as the same type and move to the same namespace `Microsoft.CodeAnalysis.Shared.Extensions`?
I just realized that the OAuth config also needs this (and is currently incorrectly using servingInfo.clientCA instead - see `GetAPIServerCertCAPool`)... do we want this field replicated in several places, or a single top-level field?
I think this is wrong, this way you will allow settings that are not in the defaults (and hence disable the validation of the parameters)
lr is hardcoded 0.001?
`GetRepeatCount` has side-effects (moves `Index`). Is it ok to drop the side-effects here?
line 37's 'import string' is duplicated with lin 25's 'import string'
Can you please revert any change which is just reformatting ?
Did this error out if you did not add :: ?
What does pingPeer do? My understanding is `peerDiscovery` returns few nodes I can connect to. Is the `peer` in the `pingPeer` function the the `bootnode` I am pinging? or it is one of peer(s) that has already been returned to me by `bootnode` (Or possibly just a test function).
Did you get rid of this line when you tried nesting all `pacpy` imports?
why there is no such parameter before?
Delete this file?
Should this be null since we won't be packaging Derby?
Doesn't really understood why we need `[NotNull]`attribute
You move the check outside the AC_CHECK_HEADERS macro, which means that the check will likely ignore the two first headers, only checking the last one, because `libacl_header_found` is set 3 times, once for each header file. Can you explain what the issue is exactly so that we figure a better way to fix it? What error are you seeing? Which header files are present on your system?
typo: `lay` -> `determine`. Add the default value here.
Shouldn't constraints be limited to binaries? It's only binaries that you generally want to pin with a lock file. Fo example, if we allow a library to pick constraints, what do we do with the dist it exports if it does export a dist?
Perhaps rename the temporary directory as well
Prefer if we imported this.
Same `Number` confusion, since we've already parsed.
Might be getting to the point where a typedef would be more convenient?
What's the purpose for this change ? whether delete conf is controlled by `ZeppelinConfiguration`, it seems not necessary to be called by user explicitly.
this is to cleanup the status quo in the DB. We have a bunch of rows that have an invalid URL, which now that we fixed the URL will result in duplicates. This doesn't impact performance as we only use this model to render HTML in liquid tags, which then it's saved in the DB as processed HTML.
Whats the source for this field? Is it CLI? Should this use `std::isspace` so that its locale aware? The locale instance can be cached to speed up processing a bit.
nit, I prefer the old code.
why this getter? whoever needs this can simply inject it
Nitpicking: `internal` is the default
this should be a `StringSet`
i think the green might be too much also i think this may be a bit cleaner if you only do the style programatically so line_props = { style: {}} line_props[:style][:fontWeight] = 'bold' if line.start_with?('--') h(:div, line_props, line)
Why did this change?
Seems 0 is sufficient to specify "no gas limit" why add null as well?
try add this consistently in: fields, ctor params, ctor assignments i know the existing code is a bit messy from this point of view, but eg keep the new filed always right after `recursiveDirWalkerEnabled `
This change is redundant.
Why is x the only one that's nullable? Is it fundamentally different in that regard from p, q, g, and y?
This is what I added. I split things onto multiple lines as the line was getting long.
Why the change from `s_crt` to `crt`?
Should not be here.
This is racey. If the head tracker has pulled down a new head between `Start()` and now, this head number will be wrong. You need to read from the DB _before_ the head tracker starts.
This can fail. You cannot remove fields that are not defined in current settings.
nit: cut the 'y' in 'implicity'
@wido the index is not added, if you look at the code above ^^ the if statement to check if index already exists with given key name and it only adds the index if it does not exist otherwise skips.
Please use `strategy_safe_wrapper()` for this - i assume it'll be user provided code - so should assume that it can cause errors.
NULL check not needed.
Could you please put these properties in alpha-num order?
Yeah... That's great, but we can use `CachingSessionFactory` and its `CachedSession` has a bit different `close()` impl. So, we must take care there about `finalizeRaw()` as well, in case we returning back to `pool`.
I think the indentation is wrong here
This method is called only by `RealTimePlumber`. When should this method be called?
Can we consolidate the permission setting logic in one place? i.e., both this class and the existing package existing permission-setting logic need to know how to set permissions on a file based on a spec. So if we had a `SpecPermissionSetter` class somewhere, or just a `set_permissions_by_spec(spec, path)` function, we could avoid having to `chmod`/`chgrp` everywhere.
I think this is leftover code from one of our earlier iterations.
Why are we storing this as a string? We should use whatever type the OCI spec uses - probably an int? Parsing should be done when we set the umask.
/me has no idea what this syntax is doing !
Please put this method just below `getAncestorGroups`.
even if we let this sit in here its still valid html and will not cause any issues, that is why I left this as such originally
This import should be combined with the `log` pkg above.
hasExclusion() -> hasExclusiveOptionals() ?
These registries are used as insecure registries - call the arg that to make it explicit
Here as well. memcpy of 0 bytes is a well-defined, only memcpy 0 bytes from NULL is to avoid.
This statement looks to be unnecessary.
@cvializ dependency check doesn't like this, let's move `PlayingStates` enum to `video-interface`
We don't need to add an overloaded method for `putRaw`. Just add the new parameter to the existing `putRaw` method and use null value to represent the no ownership assignment behavior. BTW, rename `address` to `owner_address` please.
I'm tempted to say that this should be `publicImageRepository` or `publicPullSpec` to set the longer term direction.
The callback is necessary here so that a new context scoped to the renewer can be passed through?
I've looked through the conditionals here, do we need a special logic for that value? On the first run, the value of the variable **s** for the UUID won't be found in the _delta.Strings_ so it will be added and the next runs will never change that value.
Why the parameters are version, url and name? not interfaceName, group and version?
Since id is computer-generated and globally unique, I think this block and the warning can be removed entirely. Previously, when the key was human-defined (`name, project, version`), it was a more helpful check.
Since we have an omitzero for toml, don't we want an omitempty for json as well?
Not to be confused with `javax.tools.Diagnostic.Kind`.
Definitely like workers not knowing about decorators!
Type annotations could instead use `../types/date.Timestamp` for less-frequently used typedefs, but this felt common enough to merit the import
Can we make this `4.0`? We still support MongoDB 4.0 so we should use the oldest supported version, I think.
replaced with `email_link` because this is a HTML template
So it seems like some of the changes here are meant to address `defaultValue` handling in the case of `JsonIgnoreAttribute`? Is this the expected behavior when `Y` doesn't have `JsonIgnore` and we deserialize `{ "X" : 1 }`? It's clearly something we should be fixing but I think it's required to fix the bug reported in #59936. I would recommend splitting this PR into one that applies a minimal fix for #599396 for GA backporting and a separate one that addresses default value handling in 7.
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
nit: awkward formatting
is configFile still being used? Ideally should be removed.
Doesn't it break a contract? Two objects with null IDs should be equal if ID is a part of equals and hashcode. With this implementation it is false.
These `Delete` functions usually work on `NULL` pointers, (doing nothing). I would add that `if` here, or an `assert(wrapper != NULL)`.
This interface represents configuration properties for Update manager,
What's the side effect of saying that `cak` is `en` - we don't support it on addons-server? There isn't a similar language we can use instead, I guess?
Don't we call it the service?
nit: I think our guidelines prefer explicit imports
You can remove this import now.
How about just `return kv.regionKV.FlushRegion()`.
`timeFormat` --> `timeSecondsFormat` (?)
I'm not sure what this means, is there a way to reword this?
you might want to add this concurrently, I don't know how big the production table is but still...
This function name is out of date now.
description should be fixed, root is now required, not 'Administer System' permission... or is that the name we give to root?
This could be re-implemented as a django-cacheback job, and would make it more like other cached value code. Different PR.
Why was this change made?
I believe the intention here is that ECR may eventually support more than one registry per AWS account, but that is not currently supported nor does the `aws_ecr_repository` resource import require the leading registry ID (e.g. AWS account ID). So this seems okay.
maybe now is still not the time...but I think it would be great if we could make these auth contexts into constants? Making them constants helps remind that they're finite and enumerable
I'm confused.. is that a typo on the name?
Should be server?
How does it get set initially? Is it only through `updateSrc_`?
Could `roles` (and `permissions`) be initialized with `Collections.emptySet()` (or `Collections.emptyList()`)?
Hi @sharadkjaiswal, I have tried to work on this locally but I do not have `Revit 2016` installed, so the code I write might be error-prone (it cannot be built). Since that is the case, I'll suggest code changes directly from here.
is there any way we can test this?
I think it would be cleaner and preferable to calculate the full prefix (combined timestamp and indentation) once, prior to doing the join.
I thought that external user id was saved in `wpcom_user_id` user meta, and it looks like we are trying to match that here against the local `id` instead? I'm probably missing something, but I'm not sure what. :)
~~I added this before...~~ In `resources-impl.js`, never mind.
sorry but SAO has nothing to do with Player list. it's not responsibility of an AO property to update player list
cast to ArrayType
I think the formula is correct. We take the mean for the 0th row in the first case and the 1st row in the second case.
please put after the destructuring
Wish I had a better understanding of `unknownValue` usage in select + options. Had to revert the spec back to its form in ef894c87eaead76d90169113ab6acc9287654ea3.
c/p err (was placeholder for something now remove it!)
Honestly I feel you won't need two files. But that's totally up to you : )
This can still be `net.get`
I think there is one other place we use the descriptor (for the return value in locals). Should that also be getInternalName() and/or use describeType?
Same about the guard clause.
c/p err (was placeholder for something now remove it!)
shall we only catch the expected exception?
No this wont work. We need to make sure only the username is actually recorded, so this method here can do its job. You wont always have username+password, because you may have a different authN handler that does nothing with the password.
Could you please move these validators into the resource's source file (`resource_aws_kinesis_analyticsv2_application.go`)?
can we have message as `using entity name as fallback`?
Intentional blank line.
This will never be true because the option name is "`ULTRA_LCD`." That's been replaced in code with `HAS_SPI_LCD`. But note, this whole block of code (all lines from 67 to 1284) is already wrapped in `HAS_SPI_LCD`. So  I think the right condition here is probably `HAS_LCD_MENU`.
Is there any way to prevent the situation when somebody forgets to update `Strings.emptyToNull()` to `NullHandling.emptyToNullIfNeeded()`, or uses the "old" method in some newly written code?
Please remove this
@n3nash : Is there anything we need to do to handle backwards compatibility with commit metadata written in older format. Would this change automatically handle that ?
_list_paths here doesn't accept 2 arguments :)
our goimports are going to fight over this...mine will move it back to where it was.
"Current frames" here means frames active when the variable is first initialized? Can you explain this in more detail here?
`io.Copy()` could be added to the project `.errcheck-exclude` file.
was this removed due to lanes? will this cause issues?
Shouldn't `exclude` be an optional argument here?
is this needed ?
I don't think this is valid, afaik there's no guarantee that a GCHandle's id will not be re-used
Could add to the project `.errcheck-exclude`
Rename `default_address` to `billing_address` as it's no longer a mere default.
I don't think this is valid, afaik there's no guarantee that a GCHandle's id will not be re-used
I would make _prepare_write_metadata a private function like you did for _check_event_id to avoid adding a new method. `metadata = _prepare_write_metadata(self.metadata)`
The result of this call is unused. I don't think it should be here.
I think you can just inline the implementation of `t.stop` now.
just asking, but given that this method now relies on the context to answer, can we still systematically return `true` in the `hasCacheableSupportsMethod` ?
I think if `valuesConfig` was `i.setOptions` + all of the existing `fmt.Sprintf` calls for the explicit flags (in that order), then you wouldn't have to manually override the value from `--set` with the explicit flag since Helm would do that based on the order (not 100% sure about that). That would eliminate the need for `overrideLegacyArgs()` where the variable/chart value association is duplicated, and maybe even `parseSetOptions()`.
we may want to check using "typeof", so one can input false too
nit: Are these changes actually necessary?
This is the thing that would benefit from the ``_conan_collaborators`` mechanism
I think this should be done after `m.Accessor.Remove(id)` as we use negative caching. The cache should first be emptied for this entry, otherwise it could happen that a `nil` value is read from cache (no error) although no entry is there.
Here we need to use a locally created suite because we need access to the latest Event published.
Typo (`currenet`). (GitHub won't let me make a "suggestion" here for some reason)
This is serving to 0.0.0.0, correct? Does it want to be limited?
Since we're not wiring up endpoint customization in the provider configuration (see `aws/provider.go`) we should either implement it or remove it here, e.g. removing this line, `awsRamSess` and using `client.ramconn = ram.New(sess)`
why need hello here?
Should there be a call to `set_repo_permissions` here too?
Same problem with exceptions from `std::stol`.
Same nit here about import grouping (which looks like was already not quite right). If you don't fix the imports that were already grouped incorrectly, you should at least stick a newline before this new import.
`from builtins import object` means that this will implement `__nonzero__` for us if Py2
NIT: We have been refactoring such case to `if (other is QName that)` to avoid another casting
NULL check not needed.
I might have missed this somewhere, but should the content type be changed? I thought "004" was the right one for Prometheus?
It was singular in purpouse, let's undo. Single test environment consists of several docker containers. Let's undo. Also please capture rename refactorings in separate commits.
our goimports are going to fight over this...mine will move it back to where it was.
Shouldn't constraints be limited to binaries? It's only binaries that you generally want to pin with a lock file. Fo example, if we allow a library to pick constraints, what do we do with the dist it exports if it does export a dist?
Prefer single-quoted strings when you don't need string interpolation or special symbols.<br>Space missing after comma.
1. Maybe better just have hasfields []string? 2. And maybe rename it to requiredFields? In this case would be more natural "requiredFields []string"
Maybe use 2 different metrics? 1 for scheduler limits, 1 for hotspot.
Was thinking if having this in its own struct could make testing easier, but haven't check if that is actually true.
Both of these functions should be deleted, since they aren't being used.
I'd be tempted to simply `t.Skip` this test since it's always going to be probabilistic to some extent no matter what we do here.
[nit] Could be `func (*State) EnsureNoProjectsMissing(context.Context, []string) error {` but doesn't matter
Would be better to qualify it as PurgerCycleCompleted, to identify which cycle the event is referring to.
why not have a no-op `serialize_value` in the descriptor base class to avoid this hasattr?
You shouldn't modify public APIs. Furthermore, these parameters shouldn't be part of this method. The HiveRegister implementation must already know the metastoreURI, while the azkabanUri should be injected into the EventSubmitted.
This flag seems a bit cumbersome to understand, as we already have running flag to control the looping.
Is it ok to be discarding the proper type like this? I suppose it doesn't matter too much since we're only using the proper type in an error message, but it might be nice to be consistent. There were several other places below where we did the same thing. I spot-checked a bunch of them and they all largely looked fine, but it could maybe be worth double-checking. Perhaps this can come later as we convert our various helper functions to work with ProperType instead of Type? (Assuming we actually do want to do this.)
what is this other string used for? anything?
Style/ClassAndModuleChildren: Use nested module/class definitions instead of compact style.
Should this not be placed after the _kb and _user functions have processed it?
We can't really change the signature of this method, because it has to be unified with the other exchanges. Neither of them really have a `symbol` argument there. Need to think of a proper workaround for this or remove this entirely.
I am guilty of this a lot, I'm afraid. Since Python can only return one thing (though that thing may be a collection of other things), is the `-` necessary? Happy to do whatever you say is right, I just didn't know.
That's an incompliant formatting! Side note!
Extra empty line detected at method body end.
Any reason we need the extra catch block?
What does this mean for all activity use today where it's not being disposed? Are we introducing leaks?
Why remove config for labels and annotations?
what if d0 equals to 0?
remove this line?
Please name this `$variable` instead of a shorten version for it.
is it just me or...are these two lines the same?
`request.http_headers.set_default('content-type', 'application/xml; charset=utf-8')`?
either all of these or none should be thread local
Strange. There is new line at the end of this file in my clone...
I agree this new style is cleaner but my eyes aren't being able to see the NPE fix - is the map bring mutated between containsKey and get previously?
`Invite#warnings` reaches out to alot of associations so we need to ensure that we eagerload the associations upfront in case this serializer is ever used to display a list of invites.
Wait, you changed it from static to this, you just have to revert your own changes!
This is wrong... a @classmethod is a method which gets the Class as first argument (`cls`), not the class instance (`self`). If you use `self` as first argument (and call it with `self._search_object()` - then you need to remove this decorator. A class-method would be called using `IResolver._search_object()`. The only reason your code works is because `type_name` is also defined as class attribute, and python does not care about the name of the first argument (although i would expect either mypy or flake8 to scream for this - which it doesn't and is a bit disappointing ...).
Just follow how it is done for other DB types like MySQL, Postgres etc. No need to do a separate track for MSSQL
`crypto` module isn't imported.
explicitly use the std namespace with `std::` instead
General question, since `authenticate!` checks doorkeeper plus API key plus current_user, why cant we just get rid of this method `authenticate_with_api_key_or_current_user ` and use `authenticate!` everywhere in the API?
That's pretty inefficient -- we read the source code in text mode (using the default encoding) and then `compute_hash()` encodes it back to bytes (using `utf-8`) before hashing. I also believe that we have the module source code already as an attribute in `State` in most cases so there's not even a need to read it from the file (it will be GC'ed by parse_file()). Also the source should probably be read using read_with_python_encoding() which does a few tricks. Finally we don't need this hash to be compatible with the interface hash (which is why compute_hash() exists currently).
@libinyang You are just removing the error case while still keeping the trace_dma_error. That doesn't seem to address the root cause, does it?
Should we unlock if err != nil?
Another `path` clash rears its head   For consistency with other parts of the codebase, could we call this `pathModule` instead of `pathmod`? A future cleanup is forthcoming.
need check err then discard and close the body.
This seems unrelated to the bugfix -> don't mix cleanups with bugfixes.
Let's try to keep the imports alphabetically sorted
Can you trim the text after the `unquote` call? The case was that a user could use `header(' k ')`, and that key should be `k`. The `trimToNull` justs makes sure that `header(' ')` is null.
hasExclusion() -> hasExclusiveOptionals() ?
I believe that this mutation can be also used for draft order, which will raise an incorrect webhook event
without this, the F4 and F1 board now fail (if you also enable all the adc stuff within conf files)
Thanks for cleaning this up! Actually, I wanted to do this as well while introducing the generic sorter, but then forgot about it.
Can json_encode really be exploited for this?
I think it's not recommended to directly invoke `createElement` function.
`name` will always end with "." when reaching here, so these codes are redundant.
do you want to add the curly brackets here and further down along the lines as well? Just as the file is open already.
No need for an index here? I don't think there is but double checking.
this check for `false` for the env variable needs to be done **before** escaping
do you really need the variable $bundles ?
This should work, but I think it should actually use `Long.MIN_VALUE`. So, more generally, I think this could result in funky pagination behaviour as items transition from queue items to runs, where the page boundary lies at the point where items transitioned and the user clicks at the right time - they'll appear on both pages.
Some of files referenced in test proj and failing build
Why the parameters are version, url and name? not interfaceName, group and version?
`if (method != null && !method.isAccessible()) ` is more readable
Why are these lines changed in this PR? Doesn't seem related to this task.
Need to become private type?
It's hard for me to know the core difference between `check_and_enqueue_assets` and `enqueue_assets`. What checks are those? In what cases we do/don't need them?
Does this need to be public?
Is this new if check covered by any unit test?
throw IllegalArgumentException < 0
That's a change in behavior for which we probably don't have tests. Don't follow SonarQube here.
IMHO, we also need to refactor the arg parse. But not in this PR.
Sorry to be picky but, could we also remove the corresponding import of the Parser class? Thanks @dpiparo
why is `checked` removed here?
There are two other occurrences in the file, can you fix those as well?
Final newline missing.
Surely we don't need to set `w` to 0 here (EDIT: above), if this function is going to calculate it immediately afterwards? (I wonder if GCC is smart enough to optimise that out) IMO it seems like it'd be more efficient to have `convert_rgb_to_rgbw` take the individual RGB values and return a W value or a `LED_TYPE`, so that the RGB[W] values are only set once per LED. But that may be a job for another day.
This seems odd; if the size is non-zero, we terminate it immediately rather than at `size - 1`?
Just an interesting observation but we were calling `cannotSee[username]` in line 55 when `cannotSee` is an Array. I think we fixed that line now that this is an object now.
Is this TODO supposed to be done in other PR?
a hotfix? if yes. FIXME
Is 0 a valid containerID ?
Whether -> wether
Why is it synchronized? I don't see it doing any concurrent changes
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
nit: assign a variable like `isMaster := true` and pass `isMaster` to `CreatePublicIPAddress` so it's clearer to future maintainers what that bool arg is for.
Again, no need to check instanceof here - can just call toString()
Add a note that MNE-C behavior is `'and'`. I'm +1 on a deprecation cycle with `None -> 'not_and'` to eventually get `and` to be the default. @agramfort WDYT?
This could be renamed to PGPOutputMode or similar. Also related getters/setters.
This import should just be `"context"`.
missing Upgrade451to460 class, I'll add that.
w[0] = _mm_set1_ps(filter_jj[0]) * weight_sse2(px, pix[0], sharpen); w[1] = _mm_set1_ps(filter_jj[1]) * weight_sse2(px, pix[1], sharpen); w[2] = _mm_set1_ps(filter_jj[2]) * weight_sse2(px, pix[2], sharpen); w[3] = _mm_set1_ps(filter_jj[3]) * weight_sse2(px, pix[3], sharpen); w[4] = _mm_set1_ps(filter_jj[4]) * weight_sse2(px, pix[4], sharpen);
As this is a builder, we should just make a deep-copy (not use `Collections.unmodifiableList()`)
Why does the suffix need to be random if it is generated just once? Won't something of the sort `synthetic` as a suffix suffice?
This part is not deprecated, it means that the user has started the flow and went down the funnel towards the connection. In this case we mean that we're checking whether the local option is set to `true`.
`System.Delegate` and `System.MulticastDelegate` marshaling is not AOT friendly. We cannot tell the delegate type to use during AOT compilation for these cases. The marshaling logic is suppressing the AOT warning for the delegates, but this suppression is not correct for the abstract delegate types. This change also needs a matching change in the marshalling logic to avoid suppressing the AOT compatibility warning for these cases.
What does pingPeer do? My understanding is `peerDiscovery` returns few nodes I can connect to. Is the `peer` in the `pingPeer` function the the `bootnode` I am pinging? or it is one of peer(s) that has already been returned to me by `bootnode` (Or possibly just a test function).
I vote let it crash due to an NPE. That's probably the only way the root cause will get fixed. :smile:
Ok, let's try to improve that. We have: - click (no wildchar) - ctrl-click `|%` at end - shift-click `%` at end You changed the shift-click to use `*` but the tooltip is now wrong. I propose to keep `%` at end (which is uniform with all others collection kind) and check if we end with `%` and not with `|%` in the code above. Should work too, and will not introduce a new wildchar.
Why only read() gets this treatment? Any other read() signatures, write(), etc? If we're breaking, let's be consistent. On `man 2 read/write` I see ssize_t, which is ~ signed int if we want to follow a standard definition, too.
hmm - I'm thinking this could start getting a bit confusing, could we add a /// summary to this property to explain what we mean by default?
Would be nice to extract it to a separate method. And combine these 2 conditions using `Predicate.or()` if possible.
Adding space here generate travis code style errors
This breaks the thread safety. `plugins` is a copy-on-write set, so it is safe to add plugins after the container is initialized. But `closeablePlugins` is a plain HashSet.
Copy/paste (should be `DRACULA`)
Would be worth making these a bit more realistic? I'm assuming that `key` is the feature name `annotations` and value is some sort of flag (`true`?). I expect there's a good reason, but why isn't value a boolean?
Why is this set in three places? It should be enough to set this in one place.
missing new line.
Is this an unrelated bug fix or was this broken by the precise closure-capture somehow?
It would be better to move these lines into `org.apache.hudi.xxx` segments?
This interface, including this field, should be immutable `{ get; }`
we'll want for async too (realize you might not have started converting async yet, but wanted to call out)
Why is the nullablility flow changing this from private to internal?
` // We check for flush after each object property and array element is written to the buffer.` Should we also mention dictionary values?
Not sure about this... when I tried it and I did not see any update or any message about I am trying to compare the same stock... seems that the app is not working... I guess I prefer the comparative between the same stock, even if it is redundant... other @bokeh/core thoughs?
What is the benefit of this change... being able to trim out SR.EventSource_ToString if EventSource isn't supported?
missing empty line after this. is it possible to add a php-cs-fixer rule?
@dmitsh do we want to use this? There could be a field on `instrumentedCache` to call either this function or `instr.ErrorCode()` for Redis or Memcached. But I'm not 100% sure we need to decode `ErrNil` now.
@reddyashish could you simply revert this file if it isn't involved in this PR.
delete this line...
didn't know what to_s(26) meant, now I know :D
@IntelligentQuantum wow... big diff here ^_^ where are the actual changes?
The matches are not _returned_ by the `expression` argument. How about something like: > determining if values retrieved using `expression` should be...
For a "files" review, we might want to only review one file. That's not possible using the forms (using the editor tools), but for example the `approve_addons` management command and the `auto_sign_file` helpers only sign a file at a time.
Maybe pass verbose=True here? or even options.verbose?
Was this intentional?
`canonicalize_path` comes from `spack.util.path`, not `llnl.util.filesystem` doesn't it? There are more of this reference below.
This is going to be common, should we special-case `Info` so we can omit the last two args here if the second is passed as `"info"` (i.e., `_validate_type(info, "info")`?
Maybe consider to make a unique import from "yoast-components", currently there are 3 of them at line 8, 10, and 15.
would you like to make it `self.etag = response.get('etag')`, I feel it's a 'typo' in the existing code
Can we add a TODO here explaining that we have this special handler because of the issues you mentioned in the PR description?
Unfortunately, this will break on Python (KeyError) if there's no `success` or no `message` key in the response. That's why we need to check if the key is set there first.
spacing around the "+"
Refactoring because the name `EsClient` does not fit any longer.
this is not needed In fact it is removed in #5154
You've lost the "replace" error handler here, so this has introduced the possibility of Unicode errors...
Is there a strong reason to store this information? Where possible, we should try to avoid storing intermediate state in fields when we could pass it as a parameter. This prevents us from running into issues where old state is erroneously hanging around.
"NodeNotInSync" is better
Note that `AnyTimes()` is greedy, so you can't change the expectations for this mock call once `AnyTimes()` has been set. This is another reason I suggest not initializing mocks in these fake functions but rather directly in the test.
Same, you do not need to change this file. Revert the changes.
These lines are just a more efficient means of accomplishing the same thing (and didn't seem any less clear to me), but I can revert if people think it's cleaner the old way.
why do we need to get rid of the IDistributionPolicy interface?
Sorry I know this is a hassle   but can you please rename all these to: * function names: `resourceAwsBudgetsBudget` * resource itself: `aws_budgets_budget` This is so we can: * Easily keep the service resources grouped together (e.g. `aws_budgets_notification`, `aws_budgets_subscriber`) * Prevent confusion with any other AWS service that may refer to a "budget"
What exactly is rawStatke? If it's the effective stake, just call it EffectiveStake here.
These should only allow the legal values of `user`, `group`, and `world`, then you don't have to do all that error checking and `ConfigFileError`s will be raised automatically.
`forName` (or at least `for`); `of` is suitable when creating value-based object and providing the value for it, and not suitable for lookup-kind operations
nit: Can't we leave this as `const` since it is an obj?
just taking the opportunity to name this one to match the actual addon name
Can't do this... SharpDX is only for DirectX platforms.
IMHO it does not need to be public
@uranusjr Can you confirm whether it's okay for this to return a redacted URL?
High level flow step 1: we start here and transform responses
Can we avoid the variant and generate both static and shared?
I'm really questioning if this method should exist
if there is no reason to have 0 as a limit, then we can use 0 as the default of no limit?
We don't tend to put defaults in consts; we only have them mentioned once in the flag setup.
did you mean to import `errors` or `pkg/errors`?
I wonder if we actually need the `resolvedTypeParameters` in this method. I think we don't.
Moving it to Cython means exposing most C structures to Cython and staring at tons of generated C code to see that it actually does the right thing (like in #891). I wouldn't do it bundled together with a functional change.
we now use `TeamMember.Status` throughout
Is there a importVM(ImportVMCmd) method as well? or some other solution with parameter object pattern? This is not readable in declaration and won't be better in use.
Did we update the Sandcastle example?
please use braces - this code is very old, that is why it does not follow the code guide.
`canonicalize_path` comes from `spack.util.path`, not `llnl.util.filesystem` doesn't it? There are more of this reference below.
this should be `elif` now that `if not name` doesn't throw. should be moot since get_project should always return a string.
Does this need a NotFound case?
Can you replace the -2 with $object::STATUS_RESILIATE ?
I didn't like that we were dereferencing these maps inside the func but not protecting against nil
nit: cut the 'y' in 'implicity'
You can remove this import now.
Why this change? As I understand it, the previous behavior is roughly equivalent to returning unknown for HMV. (Because it would return false, but complete is also false.)
Can we remove this blank line ?
This class is used by the unmanaged reflection stack. We should double check that changing the type's vtable layout won't break anything. __Edit:__ I looked through _debugdebugger.h_ and _debugdebugger.cpp_ and didn't see anything that referenced the vtable layout. The only references seem to be to the fields themselves, which aren't changing. So I think we're good to go!
spurious space: `, ]`
This import should go couple of lines down.
Looks like we're just moving this import from one line to another and there are no other changes in this file. Can we undo this change to minimize noise in the diff?
Do we other places that needs this change?
Why are these two changes necessary?
why is DynamicCertificates a pointer if it is linked to tightly to SecureServingInfo?
Might be smaller if you use object destructuring and an extern instead.
Just formatting changes. Remove it from the PR
any reason not to overload the LegacyNodeName - maybe note that this is property is only valid for NodeModel dummy nodes?
Should be min initialized as LONG_MAX ?
nit: this, and other similar instantiations could just use `JSONPathSpec.DEFAULT` I think
This is really becoming ridiculous, but it's not your fault, created #12703 to track this.
Since we've changed the type we allocate for this from ObjectCollection to TokenObjectCollection, we should also change the field definition to use TokenObjectCollection. Similarly for other instances of TokenObjectCollection and UnvalidatedObjectCollection below.
can we avoid initializing it on a global level? we are slowing down the basic flow this way for a lot of commands that don't need to know anything about plots.
Could you revert changes to additional files
Suggestion for better naming would be appreciated.
Why lower this?
spurious change, revert?
I was thinking about adding the rest when we'll implement them, but maybe we can add all options now.
If we don't support it, this should also report an error message. (In error recovery mode, returning the upper bound sounds fine.)
Make sure that you add the defines here in alphabetical order, too. Same applies to other files.
Yeah I'd rather this not be made part of WindowRoot. Should make a new control after window root and use that instead.
Why is this not just `post` like deployments? Will we ever add `postPush`? What other possible `posts` are there.
The `self.app.cache.reset_default_profile()` is done when `force` and `else`. So it could be extracted from both.
Those modification are not anymore relevant to your fix.
We are only testing for the successful load of this file with `window.test` variable, rest of the logic are irrelevant. Can you remove those ? Thanks!
don't think this should make it's way up to the user
Lack a testcase where the symbol in the extend clause is not known (just use a dummy name)
How do you use this?
do we need to open an issue to keep track of this potential problem?
Maybe this function (`main`) is getting too big?
After all we went through before, this really should be "weaveworks/loki".
Was this for debugging?
i think this can stay private for now at least
This means that it will change the behavior of a note with a field named "FrontSide". That's fine by me, but should be noted in the commit message. Or maybe even better, a unit test should be written, ensuring that we clearly see that Fields with name FrontSide are ignored
ditto for this
Why not use the 404 code?
minor, and it was already like that, but could be a bit more readable as 'ErrorString' or ErrorNullable' , etc. 'Error' seems to heavily suggest the 'error' type
Can I ask the reason to support `<amp-embed>`. This change migrate the `<amp-ad>` to using `<amp-embed>` instead. Thanks.
Unrelated, but this is not the best error handling. At least, we should log it with slf4j rather than print to console.
We need a test for the case where we use the headers for `jsonToObject` for a TestPerson.
Unused method argument - team. If it's necessary, use _ or _team as an argument name to indicate that it won't be used.
Moved this down to make the revert more complete, but if the other reverts solve the Z position problem then this may turn out to be ok moved back up above.
We can keep `!==` for the second expression - that shouldn't be an issue. Parentheses (again on the second one) could be removed though - counts for the next two instances as well.
Instead of setting `self._egg_info_path` explicitly everywhere, can we turn `source_dir` into a property and then set `self._egg_info_path = None` in the setter?
We need to be careful here when it comes to calling `get_access_token` So far the method has a `suppress_errors` arg by default set to `true`. What worries me is that if something in that logic changes and the method returns a `WP_Error` our `bool` cast will return `true`. I guess it wouldn't hurt to add an extra check.
no need empty line here
We solved a ton of bundle conflicts for commons lang and no longer use it in the project. Please rework or without requiring it
Those modification are not anymore relevant to your fix.
ugh, this is an API break, what about introducing a new slider class that inherits from `sliderBase<long>` ?
This is to protect from broken .equals() implementations which don't check for a null param ?
This guy is still giving checkstyle errors. To run this locally you can use the contrib-check profile when building. I usually do this from the lowest module I'm changing, so nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors: mvn clean install -Pcontrib-check
Same `Number` confusion, since we've already parsed.
I think this file got committed by accident.
Is this a string because this is a `@classmethod`, so the type doesn't exist yet? I couldn't find any mention of string-types in Mypy's docs.
@chrisvest where these not used anymore ?
This one is wrong, isn't it?
Worth doing any validation on this? Making sure they gave us a positive integer between 0 and 65536, exclusive?
Put one space between the method name and the first argument.
where is this used?
@oconnor663 this broke `keybase sigs list`, fixed with a specific implementation that wasn't a generic.
Did we update the Sandcastle example?
Let's use `connectedClients *atomic.Int32` instead. It makes it clear that this is accessed atomically, and it also avoids possible alignment issues (although that's not relevant for 32-bit values I think).
can you create the IsLocal function?
nitpicking: I think the phrases should be english phrases, like "DeleteWebhook deletes a web hook" (note the ending `s` for third person subject being the function)
With the changes being made, perhaps now `srcMain` and `testMain` should be renamed to `srcMain` and `testMain` to make their intent clear (since readers can no longer count on the type - just `String` now)
Here's the more detailed message we're throwing now.
Did you get rid of this line when you tried nesting all `pacpy` imports?
Curious: why isn't this needed in master?
@kunalspathak I made those changes in an attempt to improve overall clarity, however I can't help but think that there might be a legitimate performance reason for using `goto` instead of inlining the return statement.
A little late now, I guess, but do you think it's worth making a convenience wrapper for this pattern? Not sure how representative our tests are of usage of our API
I don't think it's necessary to include the second `is_string()` here -- $element is the key from the array, so there shouldn't be any issues with it.
It may be a list of RunMode's (RunMode.DownloadData, RunMode.ListPairs etc.) corresponding to subcommands and, therefore, to the start_* functions. This just a note, I'm not sure if this is better than this list...
Should we stick to this default value? /cc @normanmaurer @tea-dragon
This is the thing that would benefit from the ``_conan_collaborators`` mechanism
I think load from etcd is not necessary here.
Something strange with formatting here
I'd go with prepending `(inactive) ` rather than appending, thinking about it - `name` can be up to 255 long so it could be easy to overlook.
interesting, might be better to put put `new_cert[0] == '\0';` at the start of the code, because this requires the whole certs be initialized. maybe.
In what use case they are not equal?
You can remove this import now.
we can use a bare-except here too
Please delete all the test_util.is_sycl_enabled(). The point of having test is to expose problems, so hiding them is defeating the purpose.
Would RouteToSelf be more meaningful?
rubocop got mad at this lack of newline
Can this be removed?
This is in general an anti-pattern, you shouldn't pass to a self.method a self.variable
Isn't this implied by the ordering of `ss` in `newPriorityQueue` can this change after the fact?
Wouldn't we achieve the same with passing `user` to `defaults` in the original implementation?
Wondering if it can be used for `DECIMAL` columns as well?
I think load from etcd is not necessary here.
@hyperxpro why should this be a valid fix ?
There must be a fun story behind this one :) Would love to hear it if you have some time. Good change though.
Doing a check for list to avoid converting a string into individual letters, which was happening with one test case.
which helpful errors will we not see anymore due to this?
Warn and not error as it might be legit to not find a dependency in one repo (should fallback to the next)
`render_views` slows down the tests, can we enable this for just the few tests we need it in?
Is there is a default value, why not use a primitive value with a default of `false`? Then, you do not need these logics in a POJO get method.
We should probably not call this twice. It's called anyway in the "init" fn.
description missing from doc block
As far as I can tell, this line not being there was causing issues with this window. Without this, the bound user interface was never properly closed. The fact that `(...).OnClose += Close;` is duplicated in just about every bound user interface and leads to bugs when omitted is probably not great.
I think this can also take `children`
Does it even differ from `sendReset`? Do we need an extra variable?
This file should be CI-agnostic too, right?
I don't think we are supposed to increment Copyright years.
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
Is this the lock for the logger struct or for outputs?
while you are modifying this line, please add a blank after declaration
how is this used in the API? I could imagine a name like srcStore or srcImage would be more appropriate.
@pmrowla Looks like this was a typo?
So Beam SQL rand is always initialized with the same seed? Is this what we want?
This can be simplified I think, the extra join isn't likely needed
nit: sort alphabetically please.
I would suggest to call it simply `conf` (or `config`)
I would avoid environment dependent code in unit tests, it can interfere with another process or test. It's better to mock `canBind`, ie if you want to check the class doesn't provide occupied *1024* port, make the method stub of `canBind(1024)` return `false`.
Fixed another way in develop, ignore
This is new. Meant to make it easier to debug. We use `str()` instead of `repr()` almost everywhere, so this shouldn't impact any pre-existing code.
I don't think this is used?
Another `path` clash rears its head   For consistency with other parts of the codebase, could we call this `pathModule` instead of `pathmod`? A future cleanup is forthcoming.
I think Message and Reason should always be updated together, so i suggest moving this up into the individual case statements where Reason is being reset.
What do you expect `attributes` to be for its type?
Added this 2nd agent pool to prove that the `GetAgentPoolZones` go template func will always return a yaml array string representation of the *1st* pool that has a zones configuration. I think the way that csi disk drivers is configured already suggests such mixed-zoned cluster configurations are going to encounter edge case failures, but choosing the first pool is what we've done historically, so this follows that pattern.
The common style is to throw Exception ...
Let's create `hash_info.to_dict()` here?
Can you move this up with OS?
Wouldn't this make the `DefaultStreamCreated` marker obsolete?
A more reasonable default timeout is 30s not infinite.
Same as above, remove the type here to avoid BC breaks.
this is same pattern we used in 4.14.0/4.14.1...
could you explain the logic of this function?
Do not use parentheses for method calls with no arguments.
can we renamed the field itself also to data? Otherwise we have inception below :-)
can we just put this code in TorchAgent instead of in TorchRankerAgent and TorchGeneratorAgent?
In the generator we define always the LTS version, not sure we should downgrade here?
this is a bugfix? But it will break scripts, no?
How the code worked previously?
please rip out into an entire new class (probably test_message.py)
This line needs to be changed also.
I think these are two very different kinds of errors that are unrelated. An error that happened server-side, resulting in the `error_message` value in the `result`, should not cause an exception to be raised on the client side. If an exception is raised on the client side, it shouldn't ever be explained by the `error_message` from the server.
nit: Any reason to use numpy's functions instead of those from `math`?
I've just found that removing these methods is actually SPI-breaking :-/ It was a bad SPI arguably, but still. Something to bear in mind for the future. (And, well, I'll dig out the `name` out of the `image` :-) )
Why change it on the right hand side, but not on the left? while it's passed to the message below - it's not visible to the user after it's converted to the message...
Is this meaning specific to an address object? Is this field visible in the UI?
Should this be destroyed in the Scene's `destroy` function?
I have no idea what happened here!
I have updated the commits.
I am not opposed to this strategy, but it probably makes sense to have a test that confirms that `FakeAhoyTracker` and `Ahoy::Tracker` have the same interface. As is, I can imagine a scenario in which the ahoy lib requires new/different args for `initialize`, for example, but the specs still pass without a change. Am I making sense?
can we simplify this test while keeping the tested behavior?
nit: you can merge both lines above as `checkNotNull` will return the given argument
Is it safe to remove an existing property? The existing code should not sort result anyway, or should store last sorted field value to paginate properly when docs with the same date split more than one page. So I think it's safe..
Is it a breaking change? If yes then it would make sense to add a note about that into `CHANGES`
except iterators, I'm not a big fan of one char variable names, even when they've a short reference like this. But `\_()_/`
Why can we get a match in the middle of a literal string?
Since we are renaming this, I 'd just like to suggest 1 quick test of reading a old commit metadata that contains the filed `fullPath` using this new code and making sure nothing crashes.. It should n't given `ignoreUnknown = true` , but something to test out. cc @prazanna
Tricky :) Shouldn't we cache that one?
I'd recommend using `Ints.saturatedCast(MINUTES.toSeconds(5L))` here or create a constant `private final int SECONDS_PER_MINUTE = 60;` which can be multiplied by the number of minutes (of course we also need `SECONDS_PER_HOUR`, `SECONDS_PER_DAY`, and `SECONDS_PER_LUNAR_YEAR`).
If it is not used can we not remove it?
Sorry to be picky but, could we also remove the corresponding import of the Parser class? Thanks @dpiparo
why is this not needed?
Do you need to declare this variable globally?
Sorting by a boolean is a little odd.
key should be snake case.
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
Can't the `index` be `0`? Further: is this error comes from predefined use case, such as swiping or auto-advance/loop? Or from user-defined user action (`on` action). If on-action - this should probably be `user().error()` if from predefined behavior - it should probably be a `dev.error`.
again, why removing?
Store source.values[i] in local variable so we can re-use it if not null and not need again to lookup the array.
I know it just test code, but I would make this match what gets used in the example config (if you change it).
I don't think it's right to check `Object.keys` here-if the user passes the empty object, that's an invalid template, and that case will get caught by the `!item.label && !item.role && !item.type` check you have below.
Do not use parentheses for method calls with no arguments.
Need to add some validation around this to ensure it is present (defaulting should ensure it is set to cluster.local) and that it has the expected format (there are existing validation functions for validation DNS names)
Does it make sense for these consts to go into `CasWebflowConstants`?
Nit: plz make this method name consistent with the other `initialize` ones
Shouldn't this be removed from the list if this is the case? Why's it even in there still?
c/p err (was placeholder for something now remove it!)
Intention was good, execution a bit worse ;) @deads2k mind updating in a followup?
Extra empty line detected at body beginning.
Probably want a non zero hex value for tests here.
For future, `corev1` is the prefferred alias for this api.
Looks like these lines have to be removed as well
`forEach` is designed for side effect, a chained stream seems better to me.
Unnecessary empty line added
yeah this is def what we want
Mastodon endpoints only support a JSON output. So wouldn't it be better having just a `jsonExit` function in the `response` class?
maybe add a `ast.exp` to show the bits have been inverted?
What's the side effect of saying that `cak` is `en` - we don't support it on addons-server? There isn't a similar language we can use instead, I guess?
This is the fix. PEDMAS (though I learned BODMAS)
Recommend moving LHS to a local `tagName` var and use a switch statement.
You have to rename this conditional. Because it is not the Main_Tools_Page.
Could be formatted a little bit better?
Wouldn't this make it slower by always loading the attributes?
why need hello here?
I think that you'll need to move this into the declaration pass s.t. object types can reference resource types and resources can reference each other.
This line is not covered.
this should be `blockOnConsent`, the attribute is `data-block-on-consent`
you might want to put a condition for T to be derived from LoadedTypeItem
did you ran into a scenario where the tokenSource was null? I think we don't stop FST which didn't run. Also, wouldn't it make more sense to check for `task`?
The position of `defer` may need to change
Why not calling directly the function here?
This is a really funny definition, because there could be many task agents... Maybe this one should just raise a RuntimeError? If we do that, do unit tests fail? Do we have unit tests covering multitask training? I don't think we do. We need those asap.
For this sort of thing, we usually abstract out the relevant features of something like `libkb.Env` into an interface. Does that make sense here?
Seems to be unused right ?
we don't need to validate against >= 1.7.0 anymore
Can't compare `None` to `str` in python3
Is this a configuration key? Users are never expected to set this by hand.
I think this is not a right place for this check. It should be rather processed before (or in) ``clean_up_bases_and_infer_type_variables``, this is why you see problems with ``Generic`` in #3366.
Closing the table is inside a if but opening table has been moved outside. This is surely a bug.
If `TypedParameter` no longer requires `pathManager` (see below), then do we need this in `FunctionDescriptor` class? I know we have a public property `FunctionDescriptor.PathManager`, not sure if that's used anywhere. But please have a look, thanks! :)
This is defaultable when we only have one container. I don't see that happening and it should be mentioned in the godoc.
Standards: Please add a space before braces.
Should we also test if something like `123456.12` as `DECIMAL(10, 4)` gets coerced to `123456.1200` when converted to string? Or is `123456.12` fine? FWIW Hive 3.1 coerces it to `123456.12`.
Can't this be avoided by setting `pointer-events` to `none` ?
Can you add docs for this new parameter?
If I am reading the other changes right, Close() will always be called after the last Write(). This (i.e. `t.waitGroup`) may still be a good idea, but not sure if this contributes to the actual fix. It also appears some Write() calls will still be cut off by Close(), outside of the usage here.
Do you know what the equivalent class is in Java?
Unused block argument - user. You can omit the argument if you don't care about it.
Question: why would we need to define `_` as a function in `__builtins__`? There's no such function as far as I remember. The original issue was about a custom module, not `__builtins__`.
Was this a bug?
why a `new FstObjectInput()` is necessary in tearDown method?
Should this be an optional field (pointer, `omitempty`), that is properly defaulted like in the gardenlet config API?
Couple of questions - 1) Is it safe to assume the project account id will map to the user who created the project? Looks like it is set up from the passed parameter to Create Project Command. 2) What happens to the projects created directly via command line. Do they work as expected? (Asking this as it is missing in the tests conducted in the PR Description.) Also, the bug of users not being able to tag their resources extends to some other types of resources (as far as I recall in the mailing lists) but I guess we should file an open issue for others as it would be outside the scope of the current issue.
This is the main change. We are validating that the project can be deleted.
[nit] Could be `func (*State) EnsureNoProjectsMissing(context.Context, []string) error {` but doesn't matter
Please use `Assert.assertArrayEquals()`. Also the expected result should be the first argument.
missing Upgrade451to460 class, I'll add that.
This change causes DigitalLibrary to require a higher API version number, meaning it's no longer backwards compatible with Cura 4.9.
To make sure I understand, this was already done later as part of ReadNextREsponseHeaderLineAsync, but we're preemptively doing it here so that we can definitively say after this that data was received?
maybe function should be called `setAsLocalDate` or `setLocalDate` to match the parameter type?
Final newline missing.
The driver was previously registered in `fetcher.go` file, which is now removed.
Line is too long. [87/80]
This doesn't appear to be used anywhere.
This piece of code was taken from the other PR and is fine.
Moving it to Cython means exposing most C structures to Cython and staring at tons of generated C code to see that it actually does the right thing (like in #891). I wouldn't do it bundled together with a functional change.
I moved the $options decoration out to a helper method. All tests still pass.
I thought about adding it to details and making this its own `Check` but it didn't fit the pattern
We should probably not call this twice. It's called anyway in the "init" fn.
I think it's not recommended to directly invoke `createElement` function.
I think the formula is correct. We take the mean for the 0th row in the first case and the 1st row in the second case.
I think moving `removeOutOfScope` to `NetworkTopologyImpl` and making it non-static would be more future-proof. Syncing on a static object seems risky.
would it be possible to do this fewer than 100 times and still have an effective test? I imagine 100x is kinda slow but maybe I am wrong
Can you use auto-generated `hashCode` using IDE instead ?
This is good, but `cchName` below is also wrong. `size_t` should be `UIntPtr`. It is `uint` on x32 and `ulong` on x64.
Throughout `stats.php`, we're assuming the output of will be an array of `stats_get_options` options. If someone installed Jetpack via CLI, I don't think this would ever fire to get the default options, so most of the code would at least throw notices about the undefined indexes until a cron run or someone visited wp-admin. Could spin out a "stats_default_options" that returns the default array, `if ( false === $options ) { return stats_default_options()}` and use that same function in `stats_upgrade_options` to keep things DRY. Thoughts?
would you like to make it `self.etag = response.get('etag')`, I feel it's a 'typo' in the existing code
Is this change necessary?
_collect calls clean_ret in the failure case, so I think we can't do the free here. Could either add a free_ret wrapper that calls clean_ret and then does the free, or do a cleanup function in the Go code that adds the free.
didnt you want to publish this as a separate commit ?
Did you delete this file too?
i removed colorFlag because it just didn't seem to be serving any real purpose. It was an intermediary indirection that we then needed to translate again into the 'Colorization' type.
Why is this being changed?
What's the point, `scroller` is always null no?
cc @patrickxb for this `msgchecker.PaymentTextMaxLength=240`
Note that all the operators are assuming `number`/`number` comparisons. - We need to do type checking to make sure, for example, that `4 > 'cat'` is a syntax error. Please carefully think about our type system and make it reasonably strict, e.g., no unexpected implicit conversions like `true > color('red')` - We also need to implement operators for `Color` types, e.g., component-wise operators. If we don't want to do those functions to `Color` (totally cool with me to keep Cesium's API surface area small) then we can just add them a local functions in this file.
Since zero is the default value for the long, would it make sense to enforce time; that is for each set command we need an explicit time. In that case, we can define a constant called INFINITY and set it to something like -1; but in the source, it will be very explicit when someone reads code, and in the command handler we can enforce the requirement (or perhaps better on the SCM side). So commands like decommission will have an infinite value explicitly set by SCM and it would be more obvious and explicit.
Is it necessary to change all these copyrights when the actual content isn't changed in the file?
Huh? Did version go down from 3.0.0 to 2.0.0?
It would be better to stop processing straight away if `shouldDisplayCounts` is false - it means that children also have no counts. Maybe alias the name to `canCalculateCounts` for better semantic meaning here
Missing a few instances of request in this file
Throughout `stats.php`, we're assuming the output of will be an array of `stats_get_options` options. If someone installed Jetpack via CLI, I don't think this would ever fire to get the default options, so most of the code would at least throw notices about the undefined indexes until a cron run or someone visited wp-admin. Could spin out a "stats_default_options" that returns the default array, `if ( false === $options ) { return stats_default_options()}` and use that same function in `stats_upgrade_options` to keep things DRY. Thoughts?
Maybe we should call this `_lonelyCall` instead then? We could also encapsulate the check in some `isLonleyCall` function, IIRC mobile also performs this check.
I think we missed an opportunity here... `client.Pool` should not depend on ring. It only needs a function to get a list of all clients. (New PR)
@liggitt amazingly it is possible that when doing a specific search for a specific DN in LDAP we can get nothing back and _not_ `NoSuchObject`
Nit: This method can be static.
why DNSZone is configured in this PR?
As above, how come `update_symlinks` belongs in the constructor? Is there something particular about instantiating `RenewableCert` that should make this action sometimes get invoked here as opposed to be (perhaps immediately) calling a method on the resulting instantiated object? (I'm just wary of complicating the API.)
The WelcomePage was rewritten in React i.e. it was moved to the folder react/features so it looks to me like the source code bellow needs to be rewritten to take into account that now the React App is abstracting the relation between window.location and the React Component rendered at that window.location using Route (an abstraction similar to react-router's).
Gotta remove MeetingList.web.js.
Why have these types been changed?
I'm afraid it is inappropriate to add `symbol` to `warningEntry`. All fields are about when/where/what. They should be common and meaningful for every `WarningEntry`. So IMHO, firstly, it is hard to figure out the meaning of this field based on name `symbol` -- updated symbols or symbols referenced in this warning (it raise the other questions -- why not a list of symbols?). Secondly, most warning entries don't have this field, we can see in the following code, we need to check if `symbol != null`. So my idea is, if we really need this symbol filed, why not inherit from `WarningEntry`, for example, `SymbolResolutionWarning` so that it is category for warnings like symbol redefined, symbol not found and so on.
nit: do you think it is worth having the code analysis run on tests? Could condition it with `Condition="'$(IsTestProject)' != 'true'"` or something
`:` -> `,`, right?
I think this was due to @cjb's lack of a git commit hook.
Nit: we already pass in a bool right?
How are sure we dont leak here if sessions are closed
Do we want to have a default in case this isn't set? Ah looks like nil is fine. Disregard.
This is ok, though also rare to validate parameters for a private method.
`# #` -> `#`, and add a empty line above. This can be fixed in the NMT pr.
`math.Max` in standard lib
Why not just make this function void?
Please also update the doc
I expected to see a test for the new timestamp stats here. Is that possible?
I think it would be better to change `findProviders0` to not return null. As this error could crop up again when someone calls that method.
missing Upgrade451to460 class, I'll add that.
unrelated, but I think this is a copy-paste error and `1.7` should be `1.8` here?
No intention to convert this to `dba:select` while you're at it?
We're not linking to `FrameState` because it's private now. @pjcozzi does that mean we should change these callbacks to not take a `FrameState` anymore? The intention was to allow the alpha, etc. to vary with time, camera location, etc. but I'm not aware of anyone using the feature.
There is a TODO below this line you need to address
If these are only for the CLI, then they should remain in top.go.
Lets not add purpose here, but rather pass in `prometheus.DefaultRegisterer(prometheus.Labels{"schema_start": ...})` to `NewStorageClient`
Please add a note explaining the consequences this will have to longer URLs (e.g. will they break? will they lack information? will the stack traces be truncated?)
When does `nil` need to be passed in here? In addition, `0` can also mean that store does not exist.
Did you get rid of this line when you tried nesting all `pacpy` imports?
line: 177 `public Cookie cookie()` can also be package private right?
This function seems to be unnecessary.
Really not a fan of unqualified class/interface names like this. `Version` is not descriptive at all. (Version of what?)
@mercyblitz should you import the codestyle/dubbo_codestyle_for_idea.xml into idea codestyle. The order of org.apache.dubbo is firstly.
Just wondering whether Column.matches(..) method is required at all now, are there still use cases where we want to do fuzzy matches elsewhere in the code? I notice that JoinNode.Joiner.buildTable still uses it. Is that desired? If we don't want to do any fuzzy matches perhaps we should remove it?
Please remove this line
Is this okay? I'm not sure if we treat `6.0` differently from `6`
This should work like `Minion` in upstream and not take a `namespace` here. We will list projects by membership, and not by `namespace`.
What is left to do ? :angel: (should be written here, or the `TODO` should go away :stuck_out_tongue_closed_eyes: )
I don't think we should remove this line
Why is this change necessary? I am not seeing it ever being set to a nullable string.
maybe we want to name this field `stream`?
nit: should be `&&` rather than `&`?
You should fix your editor settings regarding auto-formatting, `make fmt/verify` shows formatting changes.
Did you get rid of this line when you tried nesting all `pacpy` imports?
The logger is no longer used in this class.
Make sure to change componentWillReceiveProps in this file as well.
Please add @Nullable in the parameter of setSrcHash()
Why are we calling BreakSolutionStepsLoop here?
Wait, you changed it from static to this, you just have to revert your own changes!
Could this cause any exception; maybe return empty array instead or null?
It seems reasonable to expose these top-level here as `from prefect.backend import set_key_value` but I'm not sure if I feel strongly
Is there a reason this is public?
Is this intended `@Nullable` on the input argument? There are checks for things that call this for `nullToEmpty`, which are probably not needed.
This should support binary files too (e.g. images, zips).
This one is never evaluated, but it seems correct to change it to `true`.
i would maintain the export until the next major
Did you get rid of this line when you tried nesting all `pacpy` imports?
As this is a builder, we should just make a deep-copy (not use `Collections.unmodifiableList()`)
all match returns true if the stream is empty so no need for the previous if.
Is the `['type' => 'media']` part really necessary? I don't think so...
Good catch... but unrelated to this PR, is that correct...?
Could you revert these line changes? This is a complex PR that we'll likely need to look at in detail, and it's best to avoid line noise to focus on what matters.
It's very weird to be calling this attribute as `.year.year` in all the code. A year is a year, and a date, is a date. If you just want to store the year, I don't think `date` is the proper type here. I'd make it to be a integer.
Fix this in library-go
Are you sure that this is right? I mean, if they expect the amount to be the full cost of the order (amount * price), then from there it follows, that the value is in quote currency, therefore the price precision should be applied, not the amount precision... Which particular market are you having trouble with? Can you plz post some code to reproduce it or your verbose output for the error?
Instead of the null check, can we add an `assertNotNull` in `validateFileContents`?
Generally, explicit imports are preferred over *
With `WP_CLI::add_command( 'cli alias', 'Alias_Command' );` this should enable usage as `wp cli alias <get|list|add|..>`
I think load from etcd is not necessary here.
Line is too long. [81/80]
>// this sort of addressing mode magic only applies to x86 platforms [](start = 8, length = 67) ARM has some similar instruction form as `ADD r4, r4, r4, LSL #4`, could we also peep that? #WontFix
What are the constraints on how `chunks`, `keys`, and `data` relate to each other? Can we pick better types (e.g. `map[string]Chunk`) to make this less easy to mess up?
Are internal functions with _ex_ twice in the names helpful? I'm dubious about functions where the _ex_ is in the middle of the name. They don't seem to add anything and make reading the name more difficult.
I think the typing for the `@bound_function("array.astype")` should raise a `numba.core.errors.RequireLiteralValue` exception if a `unicode_type` appears, this would be consistent with how e.g. `@overload` would handle this situation and doesn't require another code path here.
sorry but SAO has nothing to do with Player list. it's not responsibility of an AO property to update player list
this should be `blockOnConsent`, the attribute is `data-block-on-consent`
should this save $scope.userHasWritePermission() and not called it multiple times? what if the return from `$scope.userHasWritePermission()` changes?
I don't see this actually used outside of `beforeEach`, maybe inline as `installViewerServiceForDoc(ampdocService.getAmpDoc());`
why are u using a larger tolerance here than in the other examples?
Nice! (assuming these got fixed upstream, for my own understanding?)
I think this will break some Dataflow users who expect to be able to update their pipelines, and can't if these coders change. @chamikaramj what do you think here?
Fix this in library-go
too long commit message summary
Need to use %s as that is all it supports
I considered removing this check. It seems to have been added to hide the constant `$1$MH$` prefix of all hashed MAC addresses from the mods. I'm not sure if that's still necessary given how prevalent that prefix is throughout the rest of the UI (e.g. in an offline ban by MAC), as well as the DB that (at least some) mods presumably will view. Leaving it in for now, but if there is agreement in displaying the complete hashed MAC address to the mods, I can remove it in a follow-up PR.
Empty return If return has a message, it will fail the Travis build. It's probably not an error to not release a package on purpose
we probably should use `eslint-config-uber-universal-stage-3` instead
_then_ --> _than_
Remove the copyright update - it's not being updated otherwise.
Actually displaying the output of "help print_pl" here seems better, what do you think? Or at least point to "help print_pl".
Instead of passing in null here, probably clearer to pass in DEFAULT_SHARD_TEMPLATE. Leave the null-handling in the constructor below of course.
this file could stay unmodified
A log here would help.
`std::string` has a default constructor, so `boost::value_initialized` was never necessary :/. But the change is nice anyway, I typically construct blank `std::string`s this way.
Would be better to qualify it as PurgerCycleCompleted, to identify which cycle the event is referring to.
Why not `TokensFilePath`? We always create only 1 file (called `tokens`) inside the dir, which looks more natural to allow to configure the full filepath. BTW, I would call it `TokensFile...` instead of `TokenFile...` since it contains all tokens.
For consistency, this should also be lastModified, right?
If the recording feature includes the transcription toggle, should transcription components be included in recording?
Same suggestion from above about `--no-url`
`canonicalize_path` comes from `spack.util.path`, not `llnl.util.filesystem` doesn't it? There are more of this reference below.
Is this related to this PR, it seems to be for some other PR?
if I right understand, try-except here need for compatibility with python 2.7, but our target is python3.5 and higher, probably we can use only first statement.
c/p err (was placeholder for something now remove it!)
I understand the change to `zfs_recover` but not to `aok`. Can you explain how this works? Alternatively, could we choose to make `verbose` not bump `dump_opt['A']`? (Similar to how `dump_all` doesn't set `dump_opt['A']`)
nit: some empty spaces here and below
This might be part of the size difference. In many places we are now passing empty string we used to let undefined go through, which is actually fine from the DOM point of view right?
It would be better to stop processing straight away if `shouldDisplayCounts` is false - it means that children also have no counts. Maybe alias the name to `canCalculateCounts` for better semantic meaning here
Are we going to use it? If yes, what's the use case? If not, I would remove it (let's not build logic we don't need - we can do it anytime in the future).
Invert description and type. Type must follow description.
Forget this. for debugging purpose.
Right now, all methods on this type accessed from elsewhere are public. Is there a value in making a few of them internal? It seems less consistent.
Out of curiosity, why do we need to remove this?
name and mac are removed from this message, it's not yet used and not part of trying to connect to a remote host. Instead of updating the 'mac' name here, it's just removed.
offset should really be unsigned. Can't we just fix the call to SGN?
Unfortunately this looks like a breaking change. In the C# SDK, we're customizing the generated code to avoid a breaking change here, is that possible with the python SDK? If not let's make sure this is released as a new major version.
Why does `$config_spec['path']` become an array? It's supposed to be a string.
Does this need a return now? Otherwise it will fall through to the next and may write again.
Please send this line top on the Gogs
Personal suggestion: npm_resolver.py should be renamed to dep_resolver.py or something more generic.
The text of the error must be updated as well.
are we duplicating this value in order to do tests pass?
it helps if the test class is `public`
Whats the source for this field? Is it CLI? Should this use `std::isspace` so that its locale aware? The locale instance can be cached to speed up processing a bit.
This smells like an incompatible change.
I know there's more work to do to propagate changes to the ConfigMap to the controller Pod, but at this point should this endpoint always match `kubectl get` (after a polling cycle at least)? I'm not seeing the endpoint return the same config as `kubectl get`.
Generally, explicit imports are preferred over *
Could be formatted a little bit better?
We probably no longer need to futurize generated code (see line 339). Assuming new version of proto generator produces a py3-compatible code. We could check the diff. This can be another change.
Assign directly to `o.KubeClient`.
While you're here, change the cast to be (size_t).
Could we delete this file instead?
Do we use or discuss prefetch in the README anywhere that we'd want to nix?
I would avoid environment dependent code in unit tests, it can interfere with another process or test. It's better to mock `canBind`, ie if you want to check the class doesn't provide occupied *1024* port, make the method stub of `canBind(1024)` return `false`.
if feels like an output can decide if it needs to be cached or not
Don't do this import, it will force a hard `h5py` dependency. Instead later you should be able to do `from ..externals.pymatreader import read_mat` and it should still work
needs to be a different attribute
why not just a MiddlewareRef ?
if there are other forbidden keywords we could validate the cliName when "What is the unique name for your API client ?" is prompted to the user. WDYT?
Actually, given the escaping of the single backslash, do we still need to escape the case when a backslash is followed by quote ?
should this be a `?number` type?
how to clear all labels?
This is assuming the target type has defined an `alias` classmethod, which many do, but not all. Could we add a check with `hasattr` here?
Can we name this `__dynamonodename__` instead? That way it is consistent with the other variables we are adding.
this reversed reads a lot better imho `if guid is not None and not addon and not package_guid` - don't ask me but I feel like it's making the intend of this if-statement easier to grasp.
Is the `['type' => 'media']` part really necessary? I don't think so...
Nit: I know we don't have strong conventions here, but: consider exporting the `symbol_mapper` rules via the `dep_inf_rules`, unless they are actually optional.
As far as I know behaviour is the British way to write it.
What's this random passphrase stuff in signup?
This check looks fine here but, are you sure nobody will attempt to call `t.removeRepository(sess,...)` at some point? I think this check should be there rather than here (or here too if you want to shortcut by optimization).
Is this a bugfix?
Did you forget to remove the fileContext member variable from this class?
annotate the interface with Nullable.
Do we really want to make all maps support reusing instances?
Can you explain how we decided to set this to 20 minutes instead of 10?
These are in the wrong location We like thr golang default imports to be at top of import and github imports at bottom with a blank line separating them.
`real_s3` is not used anywhere, and `s3` uses docker thes days, so this corresponds to the approach with other clouds.
I would not do this. It can be a significant API change. Don't you think it leads to less changes if you keep it False and just change it in Epochs + Evoked? cc @Eric89GXL @dengemann
nit: I think it may be easier to read to use `in.skipBytes(payloadLength);`
is this needed ?
not a typo
Does this change only affect stats parent hashtrees or is it both? Either way seems like a good change to me.
are we duplicating this value in order to do tests pass?
Please do reformattings in separate commits in the future. Having formatting mixed with actual code changes makes it harder to review pull requests.
Just an interesting observation but we were calling `cannotSee[username]` in line 55 when `cannotSee` is an Array. I think we fixed that line now that this is an object now.
typo `compatiblity` - which I think doesn't cause issues cause you seem to have made it everywhere you use that argument, but would be good to fix.
Is 0 a valid containerID ?
We should not make any rounding here. But here there is no reason to make rounding, rounding must be done before inserting data into table (rounding must be 'MT' if a unit price, it must be 'MU' before providing data to table).
revert this pls
Could you explain what's going on here? Naively I'd expect a change on L1844 (since it would mirror the change in `parse_file`)
`import *` should always be used together with `__all__`.
Is this really needed? I something is deleted, he will see it upon refresh, and this won't help. Except, if there is another reason for this change...
This isn't good!
Not sure if this make sense but is Expunged not !Present as well?
Is this file here to make editable installs work (for python 2)? It is not included in the actual package (wheel/sdist), correct?
Converted from deleted *.rec test.
maybe we could set this to be a minSize setting rather than size (so it can be stretched bigger with the dialog but can't go smaller?)
Can we use the `is accessible` functionality from the storage class here?
Hmm, it just occurred to me that we need to make sure this function is thread safe. Initializing the shared client here isn't, and I need to sweep getTags/importTags and the client functions to see if it is building connection caches in a thread safe way.
nitpicking: I think the phrases should be english phrases, like "DeleteWebhook deletes a web hook" (note the ending `s` for third person subject being the function)
Should we update vendor for this repo?
No need for the trailing comma.
typo: wil -> will ?
Okay, but when `self._vault_id is None`, the `name` and `vault_url` properties will raise. Should a user ever construct this class?
Coding style improvement (well, already on existing code): Either leave out `&& ret->value.parameters` or use `&& ret->value.parameters != NULL`
It will be more clean: if (rc > 0 || rc == -DER_SHUTDOWN) break; if (rc < 0) D_ERROR(...);
nit: `ADS Service` -> `OSM Controller Service`
What does ErrNotAContainer mean? Is the ID present in c/storage, but not as a container? That points to a potential bug to me - why is that exact 256-bit random ID still in use?
why did you move this here and not keep all "self patching" in one place (see 1182)?
I guess this is really the `_numActiveVertexBufferSlots`?
is it guaranteed the root device will always be `/dev/xvda` ? since the root device for `hvm` virtualization types can be one or the other (sda1 or xvda) depending on the AMI, should we account for both? or the `testAccLatestAmazonLinuxHvmEbsAmiConfig` data-source generated always guarantees the block device?
Moving it to Cython means exposing most C structures to Cython and staring at tons of generated C code to see that it actually does the right thing (like in #891). I wouldn't do it bundled together with a functional change.
Just curious: Why is it useful to inject a layer of deferred execution here?
Maybe this is better off at `SetEngine()`?
What is left to do ? :angel: (should be written here, or the `TODO` should go away :stuck_out_tongue_closed_eyes: )
This was not being used anymore
Note that all the operators are assuming `number`/`number` comparisons. - We need to do type checking to make sure, for example, that `4 > 'cat'` is a syntax error. Please carefully think about our type system and make it reasonably strict, e.g., no unexpected implicit conversions like `true > color('red')` - We also need to implement operators for `Color` types, e.g., component-wise operators. If we don't want to do those functions to `Color` (totally cool with me to keep Cesium's API surface area small) then we can just add them a local functions in this file.
TODO: This test should be moved to `esclientleg`.
I think this no longer needs `sequence.h`
Can you add a custom placeholder so that it can be included in the VRT?
This file should be CI-agnostic too, right?
Is the `ModelContact` used anywhere else? If yes, can you please replace it with `Model\Contact` and remove the alias declaration?
Was RPATH not sufficient in some case for you when a Spack-built package depends on this?
Although this is correct, please write `use Friendica\Module;` and later `Module\Contact::getContactTemplateVars` to prevent any immediate confusion.
This is the fix
Why was this removed?
nit: you can merge both lines above as `checkNotNull` will return the given argument
Do we want to have a default in case this isn't set? Ah looks like nil is fine. Disregard.
We have inconsistent placement of `@Nullable` - sometimes before the access modifier, sometimes after. Is it an issue?
msg: 'Failed to normalize glob patterns: ' ?
Just an interesting observation but we were calling `cannotSee[username]` in line 55 when `cannotSee` is an Array. I think we fixed that line now that this is an object now.
Why is this change necessary? I am not seeing it ever being set to a nullable string.
This is to protect from broken .equals() implementations which don't check for a null param ?
I assume that logic elsewhere is handling the case that this was originally meant to solve, resetting the value if max or min is exceeded. Is that correct?
It doesn't look like any of the callers use this `extra_work` argument. Is this left over from some experiment?
Please rearrange along with other similar methods
I hope it's okay I changed this a bit to match the implementation because the guard is `(a < b)` not `(a !== b)`
This doesn't protect privacy though. Why the explicit change?
Please remove this line
is this constructor needed ? As it created a bug in our Sonar Analyze so we are now BAA. I see it after your tweet @jdubois sorry :-(
You don't need to include the parse methods in the has array, the parse methods are just helper methods, and they're nothing the user should care about
The limiter is fine, but this needs to be much more discriminating. Blob HEAD and GET shouldn't be under the same rate limit. This is too broad to solve the existing problem without adding a new one. This needs to only apply to blob upload.
rubocop got mad at this lack of newline
you have access to the root ctx from here (this.root) to avoid this second recursion
Could use `self.func_map.get(target, target)` here for a minor simplification.
It took me a while to get the `tar.gz` vs `tgz` difference. If they continue like this in future releases, we might think of an `url_for_version` method.
Is this file here to make editable installs work (for python 2)? It is not included in the actual package (wheel/sdist), correct?
Very minor - but we've generally maintained three blocks of imports (1) builtins (2) external dependencies (3) internal dependencies.
We should probably not call this twice. It's called anyway in the "init" fn.
Why is this necessary?
I am quite convinced that there is a more "C++" way of doing this with `std::chrono` (haven't checked though :) )
is there a more specific rx exception type to catch here?
struct field ApiKey should be APIKey
Moving it to Cython means exposing most C structures to Cython and staring at tons of generated C code to see that it actually does the right thing (like in #891). I wouldn't do it bundled together with a functional change.
currently at least, this method isn't needed (the only callers use the `public` overrides directly)
I may be deficient in my understanding of switch/case here, but does this mean that ONMOUSEUP will fall through to ONLOSECAPTURE whenever it's not BUTTON_MIDDLE ? Is that okay?
Generally I'm wrapping this directly into println
You should do `if user_data is not None` since that's when the environment variable has been set (even though the feature won't be that much useful in this case).
This string.Replace this is replacing is vectorized; this is not. Might that matter?
@devigned I can't seem to DefaultApplicationInsightsKey from the api pkg here. Is there something i need to do to refresh to version of the package that is getting imported?
Oh, great to see that this is already supported by torchscript :-)
Style nit: you can use a set comprehension here.
OPENSSL_CPUID_OBJ seems to come from configdata.pm (for libcrypto and provider.fips). Does that mean it is always set?
you can drop the method, it is deprecated since 3.0
This change makes M42 command compatible with the FAN_PIN (otherwise any value set just gets reset by the planner)
Get rid of space before `</br>`.
We should probably actually fix this - either make `get_root_resource` return a `Stack` type, or have this code do an `isinstance` and fail if it's not a stack? Also - is the pylint error about `Stack`? If so - we should just make it `'Stack'`.
I've just found that removing these methods is actually SPI-breaking :-/ It was a bad SPI arguably, but still. Something to bear in mind for the future. (And, well, I'll dig out the `name` out of the `image` :-) )
nit: there should be no newline here.
Keyboard name should be lowercase ;)
Do we really need a new attribute for that? Can't we use an attribute?
Do we really, really want to go that high? This significantly extends our extended tests. Isn't something around 30s sufficient?
Please remove the extra lines
Does this skip the normal AR callbacks? if so do we need to include `updated_at` ?
I think removing this check might cause JBoss Marshalling to throw bogus exceptions if the node really is shutting down and the writers map has been cleared. It would have been better to replace the interruption check with `if (!started)`.
Shouldn't constraints be limited to binaries? It's only binaries that you generally want to pin with a lock file. Fo example, if we allow a library to pick constraints, what do we do with the dist it exports if it does export a dist?
There are two other occurrences in the file, can you fix those as well?
what if `e == nil` but `alreadyUsed=1` (or `e < alreadyUsed`)? Suspect this can't happen, but I would consider being conservative here and either panic or at least return an empty string when this happens .
why use monkey patch?
I think this should be done after `m.Accessor.Remove(id)` as we use negative caching. The cache should first be emptied for this entry, otherwise it could happen that a `nil` value is read from cache (no error) although no entry is there.
This is a bit complicated. @marpaia, maybe we should move the life of the Config to the life of the process. Then we can reduce this to a runnable future and a mutex lock. We'd also enable `Dispatcher::addService` for things like stateful config update monitors (via TCP/socket/etc). Of course that more-complicated config watching would be in plugins. For the filesystem config we'd lose the ability to "refresh" read the config, but it could support a os-specific file watcher to read in updates and apply them with a SIGHUP.
check startsWith "http://" or startsWith "https://" to avoid edge case
The meaning of `DEFAULT_CONFIG` seems to be "if a parameter isn't overriden in `config`, use the value specified in `DEFAULT_CONFIG` instead" Where `DEFAULT_CONFIG` isn't just what we specified as a class attribute, because it's been updated in `SetUpClass()`. So semantically, `DEFAULT_CONFIG` is very different from the entries in the `CONFIGS` list. It might be worth renaming `DEFAULT_CONFIG` to something more accurate?
loosely related but we have a typo in this file later on, in line 994, Failuer is written in the method name instead of Failure, should we fix it here?
should the version match beam version? We do not have other sub-components with their own versions.
Just remember that Go spec prefer the error strings starting with lower-case   (and above) LGTM.
Not sure about this. If In cluster, but the user provided a kubeconfig, which would be very unexpected, imho we should obey what the user dictates.
For an addon review, we always review all the files.
I think there is one other place we use the descriptor (for the return value in locals). Should that also be getInternalName() and/or use describeType?
Without removing this the `tunnel` linting will fail.
Maybe it's just me, but I don't find the name of this method very intent-revealing.
IMO you could re-throw the existing exception or add it as a nested one. E.g. <code>throw new IOException("could not load " + d, e)</code>
Adding space here generate travis code style errors
Isn't this required for the Authenticator class in line 101? I don't think this file needs to be changed since it is autogenerated by the maven wrapper plugin
space after Throwable
How about putting this before the `new Date` and doing `map.yyyy += 1900`? Then the `return new Date(...)` can be left as-is and maybe the `date` => `previousDate` change isn't needed?
Adding the inner + makes the regexp clearer IMO, and translates directly to the (greedy) grammar syntax
The preferred style is `from typing import X`. Think Typeshed (official type hints repo) established this in their style guide.
We tend to split imports into 3 sections: stdlib, non-cortex, and cortex. Could you put these two imports in the right place please?
do you happen to know if this method respects the `KUBECONFIG` environment variable? In other words, if I have a kubectl config at `$HOME/.kube/config` but also have the env var `KUBECONFIG=project/kubeconfig` will it take context and such from the latter config?
Reordering product images seems independent from variants, why do we disallow it here?
Should we ignore this or as we don't know how to properly write the fail it is ok to fail?
how is this used in the API? I could imagine a name like srcStore or srcImage would be more appropriate.
Undo changes in this file?
I think load from etcd is not necessary here.
Why Mutable? We're just reading it here, and "MutableMapping" is a subtype of "Mapping", so Mapping should not matter
Currently there is a machine shortname conflict here. "gigatron" cannot be both the actual machine name and a device name as devices are handled as machines internally and in XML output. Please rename it to something like "gigatron_cpu" so the duplication can be fixed.
Let's add it to `dvc/env.py`. Just to keep track of such things.
we may this already? you'd know better probably
This looks pretty odd to me, I think I'm missing something in the design. Why do we have the implementation of the type parameter on a generic interface, and have the sliders extend their data type (IntegerSlider : DSCoreNodesUI.Integer) rather than have the sliders extent a 'slider class' and parameterise the result?
I rejiggered the way type dispatch was done in this file in my `DeleteAll` pr. Could you make this function match the others?
So why does this property still exist? I don't think we're setting it correctly anymore right? here's 2 options: 1. obsolete it and have it return true if State == state.Loaded 2. remove it and cherry pick the removal to 2.3 before we release it.
this we're calling two methods, we should probably use parenthesis at least in the inner one: `title sanitize(@organization.name)` it's easier to read IMO
I feel like this function could be structured better. Also, this deserves a unit test.
the trouble with this is that we're making an assumption that `eval` is disabled --- which it isn't necessarily (`unsafe-eval`). I expect this will be fine for most users, but it's not entirely accurate. I guess we need to wait until there is a better way to get this information (before changing that)
1. Open an existing post. 2. Make sure you don't get a `jquery.trim is deprecated use String.prototype.trim instead` deprecation message.
struct field ApiKey should be APIKey
Please use `strategy_safe_wrapper()` for this - i assume it'll be user provided code - so should assume that it can cause errors.
It's most likely best if we keep supporting both formats, so Carousel works regardless of the version of WordPress / Gutenberg you used to create your gallery.
Idea. Can't we extract a common statuses from `EventDeliveryStatus` and `JobStatus` as some of them are defined in both clases?
Should we only do that if the (nginx) ingress spec in the seed has changed?
Judge the situation where `len` is all 0, then we can still use `reflect.DeepEqual` directly?
is configFile still being used? Ideally should be removed.
Sigh, this looks a bit too familiar. There is some massive copy paste when it comes to some of the higher layers of code. Regardless, it looks like a util function somewhere to get a GMT date string would be useful, since it is used in multiple places.
Wouldn't `static const char f[] = "0123456789ABCDEF";` be better? It avoids a pointer.
Should this update client span in context as well?
can you nuke this?
I wish this wasn't necessary or at least the type system helped enforce this by returning something like a `shared_ptr`.
And this should probably be =None
I realize namespaces may be long-winded to you. But they're in this library for a reason, it's REALLY easy to have Revit types unexpectedly leak out. Using the fully qualified namespace prevents that.
We will probably want to move this to KubeController, as `xds_certificate.go` (see `listServicesForPod` et al) needs to do the exact same when looking up a pod/service relation based on cert. Currently they go through API calls. Not blocking this though, this is a good change.
`ConfigureSendInfrastructure` later in this class makes this call again. Should it be updated to retrieve the one from the settings collection?
How about adding {} to else according to "{} in both or neither". While you're at it...
I think you also need to do the same changes in `Ref` project
Hash code is not safe unique. Should use equals against actual object doing comparison.
can you add these methods to the help text
what is this other string used for? anything?
just nothing to be tested?
Why is this needed on `invokeOptions`?
this should be `blockOnConsent`, the attribute is `data-block-on-consent`
Not sure why it was removed, seems it can be null
Glad to see this one removed ;-)
This change and the similar one on line 97 are causing the test fails. As there's a test that compares the text of the error message in this case - if keeping this error message update you need to update test/es6/proxytest9.baseline
this does make it so that all future authz informers will end up using JSON. just something to think about
Extra empty line detected at body beginning.
Why do we need to check for `defined( 'DOING_CRON' )` ?
How about "may be authenticated". An implementation that ignores credentials that fail to authenticate when other sufficient credentials succeed is plausible?
msg: 'Failed to normalize glob patterns: ' ?
The service type should not be `munin` by the service that is monitored. So if `apache` is monitored with munin, `service.type` should be apache. Because of this we should also have it set by the user. I wonder if we should make it required for the user to have it set or make it optional?
I would love a single space before all those dots get printed
MessageFilter should be renamed to EventFilter
This `replace()` seems brittle and hacky to me, but I'll let others weigh in. The `packaging` project probably shouldn't be including this string to begin with since it's redundant with the exception class being `InvalidRequirement`.
Why is healthz disabled?
This should maybe be kept (at least temporarily) to avoid BC breaks if a plugin rely on the method
This will always evaluate to true for strings on Python 2. Add an `if` as in previous version to avoid an extra operation?
How about using more narrow client? I'm shooting core (without looking at code), which should suffice here.
Prior to your change this segfaulted in 2D right?
Please do not use magic numbers, cast 2605 into a const so we understand what it is
I'm assuming `MpscLinkedQueue7` also works with java 6?
I just realized that those values probably need to be raised to 300 as well.
forgot to remove?
I think you can get the meta extension from the ServicewNow component now
We can tell whether a connection string is for iot_hub or event_hub. No need to ask customers to manually set it. set client._is_iothub =True in function _from_iothub_connection_string will work I think.
you don't need this. You should import Client from mne.externals.FieldTrip
Love the addition of the docstring. Nit: Is it more accurate and concise to say ``Update the provider index with additional virtual specs`` given the inclusion of the `Args` description?
Yay! Maybe in separate PR, but we need to sort the analytics-vendors.amp.html as well. It would also be great to have a test case for this like we have for ads config
We have `**options` in ``AzureMonitorTraceExporter` but `**kwargs` in `BaseExporter`?
Did you get rid of this line when you tried nesting all `pacpy` imports?
This string.Replace this is replacing is vectorized; this is not. Might that matter?
again where is the assumption that --too is specifying a DockerImage reference coming from?
Is 0 a valid containerID ?
This was a missing check, we also attempt to save the task runs if the run has errors, so you need to provide them
`service_projects` becomes `Computed` as these IDs can also be managed by `google_compute_shared_vpc_service_project_association` resources.
What's the reason for this? the only point `_markets` is used is to debug-log the whole markets-dict as list... ? also it's not refreshed, so you wouldn't see new/disabled markets
Could we use an option for `RepoIDs` but not a new function?
When MPI is enabled, should this not be MPI_Abort() instead of std::terminate()?
replace "EagerMode" with "eager" and "GraphMode" and "graph"
What does "loa of the ial" mean here? Why not just "has content set to LOA1"?
Weird we used `set` here when we used `OrderedSet` right above. Looks like a good change.
why not `-1L` ?
please add brackets, also the conditions of these 2 `if` blocks will never be both true (either one of them is true or none), so I'd use `if-else` or `switch` instead of 2 `if`s
You've lost the "replace" error handler here, so this has introduced the possibility of Unicode errors...
please delete the sentence "It is not necessary."
do we use `_spath` anywhere? is it effectively undefined in the `else`? what is the reason to rename it, btw (private to public)?
How about using more narrow client? I'm shooting core (without looking at code), which should suffice here.
should this magic `'9999999-dev'` value be hidden behind a constant? this could also improve semantics/readability
Are plugins expected to pass in the param here? I kind of feel like the interface that we add here should be in `Group.search_groups`.
`path` will be relative from cwd which may not be SCM root (which is already handled properly in the line 113 `relpath` call)
I think we'd prefer to capitalize only the first character for this and PATCH - `Dst` and `Patch`
Put one space between the method name and the first argument.
Align the parameters of a method call if they span more than one line.
please rip out into an entire new class (probably test_message.py)
if `analysis_utils` is only used by model compression, suggest to put this directory under `src/sdk/pynni/nni/compression`
Align the parameters of a method call if they span more than one line.
which helpful errors will we not see anymore due to this?
100% agree this is the way to go passing a type and id rather than an ActiveRecord object!
I think the only change in this file should be adding the logging here on the condition that retErr != nil. I don't think we should proceed if we are failing to renew. The callback should handle retries internally.
This is new. Meant to make it easier to debug. We use `str()` instead of `repr()` almost everywhere, so this shouldn't impact any pre-existing code.
Question: how come PlatformDependent is used below but not here?
How is this related to 0.18?
I would remove the `if (Equals(sv1, sv2))` at the beginning, and replace lines 2616 on with `return x.CompareTo(y);`
this is a bugfix? But it will break scripts, no?
are you sure mkstemp works on windows ?
I imagine this is breaking the build, but otherwise LGTM
don't need `.String()`
Can we drop the last `} else {`?
Small nit: why also check for `present?`? Checking against the literal `'true'` should be enough, otherwise it'll be `nil` and `nil != 'true'`
Not really related to this PR, but when I looked at this file I noticed some missing slashes, so I added them.
I don't think we should put AD specific code into the `LDAPEntry` and `LDAPUser` objects. How about using the `AccountStatus` instead? That makes it independent from AD. We could extract the `AccountStatus` into a separate enum out of the `User` interface to make it a bit more generic. What do you think? I also think we should only have an `accountStatus()` method in `LDAPUser` instead of also putting it into the `LDAPEntry` object. The `LDAPEntry` object is supposed to be generic. We can move the `userAccountControl` parsing into the `createLDAPUser()` method in `UnboundLDAPConnector`.
Actually, I'm not sure about this change now, `cursor` is accessed through a closure so I believe we wanted the original `++cursor;`. Perhaps `return cursor++;` is best.
Won't this still leave it broken? If the context is cancelled, then this will stop extracting.
The `name must match regexp` error messages need updating.
Note for the reviewer: I made the original class abstract and split the actual implementation into 2 concrete classes (above) since struts action using this class resulted in 2 different backend actions (diff or deploy).
Don't change the copyright year ;)
Idea. Can't we extract a common statuses from `EventDeliveryStatus` and `JobStatus` as some of them are defined in both clases?
the ngScenario module does not have access to private functions in angular.js, they're wrapped in a closure so it can't see them.
Please annotate `@Nullable`.
might be simpler to unnest these? `skipOnboardMessaging` and `skipOnboardRewards` maybe?
To prevent the NPE I would propose to change this for: `BooleanUtils.isTrue(forsystemvm)`
Should this really be the empty string, or is this an error condition?
GetString can return null. How do you know it isn't in this case?
Do any of the OID's change here?
does anything use this?
Moving it to Cython means exposing most C structures to Cython and staring at tons of generated C code to see that it actually does the right thing (like in #891). I wouldn't do it bundled together with a functional change.
Is this constant available in the S3 gem? If the threshold in the gem changes, this constant will no longer be accurate.
`canonicalize_path` comes from `spack.util.path`, not `llnl.util.filesystem` doesn't it? There are more of this reference below.
don't use unless with multiple values, use an if statement
really the whole object should be a mock.. but otherwise this chunk can be removed for the moment.
The inverse mapping is done every time `InverseMapper` is called, which happens for every sample event. Please make the mapping static instead.
Why the inconsistent spacing?
does that mean we don't actually throw the error anymore?
Thanks for the PR @wrzucher. We normally get to review PRs faster than this. Now that 6.0 issues are finishing up we're ramping back up with the 7.0 milestone PRs and will make sure to get this in as well. First question here, if you're adding `AddProvider` here why not also on line 28 in the other overload?
In the past it seemed like the smart thing to do - to implement the Stringer interface. But that's a trap - one could expose stuff accidentally in logs. So decided to remove this.
Did you get rid of this line when you tried nesting all `pacpy` imports?
Since this is performing the same `kms.ListResourceTags` call as line 235 above, will remove the extraneous handling above on merge.
why not a plain "else" case? I'm not understanding if you expect the batchContainer to not be able to return the batchTransaction, and you want to fallback to the TM in that case.. looks odd?
We need to enable this in the vlabs API type as well (including conversion to the base api version in both directions)
@iemejia Don't you remember why it was named differently? There is also `getEndpoint()/setEndpoint()` that were `getAwsServiceEndpoint()/setAwsServiceEndpoint()` before?
Unused imports: import java.nio.ByteBuffer; import java.util.Collections; import java.util.HashSet; import static java.nio.ByteBuffer.wrap;
this will avoid constructing empty headers like this x-ms-tags: ''
Should this be null since we won't be packaging Derby?
